ARM GAS  /tmp/ccz9e3Lv.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"vcu.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_i2d
  16              		.global	__aeabi_dmul
  17              		.global	__aeabi_d2uiz
  18              		.section	.text.decodeCAN,"ax",%progbits
  19              		.align	1
  20              		.global	decodeCAN
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu softvfp
  26              	decodeCAN:
  27              	.LFB66:
  28              		.file 1 "Core/Src/vcu.c"
   1:Core/Src/vcu.c **** #include "vcu.h"
   2:Core/Src/vcu.c **** 
   3:Core/Src/vcu.c **** void decodeCAN(CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx)
   4:Core/Src/vcu.c **** {
  29              		.loc 1 4 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
   5:Core/Src/vcu.c **** 
   6:Core/Src/vcu.c ****     switch (rxMsg->StdId)
  39              		.loc 1 6 0
  40 0002 0368     		ldr	r3, [r0]
  41 0004 40F23512 		movw	r2, #309
  42 0008 9342     		cmp	r3, r2
  43 000a 36D0     		beq	.L3
  44 000c B3F59B7F 		cmp	r3, #310
  45 0010 19D3     		bcc	.L19
  46 0012 B3F59C7F 		cmp	r3, #312
  47 0016 00F0A180 		beq	.L8
  48 001a 25D9     		bls	.L20
  49 001c 40F23912 		movw	r2, #313
  50 0020 9342     		cmp	r3, r2
  51 0022 00F0BB80 		beq	.L11
  52 0026 40F28E32 		movw	r2, #910
ARM GAS  /tmp/ccz9e3Lv.s 			page 2


  53 002a 9342     		cmp	r3, r2
  54 002c 24D1     		bne	.L21
   7:Core/Src/vcu.c ****     {
   8:Core/Src/vcu.c ****     case 0x135:
   9:Core/Src/vcu.c ****         if ((((canRx[3] << 8) + canRx[2])) <= 2000)
  10:Core/Src/vcu.c ****         {
  11:Core/Src/vcu.c ****             ldu.amps = (((canRx[3] << 8) + canRx[2]) * 1.83);
  12:Core/Src/vcu.c ****         }
  13:Core/Src/vcu.c ****         else if ((((canRx[3] << 8) + canRx[2])) >= 3000)
  14:Core/Src/vcu.c ****         {
  15:Core/Src/vcu.c ****             ldu.amps = (((((canRx[3] << 8) + canRx[2]) - 65535) * 1.83) * -1);
  16:Core/Src/vcu.c ****         }
  17:Core/Src/vcu.c ****         /**************************************************************************/
  18:Core/Src/vcu.c ****         ldu.rpm = (((canRx[1] << 8) + canRx[0]));
  19:Core/Src/vcu.c ****         /**************************************************************************/
  20:Core/Src/vcu.c ****         if ((canRx[4]) > 0)
  21:Core/Src/vcu.c ****         {
  22:Core/Src/vcu.c ****             ldu.mTemp = (canRx[5]); //motor temp C
  23:Core/Src/vcu.c ****         }
  24:Core/Src/vcu.c ****         /**************************************************************************/
  25:Core/Src/vcu.c ****         if ((canRx[5]) > 0)
  26:Core/Src/vcu.c ****         {
  27:Core/Src/vcu.c ****             ldu.hsTemp = (canRx[4]); //heatsink temp C
  28:Core/Src/vcu.c ****         }
  29:Core/Src/vcu.c ****         /**************************************************************************/
  30:Core/Src/vcu.c ****         if ((((canRx[7] << 8)) + canRx[6]) <= 2000)
  31:Core/Src/vcu.c ****         {
  32:Core/Src/vcu.c ****             ldu.potNom = (((canRx[7] << 8)) + canRx[6]);
  33:Core/Src/vcu.c ****         }
  34:Core/Src/vcu.c ****         else if ((((canRx[7] << 8)) + canRx[6]) >= 2000)
  35:Core/Src/vcu.c ****         {
  36:Core/Src/vcu.c ****             ldu.potNom = ((((canRx[7] << 8)) + canRx[6]) - 65535);
  37:Core/Src/vcu.c ****         }
  38:Core/Src/vcu.c ****         break;
  39:Core/Src/vcu.c **** 
  40:Core/Src/vcu.c ****     case 0x04F:
  41:Core/Src/vcu.c ****         ldu.dir = canRx[0];
  42:Core/Src/vcu.c ****         ldu.brake = canRx[1];
  43:Core/Src/vcu.c ****         break;
  44:Core/Src/vcu.c **** 
  45:Core/Src/vcu.c ****     case 0x136:
  46:Core/Src/vcu.c ****         ldu.mode = (canRx[0]);
  47:Core/Src/vcu.c ****         break;
  48:Core/Src/vcu.c **** 
  49:Core/Src/vcu.c ****     case 0x109:
  50:Core/Src/vcu.c ****         charger.chargerStatus = (canRx[5]);
  51:Core/Src/vcu.c ****         charger.current = (canRx[3] * 100) / 55;
  52:Core/Src/vcu.c ****         break;
  53:Core/Src/vcu.c **** 
  54:Core/Src/vcu.c ****     case 0x113:
  55:Core/Src/vcu.c ****         ldu.pot = ((canRx[1] << 8) + canRx[0]);
  56:Core/Src/vcu.c ****         ldu.pot2 = ((canRx[3] << 8) + canRx[2]);
  57:Core/Src/vcu.c ****         break;
  58:Core/Src/vcu.c **** 
  59:Core/Src/vcu.c ****     case 0x12D:
  60:Core/Src/vcu.c ****         //restart = ((canRx[1] << 8) + canRx[0]);
  61:Core/Src/vcu.c ****         break;
ARM GAS  /tmp/ccz9e3Lv.s 			page 3


  62:Core/Src/vcu.c ****     case 0x38E:
  63:Core/Src/vcu.c ****         iboost.pedal = ((canRx[4] << 8) + (canRx[3])) - 4415; //0-750
  55              		.loc 1 63 0
  56 002e 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
  57 0030 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
  58 0032 03EB0223 		add	r3, r3, r2, lsl #8
  59 0036 9BB2     		uxth	r3, r3
  60 0038 A3F58953 		sub	r3, r3, #4384
  61 003c 1F3B     		subs	r3, r3, #31
  62 003e 9BB2     		uxth	r3, r3
  63 0040 694A     		ldr	r2, .L24+8
  64 0042 1380     		strh	r3, [r2]	@ movhi
  64:Core/Src/vcu.c ****         break;
  65              		.loc 1 64 0
  66 0044 10BD     		pop	{r4, pc}
  67              	.L19:
   6:Core/Src/vcu.c ****     {
  68              		.loc 1 6 0
  69 0046 40F20912 		movw	r2, #265
  70 004a 9342     		cmp	r3, r2
  71 004c 69D0     		beq	.L5
  72 004e 40F21312 		movw	r2, #275
  73 0052 9342     		cmp	r3, r2
  74 0054 74D0     		beq	.L6
  75 0056 4F2B     		cmp	r3, #79
  76 0058 40F0BF80 		bne	.L1
  41:Core/Src/vcu.c ****         ldu.brake = canRx[1];
  77              		.loc 1 41 0
  78 005c 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
  79 005e 634B     		ldr	r3, .L24+12
  80 0060 1A72     		strb	r2, [r3, #8]
  42:Core/Src/vcu.c ****         break;
  81              		.loc 1 42 0
  82 0062 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
  83 0064 1A73     		strb	r2, [r3, #12]
  43:Core/Src/vcu.c **** 
  84              		.loc 1 43 0
  85 0066 10BD     		pop	{r4, pc}
  86              	.L20:
   6:Core/Src/vcu.c ****     {
  87              		.loc 1 6 0
  88 0068 B3F59B7F 		cmp	r3, #310
  89 006c 03D1     		bne	.L22
  46:Core/Src/vcu.c ****         break;
  90              		.loc 1 46 0
  91 006e 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
  92 0070 5E4B     		ldr	r3, .L24+12
  93 0072 5A72     		strb	r2, [r3, #9]
  47:Core/Src/vcu.c **** 
  94              		.loc 1 47 0
  95 0074 10BD     		pop	{r4, pc}
  96              	.L22:
  97 0076 10BD     		pop	{r4, pc}
  98              	.L21:
  99 0078 10BD     		pop	{r4, pc}
 100              	.L3:
 101 007a 0C46     		mov	r4, r1
ARM GAS  /tmp/ccz9e3Lv.s 			page 4


   9:Core/Src/vcu.c ****         {
 102              		.loc 1 9 0
 103 007c CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 104 007e 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 105              	.LVL1:
 106 0080 00EB0320 		add	r0, r0, r3, lsl #8
 107 0084 B0F5FA6F 		cmp	r0, #2000
 108 0088 2EDC     		bgt	.L13
  11:Core/Src/vcu.c ****         }
 109              		.loc 1 11 0
 110 008a FFF7FEFF 		bl	__aeabi_i2d
 111              	.LVL2:
 112 008e 54A3     		adr	r3, .L24
 113 0090 D3E90023 		ldrd	r2, [r3]
 114 0094 FFF7FEFF 		bl	__aeabi_dmul
 115              	.LVL3:
 116 0098 FFF7FEFF 		bl	__aeabi_d2uiz
 117              	.LVL4:
 118 009c 80B2     		uxth	r0, r0
 119 009e 534B     		ldr	r3, .L24+12
 120 00a0 5881     		strh	r0, [r3, #10]	@ movhi
 121              	.L14:
  18:Core/Src/vcu.c ****         /**************************************************************************/
 122              		.loc 1 18 0
 123 00a2 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 124 00a4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 125 00a6 03EB0223 		add	r3, r3, r2, lsl #8
 126 00aa 9BB2     		uxth	r3, r3
 127 00ac 4F4A     		ldr	r2, .L24+12
 128 00ae 1380     		strh	r3, [r2]	@ movhi
  20:Core/Src/vcu.c ****         {
 129              		.loc 1 20 0
 130 00b0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 131 00b2 0BB1     		cbz	r3, .L15
  22:Core/Src/vcu.c ****         }
 132              		.loc 1 22 0
 133 00b4 6179     		ldrb	r1, [r4, #5]	@ zero_extendqisi2
 134 00b6 5180     		strh	r1, [r2, #2]	@ movhi
 135              	.L15:
  25:Core/Src/vcu.c ****         {
 136              		.loc 1 25 0
 137 00b8 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 138 00ba 12B1     		cbz	r2, .L16
  27:Core/Src/vcu.c ****         }
 139              		.loc 1 27 0
 140 00bc 9BB2     		uxth	r3, r3
 141 00be 4B4A     		ldr	r2, .L24+12
 142 00c0 9380     		strh	r3, [r2, #4]	@ movhi
 143              	.L16:
  30:Core/Src/vcu.c ****         {
 144              		.loc 1 30 0
 145 00c2 E279     		ldrb	r2, [r4, #7]	@ zero_extendqisi2
 146 00c4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 147 00c6 03EB0221 		add	r1, r3, r2, lsl #8
 148 00ca B1F5FA6F 		cmp	r1, #2000
 149 00ce 24DD     		ble	.L23
  34:Core/Src/vcu.c ****         {
ARM GAS  /tmp/ccz9e3Lv.s 			page 5


 150              		.loc 1 34 0
 151 00d0 B1F5FA6F 		cmp	r1, #2000
 152 00d4 C0F28180 		blt	.L1
  36:Core/Src/vcu.c ****         }
 153              		.loc 1 36 0
 154 00d8 03EB0223 		add	r3, r3, r2, lsl #8
 155 00dc 9BB2     		uxth	r3, r3
 156 00de 0133     		adds	r3, r3, #1
 157 00e0 9BB2     		uxth	r3, r3
 158 00e2 424A     		ldr	r2, .L24+12
 159 00e4 D380     		strh	r3, [r2, #6]	@ movhi
 160 00e6 10BD     		pop	{r4, pc}
 161              	.LVL5:
 162              	.L13:
  13:Core/Src/vcu.c ****         {
 163              		.loc 1 13 0
 164 00e8 40F6B733 		movw	r3, #2999
 165 00ec 9842     		cmp	r0, r3
 166 00ee D8DD     		ble	.L14
  15:Core/Src/vcu.c ****         }
 167              		.loc 1 15 0
 168 00f0 A0F57F40 		sub	r0, r0, #65280
 169 00f4 FF38     		subs	r0, r0, #255
 170 00f6 FFF7FEFF 		bl	__aeabi_i2d
 171              	.LVL6:
 172 00fa 39A3     		adr	r3, .L24
 173 00fc D3E90023 		ldrd	r2, [r3]
 174 0100 FFF7FEFF 		bl	__aeabi_dmul
 175              	.LVL7:
 176 0104 0246     		mov	r2, r0
 177 0106 0B46     		mov	r3, r1
 178 0108 1046     		mov	r0, r2
 179 010a 03F10041 		add	r1, r3, #-2147483648
 180 010e FFF7FEFF 		bl	__aeabi_d2uiz
 181              	.LVL8:
 182 0112 80B2     		uxth	r0, r0
 183 0114 354B     		ldr	r3, .L24+12
 184 0116 5881     		strh	r0, [r3, #10]	@ movhi
 185 0118 C3E7     		b	.L14
 186              	.L23:
  32:Core/Src/vcu.c ****         }
 187              		.loc 1 32 0
 188 011a 8BB2     		uxth	r3, r1
 189 011c 334A     		ldr	r2, .L24+12
 190 011e D380     		strh	r3, [r2, #6]	@ movhi
 191 0120 10BD     		pop	{r4, pc}
 192              	.LVL9:
 193              	.L5:
  50:Core/Src/vcu.c ****         charger.current = (canRx[3] * 100) / 55;
 194              		.loc 1 50 0
 195 0122 3348     		ldr	r0, .L24+16
 196              	.LVL10:
 197 0124 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 198 0126 4370     		strb	r3, [r0, #1]
  51:Core/Src/vcu.c ****         break;
 199              		.loc 1 51 0
 200 0128 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccz9e3Lv.s 			page 6


 201 012a 6423     		movs	r3, #100
 202 012c 03FB02F3 		mul	r3, r3, r2
 203 0130 304A     		ldr	r2, .L24+20
 204 0132 82FB0312 		smull	r1, r2, r2, r3
 205              	.LVL11:
 206 0136 DB17     		asrs	r3, r3, #31
 207 0138 C3EB6203 		rsb	r3, r3, r2, asr #1
 208 013c 0370     		strb	r3, [r0]
  52:Core/Src/vcu.c **** 
 209              		.loc 1 52 0
 210 013e 10BD     		pop	{r4, pc}
 211              	.LVL12:
 212              	.L6:
  55:Core/Src/vcu.c ****         ldu.pot2 = ((canRx[3] << 8) + canRx[2]);
 213              		.loc 1 55 0
 214 0140 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 215 0142 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 216 0144 03EB0223 		add	r3, r3, r2, lsl #8
 217 0148 9BB2     		uxth	r3, r3
 218 014a 284A     		ldr	r2, .L24+12
 219 014c D381     		strh	r3, [r2, #14]	@ movhi
  56:Core/Src/vcu.c ****         break;
 220              		.loc 1 56 0
 221 014e C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 222              	.LVL13:
 223 0150 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 224 0152 03EB0023 		add	r3, r3, r0, lsl #8
 225 0156 9BB2     		uxth	r3, r3
 226 0158 1382     		strh	r3, [r2, #16]	@ movhi
  57:Core/Src/vcu.c **** 
 227              		.loc 1 57 0
 228 015a 10BD     		pop	{r4, pc}
 229              	.LVL14:
 230              	.L8:
  65:Core/Src/vcu.c **** 
  66:Core/Src/vcu.c ****     case 0x138:
  67:Core/Src/vcu.c ****         BMS[0].chargeRequest = canRx[0];
 231              		.loc 1 67 0
 232 015c 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 233 015e 264A     		ldr	r2, .L24+24
 234 0160 D371     		strb	r3, [r2, #7]
  68:Core/Src/vcu.c ****         BMS[0].volt = ((canRx[2] << 8) + canRx[1]) / 100;
 235              		.loc 1 68 0
 236 0162 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 237              	.LVL15:
 238 0164 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 239 0166 03EB0023 		add	r3, r3, r0, lsl #8
 240 016a 2448     		ldr	r0, .L24+28
 241 016c 80FB0340 		smull	r4, r0, r0, r3
 242 0170 DB17     		asrs	r3, r3, #31
 243 0172 C3EB6013 		rsb	r3, r3, r0, asr #5
 244 0176 1380     		strh	r3, [r2]	@ movhi
  69:Core/Src/vcu.c ****         BMS[0].temp = canRx[3];
 245              		.loc 1 69 0
 246 0178 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 247 017a 9370     		strb	r3, [r2, #2]
  70:Core/Src/vcu.c ****         BMS[0].highCell = (canRx[4]) / 51;
ARM GAS  /tmp/ccz9e3Lv.s 			page 7


 248              		.loc 1 70 0
 249 017c 0879     		ldrb	r0, [r1, #4]	@ zero_extendqisi2
 250 017e 204C     		ldr	r4, .L24+32
 251 0180 A4FB0030 		umull	r3, r0, r4, r0
 252 0184 4009     		lsrs	r0, r0, #5
 253 0186 D070     		strb	r0, [r2, #3]
  71:Core/Src/vcu.c ****         BMS[0].lowCell = (canRx[5]) / 51;
 254              		.loc 1 71 0
 255 0188 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 256 018a A4FB0303 		umull	r0, r3, r4, r3
 257 018e 5B09     		lsrs	r3, r3, #5
 258 0190 1371     		strb	r3, [r2, #4]
  72:Core/Src/vcu.c ****         BMS[0].chargeState = canRx[6];
 259              		.loc 1 72 0
 260 0192 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 261 0194 1372     		strb	r3, [r2, #8]
  73:Core/Src/vcu.c ****         BMS[0].soc = canRx[7];
 262              		.loc 1 73 0
 263 0196 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 264 0198 9371     		strb	r3, [r2, #6]
  74:Core/Src/vcu.c ****         break;
 265              		.loc 1 74 0
 266 019a 10BD     		pop	{r4, pc}
 267              	.LVL16:
 268              	.L11:
  75:Core/Src/vcu.c **** 
  76:Core/Src/vcu.c ****     case 0x139:
  77:Core/Src/vcu.c ****         BMS[1].chargeRequest = canRx[0];
 269              		.loc 1 77 0
 270 019c 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 271 019e 164A     		ldr	r2, .L24+24
 272 01a0 5374     		strb	r3, [r2, #17]
  78:Core/Src/vcu.c ****         BMS[1].volt = ((canRx[2] << 8) + canRx[1]) / 100;
 273              		.loc 1 78 0
 274 01a2 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 275              	.LVL17:
 276 01a4 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 277 01a6 03EB0023 		add	r3, r3, r0, lsl #8
 278 01aa 1448     		ldr	r0, .L24+28
 279 01ac 80FB0340 		smull	r4, r0, r0, r3
 280 01b0 DB17     		asrs	r3, r3, #31
 281 01b2 C3EB6013 		rsb	r3, r3, r0, asr #5
 282 01b6 5381     		strh	r3, [r2, #10]	@ movhi
  79:Core/Src/vcu.c ****         BMS[1].temp = canRx[3];
 283              		.loc 1 79 0
 284 01b8 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 285 01ba 1373     		strb	r3, [r2, #12]
  80:Core/Src/vcu.c ****         BMS[1].highCell = (canRx[4]) / 51;
 286              		.loc 1 80 0
 287 01bc 0879     		ldrb	r0, [r1, #4]	@ zero_extendqisi2
 288 01be 104C     		ldr	r4, .L24+32
 289 01c0 A4FB0030 		umull	r3, r0, r4, r0
 290 01c4 4009     		lsrs	r0, r0, #5
 291 01c6 5073     		strb	r0, [r2, #13]
  81:Core/Src/vcu.c ****         BMS[1].lowCell = (canRx[5]) / 51;
 292              		.loc 1 81 0
 293 01c8 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
ARM GAS  /tmp/ccz9e3Lv.s 			page 8


 294 01ca A4FB0303 		umull	r0, r3, r4, r3
 295 01ce 5B09     		lsrs	r3, r3, #5
 296 01d0 9373     		strb	r3, [r2, #14]
  82:Core/Src/vcu.c ****         BMS[1].chargeState = canRx[6];
 297              		.loc 1 82 0
 298 01d2 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 299 01d4 9374     		strb	r3, [r2, #18]
  83:Core/Src/vcu.c ****         BMS[1].soc = canRx[7];
 300              		.loc 1 83 0
 301 01d6 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 302 01d8 1374     		strb	r3, [r2, #16]
 303              	.LVL18:
 304              	.L1:
 305 01da 10BD     		pop	{r4, pc}
 306              	.L25:
 307 01dc AFF30080 		.align	3
 308              	.L24:
 309 01e0 48E17A14 		.word	343597384
 310 01e4 AE47FD3F 		.word	1073563566
 311 01e8 00000000 		.word	iboost
 312 01ec 00000000 		.word	ldu
 313 01f0 00000000 		.word	charger
 314 01f4 95204F09 		.word	156180629
 315 01f8 00000000 		.word	BMS
 316 01fc 1F85EB51 		.word	1374389535
 317 0200 A1A0A0A0 		.word	-1600085855
 318              		.cfi_endproc
 319              	.LFE66:
 321              		.section	.text.canIOset,"ax",%progbits
 322              		.align	1
 323              		.global	canIOset
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu softvfp
 329              	canIOset:
 330              	.LFB67:
  84:Core/Src/vcu.c ****         break;
  85:Core/Src/vcu.c **** 
  86:Core/Src/vcu.c ****     default:
  87:Core/Src/vcu.c ****         break;
  88:Core/Src/vcu.c ****     }
  89:Core/Src/vcu.c **** }
  90:Core/Src/vcu.c **** 
  91:Core/Src/vcu.c **** void canIOset(int bit, int val)
  92:Core/Src/vcu.c **** {
 331              		.loc 1 92 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              	.LVL19:
 336 0000 08B5     		push	{r3, lr}
 337              	.LCFI1:
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 3, -8
 340              		.cfi_offset 14, -4
 341              	.LVL20:
ARM GAS  /tmp/ccz9e3Lv.s 			page 9


  93:Core/Src/vcu.c ****     if ((val = ON))
  94:Core/Src/vcu.c ****     {
  95:Core/Src/vcu.c ****         vcu.dio |= (1U << (bit));
 342              		.loc 1 95 0
 343 0002 094A     		ldr	r2, .L28
 344 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 345 0006 0121     		movs	r1, #1
 346 0008 01FA00F0 		lsl	r0, r1, r0
 347              	.LVL21:
 348 000c 0343     		orrs	r3, r3, r0
 349 000e DBB2     		uxtb	r3, r3
 350 0010 1370     		strb	r3, [r2]
  96:Core/Src/vcu.c ****     }
  97:Core/Src/vcu.c ****     else if ((val = OFF))
  98:Core/Src/vcu.c ****     {
  99:Core/Src/vcu.c ****         vcu.dio &= ~(1U << (bit));
 100:Core/Src/vcu.c ****     }
 101:Core/Src/vcu.c **** 
 102:Core/Src/vcu.c ****     txMsg.StdId = 0x113;
 351              		.loc 1 102 0
 352 0012 0648     		ldr	r0, .L28+4
 353 0014 40F21313 		movw	r3, #275
 354 0018 0360     		str	r3, [r0]
 103:Core/Src/vcu.c ****     txMsg.DLC = 1;
 355              		.loc 1 103 0
 356 001a 0161     		str	r1, [r0, #16]
 104:Core/Src/vcu.c ****     canTx[0] = vcu.dio;
 357              		.loc 1 104 0
 358 001c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 359 001e 0449     		ldr	r1, .L28+8
 360 0020 0B70     		strb	r3, [r1]
 105:Core/Src/vcu.c ****     c1tx(&txMsg, canTx);
 361              		.loc 1 105 0
 362 0022 FFF7FEFF 		bl	c1tx
 363              	.LVL22:
 364 0026 08BD     		pop	{r3, pc}
 365              	.L29:
 366              		.align	2
 367              	.L28:
 368 0028 00000000 		.word	vcu
 369 002c 00000000 		.word	txMsg
 370 0030 00000000 		.word	canTx
 371              		.cfi_endproc
 372              	.LFE67:
 374              		.section	.text.canIOsend,"ax",%progbits
 375              		.align	1
 376              		.global	canIOsend
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu softvfp
 382              	canIOsend:
 383              	.LFB68:
 106:Core/Src/vcu.c **** }
 107:Core/Src/vcu.c **** 
 108:Core/Src/vcu.c **** void canIOsend(void)
 109:Core/Src/vcu.c **** {
ARM GAS  /tmp/ccz9e3Lv.s 			page 10


 384              		.loc 1 109 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388 0000 08B5     		push	{r3, lr}
 389              	.LCFI2:
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 3, -8
 392              		.cfi_offset 14, -4
 110:Core/Src/vcu.c ****     txMsg.StdId = 0x113;
 393              		.loc 1 110 0
 394 0002 0648     		ldr	r0, .L32
 395 0004 40F21313 		movw	r3, #275
 396 0008 0360     		str	r3, [r0]
 111:Core/Src/vcu.c ****     txMsg.DLC = 1;
 397              		.loc 1 111 0
 398 000a 0123     		movs	r3, #1
 399 000c 0361     		str	r3, [r0, #16]
 112:Core/Src/vcu.c ****     canTx[0] = vcu.dio;
 400              		.loc 1 112 0
 401 000e 044B     		ldr	r3, .L32+4
 402 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 403 0012 0449     		ldr	r1, .L32+8
 404 0014 0B70     		strb	r3, [r1]
 113:Core/Src/vcu.c ****     c1tx(&txMsg, canTx);
 405              		.loc 1 113 0
 406 0016 FFF7FEFF 		bl	c1tx
 407              	.LVL23:
 408 001a 08BD     		pop	{r3, pc}
 409              	.L33:
 410              		.align	2
 411              	.L32:
 412 001c 00000000 		.word	txMsg
 413 0020 00000000 		.word	vcu
 414 0024 00000000 		.word	canTx
 415              		.cfi_endproc
 416              	.LFE68:
 418              		.section	.text.vcuInit,"ax",%progbits
 419              		.align	1
 420              		.global	vcuInit
 421              		.syntax unified
 422              		.thumb
 423              		.thumb_func
 424              		.fpu softvfp
 426              	vcuInit:
 427              	.LFB70:
 114:Core/Src/vcu.c **** }
 115:Core/Src/vcu.c **** /////////////////////////////////////////////////////////////////////////
 116:Core/Src/vcu.c **** void vcuState(void)
 117:Core/Src/vcu.c **** {
 118:Core/Src/vcu.c ****     switch (vcu.state)
 119:Core/Src/vcu.c ****     {
 120:Core/Src/vcu.c ****     case off:
 121:Core/Src/vcu.c **** 
 122:Core/Src/vcu.c ****         if (vcu.key == ON && charger.chargerStatus == CHRG_ENABLED)
 123:Core/Src/vcu.c ****         {
 124:Core/Src/vcu.c ****             vcu.state = charge_keyOn;
ARM GAS  /tmp/ccz9e3Lv.s 			page 11


 125:Core/Src/vcu.c ****         }
 126:Core/Src/vcu.c ****         if (vcu.key == OFF && charger.chargerStatus == CHRG_ENABLED)
 127:Core/Src/vcu.c ****         {
 128:Core/Src/vcu.c ****             vcu.state = charge_keyOff;
 129:Core/Src/vcu.c ****         }
 130:Core/Src/vcu.c ****         if (vcu.key == ON && charger.chargerStatus == OFF)
 131:Core/Src/vcu.c ****         {
 132:Core/Src/vcu.c ****             vcu.state = on;
 133:Core/Src/vcu.c ****         }
 134:Core/Src/vcu.c ****         break;
 135:Core/Src/vcu.c **** 
 136:Core/Src/vcu.c ****     case on:
 137:Core/Src/vcu.c ****         canSet(IDLE_MODE, 1, 32);
 138:Core/Src/vcu.c ****         if (ldu.mode == 1)
 139:Core/Src/vcu.c ****         {
 140:Core/Src/vcu.c ****             vcu.state = idle;
 141:Core/Src/vcu.c ****         }
 142:Core/Src/vcu.c **** 
 143:Core/Src/vcu.c ****         if (vcu.key == OFF)
 144:Core/Src/vcu.c ****         {
 145:Core/Src/vcu.c ****             vcu.state = off;
 146:Core/Src/vcu.c ****         }
 147:Core/Src/vcu.c ****         if (charger.chargerStatus == 5)
 148:Core/Src/vcu.c ****         {
 149:Core/Src/vcu.c ****             vcu.state = charge_keyOn;
 150:Core/Src/vcu.c ****         }
 151:Core/Src/vcu.c ****         break;
 152:Core/Src/vcu.c **** 
 153:Core/Src/vcu.c ****     case idle:
 154:Core/Src/vcu.c ****         canSet(IDLE_MODE, 1, 32);
 155:Core/Src/vcu.c ****         if (ldu.dir != 2)
 156:Core/Src/vcu.c ****         {
 157:Core/Src/vcu.c ****             vcu.state = run;
 158:Core/Src/vcu.c ****         }
 159:Core/Src/vcu.c **** 
 160:Core/Src/vcu.c ****         if (vcu.key == OFF)
 161:Core/Src/vcu.c ****         {
 162:Core/Src/vcu.c ****             vcu.state = off;
 163:Core/Src/vcu.c ****         }
 164:Core/Src/vcu.c ****         break;
 165:Core/Src/vcu.c **** 
 166:Core/Src/vcu.c ****     case run:
 167:Core/Src/vcu.c ****         canSet(IDLE_MODE, 0, 32);
 168:Core/Src/vcu.c ****         canSet(FWEAK, 280, 32);
 169:Core/Src/vcu.c ****         canSet(FSLIP_MIN, 76, 1);  // 2.3*32
 170:Core/Src/vcu.c ****         canSet(FSLIP_MAX, 101, 1); // 3.15*32
 171:Core/Src/vcu.c ****         if (vcu.key == OFF)
 172:Core/Src/vcu.c ****         {
 173:Core/Src/vcu.c ****             vcu.state = off;
 174:Core/Src/vcu.c ****         }
 175:Core/Src/vcu.c **** 
 176:Core/Src/vcu.c ****         if (vcu.launchFlag == ON)
 177:Core/Src/vcu.c ****         {
 178:Core/Src/vcu.c ****             vcu.state = launchMode;
 179:Core/Src/vcu.c ****         }
 180:Core/Src/vcu.c ****         break;
 181:Core/Src/vcu.c **** 
ARM GAS  /tmp/ccz9e3Lv.s 			page 12


 182:Core/Src/vcu.c ****     case launchMode:
 183:Core/Src/vcu.c ****         canSet(FWEAK, 220, 32);
 184:Core/Src/vcu.c ****         canSet(FSLIP_MIN, 61, 1); // 1.9*32
 185:Core/Src/vcu.c ****         canSet(FSLIP_MAX, 77, 1); // 2.4*32
 186:Core/Src/vcu.c ****         if (vcu.launchFlag == 0)
 187:Core/Src/vcu.c ****         {
 188:Core/Src/vcu.c ****             vcu.state = run;
 189:Core/Src/vcu.c ****         }
 190:Core/Src/vcu.c ****         break;
 191:Core/Src/vcu.c **** 
 192:Core/Src/vcu.c ****     default:
 193:Core/Src/vcu.c ****         break;
 194:Core/Src/vcu.c ****     }
 195:Core/Src/vcu.c **** }
 196:Core/Src/vcu.c **** 
 197:Core/Src/vcu.c **** void vcuInit(void)
 198:Core/Src/vcu.c **** {
 428              		.loc 1 198 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 199:Core/Src/vcu.c ****     vcu.state = off;
 433              		.loc 1 199 0
 434 0000 064A     		ldr	r2, .L35
 435 0002 0023     		movs	r3, #0
 436 0004 1373     		strb	r3, [r2, #12]
 200:Core/Src/vcu.c ****     vcu.dio = 0;
 437              		.loc 1 200 0
 438 0006 1370     		strb	r3, [r2]
 201:Core/Src/vcu.c ****     vcu.key = 0;
 439              		.loc 1 201 0
 440 0008 D370     		strb	r3, [r2, #3]
 202:Core/Src/vcu.c ****     vcu.launchFlag = 0;
 441              		.loc 1 202 0
 442 000a 5373     		strb	r3, [r2, #13]
 203:Core/Src/vcu.c ****     ADC_data[0] = 4095; // LVREAD PIN
 443              		.loc 1 203 0
 444 000c 044A     		ldr	r2, .L35+4
 445 000e 40F6FF71 		movw	r1, #4095
 446 0012 1160     		str	r1, [r2]
 204:Core/Src/vcu.c ****     ADC_data[1] = 0;
 447              		.loc 1 204 0
 448 0014 5360     		str	r3, [r2, #4]
 205:Core/Src/vcu.c ****     ADC_data[2] = 0;
 449              		.loc 1 205 0
 450 0016 9360     		str	r3, [r2, #8]
 451 0018 7047     		bx	lr
 452              	.L36:
 453 001a 00BF     		.align	2
 454              	.L35:
 455 001c 00000000 		.word	vcu
 456 0020 00000000 		.word	ADC_data
 457              		.cfi_endproc
 458              	.LFE70:
 460              		.section	.text.ioHandler,"ax",%progbits
 461              		.align	1
ARM GAS  /tmp/ccz9e3Lv.s 			page 13


 462              		.global	ioHandler
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu softvfp
 468              	ioHandler:
 469              	.LFB71:
 206:Core/Src/vcu.c **** }
 207:Core/Src/vcu.c **** 
 208:Core/Src/vcu.c **** void ioHandler(void)
 209:Core/Src/vcu.c **** {
 470              		.loc 1 209 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474 0000 08B5     		push	{r3, lr}
 475              	.LCFI3:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
 210:Core/Src/vcu.c ****     ////////////////  Key Input ///////////////////////////////////////
 211:Core/Src/vcu.c ****     if (HAL_GPIO_ReadPin(SW12_GPIO_Port, SW12_Pin))
 479              		.loc 1 211 0
 480 0002 1021     		movs	r1, #16
 481 0004 2448     		ldr	r0, .L49
 482 0006 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 483              	.LVL24:
 484 000a A0B1     		cbz	r0, .L38
 212:Core/Src/vcu.c ****     {
 213:Core/Src/vcu.c ****         vcu.key = ON;
 485              		.loc 1 213 0
 486 000c 0122     		movs	r2, #1
 487 000e 234B     		ldr	r3, .L49+4
 488 0010 DA70     		strb	r2, [r3, #3]
 489              	.L39:
 214:Core/Src/vcu.c ****     }
 215:Core/Src/vcu.c ****     else
 216:Core/Src/vcu.c ****     {
 217:Core/Src/vcu.c ****         vcu.key = OFF;
 218:Core/Src/vcu.c ****         vcu.dio = 0x00;
 219:Core/Src/vcu.c ****         ldu.mode = 0;
 220:Core/Src/vcu.c ****         if (charger.chargerStatus != CHRG_ENABLED)
 221:Core/Src/vcu.c ****         {
 222:Core/Src/vcu.c ****             vcu.state = off;
 223:Core/Src/vcu.c ****         }
 224:Core/Src/vcu.c ****     }
 225:Core/Src/vcu.c **** 
 226:Core/Src/vcu.c ****     //////////////////  Heater Switching ///////////////////////////////
 227:Core/Src/vcu.c ****     int heatRequest = HAL_GPIO_ReadPin(HEAT_REQ_GPIO_Port, HEAT_REQ_Pin);
 490              		.loc 1 227 0
 491 0012 2021     		movs	r1, #32
 492 0014 2048     		ldr	r0, .L49
 493 0016 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 494              	.LVL25:
 228:Core/Src/vcu.c **** 
 229:Core/Src/vcu.c ****     switch (vcu.state)
 495              		.loc 1 229 0
ARM GAS  /tmp/ccz9e3Lv.s 			page 14


 496 001a 204B     		ldr	r3, .L49+4
 497 001c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 498 001e 03F0FF02 		and	r2, r3, #255
 499 0022 EBB1     		cbz	r3, .L41
 500 0024 012A     		cmp	r2, #1
 501 0026 21D1     		bne	.L40
 230:Core/Src/vcu.c ****     {
 231:Core/Src/vcu.c ****     case on:
 232:Core/Src/vcu.c ****         if (heatRequest)
 502              		.loc 1 232 0
 503 0028 98B1     		cbz	r0, .L43
 233:Core/Src/vcu.c ****         {
 234:Core/Src/vcu.c ****             HAL_GPIO_WritePin(HEAT_OUT_GPIO_Port, HEAT_OUT_Pin, ON);
 504              		.loc 1 234 0
 505 002a 4FF40041 		mov	r1, #32768
 506 002e 1A48     		ldr	r0, .L49
 507              	.LVL26:
 508 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
 509              	.LVL27:
 510 0034 1AE0     		b	.L40
 511              	.L38:
 217:Core/Src/vcu.c ****         vcu.dio = 0x00;
 512              		.loc 1 217 0
 513 0036 194A     		ldr	r2, .L49+4
 514 0038 0023     		movs	r3, #0
 515 003a D370     		strb	r3, [r2, #3]
 218:Core/Src/vcu.c ****         ldu.mode = 0;
 516              		.loc 1 218 0
 517 003c 1370     		strb	r3, [r2]
 219:Core/Src/vcu.c ****         if (charger.chargerStatus != CHRG_ENABLED)
 518              		.loc 1 219 0
 519 003e 184A     		ldr	r2, .L49+8
 520 0040 5372     		strb	r3, [r2, #9]
 220:Core/Src/vcu.c ****         {
 521              		.loc 1 220 0
 522 0042 184B     		ldr	r3, .L49+12
 523 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 524 0046 052B     		cmp	r3, #5
 525 0048 E3D0     		beq	.L39
 222:Core/Src/vcu.c ****         }
 526              		.loc 1 222 0
 527 004a 0022     		movs	r2, #0
 528 004c 134B     		ldr	r3, .L49+4
 529 004e 1A73     		strb	r2, [r3, #12]
 530 0050 DFE7     		b	.L39
 531              	.LVL28:
 532              	.L43:
 235:Core/Src/vcu.c ****         }
 236:Core/Src/vcu.c ****         else
 237:Core/Src/vcu.c ****         {
 238:Core/Src/vcu.c ****             HAL_GPIO_WritePin(HEAT_OUT_GPIO_Port, HEAT_OUT_Pin, OFF);
 533              		.loc 1 238 0
 534 0052 0022     		movs	r2, #0
 535 0054 4FF40041 		mov	r1, #32768
 536 0058 0F48     		ldr	r0, .L49
 537              	.LVL29:
 538 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccz9e3Lv.s 			page 15


 539              	.LVL30:
 540 005e 05E0     		b	.L40
 541              	.LVL31:
 542              	.L41:
 239:Core/Src/vcu.c ****         }
 240:Core/Src/vcu.c ****         break;
 241:Core/Src/vcu.c **** 
 242:Core/Src/vcu.c ****     case off:
 243:Core/Src/vcu.c ****         HAL_GPIO_WritePin(HEAT_OUT_GPIO_Port, HEAT_OUT_Pin, OFF);
 543              		.loc 1 243 0
 544 0060 0022     		movs	r2, #0
 545 0062 4FF40041 		mov	r1, #32768
 546 0066 0C48     		ldr	r0, .L49
 547              	.LVL32:
 548 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 549              	.LVL33:
 550              	.L40:
 244:Core/Src/vcu.c ****         break;
 245:Core/Src/vcu.c **** 
 246:Core/Src/vcu.c ****     default:
 247:Core/Src/vcu.c ****         break;
 248:Core/Src/vcu.c ****     }
 249:Core/Src/vcu.c **** 
 250:Core/Src/vcu.c ****     //////////////////  Power Steering  ///////////////////////////////
 251:Core/Src/vcu.c ****     switch (vcu.state)
 551              		.loc 1 251 0
 552 006c 0B4B     		ldr	r3, .L49+4
 553 006e 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 554 0070 02F0FF03 		and	r3, r2, #255
 555 0074 4AB1     		cbz	r2, .L45
 556 0076 043B     		subs	r3, r3, #4
 557 0078 012B     		cmp	r3, #1
 558 007a 05D8     		bhi	.L37
 252:Core/Src/vcu.c ****     {
 253:Core/Src/vcu.c ****     case off:
 254:Core/Src/vcu.c ****         HAL_GPIO_WritePin(PS_INIT_GPIO_Port, PS_INIT_Pin, OFF);
 255:Core/Src/vcu.c ****         break;
 256:Core/Src/vcu.c ****     case run:
 257:Core/Src/vcu.c ****     case idle:
 258:Core/Src/vcu.c ****         HAL_GPIO_WritePin(PS_INIT_GPIO_Port, PS_INIT_Pin, ON);
 559              		.loc 1 258 0
 560 007c 0122     		movs	r2, #1
 561 007e 4FF48041 		mov	r1, #16384
 562 0082 0548     		ldr	r0, .L49
 563 0084 FFF7FEFF 		bl	HAL_GPIO_WritePin
 564              	.LVL34:
 565              	.L37:
 566 0088 08BD     		pop	{r3, pc}
 567              	.L45:
 254:Core/Src/vcu.c ****         break;
 568              		.loc 1 254 0
 569 008a 0022     		movs	r2, #0
 570 008c 4FF48041 		mov	r1, #16384
 571 0090 0148     		ldr	r0, .L49
 572 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 573              	.LVL35:
 255:Core/Src/vcu.c ****     case run:
ARM GAS  /tmp/ccz9e3Lv.s 			page 16


 574              		.loc 1 255 0
 575 0096 08BD     		pop	{r3, pc}
 576              	.L50:
 577              		.align	2
 578              	.L49:
 579 0098 000C0140 		.word	1073810432
 580 009c 00000000 		.word	vcu
 581 00a0 00000000 		.word	ldu
 582 00a4 00000000 		.word	charger
 583              		.cfi_endproc
 584              	.LFE71:
 586              		.section	.text.canSet,"ax",%progbits
 587              		.align	1
 588              		.global	canSet
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 592              		.fpu softvfp
 594              	canSet:
 595              	.LFB73:
 259:Core/Src/vcu.c ****         break;
 260:Core/Src/vcu.c **** 
 261:Core/Src/vcu.c ****     default:
 262:Core/Src/vcu.c ****         break;
 263:Core/Src/vcu.c ****     }
 264:Core/Src/vcu.c **** }
 265:Core/Src/vcu.c **** 
 266:Core/Src/vcu.c **** void regenHandler(void)
 267:Core/Src/vcu.c **** {
 268:Core/Src/vcu.c **** 
 269:Core/Src/vcu.c ****     int baseRegen = 0; //base throttle off regen value
 270:Core/Src/vcu.c ****     int maxRegen = 94; //maximum full brake pressure regen value
 271:Core/Src/vcu.c ****     int brkNomPedal;
 272:Core/Src/vcu.c ****     int regenRamp;
 273:Core/Src/vcu.c **** 
 274:Core/Src/vcu.c ****     if (iboost.pedal > 700)
 275:Core/Src/vcu.c ****     {
 276:Core/Src/vcu.c ****         brkNomPedal = -(maxRegen);
 277:Core/Src/vcu.c ****     }
 278:Core/Src/vcu.c ****     else
 279:Core/Src/vcu.c ****     {
 280:Core/Src/vcu.c ****         brkNomPedal = MAP(iboost.pedal, 1, 700, baseRegen, -(maxRegen)); 
 281:Core/Src/vcu.c ****         ; //maps brake pedal regen between base and max
 282:Core/Src/vcu.c ****     }
 283:Core/Src/vcu.c ****     canSet(BRAKE_NOM_PEDAL, brkNomPedal, 32);
 284:Core/Src/vcu.c **** 
 285:Core/Src/vcu.c ****     //regenramp
 286:Core/Src/vcu.c ****     if (ldu.rpm <= 10000)
 287:Core/Src/vcu.c ****     {
 288:Core/Src/vcu.c ****         regenRamp = MAP(ldu.rpm, 0, 10000, 2, 12); // mapped values alredy 32x for gain
 289:Core/Src/vcu.c ****     }
 290:Core/Src/vcu.c ****     else
 291:Core/Src/vcu.c ****     {
 292:Core/Src/vcu.c ****         regenRamp = 12; // value already 32x for gain
 293:Core/Src/vcu.c ****         canSet(BRAKE_PEDAL_RAMP, regenRamp, 1);
 294:Core/Src/vcu.c ****     }
 295:Core/Src/vcu.c **** }
ARM GAS  /tmp/ccz9e3Lv.s 			page 17


 296:Core/Src/vcu.c **** 
 297:Core/Src/vcu.c **** void canSet(uint8_t index, uint32_t value, uint8_t gain) // LDU param Index, unscaled value, value 
 298:Core/Src/vcu.c **** {
 596              		.loc 1 298 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              	.LVL36:
 601 0000 10B5     		push	{r4, lr}
 602              	.LCFI4:
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 4, -8
 605              		.cfi_offset 14, -4
 299:Core/Src/vcu.c ****     int val = value * gain;
 606              		.loc 1 299 0
 607 0002 01FB02F2 		mul	r2, r1, r2
 608              	.LVL37:
 300:Core/Src/vcu.c **** 
 301:Core/Src/vcu.c ****     txMsg.StdId = 0x601; //set parameter ID
 609              		.loc 1 301 0
 610 0006 0C4B     		ldr	r3, .L53
 611 0008 40F20161 		movw	r1, #1537
 612              	.LVL38:
 613 000c 1960     		str	r1, [r3]
 302:Core/Src/vcu.c ****     txMsg.DLC = 8;
 614              		.loc 1 302 0
 615 000e 0821     		movs	r1, #8
 616 0010 1961     		str	r1, [r3, #16]
 303:Core/Src/vcu.c ****     canTx[0] = 0x40;
 617              		.loc 1 303 0
 618 0012 0A49     		ldr	r1, .L53+4
 619 0014 4024     		movs	r4, #64
 620 0016 0C70     		strb	r4, [r1]
 304:Core/Src/vcu.c ****     canTx[1] = 0x00;
 621              		.loc 1 304 0
 622 0018 0024     		movs	r4, #0
 623 001a 4C70     		strb	r4, [r1, #1]
 305:Core/Src/vcu.c ****     canTx[2] = 0x20;
 624              		.loc 1 305 0
 625 001c 2024     		movs	r4, #32
 626 001e 8C70     		strb	r4, [r1, #2]
 306:Core/Src/vcu.c ****     canTx[3] = index;
 627              		.loc 1 306 0
 628 0020 C870     		strb	r0, [r1, #3]
 307:Core/Src/vcu.c ****     canTx[4] = val & 0xFF;
 629              		.loc 1 307 0
 630 0022 0A71     		strb	r2, [r1, #4]
 308:Core/Src/vcu.c ****     canTx[5] = (val >> 8) & 0xFF;
 631              		.loc 1 308 0
 632 0024 1012     		asrs	r0, r2, #8
 633              	.LVL39:
 634 0026 4871     		strb	r0, [r1, #5]
 309:Core/Src/vcu.c ****     canTx[6] = (val >> 16) & 0xFF;
 635              		.loc 1 309 0
 636 0028 1014     		asrs	r0, r2, #16
 637 002a 8871     		strb	r0, [r1, #6]
 310:Core/Src/vcu.c ****     canTx[7] = (val >> 24) & 0xFF;
ARM GAS  /tmp/ccz9e3Lv.s 			page 18


 638              		.loc 1 310 0
 639 002c 120E     		lsrs	r2, r2, #24
 640              	.LVL40:
 641 002e CA71     		strb	r2, [r1, #7]
 311:Core/Src/vcu.c ****     c1tx(&txMsg, canTx);
 642              		.loc 1 311 0
 643 0030 1846     		mov	r0, r3
 644 0032 FFF7FEFF 		bl	c1tx
 645              	.LVL41:
 646 0036 10BD     		pop	{r4, pc}
 647              	.L54:
 648              		.align	2
 649              	.L53:
 650 0038 00000000 		.word	txMsg
 651 003c 00000000 		.word	canTx
 652              		.cfi_endproc
 653              	.LFE73:
 655              		.section	.text.vcuState,"ax",%progbits
 656              		.align	1
 657              		.global	vcuState
 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 661              		.fpu softvfp
 663              	vcuState:
 664              	.LFB69:
 117:Core/Src/vcu.c ****     switch (vcu.state)
 665              		.loc 1 117 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669 0000 08B5     		push	{r3, lr}
 670              	.LCFI5:
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 3, -8
 673              		.cfi_offset 14, -4
 118:Core/Src/vcu.c ****     {
 674              		.loc 1 118 0
 675 0002 4E4B     		ldr	r3, .L74
 676 0004 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 677 0006 DBB2     		uxtb	r3, r3
 678 0008 062B     		cmp	r3, #6
 679 000a 3DD8     		bhi	.L55
 680 000c DFE803F0 		tbb	[pc, r3]
 681              	.L58:
 682 0010 04       		.byte	(.L57-.L58)/2
 683 0011 28       		.byte	(.L59-.L58)/2
 684 0012 3C       		.byte	(.L55-.L58)/2
 685 0013 3C       		.byte	(.L55-.L58)/2
 686 0014 45       		.byte	(.L60-.L58)/2
 687 0015 5A       		.byte	(.L61-.L58)/2
 688 0016 7E       		.byte	(.L62-.L58)/2
 689 0017 00       		.p2align 1
 690              	.L57:
 122:Core/Src/vcu.c ****         {
 691              		.loc 1 122 0
 692 0018 484B     		ldr	r3, .L74
ARM GAS  /tmp/ccz9e3Lv.s 			page 19


 693 001a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 694 001c DBB2     		uxtb	r3, r3
 695 001e 012B     		cmp	r3, #1
 696 0020 12D0     		beq	.L70
 697              	.L63:
 126:Core/Src/vcu.c ****         {
 698              		.loc 1 126 0
 699 0022 464B     		ldr	r3, .L74
 700 0024 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 701 0026 1BB9     		cbnz	r3, .L64
 126:Core/Src/vcu.c ****         {
 702              		.loc 1 126 0 is_stmt 0 discriminator 1
 703 0028 454B     		ldr	r3, .L74+4
 704 002a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 705 002c 052B     		cmp	r3, #5
 706 002e 13D0     		beq	.L71
 707              	.L64:
 130:Core/Src/vcu.c ****         {
 708              		.loc 1 130 0 is_stmt 1
 709 0030 424B     		ldr	r3, .L74
 710 0032 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 711 0034 DBB2     		uxtb	r3, r3
 712 0036 012B     		cmp	r3, #1
 713 0038 26D1     		bne	.L55
 130:Core/Src/vcu.c ****         {
 714              		.loc 1 130 0 is_stmt 0 discriminator 1
 715 003a 414B     		ldr	r3, .L74+4
 716 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 717 003e 1BBB     		cbnz	r3, .L55
 132:Core/Src/vcu.c ****         }
 718              		.loc 1 132 0 is_stmt 1
 719 0040 0122     		movs	r2, #1
 720 0042 3E4B     		ldr	r3, .L74
 721 0044 1A73     		strb	r2, [r3, #12]
 722 0046 08BD     		pop	{r3, pc}
 723              	.L70:
 122:Core/Src/vcu.c ****         {
 724              		.loc 1 122 0 discriminator 1
 725 0048 3D4B     		ldr	r3, .L74+4
 726 004a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 727 004c 052B     		cmp	r3, #5
 728 004e E8D1     		bne	.L63
 124:Core/Src/vcu.c ****         }
 729              		.loc 1 124 0
 730 0050 0322     		movs	r2, #3
 731 0052 3A4B     		ldr	r3, .L74
 732 0054 1A73     		strb	r2, [r3, #12]
 733 0056 E4E7     		b	.L63
 734              	.L71:
 128:Core/Src/vcu.c ****         }
 735              		.loc 1 128 0
 736 0058 0222     		movs	r2, #2
 737 005a 384B     		ldr	r3, .L74
 738 005c 1A73     		strb	r2, [r3, #12]
 739 005e E7E7     		b	.L64
 740              	.L59:
 137:Core/Src/vcu.c ****         if (ldu.mode == 1)
ARM GAS  /tmp/ccz9e3Lv.s 			page 20


 741              		.loc 1 137 0
 742 0060 2022     		movs	r2, #32
 743 0062 0121     		movs	r1, #1
 744 0064 4020     		movs	r0, #64
 745 0066 FFF7FEFF 		bl	canSet
 746              	.LVL42:
 138:Core/Src/vcu.c ****         {
 747              		.loc 1 138 0
 748 006a 364B     		ldr	r3, .L74+8
 749 006c 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 750 006e DBB2     		uxtb	r3, r3
 751 0070 012B     		cmp	r3, #1
 752 0072 0AD0     		beq	.L72
 753              	.L65:
 143:Core/Src/vcu.c ****         {
 754              		.loc 1 143 0
 755 0074 314B     		ldr	r3, .L74
 756 0076 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 757 0078 13B9     		cbnz	r3, .L66
 145:Core/Src/vcu.c ****         }
 758              		.loc 1 145 0
 759 007a 0022     		movs	r2, #0
 760 007c 2F4B     		ldr	r3, .L74
 761 007e 1A73     		strb	r2, [r3, #12]
 762              	.L66:
 147:Core/Src/vcu.c ****         {
 763              		.loc 1 147 0
 764 0080 2F4B     		ldr	r3, .L74+4
 765 0082 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 766 0084 052B     		cmp	r3, #5
 767 0086 04D0     		beq	.L73
 768              	.L55:
 769 0088 08BD     		pop	{r3, pc}
 770              	.L72:
 140:Core/Src/vcu.c ****         }
 771              		.loc 1 140 0
 772 008a 0422     		movs	r2, #4
 773 008c 2B4B     		ldr	r3, .L74
 774 008e 1A73     		strb	r2, [r3, #12]
 775 0090 F0E7     		b	.L65
 776              	.L73:
 149:Core/Src/vcu.c ****         }
 777              		.loc 1 149 0
 778 0092 0322     		movs	r2, #3
 779 0094 294B     		ldr	r3, .L74
 780 0096 1A73     		strb	r2, [r3, #12]
 781 0098 08BD     		pop	{r3, pc}
 782              	.L60:
 154:Core/Src/vcu.c ****         if (ldu.dir != 2)
 783              		.loc 1 154 0
 784 009a 2022     		movs	r2, #32
 785 009c 0121     		movs	r1, #1
 786 009e 4020     		movs	r0, #64
 787 00a0 FFF7FEFF 		bl	canSet
 788              	.LVL43:
 155:Core/Src/vcu.c ****         {
 789              		.loc 1 155 0
ARM GAS  /tmp/ccz9e3Lv.s 			page 21


 790 00a4 274B     		ldr	r3, .L74+8
 791 00a6 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 792 00a8 DBB2     		uxtb	r3, r3
 793 00aa 022B     		cmp	r3, #2
 794 00ac 02D0     		beq	.L67
 157:Core/Src/vcu.c ****         }
 795              		.loc 1 157 0
 796 00ae 0522     		movs	r2, #5
 797 00b0 224B     		ldr	r3, .L74
 798 00b2 1A73     		strb	r2, [r3, #12]
 799              	.L67:
 160:Core/Src/vcu.c ****         {
 800              		.loc 1 160 0
 801 00b4 214B     		ldr	r3, .L74
 802 00b6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 803 00b8 002B     		cmp	r3, #0
 804 00ba E5D1     		bne	.L55
 162:Core/Src/vcu.c ****         }
 805              		.loc 1 162 0
 806 00bc 0022     		movs	r2, #0
 807 00be 1F4B     		ldr	r3, .L74
 808 00c0 1A73     		strb	r2, [r3, #12]
 809 00c2 08BD     		pop	{r3, pc}
 810              	.L61:
 167:Core/Src/vcu.c ****         canSet(FWEAK, 280, 32);
 811              		.loc 1 167 0
 812 00c4 2022     		movs	r2, #32
 813 00c6 0021     		movs	r1, #0
 814 00c8 4020     		movs	r0, #64
 815 00ca FFF7FEFF 		bl	canSet
 816              	.LVL44:
 168:Core/Src/vcu.c ****         canSet(FSLIP_MIN, 76, 1);  // 2.3*32
 817              		.loc 1 168 0
 818 00ce 2022     		movs	r2, #32
 819 00d0 4FF48C71 		mov	r1, #280
 820 00d4 0120     		movs	r0, #1
 821 00d6 FFF7FEFF 		bl	canSet
 822              	.LVL45:
 169:Core/Src/vcu.c ****         canSet(FSLIP_MAX, 101, 1); // 3.15*32
 823              		.loc 1 169 0
 824 00da 0122     		movs	r2, #1
 825 00dc 4C21     		movs	r1, #76
 826 00de 0520     		movs	r0, #5
 827 00e0 FFF7FEFF 		bl	canSet
 828              	.LVL46:
 170:Core/Src/vcu.c ****         if (vcu.key == OFF)
 829              		.loc 1 170 0
 830 00e4 0122     		movs	r2, #1
 831 00e6 6521     		movs	r1, #101
 832 00e8 0620     		movs	r0, #6
 833 00ea FFF7FEFF 		bl	canSet
 834              	.LVL47:
 171:Core/Src/vcu.c ****         {
 835              		.loc 1 171 0
 836 00ee 134B     		ldr	r3, .L74
 837 00f0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 838 00f2 13B9     		cbnz	r3, .L68
ARM GAS  /tmp/ccz9e3Lv.s 			page 22


 173:Core/Src/vcu.c ****         }
 839              		.loc 1 173 0
 840 00f4 0022     		movs	r2, #0
 841 00f6 114B     		ldr	r3, .L74
 842 00f8 1A73     		strb	r2, [r3, #12]
 843              	.L68:
 176:Core/Src/vcu.c ****         {
 844              		.loc 1 176 0
 845 00fa 104B     		ldr	r3, .L74
 846 00fc 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 847 00fe DBB2     		uxtb	r3, r3
 848 0100 012B     		cmp	r3, #1
 849 0102 C1D1     		bne	.L55
 178:Core/Src/vcu.c ****         }
 850              		.loc 1 178 0
 851 0104 0622     		movs	r2, #6
 852 0106 0D4B     		ldr	r3, .L74
 853 0108 1A73     		strb	r2, [r3, #12]
 854 010a 08BD     		pop	{r3, pc}
 855              	.L62:
 183:Core/Src/vcu.c ****         canSet(FSLIP_MIN, 61, 1); // 1.9*32
 856              		.loc 1 183 0
 857 010c 2022     		movs	r2, #32
 858 010e DC21     		movs	r1, #220
 859 0110 0120     		movs	r0, #1
 860 0112 FFF7FEFF 		bl	canSet
 861              	.LVL48:
 184:Core/Src/vcu.c ****         canSet(FSLIP_MAX, 77, 1); // 2.4*32
 862              		.loc 1 184 0
 863 0116 0122     		movs	r2, #1
 864 0118 3D21     		movs	r1, #61
 865 011a 0520     		movs	r0, #5
 866 011c FFF7FEFF 		bl	canSet
 867              	.LVL49:
 185:Core/Src/vcu.c ****         if (vcu.launchFlag == 0)
 868              		.loc 1 185 0
 869 0120 0122     		movs	r2, #1
 870 0122 4D21     		movs	r1, #77
 871 0124 0620     		movs	r0, #6
 872 0126 FFF7FEFF 		bl	canSet
 873              	.LVL50:
 186:Core/Src/vcu.c ****         {
 874              		.loc 1 186 0
 875 012a 044B     		ldr	r3, .L74
 876 012c 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 877 012e 002B     		cmp	r3, #0
 878 0130 AAD1     		bne	.L55
 188:Core/Src/vcu.c ****         }
 879              		.loc 1 188 0
 880 0132 0522     		movs	r2, #5
 881 0134 014B     		ldr	r3, .L74
 882 0136 1A73     		strb	r2, [r3, #12]
 195:Core/Src/vcu.c **** 
 883              		.loc 1 195 0
 884 0138 A6E7     		b	.L55
 885              	.L75:
 886 013a 00BF     		.align	2
ARM GAS  /tmp/ccz9e3Lv.s 			page 23


 887              	.L74:
 888 013c 00000000 		.word	vcu
 889 0140 00000000 		.word	charger
 890 0144 00000000 		.word	ldu
 891              		.cfi_endproc
 892              	.LFE69:
 894              		.section	.text.regenHandler,"ax",%progbits
 895              		.align	1
 896              		.global	regenHandler
 897              		.syntax unified
 898              		.thumb
 899              		.thumb_func
 900              		.fpu softvfp
 902              	regenHandler:
 903              	.LFB72:
 267:Core/Src/vcu.c **** 
 904              		.loc 1 267 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 0
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 908 0000 08B5     		push	{r3, lr}
 909              	.LCFI6:
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 3, -8
 912              		.cfi_offset 14, -4
 913              	.LVL51:
 274:Core/Src/vcu.c ****     {
 914              		.loc 1 274 0
 915 0002 164B     		ldr	r3, .L82
 916 0004 1B88     		ldrh	r3, [r3]
 917 0006 9BB2     		uxth	r3, r3
 918 0008 B3F52F7F 		cmp	r3, #700
 919 000c 1CD8     		bhi	.L80
 280:Core/Src/vcu.c ****         ; //maps brake pedal regen between base and max
 920              		.loc 1 280 0
 921 000e 134B     		ldr	r3, .L82
 922 0010 1B88     		ldrh	r3, [r3]
 923 0012 9BB2     		uxth	r3, r3
 924 0014 591E     		subs	r1, r3, #1
 925 0016 6FF05D03 		mvn	r3, #93
 926 001a 03FB01F3 		mul	r3, r3, r1
 927 001e 1049     		ldr	r1, .L82+4
 928 0020 81FB0321 		smull	r2, r1, r1, r3
 929 0024 CA18     		adds	r2, r1, r3
 930 0026 D917     		asrs	r1, r3, #31
 931 0028 C1EB6221 		rsb	r1, r1, r2, asr #9
 932              	.LVL52:
 933              	.L77:
 283:Core/Src/vcu.c **** 
 934              		.loc 1 283 0
 935 002c 2022     		movs	r2, #32
 936 002e 3720     		movs	r0, #55
 937 0030 FFF7FEFF 		bl	canSet
 938              	.LVL53:
 286:Core/Src/vcu.c ****     {
 939              		.loc 1 286 0
 940 0034 0B4B     		ldr	r3, .L82+8
ARM GAS  /tmp/ccz9e3Lv.s 			page 24


 941 0036 1B88     		ldrh	r3, [r3]
 942 0038 9BB2     		uxth	r3, r3
 943 003a 42F21072 		movw	r2, #10000
 944 003e 9342     		cmp	r3, r2
 945 0040 05D8     		bhi	.L78
 288:Core/Src/vcu.c ****     }
 946              		.loc 1 288 0
 947 0042 084B     		ldr	r3, .L82+8
 948 0044 1B88     		ldrh	r3, [r3]
 949              	.LVL54:
 950 0046 08BD     		pop	{r3, pc}
 951              	.L80:
 276:Core/Src/vcu.c ****     }
 952              		.loc 1 276 0
 953 0048 6FF05D01 		mvn	r1, #93
 954 004c EEE7     		b	.L77
 955              	.L78:
 956              	.LVL55:
 293:Core/Src/vcu.c ****     }
 957              		.loc 1 293 0
 958 004e 0122     		movs	r2, #1
 959 0050 0C21     		movs	r1, #12
 960 0052 3820     		movs	r0, #56
 961 0054 FFF7FEFF 		bl	canSet
 962              	.LVL56:
 963 0058 08BD     		pop	{r3, pc}
 964              	.L83:
 965 005a 00BF     		.align	2
 966              	.L82:
 967 005c 00000000 		.word	iboost
 968 0060 B17A83BB 		.word	-1149011279
 969 0064 00000000 		.word	ldu
 970              		.cfi_endproc
 971              	.LFE72:
 973              		.section	.text.throttleHandler,"ax",%progbits
 974              		.align	1
 975              		.global	throttleHandler
 976              		.syntax unified
 977              		.thumb
 978              		.thumb_func
 979              		.fpu softvfp
 981              	throttleHandler:
 982              	.LFB74:
 312:Core/Src/vcu.c **** 
 313:Core/Src/vcu.c **** }
 314:Core/Src/vcu.c **** 
 315:Core/Src/vcu.c **** void throttleHandler(void)
 316:Core/Src/vcu.c **** {
 983              		.loc 1 316 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987 0000 08B5     		push	{r3, lr}
 988              	.LCFI7:
 989              		.cfi_def_cfa_offset 8
 990              		.cfi_offset 3, -8
 991              		.cfi_offset 14, -4
ARM GAS  /tmp/ccz9e3Lv.s 			page 25


 317:Core/Src/vcu.c ****     ///////// idle throttle ///////////////////
 318:Core/Src/vcu.c ****     int idleThrotMax;
 319:Core/Src/vcu.c ****     int idleThrot;
 320:Core/Src/vcu.c **** 
 321:Core/Src/vcu.c ****     if (ldu.dir == FWD)
 992              		.loc 1 321 0
 993 0002 1E4B     		ldr	r3, .L93
 994 0004 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 995 0006 DBB2     		uxtb	r3, r3
 996 0008 FF2B     		cmp	r3, #255
 997 000a 25D0     		beq	.L90
 322:Core/Src/vcu.c ****     {
 323:Core/Src/vcu.c ****         idleThrotMax = 20;
 324:Core/Src/vcu.c ****     }
 325:Core/Src/vcu.c ****     else
 326:Core/Src/vcu.c ****     {
 327:Core/Src/vcu.c ****         idleThrotMax = 18;
 998              		.loc 1 327 0
 999 000c 1221     		movs	r1, #18
 1000              	.L85:
 1001              	.LVL57:
 328:Core/Src/vcu.c ****     }
 329:Core/Src/vcu.c **** 
 330:Core/Src/vcu.c ****     idleThrot = MAP(iboost.pedal, 1, 400, idleThrotMax, 0);
 1002              		.loc 1 330 0
 1003 000e 1C4B     		ldr	r3, .L93+4
 1004 0010 1B88     		ldrh	r3, [r3]
 1005 0012 9BB2     		uxth	r3, r3
 1006 0014 5A1E     		subs	r2, r3, #1
 1007 0016 4B42     		negs	r3, r1
 1008 0018 03FB02F3 		mul	r3, r3, r2
 1009 001c 194A     		ldr	r2, .L93+8
 1010 001e 82FB0302 		smull	r0, r2, r2, r3
 1011 0022 1A44     		add	r2, r2, r3
 1012 0024 DB17     		asrs	r3, r3, #31
 1013 0026 C3EB2223 		rsb	r3, r3, r2, asr #8
 1014              	.LVL58:
 331:Core/Src/vcu.c ****     canSet(IDLE_THROT_LIM, idleThrot, 32);
 1015              		.loc 1 331 0
 1016 002a 2022     		movs	r2, #32
 1017 002c 1944     		add	r1, r1, r3
 1018              	.LVL59:
 1019 002e 3F20     		movs	r0, #63
 1020 0030 FFF7FEFF 		bl	canSet
 1021              	.LVL60:
 332:Core/Src/vcu.c **** 
 333:Core/Src/vcu.c ****     ///////// Launch Control Enable ///////////////
 334:Core/Src/vcu.c ****     if (ldu.pot >= 4050 && ldu.brake == ON)
 1022              		.loc 1 334 0
 1023 0034 114B     		ldr	r3, .L93
 1024 0036 DB89     		ldrh	r3, [r3, #14]
 1025 0038 9BB2     		uxth	r3, r3
 1026 003a 40F6D172 		movw	r2, #4049
 1027 003e 9342     		cmp	r3, r2
 1028 0040 04D9     		bls	.L86
 1029              		.loc 1 334 0 is_stmt 0 discriminator 1
 1030 0042 0E4B     		ldr	r3, .L93
ARM GAS  /tmp/ccz9e3Lv.s 			page 26


 1031 0044 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1032 0046 DBB2     		uxtb	r3, r3
 1033 0048 012B     		cmp	r3, #1
 1034 004a 07D0     		beq	.L91
 1035              	.L86:
 335:Core/Src/vcu.c ****     {
 336:Core/Src/vcu.c ****         vcu.launchFlag = ON;
 337:Core/Src/vcu.c ****     }
 338:Core/Src/vcu.c ****     if (vcu.launchFlag == ON && ldu.pot < 3000)
 1036              		.loc 1 338 0 is_stmt 1
 1037 004c 0E4B     		ldr	r3, .L93+12
 1038 004e 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 1039 0050 DBB2     		uxtb	r3, r3
 1040 0052 012B     		cmp	r3, #1
 1041 0054 06D0     		beq	.L92
 1042              	.L84:
 1043 0056 08BD     		pop	{r3, pc}
 1044              	.L90:
 323:Core/Src/vcu.c ****     }
 1045              		.loc 1 323 0
 1046 0058 1421     		movs	r1, #20
 1047 005a D8E7     		b	.L85
 1048              	.L91:
 336:Core/Src/vcu.c ****     }
 1049              		.loc 1 336 0
 1050 005c 0122     		movs	r2, #1
 1051 005e 0A4B     		ldr	r3, .L93+12
 1052 0060 5A73     		strb	r2, [r3, #13]
 1053 0062 F3E7     		b	.L86
 1054              	.L92:
 1055              		.loc 1 338 0 discriminator 1
 1056 0064 054B     		ldr	r3, .L93
 1057 0066 DB89     		ldrh	r3, [r3, #14]
 1058 0068 9BB2     		uxth	r3, r3
 1059 006a 40F6B732 		movw	r2, #2999
 1060 006e 9342     		cmp	r3, r2
 1061 0070 F1D8     		bhi	.L84
 339:Core/Src/vcu.c ****     {
 340:Core/Src/vcu.c ****         vcu.launchFlag = OFF;
 1062              		.loc 1 340 0
 1063 0072 0022     		movs	r2, #0
 1064 0074 044B     		ldr	r3, .L93+12
 1065 0076 5A73     		strb	r2, [r3, #13]
 341:Core/Src/vcu.c ****     }
 342:Core/Src/vcu.c **** }...
 1066              		.loc 1 342 0
 1067 0078 EDE7     		b	.L84
 1068              	.L94:
 1069 007a 00BF     		.align	2
 1070              	.L93:
 1071 007c 00000000 		.word	ldu
 1072 0080 00000000 		.word	iboost
 1073 0084 112940A4 		.word	-1539299055
 1074 0088 00000000 		.word	vcu
 1075              		.cfi_endproc
 1076              	.LFE74:
 1078              		.comm	BMS,20,4
ARM GAS  /tmp/ccz9e3Lv.s 			page 27


 1079              		.comm	charger,2,4
 1080              		.comm	vcu,16,4
 1081              		.comm	iboost,2,4
 1082              		.comm	ldu,18,4
 1083              		.comm	tempdata,4,4
 1084              		.comm	ADC_data,12,4
 1085              		.comm	canDebug,4,4
 1086              		.comm	txCycle2,4,4
 1087              		.comm	txCycle,4,4
 1088              		.comm	canTx2,8,4
 1089              		.comm	canTx,8,4
 1090              		.comm	canMailbox2,4,4
 1091              		.comm	canMailbox,4,4
 1092              		.comm	canRx2,8,4
 1093              		.comm	canRx,8,4
 1094              		.comm	txMsgExt2,24,4
 1095              		.comm	txMsg2,24,4
 1096              		.comm	rxMsg2,28,4
 1097              		.comm	txMsgExt,24,4
 1098              		.comm	txMsg,24,4
 1099              		.comm	rxMsg,28,4
 1100              		.comm	sf5,40,4
 1101              		.comm	sf4,40,4
 1102              		.comm	sf3,40,4
 1103              		.comm	sf2,40,4
 1104              		.comm	sf,40,4
 1105              		.comm	hcan2,40,4
 1106              		.comm	hcan1,40,4
 1107              		.comm	tenderActive,1,1
 1108              		.comm	time_now,4,4
 1109              		.comm	period,4,4
 1110              		.comm	DCDC,4,4
 1111              		.comm	setPrevState,1,1
 1112              		.comm	te,12,4
 1113              		.text
 1114              	.Letext0:
 1115              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1116              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1117              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1118              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1119              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 1120              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1121              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1122              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1123              		.file 10 "/usr/include/newlib/sys/lock.h"
 1124              		.file 11 "/usr/include/newlib/sys/_types.h"
 1125              		.file 12 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1126              		.file 13 "/usr/include/newlib/sys/reent.h"
 1127              		.file 14 "Core/Inc/encoder.h"
 1128              		.file 15 "Core/Inc/dcdc.h"
 1129              		.file 16 "Core/Inc/can_setup.h"
 1130              		.file 17 "Core/Inc/vcu.h"
 1131              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
ARM GAS  /tmp/ccz9e3Lv.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 vcu.c
     /tmp/ccz9e3Lv.s:19     .text.decodeCAN:0000000000000000 $t
     /tmp/ccz9e3Lv.s:26     .text.decodeCAN:0000000000000000 decodeCAN
     /tmp/ccz9e3Lv.s:309    .text.decodeCAN:00000000000001e0 $d
                            *COM*:0000000000000002 iboost
                            *COM*:0000000000000012 ldu
                            *COM*:0000000000000002 charger
                            *COM*:0000000000000014 BMS
     /tmp/ccz9e3Lv.s:322    .text.canIOset:0000000000000000 $t
     /tmp/ccz9e3Lv.s:329    .text.canIOset:0000000000000000 canIOset
     /tmp/ccz9e3Lv.s:368    .text.canIOset:0000000000000028 $d
                            *COM*:0000000000000010 vcu
                            *COM*:0000000000000018 txMsg
                            *COM*:0000000000000008 canTx
     /tmp/ccz9e3Lv.s:375    .text.canIOsend:0000000000000000 $t
     /tmp/ccz9e3Lv.s:382    .text.canIOsend:0000000000000000 canIOsend
     /tmp/ccz9e3Lv.s:412    .text.canIOsend:000000000000001c $d
     /tmp/ccz9e3Lv.s:419    .text.vcuInit:0000000000000000 $t
     /tmp/ccz9e3Lv.s:426    .text.vcuInit:0000000000000000 vcuInit
     /tmp/ccz9e3Lv.s:455    .text.vcuInit:000000000000001c $d
                            *COM*:000000000000000c ADC_data
     /tmp/ccz9e3Lv.s:461    .text.ioHandler:0000000000000000 $t
     /tmp/ccz9e3Lv.s:468    .text.ioHandler:0000000000000000 ioHandler
     /tmp/ccz9e3Lv.s:579    .text.ioHandler:0000000000000098 $d
     /tmp/ccz9e3Lv.s:587    .text.canSet:0000000000000000 $t
     /tmp/ccz9e3Lv.s:594    .text.canSet:0000000000000000 canSet
     /tmp/ccz9e3Lv.s:650    .text.canSet:0000000000000038 $d
     /tmp/ccz9e3Lv.s:656    .text.vcuState:0000000000000000 $t
     /tmp/ccz9e3Lv.s:663    .text.vcuState:0000000000000000 vcuState
     /tmp/ccz9e3Lv.s:682    .text.vcuState:0000000000000010 $d
     /tmp/ccz9e3Lv.s:888    .text.vcuState:000000000000013c $d
     /tmp/ccz9e3Lv.s:895    .text.regenHandler:0000000000000000 $t
     /tmp/ccz9e3Lv.s:902    .text.regenHandler:0000000000000000 regenHandler
     /tmp/ccz9e3Lv.s:967    .text.regenHandler:000000000000005c $d
     /tmp/ccz9e3Lv.s:974    .text.throttleHandler:0000000000000000 $t
     /tmp/ccz9e3Lv.s:981    .text.throttleHandler:0000000000000000 throttleHandler
     /tmp/ccz9e3Lv.s:1071   .text.throttleHandler:000000000000007c $d
                            *COM*:0000000000000004 tempdata
                            *COM*:0000000000000004 canDebug
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000008 canTx2
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
ARM GAS  /tmp/ccz9e3Lv.s 			page 29


                            *COM*:0000000000000028 hcan2
                            *COM*:0000000000000028 hcan1
                            *COM*:0000000000000001 tenderActive
                            *COM*:0000000000000004 time_now
                            *COM*:0000000000000004 period
                            *COM*:0000000000000004 DCDC
                            *COM*:0000000000000001 setPrevState
                            *COM*:000000000000000c te
                     .debug_frame:0000000000000010 $d
     /tmp/ccz9e3Lv.s:689    .text.vcuState:0000000000000017 $d
     /tmp/ccz9e3Lv.s:689    .text.vcuState:0000000000000018 $t

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_d2uiz
c1tx
HAL_GPIO_ReadPin
HAL_GPIO_WritePin
