ARM GAS  /tmp/cc9EvM0F.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"can_setup.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_CAN_RxFifo0MsgPendingCallback
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_CAN_RxFifo0MsgPendingCallback:
  24              	.LFB66:
  25              		.file 1 "Core/Src/can_setup.c"
   1:Core/Src/can_setup.c **** #include <can_setup.h>
   2:Core/Src/can_setup.c **** 
   3:Core/Src/can_setup.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
   4:Core/Src/can_setup.c **** 
   5:Core/Src/can_setup.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
   6:Core/Src/can_setup.c **** {
  26              		.loc 1 6 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 40
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 00B5     		push	{lr}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 14, -4
  34 0002 8BB0     		sub	sp, sp, #44
  35              		.cfi_def_cfa_offset 48
   7:Core/Src/can_setup.c **** 
   8:Core/Src/can_setup.c ****     CAN_RxHeaderTypeDef rxMsg;
   9:Core/Src/can_setup.c ****     uint8_t canRx[8];
  10:Core/Src/can_setup.c **** 
  11:Core/Src/can_setup.c ****     if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxMsg, canRx) != HAL_OK)
  36              		.loc 1 11 0
  37 0004 01AB     		add	r3, sp, #4
  38 0006 03AA     		add	r2, sp, #12
  39 0008 0021     		movs	r1, #0
  40 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
  41              	.LVL1:
  42 000e 50B9     		cbnz	r0, .L4
  43              	.L2:
  12:Core/Src/can_setup.c ****     {
  13:Core/Src/can_setup.c ****         Error_Handler();
  14:Core/Src/can_setup.c ****     }
  15:Core/Src/can_setup.c ****     //do stuff
ARM GAS  /tmp/cc9EvM0F.s 			page 2


  16:Core/Src/can_setup.c ****     decodeCAN(&rxMsg, canRx);
  44              		.loc 1 16 0
  45 0010 01A9     		add	r1, sp, #4
  46 0012 03A8     		add	r0, sp, #12
  47 0014 FFF7FEFF 		bl	decodeCAN
  48              	.LVL2:
  17:Core/Src/can_setup.c ****     getLidar(&rxMsg,canRx);
  49              		.loc 1 17 0
  50 0018 01A9     		add	r1, sp, #4
  51 001a 03A8     		add	r0, sp, #12
  52 001c FFF7FEFF 		bl	getLidar
  53              	.LVL3:
  18:Core/Src/can_setup.c ****     
  19:Core/Src/can_setup.c **** }
  54              		.loc 1 19 0
  55 0020 0BB0     		add	sp, sp, #44
  56              		.cfi_remember_state
  57              		.cfi_def_cfa_offset 4
  58              		@ sp needed
  59 0022 5DF804FB 		ldr	pc, [sp], #4
  60              	.L4:
  61              		.cfi_restore_state
  13:Core/Src/can_setup.c ****     }
  62              		.loc 1 13 0
  63 0026 FFF7FEFF 		bl	Error_Handler
  64              	.LVL4:
  65 002a F1E7     		b	.L2
  66              		.cfi_endproc
  67              	.LFE66:
  69              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
  70              		.align	1
  71              		.global	HAL_CAN_RxFifo1MsgPendingCallback
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu softvfp
  77              	HAL_CAN_RxFifo1MsgPendingCallback:
  78              	.LFB67:
  20:Core/Src/can_setup.c **** 
  21:Core/Src/can_setup.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  22:Core/Src/can_setup.c **** 
  23:Core/Src/can_setup.c **** void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2)
  24:Core/Src/can_setup.c **** {
  79              		.loc 1 24 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 40
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              	.LVL5:
  84 0000 00B5     		push	{lr}
  85              		.cfi_def_cfa_offset 4
  86              		.cfi_offset 14, -4
  87 0002 8BB0     		sub	sp, sp, #44
  88              		.cfi_def_cfa_offset 48
  25:Core/Src/can_setup.c **** 
  26:Core/Src/can_setup.c ****     CAN_RxHeaderTypeDef rxMsg2;
  27:Core/Src/can_setup.c ****     uint8_t canRx2[8];
  28:Core/Src/can_setup.c **** 
ARM GAS  /tmp/cc9EvM0F.s 			page 3


  29:Core/Src/can_setup.c ****     if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &rxMsg2, canRx2) != HAL_OK)
  89              		.loc 1 29 0
  90 0004 01AB     		add	r3, sp, #4
  91 0006 03AA     		add	r2, sp, #12
  92 0008 0121     		movs	r1, #1
  93 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
  94              	.LVL6:
  95 000e 50B9     		cbnz	r0, .L8
  96              	.L6:
  30:Core/Src/can_setup.c ****     {
  31:Core/Src/can_setup.c ****         Error_Handler();
  32:Core/Src/can_setup.c ****     }
  33:Core/Src/can_setup.c ****     //do stuff
  34:Core/Src/can_setup.c ****     getData(&rxMsg2, canRx2);
  97              		.loc 1 34 0
  98 0010 01A9     		add	r1, sp, #4
  99 0012 03A8     		add	r0, sp, #12
 100 0014 FFF7FEFF 		bl	getData
 101              	.LVL7:
  35:Core/Src/can_setup.c ****     getEvent(&rxMsg2, canRx2);
 102              		.loc 1 35 0
 103 0018 01A9     		add	r1, sp, #4
 104 001a 03A8     		add	r0, sp, #12
 105 001c FFF7FEFF 		bl	getEvent
 106              	.LVL8:
  36:Core/Src/can_setup.c ****     
  37:Core/Src/can_setup.c **** }
 107              		.loc 1 37 0
 108 0020 0BB0     		add	sp, sp, #44
 109              		.cfi_remember_state
 110              		.cfi_def_cfa_offset 4
 111              		@ sp needed
 112 0022 5DF804FB 		ldr	pc, [sp], #4
 113              	.L8:
 114              		.cfi_restore_state
  31:Core/Src/can_setup.c ****     }
 115              		.loc 1 31 0
 116 0026 FFF7FEFF 		bl	Error_Handler
 117              	.LVL9:
 118 002a F1E7     		b	.L6
 119              		.cfi_endproc
 120              	.LFE67:
 122              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 123              		.align	1
 124              		.global	HAL_CAN_ErrorCallback
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 128              		.fpu softvfp
 130              	HAL_CAN_ErrorCallback:
 131              	.LFB68:
  38:Core/Src/can_setup.c **** 
  39:Core/Src/can_setup.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  40:Core/Src/can_setup.c **** void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
  41:Core/Src/can_setup.c **** {
 132              		.loc 1 41 0
 133              		.cfi_startproc
ARM GAS  /tmp/cc9EvM0F.s 			page 4


 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 137              	.LVL10:
 138 0000 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE68:
 142              		.section	.text.canSettings,"ax",%progbits
 143              		.align	1
 144              		.global	canSettings
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu softvfp
 150              	canSettings:
 151              	.LFB69:
  42:Core/Src/can_setup.c ****   
  43:Core/Src/can_setup.c **** }
  44:Core/Src/can_setup.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  45:Core/Src/can_setup.c **** void canSettings(void)
  46:Core/Src/can_setup.c **** {
 152              		.loc 1 46 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		.loc 1 46 0
 157 0000 10B5     		push	{r4, lr}
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 4, -8
 160              		.cfi_offset 14, -4
  47:Core/Src/can_setup.c **** 
  48:Core/Src/can_setup.c ****     txMsg.IDE = CAN_ID_STD;
 161              		.loc 1 48 0
 162 0002 5C4A     		ldr	r2, .L28
 163 0004 0023     		movs	r3, #0
 164 0006 9360     		str	r3, [r2, #8]
  49:Core/Src/can_setup.c ****     txMsg.RTR = CAN_RTR_DATA;
 165              		.loc 1 49 0
 166 0008 D360     		str	r3, [r2, #12]
  50:Core/Src/can_setup.c ****     txMsg.TransmitGlobalTime = DISABLE;
 167              		.loc 1 50 0
 168 000a 1375     		strb	r3, [r2, #20]
  51:Core/Src/can_setup.c **** 
  52:Core/Src/can_setup.c ****     txMsgExt.IDE = CAN_ID_EXT;
 169              		.loc 1 52 0
 170 000c 5A4A     		ldr	r2, .L28+4
 171 000e 0421     		movs	r1, #4
 172 0010 9160     		str	r1, [r2, #8]
  53:Core/Src/can_setup.c ****     txMsgExt.RTR = CAN_RTR_DATA;
 173              		.loc 1 53 0
 174 0012 D360     		str	r3, [r2, #12]
  54:Core/Src/can_setup.c ****     txMsgExt.TransmitGlobalTime = DISABLE;
 175              		.loc 1 54 0
 176 0014 1375     		strb	r3, [r2, #20]
  55:Core/Src/can_setup.c **** 
  56:Core/Src/can_setup.c ****     sf.FilterBank = 0; // CAN1 Filter bank starts at 0
 177              		.loc 1 56 0
ARM GAS  /tmp/cc9EvM0F.s 			page 5


 178 0016 5949     		ldr	r1, .L28+8
 179 0018 4B61     		str	r3, [r1, #20]
  57:Core/Src/can_setup.c ****     sf.FilterMode = CAN_FILTERMODE_IDLIST;
 180              		.loc 1 57 0
 181 001a 0122     		movs	r2, #1
 182 001c 8A61     		str	r2, [r1, #24]
  58:Core/Src/can_setup.c ****     sf.FilterScale = CAN_FILTERSCALE_16BIT;
 183              		.loc 1 58 0
 184 001e CB61     		str	r3, [r1, #28]
  59:Core/Src/can_setup.c ****     sf.FilterIdLow = 0x1D6 << 5;      //DCDC DATA
 185              		.loc 1 59 0
 186 0020 4FF46B50 		mov	r0, #15040
 187 0024 4860     		str	r0, [r1, #4]
  60:Core/Src/can_setup.c ****     sf.FilterIdHigh = 0x04F << 5;      //LDU DIR BRAKE
 188              		.loc 1 60 0
 189 0026 4FF41E60 		mov	r0, #2528
 190 002a 0860     		str	r0, [r1]
  61:Core/Src/can_setup.c ****     sf.FilterMaskIdLow = 0x113 << 5;  //LDU POT1 POT2
 191              		.loc 1 61 0
 192 002c 42F26020 		movw	r0, #8800
 193 0030 C860     		str	r0, [r1, #12]
  62:Core/Src/can_setup.c ****     sf.FilterMaskIdHigh = 0x131 << 5; //LDU DIO
 194              		.loc 1 62 0
 195 0032 42F22060 		movw	r0, #9760
 196 0036 8860     		str	r0, [r1, #8]
  63:Core/Src/can_setup.c ****     sf.FilterFIFOAssignment = CAN_RX_FIFO0;
 197              		.loc 1 63 0
 198 0038 0B61     		str	r3, [r1, #16]
  64:Core/Src/can_setup.c ****     sf.SlaveStartFilterBank = 14;
 199              		.loc 1 64 0
 200 003a 0E23     		movs	r3, #14
 201 003c 4B62     		str	r3, [r1, #36]
  65:Core/Src/can_setup.c ****     sf.FilterActivation = ENABLE;
 202              		.loc 1 65 0
 203 003e 0A62     		str	r2, [r1, #32]
  66:Core/Src/can_setup.c ****     if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK)
 204              		.loc 1 66 0
 205 0040 4F48     		ldr	r0, .L28+12
 206 0042 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 207              	.LVL11:
 208 0046 0028     		cmp	r0, #0
 209 0048 7CD1     		bne	.L20
 210              	.L11:
  67:Core/Src/can_setup.c ****     {
  68:Core/Src/can_setup.c ****         Error_Handler();
  69:Core/Src/can_setup.c ****     }
  70:Core/Src/can_setup.c **** 
  71:Core/Src/can_setup.c ****     sf4.FilterBank = 1; // CAN1 Filter bank starts at 0
 211              		.loc 1 71 0
 212 004a 4E49     		ldr	r1, .L28+16
 213 004c 0123     		movs	r3, #1
 214 004e 4B61     		str	r3, [r1, #20]
  72:Core/Src/can_setup.c ****     sf4.FilterMode = CAN_FILTERMODE_IDLIST;
 215              		.loc 1 72 0
 216 0050 8B61     		str	r3, [r1, #24]
  73:Core/Src/can_setup.c ****     sf4.FilterScale = CAN_FILTERSCALE_16BIT;
 217              		.loc 1 73 0
ARM GAS  /tmp/cc9EvM0F.s 			page 6


 218 0052 0022     		movs	r2, #0
 219 0054 CA61     		str	r2, [r1, #28]
  74:Core/Src/can_setup.c ****     sf4.FilterIdLow = 0x135 << 5;      //LDU AMPS,RPM,HSTEMP,POTNOM
 220              		.loc 1 74 0
 221 0056 42F2A060 		movw	r0, #9888
 222 005a 4860     		str	r0, [r1, #4]
  75:Core/Src/can_setup.c ****     sf4.FilterIdHigh = 0x136 << 5;     //LDU PACK VOLT, RUN
 223              		.loc 1 75 0
 224 005c 4FF41B50 		mov	r0, #9920
 225 0060 0860     		str	r0, [r1]
  76:Core/Src/can_setup.c ****     sf4.FilterMaskIdLow = 0x138 << 5;  //BMS1
 226              		.loc 1 76 0
 227 0062 4FF41C50 		mov	r0, #9984
 228 0066 C860     		str	r0, [r1, #12]
  77:Core/Src/can_setup.c ****     sf4.FilterMaskIdHigh = 0x139 << 5; //BMS2
 229              		.loc 1 77 0
 230 0068 42F22070 		movw	r0, #10016
 231 006c 8860     		str	r0, [r1, #8]
  78:Core/Src/can_setup.c ****     sf4.FilterFIFOAssignment = CAN_RX_FIFO0;
 232              		.loc 1 78 0
 233 006e 0A61     		str	r2, [r1, #16]
  79:Core/Src/can_setup.c ****     sf4.SlaveStartFilterBank = 14;
 234              		.loc 1 79 0
 235 0070 0E22     		movs	r2, #14
 236 0072 4A62     		str	r2, [r1, #36]
  80:Core/Src/can_setup.c ****     sf4.FilterActivation = ENABLE;
 237              		.loc 1 80 0
 238 0074 0B62     		str	r3, [r1, #32]
  81:Core/Src/can_setup.c ****     if (HAL_CAN_ConfigFilter(&hcan1, &sf4) != HAL_OK)
 239              		.loc 1 81 0
 240 0076 4248     		ldr	r0, .L28+12
 241 0078 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 242              	.LVL12:
 243 007c 0028     		cmp	r0, #0
 244 007e 64D1     		bne	.L21
 245              	.L12:
  82:Core/Src/can_setup.c ****     {
  83:Core/Src/can_setup.c ****         Error_Handler();
  84:Core/Src/can_setup.c ****     }
  85:Core/Src/can_setup.c **** 
  86:Core/Src/can_setup.c ****     sf5.FilterBank = 2; // CAN1 Filter bank starts at 0
 246              		.loc 1 86 0
 247 0080 4149     		ldr	r1, .L28+20
 248 0082 0223     		movs	r3, #2
 249 0084 4B61     		str	r3, [r1, #20]
  87:Core/Src/can_setup.c ****     sf5.FilterMode = CAN_FILTERMODE_IDLIST;
 250              		.loc 1 87 0
 251 0086 0123     		movs	r3, #1
 252 0088 8B61     		str	r3, [r1, #24]
  88:Core/Src/can_setup.c ****     sf5.FilterScale = CAN_FILTERSCALE_16BIT;
 253              		.loc 1 88 0
 254 008a 0022     		movs	r2, #0
 255 008c CA61     		str	r2, [r1, #28]
  89:Core/Src/can_setup.c ****     sf5.FilterIdLow = 0x109 << 5;      //CHARGER STATUS
 256              		.loc 1 89 0
 257 008e 42F22010 		movw	r0, #8480
 258 0092 4860     		str	r0, [r1, #4]
ARM GAS  /tmp/cc9EvM0F.s 			page 7


  90:Core/Src/can_setup.c ****     sf5.FilterIdHigh = 0x38E << 5;     //IBOOST
 259              		.loc 1 90 0
 260 0094 47F2C010 		movw	r0, #29120
 261 0098 0860     		str	r0, [r1]
  91:Core/Src/can_setup.c ****     sf5.FilterMaskIdLow = 0x581 << 5;  //CANOPEN
 262              		.loc 1 91 0
 263 009a 4BF22000 		movw	r0, #45088
 264 009e C860     		str	r0, [r1, #12]
  92:Core/Src/can_setup.c ****     sf5.FilterMaskIdHigh = 0x601 << 5; //CANOPEN
 265              		.loc 1 92 0
 266 00a0 4CF22000 		movw	r0, #49184
 267 00a4 8860     		str	r0, [r1, #8]
  93:Core/Src/can_setup.c ****     sf5.FilterFIFOAssignment = CAN_RX_FIFO0;
 268              		.loc 1 93 0
 269 00a6 0A61     		str	r2, [r1, #16]
  94:Core/Src/can_setup.c ****     sf5.SlaveStartFilterBank = 14;
 270              		.loc 1 94 0
 271 00a8 0E22     		movs	r2, #14
 272 00aa 4A62     		str	r2, [r1, #36]
  95:Core/Src/can_setup.c ****     sf5.FilterActivation = ENABLE;
 273              		.loc 1 95 0
 274 00ac 0B62     		str	r3, [r1, #32]
  96:Core/Src/can_setup.c ****     if (HAL_CAN_ConfigFilter(&hcan1, &sf5) != HAL_OK)
 275              		.loc 1 96 0
 276 00ae 3448     		ldr	r0, .L28+12
 277 00b0 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 278              	.LVL13:
 279 00b4 0028     		cmp	r0, #0
 280 00b6 4BD1     		bne	.L22
 281              	.L13:
  97:Core/Src/can_setup.c ****     {
  98:Core/Src/can_setup.c ****         Error_Handler();
  99:Core/Src/can_setup.c ****     }
 100:Core/Src/can_setup.c ****     if (HAL_CAN_Start(&hcan1) != HAL_OK)
 282              		.loc 1 100 0
 283 00b8 3148     		ldr	r0, .L28+12
 284 00ba FFF7FEFF 		bl	HAL_CAN_Start
 285              	.LVL14:
 286 00be 0028     		cmp	r0, #0
 287 00c0 49D1     		bne	.L23
 288              	.L14:
 101:Core/Src/can_setup.c ****     {
 102:Core/Src/can_setup.c ****         Error_Handler();
 103:Core/Src/can_setup.c ****     }
 104:Core/Src/can_setup.c **** 
 105:Core/Src/can_setup.c ****     if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 289              		.loc 1 105 0
 290 00c2 0221     		movs	r1, #2
 291 00c4 2E48     		ldr	r0, .L28+12
 292 00c6 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 293              	.LVL15:
 294 00ca 0028     		cmp	r0, #0
 295 00cc 46D1     		bne	.L24
 296              	.L15:
 106:Core/Src/can_setup.c ****     {
 107:Core/Src/can_setup.c ****         Error_Handler();
 108:Core/Src/can_setup.c ****     }
ARM GAS  /tmp/cc9EvM0F.s 			page 8


 109:Core/Src/can_setup.c ****     HAL_NVIC_SetPriority(CAN1_TX_IRQn, 3, 0);
 297              		.loc 1 109 0
 298 00ce 0022     		movs	r2, #0
 299 00d0 0321     		movs	r1, #3
 300 00d2 1320     		movs	r0, #19
 301 00d4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 302              	.LVL16:
 110:Core/Src/can_setup.c ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 303              		.loc 1 110 0
 304 00d8 1320     		movs	r0, #19
 305 00da FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 306              	.LVL17:
 111:Core/Src/can_setup.c **** 
 112:Core/Src/can_setup.c ****     //hcan2
 113:Core/Src/can_setup.c ****     txMsg2.IDE = CAN_ID_STD;
 307              		.loc 1 113 0
 308 00de 2B4A     		ldr	r2, .L28+24
 309 00e0 0023     		movs	r3, #0
 310 00e2 9360     		str	r3, [r2, #8]
 114:Core/Src/can_setup.c ****     txMsg2.RTR = CAN_RTR_DATA;
 311              		.loc 1 114 0
 312 00e4 D360     		str	r3, [r2, #12]
 115:Core/Src/can_setup.c ****     txMsg2.TransmitGlobalTime = DISABLE;
 313              		.loc 1 115 0
 314 00e6 1375     		strb	r3, [r2, #20]
 116:Core/Src/can_setup.c **** 
 117:Core/Src/can_setup.c ****     txMsgExt2.IDE = CAN_ID_EXT;
 315              		.loc 1 117 0
 316 00e8 294A     		ldr	r2, .L28+28
 317 00ea 0421     		movs	r1, #4
 318 00ec 9160     		str	r1, [r2, #8]
 118:Core/Src/can_setup.c ****     txMsgExt2.RTR = CAN_RTR_DATA;
 319              		.loc 1 118 0
 320 00ee D360     		str	r3, [r2, #12]
 119:Core/Src/can_setup.c ****     txMsgExt2.TransmitGlobalTime = DISABLE;
 321              		.loc 1 119 0
 322 00f0 1375     		strb	r3, [r2, #20]
 120:Core/Src/can_setup.c **** 
 121:Core/Src/can_setup.c ****     sf2.FilterBank = 14; // CAN2 Filter bank starts at 14
 323              		.loc 1 121 0
 324 00f2 2849     		ldr	r1, .L28+32
 325 00f4 0E22     		movs	r2, #14
 326 00f6 4A61     		str	r2, [r1, #20]
 122:Core/Src/can_setup.c ****     sf2.FilterMode = CAN_FILTERMODE_IDLIST;
 327              		.loc 1 122 0
 328 00f8 0123     		movs	r3, #1
 329 00fa 8B61     		str	r3, [r1, #24]
 123:Core/Src/can_setup.c ****     sf2.FilterScale = CAN_FILTERSCALE_32BIT;
 330              		.loc 1 123 0
 331 00fc CB61     		str	r3, [r1, #28]
 124:Core/Src/can_setup.c ****     sf2.FilterIdLow = ((0x18FF11F2 << 3) & 0xFFF8) | 4; //ENCODER EVENT
 332              		.loc 1 124 0
 333 00fe 48F69470 		movw	r0, #36756
 334 0102 4860     		str	r0, [r1, #4]
 125:Core/Src/can_setup.c ****     sf2.FilterIdHigh = (0x18FF11F2 >> 13) & 0xFFFF;
 335              		.loc 1 125 0
 336 0104 4CF2F870 		movw	r0, #51192
ARM GAS  /tmp/cc9EvM0F.s 			page 9


 337 0108 0860     		str	r0, [r1]
 126:Core/Src/can_setup.c ****     sf2.FilterMaskIdLow = ((0x18FF0FF2 << 3) & 0xFFF8) | 4; //ENCODER DATA
 338              		.loc 1 126 0
 339 010a 47F69474 		movw	r4, #32660
 340 010e CC60     		str	r4, [r1, #12]
 127:Core/Src/can_setup.c ****     sf2.FilterMaskIdHigh = (0x18FF0FF2 >> 13) & 0xFFFF;
 341              		.loc 1 127 0
 342 0110 8860     		str	r0, [r1, #8]
 128:Core/Src/can_setup.c ****     sf2.FilterFIFOAssignment = CAN_RX_FIFO1;
 343              		.loc 1 128 0
 344 0112 0B61     		str	r3, [r1, #16]
 129:Core/Src/can_setup.c ****     sf2.SlaveStartFilterBank = 14;
 345              		.loc 1 129 0
 346 0114 4A62     		str	r2, [r1, #36]
 130:Core/Src/can_setup.c ****     sf2.FilterActivation = ENABLE;
 347              		.loc 1 130 0
 348 0116 0B62     		str	r3, [r1, #32]
 131:Core/Src/can_setup.c ****     if (HAL_CAN_ConfigFilter(&hcan2, &sf2) != HAL_OK)
 349              		.loc 1 131 0
 350 0118 1F48     		ldr	r0, .L28+36
 351 011a FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 352              	.LVL18:
 353 011e 00BB     		cbnz	r0, .L25
 354              	.L16:
 132:Core/Src/can_setup.c ****     {
 133:Core/Src/can_setup.c ****         Error_Handler();
 134:Core/Src/can_setup.c ****     }
 135:Core/Src/can_setup.c **** 
 136:Core/Src/can_setup.c ****     if (HAL_CAN_Start(&hcan2) != HAL_OK)
 355              		.loc 1 136 0
 356 0120 1D48     		ldr	r0, .L28+36
 357 0122 FFF7FEFF 		bl	HAL_CAN_Start
 358              	.LVL19:
 359 0126 F8B9     		cbnz	r0, .L26
 360              	.L17:
 137:Core/Src/can_setup.c ****     {
 138:Core/Src/can_setup.c ****         Error_Handler();
 139:Core/Src/can_setup.c ****     }
 140:Core/Src/can_setup.c **** 
 141:Core/Src/can_setup.c ****     if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 361              		.loc 1 141 0
 362 0128 1021     		movs	r1, #16
 363 012a 1B48     		ldr	r0, .L28+36
 364 012c FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 365              	.LVL20:
 366 0130 E8B9     		cbnz	r0, .L27
 367              	.L18:
 142:Core/Src/can_setup.c ****     {
 143:Core/Src/can_setup.c ****         Error_Handler();
 144:Core/Src/can_setup.c ****     }
 145:Core/Src/can_setup.c ****     HAL_NVIC_SetPriority(CAN2_TX_IRQn, 3, 0);
 368              		.loc 1 145 0
 369 0132 0022     		movs	r2, #0
 370 0134 0321     		movs	r1, #3
 371 0136 3F20     		movs	r0, #63
 372 0138 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 373              	.LVL21:
ARM GAS  /tmp/cc9EvM0F.s 			page 10


 146:Core/Src/can_setup.c ****     HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 374              		.loc 1 146 0
 375 013c 3F20     		movs	r0, #63
 376 013e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 377              	.LVL22:
 378 0142 10BD     		pop	{r4, pc}
 379              	.L20:
  68:Core/Src/can_setup.c ****     }
 380              		.loc 1 68 0
 381 0144 FFF7FEFF 		bl	Error_Handler
 382              	.LVL23:
 383 0148 7FE7     		b	.L11
 384              	.L21:
  83:Core/Src/can_setup.c ****     }
 385              		.loc 1 83 0
 386 014a FFF7FEFF 		bl	Error_Handler
 387              	.LVL24:
 388 014e 97E7     		b	.L12
 389              	.L22:
  98:Core/Src/can_setup.c ****     }
 390              		.loc 1 98 0
 391 0150 FFF7FEFF 		bl	Error_Handler
 392              	.LVL25:
 393 0154 B0E7     		b	.L13
 394              	.L23:
 102:Core/Src/can_setup.c ****     }
 395              		.loc 1 102 0
 396 0156 FFF7FEFF 		bl	Error_Handler
 397              	.LVL26:
 398 015a B2E7     		b	.L14
 399              	.L24:
 107:Core/Src/can_setup.c ****     }
 400              		.loc 1 107 0
 401 015c FFF7FEFF 		bl	Error_Handler
 402              	.LVL27:
 403 0160 B5E7     		b	.L15
 404              	.L25:
 133:Core/Src/can_setup.c ****     }
 405              		.loc 1 133 0
 406 0162 FFF7FEFF 		bl	Error_Handler
 407              	.LVL28:
 408 0166 DBE7     		b	.L16
 409              	.L26:
 138:Core/Src/can_setup.c ****     }
 410              		.loc 1 138 0
 411 0168 FFF7FEFF 		bl	Error_Handler
 412              	.LVL29:
 413 016c DCE7     		b	.L17
 414              	.L27:
 143:Core/Src/can_setup.c ****     }
 415              		.loc 1 143 0
 416 016e FFF7FEFF 		bl	Error_Handler
 417              	.LVL30:
 418 0172 DEE7     		b	.L18
 419              	.L29:
 420              		.align	2
 421              	.L28:
ARM GAS  /tmp/cc9EvM0F.s 			page 11


 422 0174 00000000 		.word	txMsg
 423 0178 00000000 		.word	txMsgExt
 424 017c 00000000 		.word	sf
 425 0180 00000000 		.word	hcan1
 426 0184 00000000 		.word	sf4
 427 0188 00000000 		.word	sf5
 428 018c 00000000 		.word	txMsg2
 429 0190 00000000 		.word	txMsgExt2
 430 0194 00000000 		.word	sf2
 431 0198 00000000 		.word	hcan2
 432              		.cfi_endproc
 433              	.LFE69:
 435              		.section	.text.printCAN1,"ax",%progbits
 436              		.align	1
 437              		.global	printCAN1
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu softvfp
 443              	printCAN1:
 444              	.LFB70:
 147:Core/Src/can_setup.c **** }
 148:Core/Src/can_setup.c **** 
 149:Core/Src/can_setup.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 150:Core/Src/can_setup.c **** 
 151:Core/Src/can_setup.c **** void printCAN1(CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx)
 152:Core/Src/can_setup.c **** {
 445              		.loc 1 152 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              	.LVL31:
 450 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 451              		.cfi_def_cfa_offset 24
 452              		.cfi_offset 4, -24
 453              		.cfi_offset 5, -20
 454              		.cfi_offset 6, -16
 455              		.cfi_offset 7, -12
 456              		.cfi_offset 8, -8
 457              		.cfi_offset 14, -4
 458 0004 0E46     		mov	r6, r1
 153:Core/Src/can_setup.c **** 
 154:Core/Src/can_setup.c ****     uint16_t ID = (rxMsg->StdId);
 459              		.loc 1 154 0
 460 0006 0768     		ldr	r7, [r0]
 461              	.LVL32:
 155:Core/Src/can_setup.c ****     uint64_t xID = (rxMsg->ExtId);
 462              		.loc 1 155 0
 463 0008 D0F80480 		ldr	r8, [r0, #4]
 464              	.LVL33:
 156:Core/Src/can_setup.c ****     int IDE = (rxMsg->IDE);
 465              		.loc 1 156 0
 466 000c 8468     		ldr	r4, [r0, #8]
 467              	.LVL34:
 157:Core/Src/can_setup.c ****     int dataLength = (rxMsg->DLC);
 468              		.loc 1 157 0
 469 000e 0569     		ldr	r5, [r0, #16]
ARM GAS  /tmp/cc9EvM0F.s 			page 12


 470              	.LVL35:
 158:Core/Src/can_setup.c **** 
 159:Core/Src/can_setup.c ****     printf("\r\n");
 471              		.loc 1 159 0
 472 0010 1248     		ldr	r0, .L38
 473              	.LVL36:
 474 0012 FFF7FEFF 		bl	puts
 475              	.LVL37:
 160:Core/Src/can_setup.c **** 
 161:Core/Src/can_setup.c ****     if (IDE == 0)
 476              		.loc 1 161 0
 477 0016 3CB1     		cbz	r4, .L36
 162:Core/Src/can_setup.c ****     {
 163:Core/Src/can_setup.c ****         printf("CAN_1, %ld, 0x%.3X,", HAL_GetTick(), ID);
 164:Core/Src/can_setup.c ****     }
 165:Core/Src/can_setup.c ****     else if (IDE == 4)
 478              		.loc 1 165 0
 479 0018 042C     		cmp	r4, #4
 480 001a 0DD0     		beq	.L37
 481              	.L32:
 166:Core/Src/can_setup.c ****     {
 167:Core/Src/can_setup.c ****         printf("CAN_1, %ld, 0x%.8llX,", HAL_GetTick(), xID);
 168:Core/Src/can_setup.c ****     }
 169:Core/Src/can_setup.c ****     printf("%d,", dataLength);
 482              		.loc 1 169 0
 483 001c 2946     		mov	r1, r5
 484 001e 1048     		ldr	r0, .L38+4
 485 0020 FFF7FEFF 		bl	printf
 486              	.LVL38:
 487              	.LBB2:
 170:Core/Src/can_setup.c **** 
 171:Core/Src/can_setup.c ****     for (int i = 0; i < dataLength; i++)
 488              		.loc 1 171 0
 489 0024 0024     		movs	r4, #0
 490              	.LVL39:
 491 0026 15E0     		b	.L33
 492              	.LVL40:
 493              	.L36:
 494              	.LBE2:
 163:Core/Src/can_setup.c ****     }
 495              		.loc 1 163 0
 496 0028 FFF7FEFF 		bl	HAL_GetTick
 497              	.LVL41:
 498 002c BAB2     		uxth	r2, r7
 499 002e 0146     		mov	r1, r0
 500 0030 0C48     		ldr	r0, .L38+8
 501 0032 FFF7FEFF 		bl	printf
 502              	.LVL42:
 503 0036 F1E7     		b	.L32
 504              	.L37:
 167:Core/Src/can_setup.c ****     }
 505              		.loc 1 167 0
 506 0038 FFF7FEFF 		bl	HAL_GetTick
 507              	.LVL43:
 508 003c 4246     		mov	r2, r8
 509 003e 0023     		movs	r3, #0
 510 0040 0146     		mov	r1, r0
ARM GAS  /tmp/cc9EvM0F.s 			page 13


 511 0042 0948     		ldr	r0, .L38+12
 512 0044 FFF7FEFF 		bl	printf
 513              	.LVL44:
 514 0048 E8E7     		b	.L32
 515              	.LVL45:
 516              	.L34:
 517              	.LBB3:
 172:Core/Src/can_setup.c ****         printf(" ,0x%.2X", canRx[i]);
 518              		.loc 1 172 0 discriminator 3
 519 004a 315D     		ldrb	r1, [r6, r4]	@ zero_extendqisi2
 520 004c 0748     		ldr	r0, .L38+16
 521 004e FFF7FEFF 		bl	printf
 522              	.LVL46:
 171:Core/Src/can_setup.c ****         printf(" ,0x%.2X", canRx[i]);
 523              		.loc 1 171 0 discriminator 3
 524 0052 0134     		adds	r4, r4, #1
 525              	.LVL47:
 526              	.L33:
 171:Core/Src/can_setup.c ****         printf(" ,0x%.2X", canRx[i]);
 527              		.loc 1 171 0 is_stmt 0 discriminator 1
 528 0054 AC42     		cmp	r4, r5
 529 0056 F8DB     		blt	.L34
 530              	.LBE3:
 173:Core/Src/can_setup.c **** }
 531              		.loc 1 173 0 is_stmt 1
 532 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 533              	.LVL48:
 534              	.L39:
 535              		.align	2
 536              	.L38:
 537 005c 00000000 		.word	.LC0
 538 0060 30000000 		.word	.LC3
 539 0064 04000000 		.word	.LC1
 540 0068 18000000 		.word	.LC2
 541 006c 34000000 		.word	.LC4
 542              		.cfi_endproc
 543              	.LFE70:
 545              		.section	.text.printCAN2,"ax",%progbits
 546              		.align	1
 547              		.global	printCAN2
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 551              		.fpu softvfp
 553              	printCAN2:
 554              	.LFB71:
 174:Core/Src/can_setup.c **** 
 175:Core/Src/can_setup.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 176:Core/Src/can_setup.c **** 
 177:Core/Src/can_setup.c **** void printCAN2(CAN_RxHeaderTypeDef *rxMsg2, uint8_t *canRx2)
 178:Core/Src/can_setup.c **** {
 555              		.loc 1 178 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              	.LVL49:
 560 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/cc9EvM0F.s 			page 14


 561              		.cfi_def_cfa_offset 24
 562              		.cfi_offset 3, -24
 563              		.cfi_offset 4, -20
 564              		.cfi_offset 5, -16
 565              		.cfi_offset 6, -12
 566              		.cfi_offset 7, -8
 567              		.cfi_offset 14, -4
 179:Core/Src/can_setup.c **** 
 180:Core/Src/can_setup.c ****     uint16_t ID = (rxMsg2->StdId);
 568              		.loc 1 180 0
 569 0002 0668     		ldr	r6, [r0]
 570              	.LVL50:
 181:Core/Src/can_setup.c ****     uint64_t xID = (rxMsg2->ExtId);
 571              		.loc 1 181 0
 572 0004 4768     		ldr	r7, [r0, #4]
 573              	.LVL51:
 182:Core/Src/can_setup.c ****     int IDE = (rxMsg2->IDE);
 574              		.loc 1 182 0
 575 0006 8468     		ldr	r4, [r0, #8]
 576              	.LVL52:
 183:Core/Src/can_setup.c ****     int dataLength = (rxMsg2->DLC);
 577              		.loc 1 183 0
 578 0008 0569     		ldr	r5, [r0, #16]
 579              	.LVL53:
 184:Core/Src/can_setup.c **** 
 185:Core/Src/can_setup.c ****     printf("\r\n");
 580              		.loc 1 185 0
 581 000a 1348     		ldr	r0, .L48
 582              	.LVL54:
 583 000c FFF7FEFF 		bl	puts
 584              	.LVL55:
 186:Core/Src/can_setup.c ****     if (IDE == 0)
 585              		.loc 1 186 0
 586 0010 3CB1     		cbz	r4, .L46
 187:Core/Src/can_setup.c ****     {
 188:Core/Src/can_setup.c ****         printf("CAN_2, %ld, 0x%.3X,", HAL_GetTick(), ID);
 189:Core/Src/can_setup.c ****     }
 190:Core/Src/can_setup.c ****     else if (IDE == 4)
 587              		.loc 1 190 0
 588 0012 042C     		cmp	r4, #4
 589 0014 0DD0     		beq	.L47
 590              	.L42:
 191:Core/Src/can_setup.c ****     {
 192:Core/Src/can_setup.c ****         printf("CAN_2, %ld, 0x%.8llX,", HAL_GetTick(), xID);
 193:Core/Src/can_setup.c ****     }
 194:Core/Src/can_setup.c ****     printf("%d,", dataLength);
 591              		.loc 1 194 0
 592 0016 2946     		mov	r1, r5
 593 0018 1048     		ldr	r0, .L48+4
 594 001a FFF7FEFF 		bl	printf
 595              	.LVL56:
 596              	.LBB4:
 195:Core/Src/can_setup.c **** 
 196:Core/Src/can_setup.c ****     for (int i = 0; i < dataLength; i++)
 597              		.loc 1 196 0
 598 001e 0024     		movs	r4, #0
 599              	.LVL57:
ARM GAS  /tmp/cc9EvM0F.s 			page 15


 600 0020 16E0     		b	.L43
 601              	.LVL58:
 602              	.L46:
 603              	.LBE4:
 188:Core/Src/can_setup.c ****     }
 604              		.loc 1 188 0
 605 0022 FFF7FEFF 		bl	HAL_GetTick
 606              	.LVL59:
 607 0026 B2B2     		uxth	r2, r6
 608 0028 0146     		mov	r1, r0
 609 002a 0D48     		ldr	r0, .L48+8
 610 002c FFF7FEFF 		bl	printf
 611              	.LVL60:
 612 0030 F1E7     		b	.L42
 613              	.L47:
 192:Core/Src/can_setup.c ****     }
 614              		.loc 1 192 0
 615 0032 FFF7FEFF 		bl	HAL_GetTick
 616              	.LVL61:
 617 0036 3A46     		mov	r2, r7
 618 0038 0023     		movs	r3, #0
 619 003a 0146     		mov	r1, r0
 620 003c 0948     		ldr	r0, .L48+12
 621 003e FFF7FEFF 		bl	printf
 622              	.LVL62:
 623 0042 E8E7     		b	.L42
 624              	.LVL63:
 625              	.L44:
 626              	.LBB5:
 197:Core/Src/can_setup.c ****         printf(" ,0x%.2X", canRx[i]);
 627              		.loc 1 197 0 discriminator 3
 628 0044 084B     		ldr	r3, .L48+16
 629 0046 195D     		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 630 0048 0848     		ldr	r0, .L48+20
 631 004a FFF7FEFF 		bl	printf
 632              	.LVL64:
 196:Core/Src/can_setup.c ****         printf(" ,0x%.2X", canRx[i]);
 633              		.loc 1 196 0 discriminator 3
 634 004e 0134     		adds	r4, r4, #1
 635              	.LVL65:
 636              	.L43:
 196:Core/Src/can_setup.c ****         printf(" ,0x%.2X", canRx[i]);
 637              		.loc 1 196 0 is_stmt 0 discriminator 1
 638 0050 AC42     		cmp	r4, r5
 639 0052 F7DB     		blt	.L44
 640              	.LBE5:
 198:Core/Src/can_setup.c **** }
 641              		.loc 1 198 0 is_stmt 1
 642 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 643              	.LVL66:
 644              	.L49:
 645 0056 00BF     		.align	2
 646              	.L48:
 647 0058 00000000 		.word	.LC0
 648 005c 30000000 		.word	.LC3
 649 0060 00000000 		.word	.LC5
 650 0064 14000000 		.word	.LC6
ARM GAS  /tmp/cc9EvM0F.s 			page 16


 651 0068 00000000 		.word	canRx
 652 006c 34000000 		.word	.LC4
 653              		.cfi_endproc
 654              	.LFE71:
 656              		.section	.text.c1tx,"ax",%progbits
 657              		.align	1
 658              		.global	c1tx
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu softvfp
 664              	c1tx:
 665              	.LFB72:
 199:Core/Src/can_setup.c **** 
 200:Core/Src/can_setup.c **** 
 201:Core/Src/can_setup.c **** 
 202:Core/Src/can_setup.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 203:Core/Src/can_setup.c **** void c1tx(CAN_TxHeaderTypeDef *txMsg, uint8_t *canTx)
 204:Core/Src/can_setup.c **** {
 666              		.loc 1 204 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670              	.LVL67:
 671 0000 08B5     		push	{r3, lr}
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 3, -8
 674              		.cfi_offset 14, -4
 205:Core/Src/can_setup.c **** 
 206:Core/Src/can_setup.c ****     HAL_CAN_AddTxMessage(&hcan1, txMsg, canTx, &canMailbox);
 675              		.loc 1 206 0
 676 0002 094B     		ldr	r3, .L53
 677 0004 0A46     		mov	r2, r1
 678 0006 0146     		mov	r1, r0
 679              	.LVL68:
 680 0008 0848     		ldr	r0, .L53+4
 681              	.LVL69:
 682 000a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 683              	.LVL70:
 207:Core/Src/can_setup.c ****     txCycle++;
 684              		.loc 1 207 0
 685 000e 084A     		ldr	r2, .L53+8
 686 0010 1368     		ldr	r3, [r2]
 687 0012 0133     		adds	r3, r3, #1
 688 0014 1360     		str	r3, [r2]
 208:Core/Src/can_setup.c ****     if (txCycle >= 2)
 689              		.loc 1 208 0
 690 0016 012B     		cmp	r3, #1
 691 0018 05DD     		ble	.L50
 209:Core/Src/can_setup.c ****     {
 210:Core/Src/can_setup.c ****         HAL_Delay(1);
 692              		.loc 1 210 0
 693 001a 0120     		movs	r0, #1
 694 001c FFF7FEFF 		bl	HAL_Delay
 695              	.LVL71:
 211:Core/Src/can_setup.c ****         txCycle = 0;
 696              		.loc 1 211 0
ARM GAS  /tmp/cc9EvM0F.s 			page 17


 697 0020 0022     		movs	r2, #0
 698 0022 034B     		ldr	r3, .L53+8
 699 0024 1A60     		str	r2, [r3]
 700              	.L50:
 701 0026 08BD     		pop	{r3, pc}
 702              	.L54:
 703              		.align	2
 704              	.L53:
 705 0028 00000000 		.word	canMailbox
 706 002c 00000000 		.word	hcan1
 707 0030 00000000 		.word	txCycle
 708              		.cfi_endproc
 709              	.LFE72:
 711              		.section	.text.c2tx,"ax",%progbits
 712              		.align	1
 713              		.global	c2tx
 714              		.syntax unified
 715              		.thumb
 716              		.thumb_func
 717              		.fpu softvfp
 719              	c2tx:
 720              	.LFB73:
 212:Core/Src/can_setup.c ****     }
 213:Core/Src/can_setup.c **** }
 214:Core/Src/can_setup.c **** 
 215:Core/Src/can_setup.c **** void c2tx(CAN_TxHeaderTypeDef *txMsg2, uint8_t *canTx2)
 216:Core/Src/can_setup.c **** {
 721              		.loc 1 216 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725              	.LVL72:
 726 0000 08B5     		push	{r3, lr}
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 3, -8
 729              		.cfi_offset 14, -4
 217:Core/Src/can_setup.c **** 
 218:Core/Src/can_setup.c ****     HAL_CAN_AddTxMessage(&hcan2, txMsg2, canTx2, &canMailbox2);
 730              		.loc 1 218 0
 731 0002 094B     		ldr	r3, .L58
 732 0004 0A46     		mov	r2, r1
 733 0006 0146     		mov	r1, r0
 734              	.LVL73:
 735 0008 0848     		ldr	r0, .L58+4
 736              	.LVL74:
 737 000a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 738              	.LVL75:
 219:Core/Src/can_setup.c ****     txCycle2++;
 739              		.loc 1 219 0
 740 000e 084A     		ldr	r2, .L58+8
 741 0010 1368     		ldr	r3, [r2]
 742 0012 0133     		adds	r3, r3, #1
 743 0014 1360     		str	r3, [r2]
 220:Core/Src/can_setup.c ****     if (txCycle2 >= 2)
 744              		.loc 1 220 0
 745 0016 012B     		cmp	r3, #1
 746 0018 05DD     		ble	.L55
ARM GAS  /tmp/cc9EvM0F.s 			page 18


 221:Core/Src/can_setup.c ****     {
 222:Core/Src/can_setup.c ****         HAL_Delay(1);
 747              		.loc 1 222 0
 748 001a 0120     		movs	r0, #1
 749 001c FFF7FEFF 		bl	HAL_Delay
 750              	.LVL76:
 223:Core/Src/can_setup.c ****         txCycle2 = 0;
 751              		.loc 1 223 0
 752 0020 0022     		movs	r2, #0
 753 0022 034B     		ldr	r3, .L58+8
 754 0024 1A60     		str	r2, [r3]
 755              	.L55:
 756 0026 08BD     		pop	{r3, pc}
 757              	.L59:
 758              		.align	2
 759              	.L58:
 760 0028 00000000 		.word	canMailbox2
 761 002c 00000000 		.word	hcan2
 762 0030 00000000 		.word	txCycle2
 763              		.cfi_endproc
 764              	.LFE73:
 766              		.section	.text.c1txExt,"ax",%progbits
 767              		.align	1
 768              		.global	c1txExt
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 772              		.fpu softvfp
 774              	c1txExt:
 775              	.LFB74:
 224:Core/Src/can_setup.c ****     }
 225:Core/Src/can_setup.c **** }
 226:Core/Src/can_setup.c **** 
 227:Core/Src/can_setup.c **** void c1txExt(CAN_TxHeaderTypeDef *txMsgExt, uint8_t *canTx)
 228:Core/Src/can_setup.c **** {
 776              		.loc 1 228 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              	.LVL77:
 781 0000 08B5     		push	{r3, lr}
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 3, -8
 784              		.cfi_offset 14, -4
 229:Core/Src/can_setup.c **** 
 230:Core/Src/can_setup.c ****     HAL_CAN_AddTxMessage(&hcan1, txMsgExt, canTx, &canMailbox);
 785              		.loc 1 230 0
 786 0002 094B     		ldr	r3, .L63
 787 0004 0A46     		mov	r2, r1
 788 0006 0146     		mov	r1, r0
 789              	.LVL78:
 790 0008 0848     		ldr	r0, .L63+4
 791              	.LVL79:
 792 000a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 793              	.LVL80:
 231:Core/Src/can_setup.c ****     txCycle++;
 794              		.loc 1 231 0
ARM GAS  /tmp/cc9EvM0F.s 			page 19


 795 000e 084A     		ldr	r2, .L63+8
 796 0010 1368     		ldr	r3, [r2]
 797 0012 0133     		adds	r3, r3, #1
 798 0014 1360     		str	r3, [r2]
 232:Core/Src/can_setup.c ****     if (txCycle >= 2)
 799              		.loc 1 232 0
 800 0016 012B     		cmp	r3, #1
 801 0018 05DD     		ble	.L60
 233:Core/Src/can_setup.c ****     {
 234:Core/Src/can_setup.c ****         HAL_Delay(1);
 802              		.loc 1 234 0
 803 001a 0120     		movs	r0, #1
 804 001c FFF7FEFF 		bl	HAL_Delay
 805              	.LVL81:
 235:Core/Src/can_setup.c ****         txCycle = 0;
 806              		.loc 1 235 0
 807 0020 0022     		movs	r2, #0
 808 0022 034B     		ldr	r3, .L63+8
 809 0024 1A60     		str	r2, [r3]
 810              	.L60:
 811 0026 08BD     		pop	{r3, pc}
 812              	.L64:
 813              		.align	2
 814              	.L63:
 815 0028 00000000 		.word	canMailbox
 816 002c 00000000 		.word	hcan1
 817 0030 00000000 		.word	txCycle
 818              		.cfi_endproc
 819              	.LFE74:
 821              		.section	.text.c2txExt,"ax",%progbits
 822              		.align	1
 823              		.global	c2txExt
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu softvfp
 829              	c2txExt:
 830              	.LFB75:
 236:Core/Src/can_setup.c ****     }
 237:Core/Src/can_setup.c **** }
 238:Core/Src/can_setup.c **** 
 239:Core/Src/can_setup.c **** void c2txExt(CAN_TxHeaderTypeDef *txMsg2Ext, uint8_t *canTx2)
 240:Core/Src/can_setup.c **** {
 831              		.loc 1 240 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              	.LVL82:
 836 0000 08B5     		push	{r3, lr}
 837              		.cfi_def_cfa_offset 8
 838              		.cfi_offset 3, -8
 839              		.cfi_offset 14, -4
 241:Core/Src/can_setup.c **** 
 242:Core/Src/can_setup.c ****     HAL_CAN_AddTxMessage(&hcan2, txMsg2Ext, canTx2, &canMailbox2);
 840              		.loc 1 242 0
 841 0002 094B     		ldr	r3, .L68
 842 0004 0A46     		mov	r2, r1
ARM GAS  /tmp/cc9EvM0F.s 			page 20


 843 0006 0146     		mov	r1, r0
 844              	.LVL83:
 845 0008 0848     		ldr	r0, .L68+4
 846              	.LVL84:
 847 000a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 848              	.LVL85:
 243:Core/Src/can_setup.c ****     txCycle2++;
 849              		.loc 1 243 0
 850 000e 084A     		ldr	r2, .L68+8
 851 0010 1368     		ldr	r3, [r2]
 852 0012 0133     		adds	r3, r3, #1
 853 0014 1360     		str	r3, [r2]
 244:Core/Src/can_setup.c ****     if (txCycle2 >= 2)
 854              		.loc 1 244 0
 855 0016 012B     		cmp	r3, #1
 856 0018 05DD     		ble	.L65
 245:Core/Src/can_setup.c ****     {
 246:Core/Src/can_setup.c ****         HAL_Delay(1);
 857              		.loc 1 246 0
 858 001a 0120     		movs	r0, #1
 859 001c FFF7FEFF 		bl	HAL_Delay
 860              	.LVL86:
 247:Core/Src/can_setup.c ****         txCycle2 = 0;
 861              		.loc 1 247 0
 862 0020 0022     		movs	r2, #0
 863 0022 034B     		ldr	r3, .L68+8
 864 0024 1A60     		str	r2, [r3]
 865              	.L65:
 866 0026 08BD     		pop	{r3, pc}
 867              	.L69:
 868              		.align	2
 869              	.L68:
 870 0028 00000000 		.word	canMailbox2
 871 002c 00000000 		.word	hcan2
 872 0030 00000000 		.word	txCycle2
 873              		.cfi_endproc
 874              	.LFE75:
 876              		.comm	canDebug,4,4
 877              		.comm	txCycle2,4,4
 878              		.comm	txCycle,4,4
 879              		.comm	canTx2,8,4
 880              		.comm	canTx,8,4
 881              		.comm	canMailbox2,4,4
 882              		.comm	canMailbox,4,4
 883              		.comm	canRx2,8,4
 884              		.comm	canRx,8,4
 885              		.comm	txMsgExt2,24,4
 886              		.comm	txMsg2,24,4
 887              		.comm	rxMsg2,28,4
 888              		.comm	txMsgExt,24,4
 889              		.comm	txMsg,24,4
 890              		.comm	rxMsg,28,4
 891              		.comm	sf5,40,4
 892              		.comm	sf4,40,4
 893              		.comm	sf3,40,4
 894              		.comm	sf2,40,4
 895              		.comm	sf,40,4
ARM GAS  /tmp/cc9EvM0F.s 			page 21


 896              		.comm	hcan2,40,4
 897              		.comm	hcan1,40,4
 898              		.comm	LIDAR,8,4
 899              		.comm	te,12,4
 900              		.comm	BMS,20,4
 901              		.comm	charger,3,4
 902              		.comm	vcu,7,4
 903              		.comm	iboost,2,4
 904              		.comm	ldu,18,4
 905              		.comm	tempdata,4,4
 906              		.comm	ADC_data,12,4
 907              		.comm	tenderActive,1,1
 908              		.comm	time_now,4,4
 909              		.comm	period,4,4
 910              		.comm	DCDC,4,4
 911              		.section	.rodata.printCAN1.str1.4,"aMS",%progbits,1
 912              		.align	2
 913              	.LC0:
 914 0000 0D00     		.ascii	"\015\000"
 915 0002 0000     		.space	2
 916              	.LC1:
 917 0004 43414E5F 		.ascii	"CAN_1, %ld, 0x%.3X,\000"
 917      312C2025 
 917      6C642C20 
 917      3078252E 
 917      33582C00 
 918              	.LC2:
 919 0018 43414E5F 		.ascii	"CAN_1, %ld, 0x%.8llX,\000"
 919      312C2025 
 919      6C642C20 
 919      3078252E 
 919      386C6C58 
 920 002e 0000     		.space	2
 921              	.LC3:
 922 0030 25642C00 		.ascii	"%d,\000"
 923              	.LC4:
 924 0034 202C3078 		.ascii	" ,0x%.2X\000"
 924      252E3258 
 924      00
 925              		.section	.rodata.printCAN2.str1.4,"aMS",%progbits,1
 926              		.align	2
 927              	.LC5:
 928 0000 43414E5F 		.ascii	"CAN_2, %ld, 0x%.3X,\000"
 928      322C2025 
 928      6C642C20 
 928      3078252E 
 928      33582C00 
 929              	.LC6:
 930 0014 43414E5F 		.ascii	"CAN_2, %ld, 0x%.8llX,\000"
 930      322C2025 
 930      6C642C20 
 930      3078252E 
 930      386C6C58 
 931              		.text
 932              	.Letext0:
 933              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 934              		.file 3 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/cc9EvM0F.s 			page 22


 935              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 936              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 937              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 938              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 939              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 940              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 941              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 942              		.file 11 "/usr/include/newlib/sys/lock.h"
 943              		.file 12 "/usr/include/newlib/sys/_types.h"
 944              		.file 13 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 945              		.file 14 "/usr/include/newlib/sys/reent.h"
 946              		.file 15 "Core/Inc/dcdc.h"
 947              		.file 16 "Core/Inc/vcu.h"
 948              		.file 17 "Core/Inc/encoder.h"
 949              		.file 18 "Core/Inc/lidar.h"
 950              		.file 19 "Core/Inc/can_setup.h"
 951              		.file 20 "/usr/include/newlib/stdio.h"
 952              		.file 21 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 953              		.file 22 "Core/Inc/main.h"
 954              		.file 23 "<built-in>"
ARM GAS  /tmp/cc9EvM0F.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 can_setup.c
     /tmp/cc9EvM0F.s:16     .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cc9EvM0F.s:23     .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cc9EvM0F.s:70     .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/cc9EvM0F.s:77     .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/cc9EvM0F.s:123    .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/cc9EvM0F.s:130    .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/cc9EvM0F.s:143    .text.canSettings:0000000000000000 $t
     /tmp/cc9EvM0F.s:150    .text.canSettings:0000000000000000 canSettings
     /tmp/cc9EvM0F.s:422    .text.canSettings:0000000000000174 $d
                            *COM*:0000000000000018 txMsg
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000028 sf
                            *COM*:0000000000000028 hcan1
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000018 txMsg2
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 hcan2
     /tmp/cc9EvM0F.s:436    .text.printCAN1:0000000000000000 $t
     /tmp/cc9EvM0F.s:443    .text.printCAN1:0000000000000000 printCAN1
     /tmp/cc9EvM0F.s:537    .text.printCAN1:000000000000005c $d
     /tmp/cc9EvM0F.s:546    .text.printCAN2:0000000000000000 $t
     /tmp/cc9EvM0F.s:553    .text.printCAN2:0000000000000000 printCAN2
     /tmp/cc9EvM0F.s:647    .text.printCAN2:0000000000000058 $d
                            *COM*:0000000000000008 canRx
     /tmp/cc9EvM0F.s:657    .text.c1tx:0000000000000000 $t
     /tmp/cc9EvM0F.s:664    .text.c1tx:0000000000000000 c1tx
     /tmp/cc9EvM0F.s:705    .text.c1tx:0000000000000028 $d
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000004 txCycle
     /tmp/cc9EvM0F.s:712    .text.c2tx:0000000000000000 $t
     /tmp/cc9EvM0F.s:719    .text.c2tx:0000000000000000 c2tx
     /tmp/cc9EvM0F.s:760    .text.c2tx:0000000000000028 $d
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 txCycle2
     /tmp/cc9EvM0F.s:767    .text.c1txExt:0000000000000000 $t
     /tmp/cc9EvM0F.s:774    .text.c1txExt:0000000000000000 c1txExt
     /tmp/cc9EvM0F.s:815    .text.c1txExt:0000000000000028 $d
     /tmp/cc9EvM0F.s:822    .text.c2txExt:0000000000000000 $t
     /tmp/cc9EvM0F.s:829    .text.c2txExt:0000000000000000 c2txExt
     /tmp/cc9EvM0F.s:870    .text.c2txExt:0000000000000028 $d
                            *COM*:0000000000000004 canDebug
                            *COM*:0000000000000008 canTx2
                            *COM*:0000000000000008 canTx
                            *COM*:0000000000000008 canRx2
                            *COM*:000000000000001c rxMsg2
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000008 LIDAR
                            *COM*:000000000000000c te
                            *COM*:0000000000000014 BMS
                            *COM*:0000000000000003 charger
                            *COM*:0000000000000007 vcu
                            *COM*:0000000000000002 iboost
ARM GAS  /tmp/cc9EvM0F.s 			page 24


                            *COM*:0000000000000012 ldu
                            *COM*:0000000000000004 tempdata
                            *COM*:000000000000000c ADC_data
                            *COM*:0000000000000001 tenderActive
                            *COM*:0000000000000004 time_now
                            *COM*:0000000000000004 period
                            *COM*:0000000000000004 DCDC
     /tmp/cc9EvM0F.s:912    .rodata.printCAN1.str1.4:0000000000000000 $d
     /tmp/cc9EvM0F.s:926    .rodata.printCAN2.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_CAN_GetRxMessage
decodeCAN
getLidar
Error_Handler
getData
getEvent
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
puts
printf
HAL_GetTick
HAL_CAN_AddTxMessage
HAL_Delay
