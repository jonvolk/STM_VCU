ARM GAS  /tmp/ccSKqwN9.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"encoder.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.setWidget,"ax",%progbits
  16              		.align	1
  17              		.global	setWidget
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	setWidget:
  24              	.LFB66:
  25              		.file 1 "Core/Src/encoder.c"
   1:Core/Src/encoder.c **** 
   2:Core/Src/encoder.c **** #include "encoder.h"
   3:Core/Src/encoder.c **** 
   4:Core/Src/encoder.c **** void setWidget(uint8_t screenNum, uint8_t valueId, uint16_t currentVal, int gain)
   5:Core/Src/encoder.c **** {
  26              		.loc 1 5 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 0D46     		mov	r5, r1
   6:Core/Src/encoder.c **** 
   7:Core/Src/encoder.c ****     txMsgExt2.ExtId = CONTROL;
  39              		.loc 1 7 0
  40 0004 0A4C     		ldr	r4, .L3
  41 0006 0B49     		ldr	r1, .L3+4
  42              	.LVL1:
  43 0008 6160     		str	r1, [r4, #4]
   8:Core/Src/encoder.c ****     txMsgExt2.DLC = 8;
  44              		.loc 1 8 0
  45 000a 0821     		movs	r1, #8
  46 000c 2161     		str	r1, [r4, #16]
   9:Core/Src/encoder.c ****     canTx2[0] = 0x11; // Force Widget Data
  47              		.loc 1 9 0
  48 000e 0A49     		ldr	r1, .L3+8
  49 0010 1126     		movs	r6, #17
ARM GAS  /tmp/ccSKqwN9.s 			page 2


  50 0012 0E70     		strb	r6, [r1]
  10:Core/Src/encoder.c ****     canTx2[1] = screenNum;
  51              		.loc 1 10 0
  52 0014 4870     		strb	r0, [r1, #1]
  11:Core/Src/encoder.c ****     canTx2[2] = valueId;
  53              		.loc 1 11 0
  54 0016 8D70     		strb	r5, [r1, #2]
  12:Core/Src/encoder.c ****     canTx2[3] = currentVal & 0xFF;
  55              		.loc 1 12 0
  56 0018 CA70     		strb	r2, [r1, #3]
  13:Core/Src/encoder.c ****     canTx2[4] = (currentVal >> 8) & 0xFF;
  57              		.loc 1 13 0
  58 001a 120A     		lsrs	r2, r2, #8
  59              	.LVL2:
  60 001c 0A71     		strb	r2, [r1, #4]
  14:Core/Src/encoder.c ****     canTx2[5] = gain;    // Display Code placeholder
  61              		.loc 1 14 0
  62 001e 4B71     		strb	r3, [r1, #5]
  15:Core/Src/encoder.c ****     canTx2[6] = valueId; // Value Active ID  0x00-not used, 0x01 Value 1 currently active
  63              		.loc 1 15 0
  64 0020 8D71     		strb	r5, [r1, #6]
  16:Core/Src/encoder.c ****     canTx2[7] = 0xFF;
  65              		.loc 1 16 0
  66 0022 FF23     		movs	r3, #255
  67              	.LVL3:
  68 0024 CB71     		strb	r3, [r1, #7]
  17:Core/Src/encoder.c ****     // te.currentScreen = screenNum; //rely on RX values
  18:Core/Src/encoder.c ****     c2txExt(&txMsgExt2, canTx2);
  69              		.loc 1 18 0
  70 0026 2046     		mov	r0, r4
  71              	.LVL4:
  72 0028 FFF7FEFF 		bl	c2txExt
  73              	.LVL5:
  74 002c 70BD     		pop	{r4, r5, r6, pc}
  75              	.L4:
  76 002e 00BF     		.align	2
  77              	.L3:
  78 0030 00000000 		.word	txMsgExt2
  79 0034 21F2EF18 		.word	418378273
  80 0038 00000000 		.word	canTx2
  81              		.cfi_endproc
  82              	.LFE66:
  84              		.section	.text.setBacklight,"ax",%progbits
  85              		.align	1
  86              		.global	setBacklight
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu softvfp
  92              	setBacklight:
  93              	.LFB67:
  19:Core/Src/encoder.c **** }
  20:Core/Src/encoder.c **** 
  21:Core/Src/encoder.c **** void setBacklight(uint8_t level)
  22:Core/Src/encoder.c **** {
  94              		.loc 1 22 0
  95              		.cfi_startproc
ARM GAS  /tmp/ccSKqwN9.s 			page 3


  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL6:
  99 0000 08B5     		push	{r3, lr}
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 3, -8
 103              		.cfi_offset 14, -4
  23:Core/Src/encoder.c ****     txMsgExt2.ExtId = CONTROL;
 104              		.loc 1 23 0
 105 0002 0A4A     		ldr	r2, .L7
 106 0004 0A4B     		ldr	r3, .L7+4
 107 0006 5360     		str	r3, [r2, #4]
  24:Core/Src/encoder.c ****     txMsgExt2.DLC = 8;
 108              		.loc 1 24 0
 109 0008 0823     		movs	r3, #8
 110 000a 1361     		str	r3, [r2, #16]
  25:Core/Src/encoder.c ****     canTx2[0] = 0x80; // Screen brightness
 111              		.loc 1 25 0
 112 000c 0949     		ldr	r1, .L7+8
 113 000e 8023     		movs	r3, #128
 114 0010 0B70     		strb	r3, [r1]
  26:Core/Src/encoder.c ****     canTx2[1] = 0xFF;
 115              		.loc 1 26 0
 116 0012 FF23     		movs	r3, #255
 117 0014 4B70     		strb	r3, [r1, #1]
  27:Core/Src/encoder.c ****     canTx2[2] = level; // value 0-100
 118              		.loc 1 27 0
 119 0016 8870     		strb	r0, [r1, #2]
  28:Core/Src/encoder.c ****     canTx2[3] = 0xFF;
 120              		.loc 1 28 0
 121 0018 CB70     		strb	r3, [r1, #3]
  29:Core/Src/encoder.c ****     canTx2[4] = 0xFF;
 122              		.loc 1 29 0
 123 001a 0B71     		strb	r3, [r1, #4]
  30:Core/Src/encoder.c ****     canTx2[5] = 0xFF;
 124              		.loc 1 30 0
 125 001c 4B71     		strb	r3, [r1, #5]
  31:Core/Src/encoder.c ****     canTx2[6] = 0xFF;
 126              		.loc 1 31 0
 127 001e 8B71     		strb	r3, [r1, #6]
  32:Core/Src/encoder.c ****     canTx2[7] = 0xFF;
 128              		.loc 1 32 0
 129 0020 CB71     		strb	r3, [r1, #7]
  33:Core/Src/encoder.c ****     c2txExt(&txMsgExt2, canTx2);
 130              		.loc 1 33 0
 131 0022 1046     		mov	r0, r2
 132              	.LVL7:
 133 0024 FFF7FEFF 		bl	c2txExt
 134              	.LVL8:
 135 0028 08BD     		pop	{r3, pc}
 136              	.L8:
 137 002a 00BF     		.align	2
 138              	.L7:
 139 002c 00000000 		.word	txMsgExt2
 140 0030 21F2EF18 		.word	418378273
 141 0034 00000000 		.word	canTx2
ARM GAS  /tmp/ccSKqwN9.s 			page 4


 142              		.cfi_endproc
 143              	.LFE67:
 145              		.section	.text.getEvent,"ax",%progbits
 146              		.align	1
 147              		.global	getEvent
 148              		.syntax unified
 149              		.thumb
 150              		.thumb_func
 151              		.fpu softvfp
 153              	getEvent:
 154              	.LFB68:
  34:Core/Src/encoder.c **** }
  35:Core/Src/encoder.c **** 
  36:Core/Src/encoder.c **** void getEvent(CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx)
  37:Core/Src/encoder.c **** {
 155              		.loc 1 37 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160              	.LVL9:
  38:Core/Src/encoder.c **** 
  39:Core/Src/encoder.c ****     if (rxMsg->ExtId == EVENT)
 161              		.loc 1 39 0
 162 0000 4268     		ldr	r2, [r0, #4]
 163 0002 084B     		ldr	r3, .L12
 164 0004 9A42     		cmp	r2, r3
 165 0006 00D0     		beq	.L11
 166              	.LVL10:
 167              	.L9:
 168 0008 7047     		bx	lr
 169              	.LVL11:
 170              	.L11:
  40:Core/Src/encoder.c ****     {
  41:Core/Src/encoder.c ****         te.currentScreen = canRx[0];
 171              		.loc 1 41 0
 172 000a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 173 000c 064B     		ldr	r3, .L12+4
 174 000e 1A70     		strb	r2, [r3]
  42:Core/Src/encoder.c ****         // canRx[1] Reserved
  43:Core/Src/encoder.c ****         // canRx[2] 0x01 Events
  44:Core/Src/encoder.c ****         te.knob = canRx[3];
 175              		.loc 1 44 0
 176 0010 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 177 0012 5A70     		strb	r2, [r3, #1]
  45:Core/Src/encoder.c ****         te.tap = (canRx[4]) + (canRx[5] << 8);
 178              		.loc 1 45 0
 179 0014 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 180 0016 4879     		ldrb	r0, [r1, #5]	@ zero_extendqisi2
 181              	.LVL12:
 182 0018 02EB0022 		add	r2, r2, r0, lsl #8
 183 001c 5A80     		strh	r2, [r3, #2]	@ movhi
  46:Core/Src/encoder.c ****         te.swipe = canRx[6];
 184              		.loc 1 46 0
 185 001e 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 186 0020 1A71     		strb	r2, [r3, #4]
  47:Core/Src/encoder.c ****     }
ARM GAS  /tmp/ccSKqwN9.s 			page 5


  48:Core/Src/encoder.c **** }
 187              		.loc 1 48 0
 188 0022 F1E7     		b	.L9
 189              	.L13:
 190              		.align	2
 191              	.L12:
 192 0024 F20FFF18 		.word	419368946
 193 0028 00000000 		.word	te
 194              		.cfi_endproc
 195              	.LFE68:
 197              		.section	.text.getData,"ax",%progbits
 198              		.align	1
 199              		.global	getData
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu softvfp
 205              	getData:
 206              	.LFB69:
  49:Core/Src/encoder.c **** 
  50:Core/Src/encoder.c **** void getData(CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx)
  51:Core/Src/encoder.c **** {
 207              		.loc 1 51 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              		@ link register save eliminated.
 212              	.LVL13:
  52:Core/Src/encoder.c ****     if (rxMsg->ExtId == DATA)
 213              		.loc 1 52 0
 214 0000 4268     		ldr	r2, [r0, #4]
 215 0002 094B     		ldr	r3, .L17
 216 0004 9A42     		cmp	r2, r3
 217 0006 00D0     		beq	.L16
 218              	.LVL14:
 219              	.L14:
 220 0008 7047     		bx	lr
 221              	.LVL15:
 222              	.L16:
  53:Core/Src/encoder.c ****     {
  54:Core/Src/encoder.c ****         te.currentScreen = canRx[0];
 223              		.loc 1 54 0
 224 000a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 225 000c 074B     		ldr	r3, .L17+4
 226 000e 1A70     		strb	r2, [r3]
  55:Core/Src/encoder.c ****         // canRx[1] Reserved
  56:Core/Src/encoder.c ****         te.valueId = canRx[2];
 227              		.loc 1 56 0
 228 0010 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 229 0012 5A71     		strb	r2, [r3, #5]
  57:Core/Src/encoder.c ****         te.currentVal = canRx[3] + (canRx[4] << 8);
 230              		.loc 1 57 0
 231 0014 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 232 0016 0879     		ldrb	r0, [r1, #4]	@ zero_extendqisi2
 233              	.LVL16:
 234 0018 02EB0022 		add	r2, r2, r0, lsl #8
 235 001c DA80     		strh	r2, [r3, #6]	@ movhi
ARM GAS  /tmp/ccSKqwN9.s 			page 6


  58:Core/Src/encoder.c ****         te.dispCode = canRx[5];
 236              		.loc 1 58 0
 237 001e 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 238 0020 1A72     		strb	r2, [r3, #8]
  59:Core/Src/encoder.c ****         te.activeId = canRx[6];
 239              		.loc 1 59 0
 240 0022 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 241 0024 5A72     		strb	r2, [r3, #9]
  60:Core/Src/encoder.c ****     }
  61:Core/Src/encoder.c **** }
 242              		.loc 1 61 0
 243 0026 EFE7     		b	.L14
 244              	.L18:
 245              		.align	2
 246              	.L17:
 247 0028 F211FF18 		.word	419369458
 248 002c 00000000 		.word	te
 249              		.cfi_endproc
 250              	.LFE69:
 252              		.section	.text.encoderHandler,"ax",%progbits
 253              		.align	1
 254              		.global	encoderHandler
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu softvfp
 260              	encoderHandler:
 261              	.LFB70:
  62:Core/Src/encoder.c **** 
  63:Core/Src/encoder.c **** void encoderHandler(void)
  64:Core/Src/encoder.c **** {
 262              		.loc 1 64 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266 0000 10B5     		push	{r4, lr}
 267              	.LCFI2:
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 4, -8
 270              		.cfi_offset 14, -4
  65:Core/Src/encoder.c ****     switch (te.currentScreen)
 271              		.loc 1 65 0
 272 0002 614B     		ldr	r3, .L40
 273 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 274 0006 013B     		subs	r3, r3, #1
 275 0008 0B2B     		cmp	r3, #11
 276 000a 0AD8     		bhi	.L20
 277 000c DFE803F0 		tbb	[pc, r3]
 278              	.L22:
 279 0010 06       		.byte	(.L21-.L22)/2
 280 0011 25       		.byte	(.L23-.L22)/2
 281 0012 15       		.byte	(.L24-.L22)/2
 282 0013 32       		.byte	(.L25-.L22)/2
 283 0014 09       		.byte	(.L20-.L22)/2
 284 0015 09       		.byte	(.L20-.L22)/2
 285 0016 46       		.byte	(.L26-.L22)/2
 286 0017 09       		.byte	(.L20-.L22)/2
ARM GAS  /tmp/ccSKqwN9.s 			page 7


 287 0018 09       		.byte	(.L20-.L22)/2
 288 0019 56       		.byte	(.L27-.L22)/2
 289 001a 64       		.byte	(.L28-.L22)/2
 290 001b 70       		.byte	(.L29-.L22)/2
 291              		.p2align 1
 292              	.L21:
  66:Core/Src/encoder.c ****     {
  67:Core/Src/encoder.c **** 
  68:Core/Src/encoder.c ****     case HOME:
  69:Core/Src/encoder.c ****         vcu.burnFlag = OFF;
 293              		.loc 1 69 0
 294 001c 0022     		movs	r2, #0
 295 001e 5B4B     		ldr	r3, .L40+4
 296 0020 9A71     		strb	r2, [r3, #6]
 297              	.L20:
  70:Core/Src/encoder.c ****         break;
  71:Core/Src/encoder.c **** 
  72:Core/Src/encoder.c ****     /////// Gear Selection Screens /////////
  73:Core/Src/encoder.c ****     case FWD_REQ:
  74:Core/Src/encoder.c **** 
  75:Core/Src/encoder.c ****         // vcu.dio = FORWARD;
  76:Core/Src/encoder.c ****         canIOset(forward, ON);
  77:Core/Src/encoder.c ****         if (ldu.dir == FWD)
  78:Core/Src/encoder.c ****         {
  79:Core/Src/encoder.c ****             setWidget(FWD_CFM, 0, 0, 0);
  80:Core/Src/encoder.c ****         }
  81:Core/Src/encoder.c **** 
  82:Core/Src/encoder.c ****         break;
  83:Core/Src/encoder.c **** 
  84:Core/Src/encoder.c ****     case FWD_CFM:
  85:Core/Src/encoder.c ****         if (ldu.rpm >= 2000)
  86:Core/Src/encoder.c ****         {
  87:Core/Src/encoder.c ****             setWidget(HOME, 0, 0, 0);
  88:Core/Src/encoder.c ****         }
  89:Core/Src/encoder.c ****         break;
  90:Core/Src/encoder.c **** 
  91:Core/Src/encoder.c ****     case NTRL_REQ:
  92:Core/Src/encoder.c ****         canIOset(forward, OFF);
  93:Core/Src/encoder.c ****         canIOset(reverse, OFF);
  94:Core/Src/encoder.c ****         if (ldu.dir == NTRL)
  95:Core/Src/encoder.c ****         {
  96:Core/Src/encoder.c ****             setWidget(NTRL_CFM, 0, 0, 0);
  97:Core/Src/encoder.c ****         }
  98:Core/Src/encoder.c ****         break;
  99:Core/Src/encoder.c **** 
 100:Core/Src/encoder.c ****     case REV_REQ:
 101:Core/Src/encoder.c ****         // vcu.dio = REVERSE;
 102:Core/Src/encoder.c ****         canIOset(reverse, ON);
 103:Core/Src/encoder.c ****         if (ldu.dir == REV)
 104:Core/Src/encoder.c ****         {
 105:Core/Src/encoder.c ****             setWidget(REV_CFM, 0, 0, 0);
 106:Core/Src/encoder.c ****         }
 107:Core/Src/encoder.c ****         break;
 108:Core/Src/encoder.c **** 
 109:Core/Src/encoder.c ****     /////////// Charging Data ///////////////////////
 110:Core/Src/encoder.c ****     case BATTERY:
 111:Core/Src/encoder.c ****         // if (vcu.state != charge_keyOff || vcu.state != charge_keyOn)
ARM GAS  /tmp/ccSKqwN9.s 			page 8


 112:Core/Src/encoder.c ****         //{
 113:Core/Src/encoder.c ****         setWidget(BATTERY, BATT_VOLT, BMS[0].volt, x1);
 114:Core/Src/encoder.c ****         setWidget(BATTERY, BATT_TEMP, BMS[0].temp, x1);
 115:Core/Src/encoder.c ****         //}
 116:Core/Src/encoder.c ****         break;
 117:Core/Src/encoder.c **** 
 118:Core/Src/encoder.c ****     ////////// Launch Control ////////////////////////
 119:Core/Src/encoder.c ****     case LAUNCH:
 120:Core/Src/encoder.c ****         if (vcu.state != launchMode)
 121:Core/Src/encoder.c ****         {
 122:Core/Src/encoder.c ****             setWidget(HOME, 0, 0, 0);
 123:Core/Src/encoder.c ****         }
 124:Core/Src/encoder.c ****         break;
 125:Core/Src/encoder.c **** 
 126:Core/Src/encoder.c ****         ////////// Burnout Mode //////////////////////////////
 127:Core/Src/encoder.c **** 
 128:Core/Src/encoder.c ****     case BURNOUT:
 129:Core/Src/encoder.c ****         vcu.burnFlag = ON;
 130:Core/Src/encoder.c ****         break;
 131:Core/Src/encoder.c ****         /*
 132:Core/Src/encoder.c ****     case READY_BURNOUT: //HOME BUTTON DISBLED
 133:Core/Src/encoder.c ****         if (ldu.pot < 1000)
 134:Core/Src/encoder.c ****         {
 135:Core/Src/encoder.c ****             vcu.burnFlag = OFF;
 136:Core/Src/encoder.c ****             setWidget(HOME, 0, 0, 0);
 137:Core/Src/encoder.c ****         }
 138:Core/Src/encoder.c ****     */
 139:Core/Src/encoder.c **** 
 140:Core/Src/encoder.c ****     default:
 141:Core/Src/encoder.c ****         break;
 142:Core/Src/encoder.c ****     }
 143:Core/Src/encoder.c **** 
 144:Core/Src/encoder.c ****     switch (vcu.state)
 298              		.loc 1 144 0
 299 0022 5A4B     		ldr	r3, .L40+4
 300 0024 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 301 0026 DBB2     		uxtb	r3, r3
 302 0028 062B     		cmp	r3, #6
 303 002a 00F2AB80 		bhi	.L19
 304 002e DFE803F0 		tbb	[pc, r3]
 305              	.L32:
 306 0032 63       		.byte	(.L31-.L32)/2
 307 0033 6D       		.byte	(.L33-.L32)/2
 308 0034 92       		.byte	(.L34-.L32)/2
 309 0035 A9       		.byte	(.L19-.L32)/2
 310 0036 71       		.byte	(.L35-.L32)/2
 311 0037 A9       		.byte	(.L19-.L32)/2
 312 0038 8B       		.byte	(.L36-.L32)/2
 313 0039 00       		.p2align 1
 314              	.L24:
  76:Core/Src/encoder.c ****         if (ldu.dir == FWD)
 315              		.loc 1 76 0
 316 003a 0121     		movs	r1, #1
 317 003c 0420     		movs	r0, #4
 318 003e FFF7FEFF 		bl	canIOset
 319              	.LVL17:
  77:Core/Src/encoder.c ****         {
ARM GAS  /tmp/ccSKqwN9.s 			page 9


 320              		.loc 1 77 0
 321 0042 534B     		ldr	r3, .L40+8
 322 0044 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 323 0046 DBB2     		uxtb	r3, r3
 324 0048 FF2B     		cmp	r3, #255
 325 004a EAD1     		bne	.L20
  79:Core/Src/encoder.c ****         }
 326              		.loc 1 79 0
 327 004c 0023     		movs	r3, #0
 328 004e 1A46     		mov	r2, r3
 329 0050 1946     		mov	r1, r3
 330 0052 0220     		movs	r0, #2
 331 0054 FFF7FEFF 		bl	setWidget
 332              	.LVL18:
 333 0058 E3E7     		b	.L20
 334              	.L23:
  85:Core/Src/encoder.c ****         {
 335              		.loc 1 85 0
 336 005a 4D4B     		ldr	r3, .L40+8
 337 005c 1B88     		ldrh	r3, [r3]
 338 005e 9BB2     		uxth	r3, r3
 339 0060 B3F5FA6F 		cmp	r3, #2000
 340 0064 DDD3     		bcc	.L20
  87:Core/Src/encoder.c ****         }
 341              		.loc 1 87 0
 342 0066 0023     		movs	r3, #0
 343 0068 1A46     		mov	r2, r3
 344 006a 1946     		mov	r1, r3
 345 006c 0120     		movs	r0, #1
 346 006e FFF7FEFF 		bl	setWidget
 347              	.LVL19:
 348 0072 D6E7     		b	.L20
 349              	.L25:
  92:Core/Src/encoder.c ****         canIOset(reverse, OFF);
 350              		.loc 1 92 0
 351 0074 0021     		movs	r1, #0
 352 0076 0420     		movs	r0, #4
 353 0078 FFF7FEFF 		bl	canIOset
 354              	.LVL20:
  93:Core/Src/encoder.c ****         if (ldu.dir == NTRL)
 355              		.loc 1 93 0
 356 007c 0021     		movs	r1, #0
 357 007e 0320     		movs	r0, #3
 358 0080 FFF7FEFF 		bl	canIOset
 359              	.LVL21:
  94:Core/Src/encoder.c ****         {
 360              		.loc 1 94 0
 361 0084 424B     		ldr	r3, .L40+8
 362 0086 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 363 0088 DBB2     		uxtb	r3, r3
 364 008a 022B     		cmp	r3, #2
 365 008c C9D1     		bne	.L20
  96:Core/Src/encoder.c ****         }
 366              		.loc 1 96 0
 367 008e 0023     		movs	r3, #0
 368 0090 1A46     		mov	r2, r3
 369 0092 1946     		mov	r1, r3
ARM GAS  /tmp/ccSKqwN9.s 			page 10


 370 0094 0520     		movs	r0, #5
 371 0096 FFF7FEFF 		bl	setWidget
 372              	.LVL22:
 373 009a C2E7     		b	.L20
 374              	.L26:
 102:Core/Src/encoder.c ****         if (ldu.dir == REV)
 375              		.loc 1 102 0
 376 009c 0121     		movs	r1, #1
 377 009e 0320     		movs	r0, #3
 378 00a0 FFF7FEFF 		bl	canIOset
 379              	.LVL23:
 103:Core/Src/encoder.c ****         {
 380              		.loc 1 103 0
 381 00a4 3A4B     		ldr	r3, .L40+8
 382 00a6 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 383 00a8 DBB2     		uxtb	r3, r3
 384 00aa 032B     		cmp	r3, #3
 385 00ac B9D1     		bne	.L20
 105:Core/Src/encoder.c ****         }
 386              		.loc 1 105 0
 387 00ae 0023     		movs	r3, #0
 388 00b0 1A46     		mov	r2, r3
 389 00b2 1946     		mov	r1, r3
 390 00b4 0620     		movs	r0, #6
 391 00b6 FFF7FEFF 		bl	setWidget
 392              	.LVL24:
 393 00ba B2E7     		b	.L20
 394              	.L27:
 113:Core/Src/encoder.c ****         setWidget(BATTERY, BATT_TEMP, BMS[0].temp, x1);
 395              		.loc 1 113 0
 396 00bc 354C     		ldr	r4, .L40+12
 397 00be 0023     		movs	r3, #0
 398 00c0 2288     		ldrh	r2, [r4]
 399 00c2 0121     		movs	r1, #1
 400 00c4 0A20     		movs	r0, #10
 401 00c6 FFF7FEFF 		bl	setWidget
 402              	.LVL25:
 114:Core/Src/encoder.c ****         //}
 403              		.loc 1 114 0
 404 00ca 0023     		movs	r3, #0
 405 00cc A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 406 00ce 0421     		movs	r1, #4
 407 00d0 0A20     		movs	r0, #10
 408 00d2 FFF7FEFF 		bl	setWidget
 409              	.LVL26:
 116:Core/Src/encoder.c **** 
 410              		.loc 1 116 0
 411 00d6 A4E7     		b	.L20
 412              	.L28:
 120:Core/Src/encoder.c ****         {
 413              		.loc 1 120 0
 414 00d8 2C4B     		ldr	r3, .L40+4
 415 00da 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 416 00dc DBB2     		uxtb	r3, r3
 417 00de 062B     		cmp	r3, #6
 418 00e0 9FD0     		beq	.L20
 122:Core/Src/encoder.c ****         }
ARM GAS  /tmp/ccSKqwN9.s 			page 11


 419              		.loc 1 122 0
 420 00e2 0023     		movs	r3, #0
 421 00e4 1A46     		mov	r2, r3
 422 00e6 1946     		mov	r1, r3
 423 00e8 0120     		movs	r0, #1
 424 00ea FFF7FEFF 		bl	setWidget
 425              	.LVL27:
 426 00ee 98E7     		b	.L20
 427              	.L29:
 129:Core/Src/encoder.c ****         break;
 428              		.loc 1 129 0
 429 00f0 0122     		movs	r2, #1
 430 00f2 264B     		ldr	r3, .L40+4
 431 00f4 9A71     		strb	r2, [r3, #6]
 130:Core/Src/encoder.c ****         /*
 432              		.loc 1 130 0
 433 00f6 94E7     		b	.L20
 434              	.L31:
 145:Core/Src/encoder.c ****     {
 146:Core/Src/encoder.c ****     case off:
 147:Core/Src/encoder.c ****         setBacklight(0);
 435              		.loc 1 147 0
 436 00f8 0020     		movs	r0, #0
 437 00fa FFF7FEFF 		bl	setBacklight
 438              	.LVL28:
 148:Core/Src/encoder.c ****         setWidget(HOME, 0, 0, 0);
 439              		.loc 1 148 0
 440 00fe 0023     		movs	r3, #0
 441 0100 1A46     		mov	r2, r3
 442 0102 1946     		mov	r1, r3
 443 0104 0120     		movs	r0, #1
 444 0106 FFF7FEFF 		bl	setWidget
 445              	.LVL29:
 149:Core/Src/encoder.c ****         break;
 446              		.loc 1 149 0
 447 010a 10BD     		pop	{r4, pc}
 448              	.L33:
 150:Core/Src/encoder.c **** 
 151:Core/Src/encoder.c ****     case on:
 152:Core/Src/encoder.c ****         setBacklight(95);
 449              		.loc 1 152 0
 450 010c 5F20     		movs	r0, #95
 451 010e FFF7FEFF 		bl	setBacklight
 452              	.LVL30:
 153:Core/Src/encoder.c ****         break;
 453              		.loc 1 153 0
 454 0112 10BD     		pop	{r4, pc}
 455              	.L35:
 154:Core/Src/encoder.c **** 
 155:Core/Src/encoder.c ****     case idle:
 156:Core/Src/encoder.c **** 
 157:Core/Src/encoder.c ****         switch (te.currentScreen)
 456              		.loc 1 157 0
 457 0114 1C4B     		ldr	r3, .L40
 458 0116 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 459 0118 DBB2     		uxtb	r3, r3
 460 011a 012B     		cmp	r3, #1
ARM GAS  /tmp/ccSKqwN9.s 			page 12


 461 011c 03D0     		beq	.L37
 462 011e 8BB3     		cbz	r3, .L19
 463 0120 083B     		subs	r3, r3, #8
 464 0122 012B     		cmp	r3, #1
 465 0124 2ED8     		bhi	.L19
 466              	.L37:
 158:Core/Src/encoder.c ****         {
 159:Core/Src/encoder.c ****         case HOME:
 160:Core/Src/encoder.c ****         case WINDOWS:
 161:Core/Src/encoder.c ****         case CHARGE_STATS:
 162:Core/Src/encoder.c ****             if (charger.proximity)
 467              		.loc 1 162 0
 468 0126 1C4B     		ldr	r3, .L40+16
 469 0128 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 470 012a 33B1     		cbz	r3, .L38
 163:Core/Src/encoder.c ****             {
 164:Core/Src/encoder.c ****                 setWidget(DRIVEAWAY, 0, 0, 0);
 471              		.loc 1 164 0
 472 012c 0023     		movs	r3, #0
 473 012e 1A46     		mov	r2, r3
 474 0130 1946     		mov	r1, r3
 475 0132 1020     		movs	r0, #16
 476 0134 FFF7FEFF 		bl	setWidget
 477              	.LVL31:
 478 0138 10BD     		pop	{r4, pc}
 479              	.L38:
 165:Core/Src/encoder.c ****             }
 166:Core/Src/encoder.c ****             else
 167:Core/Src/encoder.c ****             {
 168:Core/Src/encoder.c ****                 setWidget(NTRL_REQ, 0, 0, 0);
 480              		.loc 1 168 0
 481 013a 0023     		movs	r3, #0
 482 013c 1A46     		mov	r2, r3
 483 013e 1946     		mov	r1, r3
 484 0140 0420     		movs	r0, #4
 485 0142 FFF7FEFF 		bl	setWidget
 486              	.LVL32:
 487 0146 10BD     		pop	{r4, pc}
 488              	.L36:
 169:Core/Src/encoder.c ****             }
 170:Core/Src/encoder.c ****             break;
 171:Core/Src/encoder.c **** 
 172:Core/Src/encoder.c ****         default:
 173:Core/Src/encoder.c ****             break;
 174:Core/Src/encoder.c ****         }
 175:Core/Src/encoder.c **** 
 176:Core/Src/encoder.c ****         break;
 177:Core/Src/encoder.c **** 
 178:Core/Src/encoder.c ****     case launchMode:
 179:Core/Src/encoder.c ****         setWidget(LAUNCH, 0, 0, 0);
 489              		.loc 1 179 0
 490 0148 0023     		movs	r3, #0
 491 014a 1A46     		mov	r2, r3
 492 014c 1946     		mov	r1, r3
 493 014e 0B20     		movs	r0, #11
 494 0150 FFF7FEFF 		bl	setWidget
 495              	.LVL33:
ARM GAS  /tmp/ccSKqwN9.s 			page 13


 180:Core/Src/encoder.c ****         break;
 496              		.loc 1 180 0
 497 0154 10BD     		pop	{r4, pc}
 498              	.L34:
 181:Core/Src/encoder.c **** 
 182:Core/Src/encoder.c ****     case charge_keyOff:
 183:Core/Src/encoder.c ****         setWidget(CHARGE_STATS, CS_TEMP, BMS[0].temp, x1);
 499              		.loc 1 183 0
 500 0156 0F4C     		ldr	r4, .L40+12
 501 0158 0023     		movs	r3, #0
 502 015a A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 503 015c 0121     		movs	r1, #1
 504 015e 0820     		movs	r0, #8
 505 0160 FFF7FEFF 		bl	setWidget
 506              	.LVL34:
 184:Core/Src/encoder.c ****         setWidget(CHARGE_STATS, CS_SOC, BMS[0].chargeState, x1);
 507              		.loc 1 184 0
 508 0164 0023     		movs	r3, #0
 509 0166 227A     		ldrb	r2, [r4, #8]	@ zero_extendqisi2
 510 0168 0421     		movs	r1, #4
 511 016a 0820     		movs	r0, #8
 512 016c FFF7FEFF 		bl	setWidget
 513              	.LVL35:
 185:Core/Src/encoder.c ****         setWidget(CHARGE_STATS, CS_AMP, charger.current, x1);
 514              		.loc 1 185 0
 515 0170 0023     		movs	r3, #0
 516 0172 094A     		ldr	r2, .L40+16
 517 0174 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 518 0176 0821     		movs	r1, #8
 519 0178 0846     		mov	r0, r1
 520 017a FFF7FEFF 		bl	setWidget
 521              	.LVL36:
 186:Core/Src/encoder.c ****         setBacklight(95);
 522              		.loc 1 186 0
 523 017e 5F20     		movs	r0, #95
 524 0180 FFF7FEFF 		bl	setBacklight
 525              	.LVL37:
 526              	.L19:
 527 0184 10BD     		pop	{r4, pc}
 528              	.L41:
 529 0186 00BF     		.align	2
 530              	.L40:
 531 0188 00000000 		.word	te
 532 018c 00000000 		.word	vcu
 533 0190 00000000 		.word	ldu
 534 0194 00000000 		.word	BMS
 535 0198 00000000 		.word	charger
 536              		.cfi_endproc
 537              	.LFE70:
 539              		.comm	te,12,4
 540              		.comm	canDebug,4,4
 541              		.comm	txCycle2,4,4
 542              		.comm	txCycle,4,4
 543              		.comm	canTx2,8,4
 544              		.comm	canTx,8,4
 545              		.comm	canMailbox2,4,4
 546              		.comm	canMailbox,4,4
ARM GAS  /tmp/ccSKqwN9.s 			page 14


 547              		.comm	canRx2,8,4
 548              		.comm	canRx,8,4
 549              		.comm	txMsgExt2,24,4
 550              		.comm	txMsg2,24,4
 551              		.comm	rxMsg2,28,4
 552              		.comm	txMsgExt,24,4
 553              		.comm	txMsg,24,4
 554              		.comm	rxMsg,28,4
 555              		.comm	sf5,40,4
 556              		.comm	sf4,40,4
 557              		.comm	sf3,40,4
 558              		.comm	sf2,40,4
 559              		.comm	sf,40,4
 560              		.comm	hcan2,40,4
 561              		.comm	hcan1,40,4
 562              		.comm	LIDAR,8,4
 563              		.comm	BMS,20,4
 564              		.comm	charger,3,4
 565              		.comm	vcu,7,4
 566              		.comm	iboost,2,4
 567              		.comm	ldu,18,4
 568              		.comm	tempdata,4,4
 569              		.comm	ADC_data,12,4
 570              		.comm	tenderActive,1,1
 571              		.comm	time_now,4,4
 572              		.comm	period,4,4
 573              		.comm	DCDC,4,4
 574              		.text
 575              	.Letext0:
 576              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 577              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 578              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 579              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 580              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 581              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 582              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 583              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 584              		.file 10 "/usr/include/newlib/sys/lock.h"
 585              		.file 11 "/usr/include/newlib/sys/_types.h"
 586              		.file 12 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 587              		.file 13 "/usr/include/newlib/sys/reent.h"
 588              		.file 14 "Core/Inc/dcdc.h"
 589              		.file 15 "Core/Inc/vcu.h"
 590              		.file 16 "Core/Inc/lidar.h"
 591              		.file 17 "Core/Inc/can_setup.h"
 592              		.file 18 "Core/Inc/encoder.h"
ARM GAS  /tmp/ccSKqwN9.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 encoder.c
     /tmp/ccSKqwN9.s:16     .text.setWidget:0000000000000000 $t
     /tmp/ccSKqwN9.s:23     .text.setWidget:0000000000000000 setWidget
     /tmp/ccSKqwN9.s:78     .text.setWidget:0000000000000030 $d
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000008 canTx2
     /tmp/ccSKqwN9.s:85     .text.setBacklight:0000000000000000 $t
     /tmp/ccSKqwN9.s:92     .text.setBacklight:0000000000000000 setBacklight
     /tmp/ccSKqwN9.s:139    .text.setBacklight:000000000000002c $d
     /tmp/ccSKqwN9.s:146    .text.getEvent:0000000000000000 $t
     /tmp/ccSKqwN9.s:153    .text.getEvent:0000000000000000 getEvent
     /tmp/ccSKqwN9.s:192    .text.getEvent:0000000000000024 $d
                            *COM*:000000000000000c te
     /tmp/ccSKqwN9.s:198    .text.getData:0000000000000000 $t
     /tmp/ccSKqwN9.s:205    .text.getData:0000000000000000 getData
     /tmp/ccSKqwN9.s:247    .text.getData:0000000000000028 $d
     /tmp/ccSKqwN9.s:253    .text.encoderHandler:0000000000000000 $t
     /tmp/ccSKqwN9.s:260    .text.encoderHandler:0000000000000000 encoderHandler
     /tmp/ccSKqwN9.s:279    .text.encoderHandler:0000000000000010 $d
     /tmp/ccSKqwN9.s:291    .text.encoderHandler:000000000000001c $t
     /tmp/ccSKqwN9.s:306    .text.encoderHandler:0000000000000032 $d
     /tmp/ccSKqwN9.s:531    .text.encoderHandler:0000000000000188 $d
                            *COM*:0000000000000007 vcu
                            *COM*:0000000000000012 ldu
                            *COM*:0000000000000014 BMS
                            *COM*:0000000000000003 charger
                            *COM*:0000000000000004 canDebug
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000008 canTx
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
                            *COM*:0000000000000028 hcan2
                            *COM*:0000000000000028 hcan1
                            *COM*:0000000000000008 LIDAR
                            *COM*:0000000000000002 iboost
                            *COM*:0000000000000004 tempdata
                            *COM*:000000000000000c ADC_data
                            *COM*:0000000000000001 tenderActive
                            *COM*:0000000000000004 time_now
                            *COM*:0000000000000004 period
                            *COM*:0000000000000004 DCDC
                     .debug_frame:0000000000000010 $d
     /tmp/ccSKqwN9.s:313    .text.encoderHandler:0000000000000039 $d
ARM GAS  /tmp/ccSKqwN9.s 			page 16


     /tmp/ccSKqwN9.s:313    .text.encoderHandler:000000000000003a $t

UNDEFINED SYMBOLS
c2txExt
canIOset
