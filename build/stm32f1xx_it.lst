ARM GAS  /tmp/ccJAZvCw.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB65:
  25              		.file 1 "Core/Src/stm32f1xx_it.c"
   1:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f1xx_it.c **** /**
   3:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Core/Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f1xx_it.c ****   * @attention
   8:Core/Src/stm32f1xx_it.c ****   *
   9:Core/Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f1xx_it.c ****   *
  12:Core/Src/stm32f1xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/stm32f1xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/stm32f1xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/stm32f1xx_it.c ****   *                             www.st.com/SLA0044
  16:Core/Src/stm32f1xx_it.c ****   *
  17:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f1xx_it.c ****   */
  19:Core/Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f1xx_it.c **** 
  21:Core/Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f1xx_it.c **** #include "main.h"
  23:Core/Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Core/Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32f1xx_it.c **** 
  28:Core/Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32f1xx_it.c **** 
  31:Core/Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Core/Src/stm32f1xx_it.c **** 
  33:Core/Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccJAZvCw.s 			page 2


  34:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32f1xx_it.c **** 
  36:Core/Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32f1xx_it.c **** 
  38:Core/Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32f1xx_it.c **** 
  41:Core/Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32f1xx_it.c **** 
  43:Core/Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32f1xx_it.c **** 
  46:Core/Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32f1xx_it.c **** 
  48:Core/Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32f1xx_it.c **** 
  51:Core/Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32f1xx_it.c **** 
  53:Core/Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32f1xx_it.c **** 
  56:Core/Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32f1xx_it.c **** 
  58:Core/Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc1;
  60:Core/Src/stm32f1xx_it.c **** extern CAN_HandleTypeDef hcan1;
  61:Core/Src/stm32f1xx_it.c **** extern CAN_HandleTypeDef hcan2;
  62:Core/Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_tim2_ch1;
  63:Core/Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_tim5_ch1;
  64:Core/Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_tim5_ch2;
  65:Core/Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim7;
  66:Core/Src/stm32f1xx_it.c **** 
  67:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  68:Core/Src/stm32f1xx_it.c **** 
  69:Core/Src/stm32f1xx_it.c **** /* USER CODE END EV */
  70:Core/Src/stm32f1xx_it.c **** 
  71:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  72:Core/Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */
  73:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  74:Core/Src/stm32f1xx_it.c **** /**
  75:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  76:Core/Src/stm32f1xx_it.c ****   */
  77:Core/Src/stm32f1xx_it.c **** void NMI_Handler(void)
  78:Core/Src/stm32f1xx_it.c **** {
  26              		.loc 1 78 0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.L2:
  33 0000 FEE7     		b	.L2
  34              		.cfi_endproc
  35              	.LFE65:
  37              		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	1
ARM GAS  /tmp/ccJAZvCw.s 			page 3


  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	HardFault_Handler:
  46              	.LFB66:
  79:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  80:Core/Src/stm32f1xx_it.c **** 
  81:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  82:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  83:Core/Src/stm32f1xx_it.c ****   while (1)
  84:Core/Src/stm32f1xx_it.c ****   {
  85:Core/Src/stm32f1xx_it.c ****   }
  86:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  87:Core/Src/stm32f1xx_it.c **** }
  88:Core/Src/stm32f1xx_it.c **** 
  89:Core/Src/stm32f1xx_it.c **** /**
  90:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  91:Core/Src/stm32f1xx_it.c ****   */
  92:Core/Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  93:Core/Src/stm32f1xx_it.c **** {
  47              		.loc 1 93 0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.L4:
  54 0000 FEE7     		b	.L4
  55              		.cfi_endproc
  56              	.LFE66:
  58              		.section	.text.MemManage_Handler,"ax",%progbits
  59              		.align	1
  60              		.global	MemManage_Handler
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu softvfp
  66              	MemManage_Handler:
  67              	.LFB67:
  94:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  95:Core/Src/stm32f1xx_it.c **** 
  96:Core/Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  97:Core/Src/stm32f1xx_it.c ****   while (1)
  98:Core/Src/stm32f1xx_it.c ****   {
  99:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 100:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 101:Core/Src/stm32f1xx_it.c ****   }
 102:Core/Src/stm32f1xx_it.c **** }
 103:Core/Src/stm32f1xx_it.c **** 
 104:Core/Src/stm32f1xx_it.c **** /**
 105:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 106:Core/Src/stm32f1xx_it.c ****   */
 107:Core/Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 108:Core/Src/stm32f1xx_it.c **** {
  68              		.loc 1 108 0
ARM GAS  /tmp/ccJAZvCw.s 			page 4


  69              		.cfi_startproc
  70              		@ Volatile: function does not return.
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74              	.L6:
  75 0000 FEE7     		b	.L6
  76              		.cfi_endproc
  77              	.LFE67:
  79              		.section	.text.BusFault_Handler,"ax",%progbits
  80              		.align	1
  81              		.global	BusFault_Handler
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  85              		.fpu softvfp
  87              	BusFault_Handler:
  88              	.LFB68:
 109:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 110:Core/Src/stm32f1xx_it.c **** 
 111:Core/Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 112:Core/Src/stm32f1xx_it.c ****   while (1)
 113:Core/Src/stm32f1xx_it.c ****   {
 114:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 115:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 116:Core/Src/stm32f1xx_it.c ****   }
 117:Core/Src/stm32f1xx_it.c **** }
 118:Core/Src/stm32f1xx_it.c **** 
 119:Core/Src/stm32f1xx_it.c **** /**
 120:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 121:Core/Src/stm32f1xx_it.c ****   */
 122:Core/Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 123:Core/Src/stm32f1xx_it.c **** {
  89              		.loc 1 123 0
  90              		.cfi_startproc
  91              		@ Volatile: function does not return.
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95              	.L8:
  96 0000 FEE7     		b	.L8
  97              		.cfi_endproc
  98              	.LFE68:
 100              		.section	.text.UsageFault_Handler,"ax",%progbits
 101              		.align	1
 102              		.global	UsageFault_Handler
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu softvfp
 108              	UsageFault_Handler:
 109              	.LFB69:
 124:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 125:Core/Src/stm32f1xx_it.c **** 
 126:Core/Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 127:Core/Src/stm32f1xx_it.c ****   while (1)
 128:Core/Src/stm32f1xx_it.c ****   {
ARM GAS  /tmp/ccJAZvCw.s 			page 5


 129:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 130:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 131:Core/Src/stm32f1xx_it.c ****   }
 132:Core/Src/stm32f1xx_it.c **** }
 133:Core/Src/stm32f1xx_it.c **** 
 134:Core/Src/stm32f1xx_it.c **** /**
 135:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 136:Core/Src/stm32f1xx_it.c ****   */
 137:Core/Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 138:Core/Src/stm32f1xx_it.c **** {
 110              		.loc 1 138 0
 111              		.cfi_startproc
 112              		@ Volatile: function does not return.
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 116              	.L10:
 117 0000 FEE7     		b	.L10
 118              		.cfi_endproc
 119              	.LFE69:
 121              		.section	.text.DebugMon_Handler,"ax",%progbits
 122              		.align	1
 123              		.global	DebugMon_Handler
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu softvfp
 129              	DebugMon_Handler:
 130              	.LFB70:
 139:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 140:Core/Src/stm32f1xx_it.c **** 
 141:Core/Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 142:Core/Src/stm32f1xx_it.c ****   while (1)
 143:Core/Src/stm32f1xx_it.c ****   {
 144:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 145:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 146:Core/Src/stm32f1xx_it.c ****   }
 147:Core/Src/stm32f1xx_it.c **** }
 148:Core/Src/stm32f1xx_it.c **** 
 149:Core/Src/stm32f1xx_it.c **** /**
 150:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 151:Core/Src/stm32f1xx_it.c ****   */
 152:Core/Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 153:Core/Src/stm32f1xx_it.c **** {
 131              		.loc 1 153 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 136 0000 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE70:
 140              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 141              		.align	1
 142              		.global	DMA1_Channel1_IRQHandler
 143              		.syntax unified
 144              		.thumb
ARM GAS  /tmp/ccJAZvCw.s 			page 6


 145              		.thumb_func
 146              		.fpu softvfp
 148              	DMA1_Channel1_IRQHandler:
 149              	.LFB71:
 154:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 155:Core/Src/stm32f1xx_it.c **** 
 156:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 157:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 158:Core/Src/stm32f1xx_it.c **** 
 159:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 160:Core/Src/stm32f1xx_it.c **** }
 161:Core/Src/stm32f1xx_it.c **** 
 162:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 163:Core/Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 164:Core/Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 165:Core/Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 166:Core/Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 167:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 168:Core/Src/stm32f1xx_it.c **** 
 169:Core/Src/stm32f1xx_it.c **** /**
 170:Core/Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel1 global interrupt.
 171:Core/Src/stm32f1xx_it.c ****   */
 172:Core/Src/stm32f1xx_it.c **** void DMA1_Channel1_IRQHandler(void)
 173:Core/Src/stm32f1xx_it.c **** {
 150              		.loc 1 173 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		.loc 1 173 0
 155 0000 08B5     		push	{r3, lr}
 156              	.LCFI0:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 3, -8
 159              		.cfi_offset 14, -4
 174:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
 175:Core/Src/stm32f1xx_it.c **** 
 176:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 0 */
 177:Core/Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc1);
 160              		.loc 1 177 0
 161 0002 0248     		ldr	r0, .L14
 162 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 163              	.LVL0:
 164 0008 08BD     		pop	{r3, pc}
 165              	.L15:
 166 000a 00BF     		.align	2
 167              	.L14:
 168 000c 00000000 		.word	hdma_adc1
 169              		.cfi_endproc
 170              	.LFE71:
 172              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 173              		.align	1
 174              		.global	DMA1_Channel5_IRQHandler
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu softvfp
 180              	DMA1_Channel5_IRQHandler:
ARM GAS  /tmp/ccJAZvCw.s 			page 7


 181              	.LFB72:
 178:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 179:Core/Src/stm32f1xx_it.c **** 
 180:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 1 */
 181:Core/Src/stm32f1xx_it.c **** }
 182:Core/Src/stm32f1xx_it.c **** 
 183:Core/Src/stm32f1xx_it.c **** /**
 184:Core/Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel5 global interrupt.
 185:Core/Src/stm32f1xx_it.c ****   */
 186:Core/Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 187:Core/Src/stm32f1xx_it.c **** {
 182              		.loc 1 187 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186 0000 08B5     		push	{r3, lr}
 187              	.LCFI1:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 3, -8
 190              		.cfi_offset 14, -4
 188:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 189:Core/Src/stm32f1xx_it.c **** 
 190:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 191:Core/Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 191              		.loc 1 191 0
 192 0002 0248     		ldr	r0, .L18
 193 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 194              	.LVL1:
 195 0008 08BD     		pop	{r3, pc}
 196              	.L19:
 197 000a 00BF     		.align	2
 198              	.L18:
 199 000c 00000000 		.word	hdma_tim2_ch1
 200              		.cfi_endproc
 201              	.LFE72:
 203              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 204              		.align	1
 205              		.global	CAN1_RX0_IRQHandler
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu softvfp
 211              	CAN1_RX0_IRQHandler:
 212              	.LFB73:
 192:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 193:Core/Src/stm32f1xx_it.c **** 
 194:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 195:Core/Src/stm32f1xx_it.c **** }
 196:Core/Src/stm32f1xx_it.c **** 
 197:Core/Src/stm32f1xx_it.c **** /**
 198:Core/Src/stm32f1xx_it.c ****   * @brief This function handles CAN1 RX0 interrupt.
 199:Core/Src/stm32f1xx_it.c ****   */
 200:Core/Src/stm32f1xx_it.c **** void CAN1_RX0_IRQHandler(void)
 201:Core/Src/stm32f1xx_it.c **** {
 213              		.loc 1 201 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccJAZvCw.s 			page 8


 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217 0000 08B5     		push	{r3, lr}
 218              	.LCFI2:
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 3, -8
 221              		.cfi_offset 14, -4
 202:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 203:Core/Src/stm32f1xx_it.c **** 
 204:Core/Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 205:Core/Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 222              		.loc 1 205 0
 223 0002 0248     		ldr	r0, .L22
 224 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 225              	.LVL2:
 226 0008 08BD     		pop	{r3, pc}
 227              	.L23:
 228 000a 00BF     		.align	2
 229              	.L22:
 230 000c 00000000 		.word	hcan1
 231              		.cfi_endproc
 232              	.LFE73:
 234              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 235              		.align	1
 236              		.global	TIM7_IRQHandler
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu softvfp
 242              	TIM7_IRQHandler:
 243              	.LFB74:
 206:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 207:Core/Src/stm32f1xx_it.c **** 
 208:Core/Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 209:Core/Src/stm32f1xx_it.c **** }
 210:Core/Src/stm32f1xx_it.c **** 
 211:Core/Src/stm32f1xx_it.c **** /**
 212:Core/Src/stm32f1xx_it.c ****   * @brief This function handles TIM7 global interrupt.
 213:Core/Src/stm32f1xx_it.c ****   */
 214:Core/Src/stm32f1xx_it.c **** void TIM7_IRQHandler(void)
 215:Core/Src/stm32f1xx_it.c **** {
 244              		.loc 1 215 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248 0000 08B5     		push	{r3, lr}
 249              	.LCFI3:
 250              		.cfi_def_cfa_offset 8
 251              		.cfi_offset 3, -8
 252              		.cfi_offset 14, -4
 216:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 0 */
 217:Core/Src/stm32f1xx_it.c **** 
 218:Core/Src/stm32f1xx_it.c ****   /* USER CODE END TIM7_IRQn 0 */
 219:Core/Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim7);
 253              		.loc 1 219 0
 254 0002 0248     		ldr	r0, .L26
 255 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 256              	.LVL3:
ARM GAS  /tmp/ccJAZvCw.s 			page 9


 257 0008 08BD     		pop	{r3, pc}
 258              	.L27:
 259 000a 00BF     		.align	2
 260              	.L26:
 261 000c 00000000 		.word	htim7
 262              		.cfi_endproc
 263              	.LFE74:
 265              		.section	.text.DMA2_Channel4_IRQHandler,"ax",%progbits
 266              		.align	1
 267              		.global	DMA2_Channel4_IRQHandler
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu softvfp
 273              	DMA2_Channel4_IRQHandler:
 274              	.LFB75:
 220:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 1 */
 221:Core/Src/stm32f1xx_it.c **** 
 222:Core/Src/stm32f1xx_it.c ****   /* USER CODE END TIM7_IRQn 1 */
 223:Core/Src/stm32f1xx_it.c **** }
 224:Core/Src/stm32f1xx_it.c **** 
 225:Core/Src/stm32f1xx_it.c **** /**
 226:Core/Src/stm32f1xx_it.c ****   * @brief This function handles DMA2 channel4 global interrupt.
 227:Core/Src/stm32f1xx_it.c ****   */
 228:Core/Src/stm32f1xx_it.c **** void DMA2_Channel4_IRQHandler(void)
 229:Core/Src/stm32f1xx_it.c **** {
 275              		.loc 1 229 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279 0000 08B5     		push	{r3, lr}
 280              	.LCFI4:
 281              		.cfi_def_cfa_offset 8
 282              		.cfi_offset 3, -8
 283              		.cfi_offset 14, -4
 230:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
 231:Core/Src/stm32f1xx_it.c **** 
 232:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA2_Channel4_IRQn 0 */
 233:Core/Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 284              		.loc 1 233 0
 285 0002 0248     		ldr	r0, .L30
 286 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 287              	.LVL4:
 288 0008 08BD     		pop	{r3, pc}
 289              	.L31:
 290 000a 00BF     		.align	2
 291              	.L30:
 292 000c 00000000 		.word	hdma_tim5_ch2
 293              		.cfi_endproc
 294              	.LFE75:
 296              		.section	.text.DMA2_Channel5_IRQHandler,"ax",%progbits
 297              		.align	1
 298              		.global	DMA2_Channel5_IRQHandler
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu softvfp
ARM GAS  /tmp/ccJAZvCw.s 			page 10


 304              	DMA2_Channel5_IRQHandler:
 305              	.LFB76:
 234:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */
 235:Core/Src/stm32f1xx_it.c **** 
 236:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA2_Channel4_IRQn 1 */
 237:Core/Src/stm32f1xx_it.c **** }
 238:Core/Src/stm32f1xx_it.c **** 
 239:Core/Src/stm32f1xx_it.c **** /**
 240:Core/Src/stm32f1xx_it.c ****   * @brief This function handles DMA2 channel5 global interrupt.
 241:Core/Src/stm32f1xx_it.c ****   */
 242:Core/Src/stm32f1xx_it.c **** void DMA2_Channel5_IRQHandler(void)
 243:Core/Src/stm32f1xx_it.c **** {
 306              		.loc 1 243 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310 0000 08B5     		push	{r3, lr}
 311              	.LCFI5:
 312              		.cfi_def_cfa_offset 8
 313              		.cfi_offset 3, -8
 314              		.cfi_offset 14, -4
 244:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */
 245:Core/Src/stm32f1xx_it.c **** 
 246:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA2_Channel5_IRQn 0 */
 247:Core/Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 315              		.loc 1 247 0
 316 0002 0248     		ldr	r0, .L34
 317 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 318              	.LVL5:
 319 0008 08BD     		pop	{r3, pc}
 320              	.L35:
 321 000a 00BF     		.align	2
 322              	.L34:
 323 000c 00000000 		.word	hdma_tim5_ch1
 324              		.cfi_endproc
 325              	.LFE76:
 327              		.section	.text.CAN2_RX1_IRQHandler,"ax",%progbits
 328              		.align	1
 329              		.global	CAN2_RX1_IRQHandler
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 333              		.fpu softvfp
 335              	CAN2_RX1_IRQHandler:
 336              	.LFB77:
 248:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */
 249:Core/Src/stm32f1xx_it.c **** 
 250:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DMA2_Channel5_IRQn 1 */
 251:Core/Src/stm32f1xx_it.c **** }
 252:Core/Src/stm32f1xx_it.c **** 
 253:Core/Src/stm32f1xx_it.c **** /**
 254:Core/Src/stm32f1xx_it.c ****   * @brief This function handles CAN2 RX1 interrupt.
 255:Core/Src/stm32f1xx_it.c ****   */
 256:Core/Src/stm32f1xx_it.c **** void CAN2_RX1_IRQHandler(void)
 257:Core/Src/stm32f1xx_it.c **** {
 337              		.loc 1 257 0
 338              		.cfi_startproc
ARM GAS  /tmp/ccJAZvCw.s 			page 11


 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341 0000 08B5     		push	{r3, lr}
 342              	.LCFI6:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 3, -8
 345              		.cfi_offset 14, -4
 258:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN2_RX1_IRQn 0 */
 259:Core/Src/stm32f1xx_it.c **** 
 260:Core/Src/stm32f1xx_it.c ****   /* USER CODE END CAN2_RX1_IRQn 0 */
 261:Core/Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan2);
 346              		.loc 1 261 0
 347 0002 0248     		ldr	r0, .L38
 348 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 349              	.LVL6:
 350 0008 08BD     		pop	{r3, pc}
 351              	.L39:
 352 000a 00BF     		.align	2
 353              	.L38:
 354 000c 00000000 		.word	hcan2
 355              		.cfi_endproc
 356              	.LFE77:
 358              		.text
 359              	.Letext0:
 360              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 361              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 362              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 363              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 364              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 365              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 366              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 367              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 368              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 369              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 370              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccJAZvCw.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccJAZvCw.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccJAZvCw.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccJAZvCw.s:38     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccJAZvCw.s:45     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccJAZvCw.s:59     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccJAZvCw.s:66     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccJAZvCw.s:80     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccJAZvCw.s:87     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccJAZvCw.s:101    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccJAZvCw.s:108    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccJAZvCw.s:122    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccJAZvCw.s:129    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccJAZvCw.s:141    .text.DMA1_Channel1_IRQHandler:0000000000000000 $t
     /tmp/ccJAZvCw.s:148    .text.DMA1_Channel1_IRQHandler:0000000000000000 DMA1_Channel1_IRQHandler
     /tmp/ccJAZvCw.s:168    .text.DMA1_Channel1_IRQHandler:000000000000000c $d
     /tmp/ccJAZvCw.s:173    .text.DMA1_Channel5_IRQHandler:0000000000000000 $t
     /tmp/ccJAZvCw.s:180    .text.DMA1_Channel5_IRQHandler:0000000000000000 DMA1_Channel5_IRQHandler
     /tmp/ccJAZvCw.s:199    .text.DMA1_Channel5_IRQHandler:000000000000000c $d
     /tmp/ccJAZvCw.s:204    .text.CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccJAZvCw.s:211    .text.CAN1_RX0_IRQHandler:0000000000000000 CAN1_RX0_IRQHandler
     /tmp/ccJAZvCw.s:230    .text.CAN1_RX0_IRQHandler:000000000000000c $d
     /tmp/ccJAZvCw.s:235    .text.TIM7_IRQHandler:0000000000000000 $t
     /tmp/ccJAZvCw.s:242    .text.TIM7_IRQHandler:0000000000000000 TIM7_IRQHandler
     /tmp/ccJAZvCw.s:261    .text.TIM7_IRQHandler:000000000000000c $d
     /tmp/ccJAZvCw.s:266    .text.DMA2_Channel4_IRQHandler:0000000000000000 $t
     /tmp/ccJAZvCw.s:273    .text.DMA2_Channel4_IRQHandler:0000000000000000 DMA2_Channel4_IRQHandler
     /tmp/ccJAZvCw.s:292    .text.DMA2_Channel4_IRQHandler:000000000000000c $d
     /tmp/ccJAZvCw.s:297    .text.DMA2_Channel5_IRQHandler:0000000000000000 $t
     /tmp/ccJAZvCw.s:304    .text.DMA2_Channel5_IRQHandler:0000000000000000 DMA2_Channel5_IRQHandler
     /tmp/ccJAZvCw.s:323    .text.DMA2_Channel5_IRQHandler:000000000000000c $d
     /tmp/ccJAZvCw.s:328    .text.CAN2_RX1_IRQHandler:0000000000000000 $t
     /tmp/ccJAZvCw.s:335    .text.CAN2_RX1_IRQHandler:0000000000000000 CAN2_RX1_IRQHandler
     /tmp/ccJAZvCw.s:354    .text.CAN2_RX1_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_DMA_IRQHandler
hdma_adc1
hdma_tim2_ch1
HAL_CAN_IRQHandler
hcan1
HAL_TIM_IRQHandler
htim7
hdma_tim5_ch2
hdma_tim5_ch1
hcan2
