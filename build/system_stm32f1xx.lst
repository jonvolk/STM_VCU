ARM GAS  /tmp/ccOAG39d.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"system_stm32f1xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SystemInit,"ax",%progbits
  16              		.align	1
  17              		.global	SystemInit
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	SystemInit:
  25              	.LFB65:
  26              		.file 1 "Core/Src/system_stm32f1xx.c"
   1:Core/Src/system_stm32f1xx.c **** /**
   2:Core/Src/system_stm32f1xx.c ****   ******************************************************************************
   3:Core/Src/system_stm32f1xx.c ****   * @file    system_stm32f1xx.c
   4:Core/Src/system_stm32f1xx.c ****   * @author  MCD Application Team
   5:Core/Src/system_stm32f1xx.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   6:Core/Src/system_stm32f1xx.c ****   * 
   7:Core/Src/system_stm32f1xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
   8:Core/Src/system_stm32f1xx.c ****   *     user application:
   9:Core/Src/system_stm32f1xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  10:Core/Src/system_stm32f1xx.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  11:Core/Src/system_stm32f1xx.c ****   *                      This function is called at startup just after reset and 
  12:Core/Src/system_stm32f1xx.c ****   *                      before branch to main program. This call is made inside
  13:Core/Src/system_stm32f1xx.c ****   *                      the "startup_stm32f1xx_xx.s" file.
  14:Core/Src/system_stm32f1xx.c ****   *
  15:Core/Src/system_stm32f1xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  16:Core/Src/system_stm32f1xx.c ****   *                                  by the user application to setup the SysTick 
  17:Core/Src/system_stm32f1xx.c ****   *                                  timer or configure other parameters.
  18:Core/Src/system_stm32f1xx.c ****   *                                     
  19:Core/Src/system_stm32f1xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  20:Core/Src/system_stm32f1xx.c ****   *                                 be called whenever the core clock is changed
  21:Core/Src/system_stm32f1xx.c ****   *                                 during program execution.
  22:Core/Src/system_stm32f1xx.c ****   *
  23:Core/Src/system_stm32f1xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  24:Core/Src/system_stm32f1xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f1xx_xx.s" file, to
  25:Core/Src/system_stm32f1xx.c ****   *    configure the system clock before to branch to main program.
  26:Core/Src/system_stm32f1xx.c ****   *
  27:Core/Src/system_stm32f1xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depending on
  28:Core/Src/system_stm32f1xx.c ****   *    the product used), refer to "HSE_VALUE". 
  29:Core/Src/system_stm32f1xx.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  30:Core/Src/system_stm32f1xx.c ****   *    are using different crystal you have to adapt the HSE value to your own
  31:Core/Src/system_stm32f1xx.c ****   *    configuration.
  32:Core/Src/system_stm32f1xx.c ****   *        
ARM GAS  /tmp/ccOAG39d.s 			page 2


  33:Core/Src/system_stm32f1xx.c ****   ******************************************************************************
  34:Core/Src/system_stm32f1xx.c ****   * @attention
  35:Core/Src/system_stm32f1xx.c ****   *
  36:Core/Src/system_stm32f1xx.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  37:Core/Src/system_stm32f1xx.c ****   * All rights reserved.</center></h2>
  38:Core/Src/system_stm32f1xx.c ****   *
  39:Core/Src/system_stm32f1xx.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  40:Core/Src/system_stm32f1xx.c ****   * the "License"; You may not use this file except in compliance with the
  41:Core/Src/system_stm32f1xx.c ****   * License. You may obtain a copy of the License at:
  42:Core/Src/system_stm32f1xx.c ****   *                        opensource.org/licenses/BSD-3-Clause
  43:Core/Src/system_stm32f1xx.c ****   *
  44:Core/Src/system_stm32f1xx.c ****   ******************************************************************************
  45:Core/Src/system_stm32f1xx.c ****   */
  46:Core/Src/system_stm32f1xx.c **** 
  47:Core/Src/system_stm32f1xx.c **** /** @addtogroup CMSIS
  48:Core/Src/system_stm32f1xx.c ****   * @{
  49:Core/Src/system_stm32f1xx.c ****   */
  50:Core/Src/system_stm32f1xx.c **** 
  51:Core/Src/system_stm32f1xx.c **** /** @addtogroup stm32f1xx_system
  52:Core/Src/system_stm32f1xx.c ****   * @{
  53:Core/Src/system_stm32f1xx.c ****   */  
  54:Core/Src/system_stm32f1xx.c ****   
  55:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Includes
  56:Core/Src/system_stm32f1xx.c ****   * @{
  57:Core/Src/system_stm32f1xx.c ****   */
  58:Core/Src/system_stm32f1xx.c **** 
  59:Core/Src/system_stm32f1xx.c **** #include "stm32f1xx.h"
  60:Core/Src/system_stm32f1xx.c **** 
  61:Core/Src/system_stm32f1xx.c **** /**
  62:Core/Src/system_stm32f1xx.c ****   * @}
  63:Core/Src/system_stm32f1xx.c ****   */
  64:Core/Src/system_stm32f1xx.c **** 
  65:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_TypesDefinitions
  66:Core/Src/system_stm32f1xx.c ****   * @{
  67:Core/Src/system_stm32f1xx.c ****   */
  68:Core/Src/system_stm32f1xx.c **** 
  69:Core/Src/system_stm32f1xx.c **** /**
  70:Core/Src/system_stm32f1xx.c ****   * @}
  71:Core/Src/system_stm32f1xx.c ****   */
  72:Core/Src/system_stm32f1xx.c **** 
  73:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Defines
  74:Core/Src/system_stm32f1xx.c ****   * @{
  75:Core/Src/system_stm32f1xx.c ****   */
  76:Core/Src/system_stm32f1xx.c **** 
  77:Core/Src/system_stm32f1xx.c **** #if !defined  (HSE_VALUE) 
  78:Core/Src/system_stm32f1xx.c ****   #define HSE_VALUE               8000000U /*!< Default value of the External oscillator in Hz.
  79:Core/Src/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
  80:Core/Src/system_stm32f1xx.c **** #endif /* HSE_VALUE */
  81:Core/Src/system_stm32f1xx.c **** 
  82:Core/Src/system_stm32f1xx.c **** #if !defined  (HSI_VALUE)
  83:Core/Src/system_stm32f1xx.c ****   #define HSI_VALUE               8000000U /*!< Default value of the Internal oscillator in Hz.
  84:Core/Src/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
  85:Core/Src/system_stm32f1xx.c **** #endif /* HSI_VALUE */
  86:Core/Src/system_stm32f1xx.c **** 
  87:Core/Src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to use external SRAM  */ 
  88:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
  89:Core/Src/system_stm32f1xx.c **** /* #define DATA_IN_ExtSRAM */
ARM GAS  /tmp/ccOAG39d.s 			page 3


  90:Core/Src/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
  91:Core/Src/system_stm32f1xx.c **** 
  92:Core/Src/system_stm32f1xx.c **** /* Note: Following vector table addresses must be defined in line with linker
  93:Core/Src/system_stm32f1xx.c ****          configuration. */
  94:Core/Src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to relocate the vector table
  95:Core/Src/system_stm32f1xx.c ****      anywhere in Flash or Sram, else the vector table is kept at the automatic
  96:Core/Src/system_stm32f1xx.c ****      remap of boot address selected */
  97:Core/Src/system_stm32f1xx.c **** /* #define USER_VECT_TAB_ADDRESS */
  98:Core/Src/system_stm32f1xx.c **** 
  99:Core/Src/system_stm32f1xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
 100:Core/Src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table
 101:Core/Src/system_stm32f1xx.c ****      in Sram else user remap will be done in Flash. */
 102:Core/Src/system_stm32f1xx.c **** /* #define VECT_TAB_SRAM */
 103:Core/Src/system_stm32f1xx.c **** #if defined(VECT_TAB_SRAM)
 104:Core/Src/system_stm32f1xx.c **** #define VECT_TAB_BASE_ADDRESS   SRAM_BASE       /*!< Vector Table base address field.
 105:Core/Src/system_stm32f1xx.c ****                                                      This value must be a multiple of 0x200. */
 106:Core/Src/system_stm32f1xx.c **** #define VECT_TAB_OFFSET         0x00000000U     /*!< Vector Table base offset field.
 107:Core/Src/system_stm32f1xx.c ****                                                      This value must be a multiple of 0x200. */
 108:Core/Src/system_stm32f1xx.c **** #else
 109:Core/Src/system_stm32f1xx.c **** #define VECT_TAB_BASE_ADDRESS   FLASH_BASE      /*!< Vector Table base address field.
 110:Core/Src/system_stm32f1xx.c ****                                                      This value must be a multiple of 0x200. */
 111:Core/Src/system_stm32f1xx.c **** #define VECT_TAB_OFFSET         0x00000000U     /*!< Vector Table base offset field.
 112:Core/Src/system_stm32f1xx.c ****                                                      This value must be a multiple of 0x200. */
 113:Core/Src/system_stm32f1xx.c **** #endif /* VECT_TAB_SRAM */
 114:Core/Src/system_stm32f1xx.c **** #endif /* USER_VECT_TAB_ADDRESS */
 115:Core/Src/system_stm32f1xx.c **** 
 116:Core/Src/system_stm32f1xx.c **** /******************************************************************************/
 117:Core/Src/system_stm32f1xx.c **** 
 118:Core/Src/system_stm32f1xx.c **** /**
 119:Core/Src/system_stm32f1xx.c ****   * @}
 120:Core/Src/system_stm32f1xx.c ****   */
 121:Core/Src/system_stm32f1xx.c **** 
 122:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Macros
 123:Core/Src/system_stm32f1xx.c ****   * @{
 124:Core/Src/system_stm32f1xx.c ****   */
 125:Core/Src/system_stm32f1xx.c **** 
 126:Core/Src/system_stm32f1xx.c **** /**
 127:Core/Src/system_stm32f1xx.c ****   * @}
 128:Core/Src/system_stm32f1xx.c ****   */
 129:Core/Src/system_stm32f1xx.c **** 
 130:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Variables
 131:Core/Src/system_stm32f1xx.c ****   * @{
 132:Core/Src/system_stm32f1xx.c ****   */
 133:Core/Src/system_stm32f1xx.c **** 
 134:Core/Src/system_stm32f1xx.c ****   /* This variable is updated in three ways:
 135:Core/Src/system_stm32f1xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 136:Core/Src/system_stm32f1xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 137:Core/Src/system_stm32f1xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
 138:Core/Src/system_stm32f1xx.c ****          Note: If you use this function to configure the system clock; then there
 139:Core/Src/system_stm32f1xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 140:Core/Src/system_stm32f1xx.c ****                variable is updated automatically.
 141:Core/Src/system_stm32f1xx.c ****   */
 142:Core/Src/system_stm32f1xx.c **** uint32_t SystemCoreClock = 16000000;
 143:Core/Src/system_stm32f1xx.c **** const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 144:Core/Src/system_stm32f1xx.c **** const uint8_t APBPrescTable[8U] =  {0, 0, 0, 0, 1, 2, 3, 4};
 145:Core/Src/system_stm32f1xx.c **** 
 146:Core/Src/system_stm32f1xx.c **** /**
ARM GAS  /tmp/ccOAG39d.s 			page 4


 147:Core/Src/system_stm32f1xx.c ****   * @}
 148:Core/Src/system_stm32f1xx.c ****   */
 149:Core/Src/system_stm32f1xx.c **** 
 150:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_FunctionPrototypes
 151:Core/Src/system_stm32f1xx.c ****   * @{
 152:Core/Src/system_stm32f1xx.c ****   */
 153:Core/Src/system_stm32f1xx.c **** 
 154:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 155:Core/Src/system_stm32f1xx.c **** #ifdef DATA_IN_ExtSRAM
 156:Core/Src/system_stm32f1xx.c ****   static void SystemInit_ExtMemCtl(void); 
 157:Core/Src/system_stm32f1xx.c **** #endif /* DATA_IN_ExtSRAM */
 158:Core/Src/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
 159:Core/Src/system_stm32f1xx.c **** 
 160:Core/Src/system_stm32f1xx.c **** /**
 161:Core/Src/system_stm32f1xx.c ****   * @}
 162:Core/Src/system_stm32f1xx.c ****   */
 163:Core/Src/system_stm32f1xx.c **** 
 164:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Functions
 165:Core/Src/system_stm32f1xx.c ****   * @{
 166:Core/Src/system_stm32f1xx.c ****   */
 167:Core/Src/system_stm32f1xx.c **** 
 168:Core/Src/system_stm32f1xx.c **** /**
 169:Core/Src/system_stm32f1xx.c ****   * @brief  Setup the microcontroller system
 170:Core/Src/system_stm32f1xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 171:Core/Src/system_stm32f1xx.c ****   *         SystemCoreClock variable.
 172:Core/Src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 173:Core/Src/system_stm32f1xx.c ****   * @param  None
 174:Core/Src/system_stm32f1xx.c ****   * @retval None
 175:Core/Src/system_stm32f1xx.c ****   */
 176:Core/Src/system_stm32f1xx.c **** void SystemInit (void)
 177:Core/Src/system_stm32f1xx.c **** {
  27              		.loc 1 177 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 178:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 179:Core/Src/system_stm32f1xx.c ****   #ifdef DATA_IN_ExtSRAM
 180:Core/Src/system_stm32f1xx.c ****     SystemInit_ExtMemCtl(); 
 181:Core/Src/system_stm32f1xx.c ****   #endif /* DATA_IN_ExtSRAM */
 182:Core/Src/system_stm32f1xx.c **** #endif 
 183:Core/Src/system_stm32f1xx.c **** 
 184:Core/Src/system_stm32f1xx.c ****   /* Configure the Vector Table location -------------------------------------*/
 185:Core/Src/system_stm32f1xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
 186:Core/Src/system_stm32f1xx.c ****   SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM.
 187:Core/Src/system_stm32f1xx.c **** #endif /* USER_VECT_TAB_ADDRESS */
 188:Core/Src/system_stm32f1xx.c **** }
  32              		.loc 1 188 1 view .LVU1
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE65:
  37              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  38              		.align	1
  39              		.global	SystemCoreClockUpdate
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
ARM GAS  /tmp/ccOAG39d.s 			page 5


  43              		.fpu softvfp
  45              	SystemCoreClockUpdate:
  46              	.LFB66:
 189:Core/Src/system_stm32f1xx.c **** 
 190:Core/Src/system_stm32f1xx.c **** /**
 191:Core/Src/system_stm32f1xx.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 192:Core/Src/system_stm32f1xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 193:Core/Src/system_stm32f1xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 194:Core/Src/system_stm32f1xx.c ****   *         other parameters.
 195:Core/Src/system_stm32f1xx.c ****   *           
 196:Core/Src/system_stm32f1xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 197:Core/Src/system_stm32f1xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 198:Core/Src/system_stm32f1xx.c ****   *         based on this variable will be incorrect.         
 199:Core/Src/system_stm32f1xx.c ****   *     
 200:Core/Src/system_stm32f1xx.c ****   * @note   - The system frequency computed by this function is not the real 
 201:Core/Src/system_stm32f1xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 202:Core/Src/system_stm32f1xx.c ****   *           constant and the selected clock source:
 203:Core/Src/system_stm32f1xx.c ****   *             
 204:Core/Src/system_stm32f1xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 205:Core/Src/system_stm32f1xx.c ****   *                                              
 206:Core/Src/system_stm32f1xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 207:Core/Src/system_stm32f1xx.c ****   *                          
 208:Core/Src/system_stm32f1xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 209:Core/Src/system_stm32f1xx.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 210:Core/Src/system_stm32f1xx.c ****   *         
 211:Core/Src/system_stm32f1xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 212:Core/Src/system_stm32f1xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 213:Core/Src/system_stm32f1xx.c ****   *             in voltage and temperature.   
 214:Core/Src/system_stm32f1xx.c ****   *    
 215:Core/Src/system_stm32f1xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 216:Core/Src/system_stm32f1xx.c ****   *              8 MHz or 25 MHz, depending on the product used), user has to ensure
 217:Core/Src/system_stm32f1xx.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 218:Core/Src/system_stm32f1xx.c ****   *              Otherwise, this function may have wrong result.
 219:Core/Src/system_stm32f1xx.c ****   *                
 220:Core/Src/system_stm32f1xx.c ****   *         - The result of this function could be not correct when using fractional
 221:Core/Src/system_stm32f1xx.c ****   *           value for HSE crystal.
 222:Core/Src/system_stm32f1xx.c ****   * @param  None
 223:Core/Src/system_stm32f1xx.c ****   * @retval None
 224:Core/Src/system_stm32f1xx.c ****   */
 225:Core/Src/system_stm32f1xx.c **** void SystemCoreClockUpdate (void)
 226:Core/Src/system_stm32f1xx.c **** {
  47              		.loc 1 226 1 view -0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52 0000 10B4     		push	{r4}
  53              		.cfi_def_cfa_offset 4
  54              		.cfi_offset 4, -4
 227:Core/Src/system_stm32f1xx.c ****   uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
  55              		.loc 1 227 3 view .LVU3
  56              	.LVL0:
 228:Core/Src/system_stm32f1xx.c **** 
 229:Core/Src/system_stm32f1xx.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 230:Core/Src/system_stm32f1xx.c ****   uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
  57              		.loc 1 230 3 view .LVU4
 231:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */
ARM GAS  /tmp/ccOAG39d.s 			page 6


 232:Core/Src/system_stm32f1xx.c **** 
 233:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xB) || defined(STM32F100xE)
 234:Core/Src/system_stm32f1xx.c ****   uint32_t prediv1factor = 0U;
 235:Core/Src/system_stm32f1xx.c **** #endif /* STM32F100xB or STM32F100xE */
 236:Core/Src/system_stm32f1xx.c ****     
 237:Core/Src/system_stm32f1xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 238:Core/Src/system_stm32f1xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
  58              		.loc 1 238 3 view .LVU5
  59              		.loc 1 238 12 is_stmt 0 view .LVU6
  60 0002 2C4B     		ldr	r3, .L13
  61 0004 5B68     		ldr	r3, [r3, #4]
  62              		.loc 1 238 7 view .LVU7
  63 0006 03F00C03 		and	r3, r3, #12
  64              	.LVL1:
 239:Core/Src/system_stm32f1xx.c ****   
 240:Core/Src/system_stm32f1xx.c ****   switch (tmp)
  65              		.loc 1 240 3 is_stmt 1 view .LVU8
  66 000a 042B     		cmp	r3, #4
  67 000c 15D0     		beq	.L3
  68 000e 082B     		cmp	r3, #8
  69 0010 17D0     		beq	.L4
  70 0012 1BB1     		cbz	r3, .L12
 241:Core/Src/system_stm32f1xx.c ****   {
 242:Core/Src/system_stm32f1xx.c ****     case 0x00U:  /* HSI used as system clock */
 243:Core/Src/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
 244:Core/Src/system_stm32f1xx.c ****       break;
 245:Core/Src/system_stm32f1xx.c ****     case 0x04U:  /* HSE used as system clock */
 246:Core/Src/system_stm32f1xx.c ****       SystemCoreClock = HSE_VALUE;
 247:Core/Src/system_stm32f1xx.c ****       break;
 248:Core/Src/system_stm32f1xx.c ****     case 0x08U:  /* PLL used as system clock */
 249:Core/Src/system_stm32f1xx.c **** 
 250:Core/Src/system_stm32f1xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 251:Core/Src/system_stm32f1xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 252:Core/Src/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 253:Core/Src/system_stm32f1xx.c ****       
 254:Core/Src/system_stm32f1xx.c **** #if !defined(STM32F105xC) && !defined(STM32F107xC)      
 255:Core/Src/system_stm32f1xx.c ****       pllmull = ( pllmull >> 18U) + 2U;
 256:Core/Src/system_stm32f1xx.c ****       
 257:Core/Src/system_stm32f1xx.c ****       if (pllsource == 0x00U)
 258:Core/Src/system_stm32f1xx.c ****       {
 259:Core/Src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 260:Core/Src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 261:Core/Src/system_stm32f1xx.c ****       }
 262:Core/Src/system_stm32f1xx.c ****       else
 263:Core/Src/system_stm32f1xx.c ****       {
 264:Core/Src/system_stm32f1xx.c ****  #if defined(STM32F100xB) || defined(STM32F100xE)
 265:Core/Src/system_stm32f1xx.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 266:Core/Src/system_stm32f1xx.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 267:Core/Src/system_stm32f1xx.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 268:Core/Src/system_stm32f1xx.c ****  #else
 269:Core/Src/system_stm32f1xx.c ****         /* HSE selected as PLL clock entry */
 270:Core/Src/system_stm32f1xx.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 271:Core/Src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 272:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 273:Core/Src/system_stm32f1xx.c ****         }
 274:Core/Src/system_stm32f1xx.c ****         else
 275:Core/Src/system_stm32f1xx.c ****         {
ARM GAS  /tmp/ccOAG39d.s 			page 7


 276:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 277:Core/Src/system_stm32f1xx.c ****         }
 278:Core/Src/system_stm32f1xx.c ****  #endif
 279:Core/Src/system_stm32f1xx.c ****       }
 280:Core/Src/system_stm32f1xx.c **** #else
 281:Core/Src/system_stm32f1xx.c ****       pllmull = pllmull >> 18U;
 282:Core/Src/system_stm32f1xx.c ****       
 283:Core/Src/system_stm32f1xx.c ****       if (pllmull != 0x0DU)
 284:Core/Src/system_stm32f1xx.c ****       {
 285:Core/Src/system_stm32f1xx.c ****          pllmull += 2U;
 286:Core/Src/system_stm32f1xx.c ****       }
 287:Core/Src/system_stm32f1xx.c ****       else
 288:Core/Src/system_stm32f1xx.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 289:Core/Src/system_stm32f1xx.c ****         pllmull = 13U / 2U; 
 290:Core/Src/system_stm32f1xx.c ****       }
 291:Core/Src/system_stm32f1xx.c ****             
 292:Core/Src/system_stm32f1xx.c ****       if (pllsource == 0x00U)
 293:Core/Src/system_stm32f1xx.c ****       {
 294:Core/Src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 295:Core/Src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 296:Core/Src/system_stm32f1xx.c ****       }
 297:Core/Src/system_stm32f1xx.c ****       else
 298:Core/Src/system_stm32f1xx.c ****       {/* PREDIV1 selected as PLL clock entry */
 299:Core/Src/system_stm32f1xx.c ****         
 300:Core/Src/system_stm32f1xx.c ****         /* Get PREDIV1 clock source and division factor */
 301:Core/Src/system_stm32f1xx.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 302:Core/Src/system_stm32f1xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 303:Core/Src/system_stm32f1xx.c ****         
 304:Core/Src/system_stm32f1xx.c ****         if (prediv1source == 0U)
 305:Core/Src/system_stm32f1xx.c ****         { 
 306:Core/Src/system_stm32f1xx.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 307:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 308:Core/Src/system_stm32f1xx.c ****         }
 309:Core/Src/system_stm32f1xx.c ****         else
 310:Core/Src/system_stm32f1xx.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 311:Core/Src/system_stm32f1xx.c ****           
 312:Core/Src/system_stm32f1xx.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 313:Core/Src/system_stm32f1xx.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 314:Core/Src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 315:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 316:Core/Src/system_stm32f1xx.c ****         }
 317:Core/Src/system_stm32f1xx.c ****       }
 318:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */ 
 319:Core/Src/system_stm32f1xx.c ****       break;
 320:Core/Src/system_stm32f1xx.c **** 
 321:Core/Src/system_stm32f1xx.c ****     default:
 322:Core/Src/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
  71              		.loc 1 322 7 view .LVU9
  72              		.loc 1 322 23 is_stmt 0 view .LVU10
  73 0014 284B     		ldr	r3, .L13+4
  74              	.LVL2:
  75              		.loc 1 322 23 view .LVU11
  76 0016 294A     		ldr	r2, .L13+8
  77 0018 1A60     		str	r2, [r3]
 323:Core/Src/system_stm32f1xx.c ****       break;
  78              		.loc 1 323 7 is_stmt 1 view .LVU12
  79 001a 02E0     		b	.L6
ARM GAS  /tmp/ccOAG39d.s 			page 8


  80              	.LVL3:
  81              	.L12:
 243:Core/Src/system_stm32f1xx.c ****       break;
  82              		.loc 1 243 7 view .LVU13
 243:Core/Src/system_stm32f1xx.c ****       break;
  83              		.loc 1 243 23 is_stmt 0 view .LVU14
  84 001c 264B     		ldr	r3, .L13+4
  85              	.LVL4:
 243:Core/Src/system_stm32f1xx.c ****       break;
  86              		.loc 1 243 23 view .LVU15
  87 001e 274A     		ldr	r2, .L13+8
  88 0020 1A60     		str	r2, [r3]
 244:Core/Src/system_stm32f1xx.c ****     case 0x04U:  /* HSE used as system clock */
  89              		.loc 1 244 7 is_stmt 1 view .LVU16
  90              	.LVL5:
  91              	.L6:
 324:Core/Src/system_stm32f1xx.c ****   }
 325:Core/Src/system_stm32f1xx.c ****   
 326:Core/Src/system_stm32f1xx.c ****   /* Compute HCLK clock frequency ----------------*/
 327:Core/Src/system_stm32f1xx.c ****   /* Get HCLK prescaler */
 328:Core/Src/system_stm32f1xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
  92              		.loc 1 328 3 view .LVU17
  93              		.loc 1 328 28 is_stmt 0 view .LVU18
  94 0022 244B     		ldr	r3, .L13
  95 0024 5B68     		ldr	r3, [r3, #4]
  96              		.loc 1 328 52 view .LVU19
  97 0026 C3F30313 		ubfx	r3, r3, #4, #4
  98              		.loc 1 328 22 view .LVU20
  99 002a 254A     		ldr	r2, .L13+12
 100 002c D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 101              	.LVL6:
 329:Core/Src/system_stm32f1xx.c ****   /* HCLK clock frequency */
 330:Core/Src/system_stm32f1xx.c ****   SystemCoreClock >>= tmp;  
 102              		.loc 1 330 3 is_stmt 1 view .LVU21
 103              		.loc 1 330 19 is_stmt 0 view .LVU22
 104 002e 224A     		ldr	r2, .L13+4
 105 0030 1368     		ldr	r3, [r2]
 106 0032 CB40     		lsrs	r3, r3, r1
 107 0034 1360     		str	r3, [r2]
 331:Core/Src/system_stm32f1xx.c **** }
 108              		.loc 1 331 1 view .LVU23
 109 0036 10BC     		pop	{r4}
 110              		.cfi_remember_state
 111              		.cfi_restore 4
 112              		.cfi_def_cfa_offset 0
 113 0038 7047     		bx	lr
 114              	.LVL7:
 115              	.L3:
 116              		.cfi_restore_state
 246:Core/Src/system_stm32f1xx.c ****       break;
 117              		.loc 1 246 7 is_stmt 1 view .LVU24
 246:Core/Src/system_stm32f1xx.c ****       break;
 118              		.loc 1 246 23 is_stmt 0 view .LVU25
 119 003a 1F4B     		ldr	r3, .L13+4
 120              	.LVL8:
 246:Core/Src/system_stm32f1xx.c ****       break;
 121              		.loc 1 246 23 view .LVU26
ARM GAS  /tmp/ccOAG39d.s 			page 9


 122 003c 1F4A     		ldr	r2, .L13+8
 123 003e 1A60     		str	r2, [r3]
 247:Core/Src/system_stm32f1xx.c ****     case 0x08U:  /* PLL used as system clock */
 124              		.loc 1 247 7 is_stmt 1 view .LVU27
 125 0040 EFE7     		b	.L6
 126              	.LVL9:
 127              	.L4:
 251:Core/Src/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 128              		.loc 1 251 7 view .LVU28
 251:Core/Src/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 129              		.loc 1 251 20 is_stmt 0 view .LVU29
 130 0042 1C4A     		ldr	r2, .L13
 131 0044 5368     		ldr	r3, [r2, #4]
 132              	.LVL10:
 252:Core/Src/system_stm32f1xx.c ****       
 133              		.loc 1 252 7 is_stmt 1 view .LVU30
 252:Core/Src/system_stm32f1xx.c ****       
 134              		.loc 1 252 22 is_stmt 0 view .LVU31
 135 0046 5268     		ldr	r2, [r2, #4]
 252:Core/Src/system_stm32f1xx.c ****       
 136              		.loc 1 252 17 view .LVU32
 137 0048 02F48032 		and	r2, r2, #65536
 138              	.LVL11:
 281:Core/Src/system_stm32f1xx.c ****       
 139              		.loc 1 281 7 is_stmt 1 view .LVU33
 281:Core/Src/system_stm32f1xx.c ****       
 140              		.loc 1 281 15 is_stmt 0 view .LVU34
 141 004c C3F38343 		ubfx	r3, r3, #18, #4
 142              	.LVL12:
 283:Core/Src/system_stm32f1xx.c ****       {
 143              		.loc 1 283 7 is_stmt 1 view .LVU35
 283:Core/Src/system_stm32f1xx.c ****       {
 144              		.loc 1 283 10 is_stmt 0 view .LVU36
 145 0050 0D2B     		cmp	r3, #13
 146 0052 07D0     		beq	.L10
 285:Core/Src/system_stm32f1xx.c ****       }
 147              		.loc 1 285 10 is_stmt 1 view .LVU37
 285:Core/Src/system_stm32f1xx.c ****       }
 148              		.loc 1 285 18 is_stmt 0 view .LVU38
 149 0054 0233     		adds	r3, r3, #2
 150              	.LVL13:
 151              	.L7:
 292:Core/Src/system_stm32f1xx.c ****       {
 152              		.loc 1 292 7 is_stmt 1 view .LVU39
 292:Core/Src/system_stm32f1xx.c ****       {
 153              		.loc 1 292 10 is_stmt 0 view .LVU40
 154 0056 3AB9     		cbnz	r2, .L8
 295:Core/Src/system_stm32f1xx.c ****       }
 155              		.loc 1 295 9 is_stmt 1 view .LVU41
 295:Core/Src/system_stm32f1xx.c ****       }
 156              		.loc 1 295 45 is_stmt 0 view .LVU42
 157 0058 1A4A     		ldr	r2, .L13+16
 158              	.LVL14:
 295:Core/Src/system_stm32f1xx.c ****       }
 159              		.loc 1 295 45 view .LVU43
 160 005a 02FB03F3 		mul	r3, r2, r3
 161              	.LVL15:
ARM GAS  /tmp/ccOAG39d.s 			page 10


 295:Core/Src/system_stm32f1xx.c ****       }
 162              		.loc 1 295 25 view .LVU44
 163 005e 164A     		ldr	r2, .L13+4
 164 0060 1360     		str	r3, [r2]
 165 0062 DEE7     		b	.L6
 166              	.LVL16:
 167              	.L10:
 289:Core/Src/system_stm32f1xx.c ****       }
 168              		.loc 1 289 17 view .LVU45
 169 0064 0623     		movs	r3, #6
 170              	.LVL17:
 289:Core/Src/system_stm32f1xx.c ****       }
 171              		.loc 1 289 17 view .LVU46
 172 0066 F6E7     		b	.L7
 173              	.LVL18:
 174              	.L8:
 301:Core/Src/system_stm32f1xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 175              		.loc 1 301 9 is_stmt 1 view .LVU47
 301:Core/Src/system_stm32f1xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 176              		.loc 1 301 28 is_stmt 0 view .LVU48
 177 0068 124A     		ldr	r2, .L13
 178              	.LVL19:
 301:Core/Src/system_stm32f1xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 179              		.loc 1 301 28 view .LVU49
 180 006a D16A     		ldr	r1, [r2, #44]
 181              	.LVL20:
 302:Core/Src/system_stm32f1xx.c ****         
 182              		.loc 1 302 9 is_stmt 1 view .LVU50
 302:Core/Src/system_stm32f1xx.c ****         
 183              		.loc 1 302 29 is_stmt 0 view .LVU51
 184 006c D26A     		ldr	r2, [r2, #44]
 302:Core/Src/system_stm32f1xx.c ****         
 185              		.loc 1 302 37 view .LVU52
 186 006e 02F00F02 		and	r2, r2, #15
 302:Core/Src/system_stm32f1xx.c ****         
 187              		.loc 1 302 23 view .LVU53
 188 0072 0132     		adds	r2, r2, #1
 189              	.LVL21:
 304:Core/Src/system_stm32f1xx.c ****         { 
 190              		.loc 1 304 9 is_stmt 1 view .LVU54
 304:Core/Src/system_stm32f1xx.c ****         { 
 191              		.loc 1 304 12 is_stmt 0 view .LVU55
 192 0074 11F4803F 		tst	r1, #65536
 193 0078 07D1     		bne	.L9
 307:Core/Src/system_stm32f1xx.c ****         }
 194              		.loc 1 307 11 is_stmt 1 view .LVU56
 307:Core/Src/system_stm32f1xx.c ****         }
 195              		.loc 1 307 40 is_stmt 0 view .LVU57
 196 007a 1049     		ldr	r1, .L13+8
 197              	.LVL22:
 307:Core/Src/system_stm32f1xx.c ****         }
 198              		.loc 1 307 40 view .LVU58
 199 007c B1FBF2F2 		udiv	r2, r1, r2
 200              	.LVL23:
 307:Core/Src/system_stm32f1xx.c ****         }
 201              		.loc 1 307 57 view .LVU59
 202 0080 03FB02F3 		mul	r3, r3, r2
ARM GAS  /tmp/ccOAG39d.s 			page 11


 203              	.LVL24:
 307:Core/Src/system_stm32f1xx.c ****         }
 204              		.loc 1 307 27 view .LVU60
 205 0084 0C4A     		ldr	r2, .L13+4
 206 0086 1360     		str	r3, [r2]
 207 0088 CBE7     		b	.L6
 208              	.LVL25:
 209              	.L9:
 313:Core/Src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 210              		.loc 1 313 11 is_stmt 1 view .LVU61
 313:Core/Src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 211              		.loc 1 313 32 is_stmt 0 view .LVU62
 212 008a 0A49     		ldr	r1, .L13
 213              	.LVL26:
 313:Core/Src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 214              		.loc 1 313 32 view .LVU63
 215 008c C86A     		ldr	r0, [r1, #44]
 313:Core/Src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 216              		.loc 1 313 61 view .LVU64
 217 008e C0F30310 		ubfx	r0, r0, #4, #4
 313:Core/Src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 218              		.loc 1 313 25 view .LVU65
 219 0092 0130     		adds	r0, r0, #1
 220              	.LVL27:
 314:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 221              		.loc 1 314 11 is_stmt 1 view .LVU66
 314:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 222              		.loc 1 314 27 is_stmt 0 view .LVU67
 223 0094 C96A     		ldr	r1, [r1, #44]
 314:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 224              		.loc 1 314 56 view .LVU68
 225 0096 C1F30321 		ubfx	r1, r1, #8, #4
 314:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 226              		.loc 1 314 20 view .LVU69
 227 009a 0231     		adds	r1, r1, #2
 228              	.LVL28:
 315:Core/Src/system_stm32f1xx.c ****         }
 229              		.loc 1 315 11 is_stmt 1 view .LVU70
 315:Core/Src/system_stm32f1xx.c ****         }
 230              		.loc 1 315 42 is_stmt 0 view .LVU71
 231 009c 074C     		ldr	r4, .L13+8
 232 009e B4FBF0F0 		udiv	r0, r4, r0
 233              	.LVL29:
 315:Core/Src/system_stm32f1xx.c ****         }
 234              		.loc 1 315 59 view .LVU72
 235 00a2 01FB00F1 		mul	r1, r1, r0
 236              	.LVL30:
 315:Core/Src/system_stm32f1xx.c ****         }
 237              		.loc 1 315 71 view .LVU73
 238 00a6 B1FBF2F2 		udiv	r2, r1, r2
 239              	.LVL31:
 315:Core/Src/system_stm32f1xx.c ****         }
 240              		.loc 1 315 88 view .LVU74
 241 00aa 03FB02F3 		mul	r3, r3, r2
 242              	.LVL32:
 315:Core/Src/system_stm32f1xx.c ****         }
 243              		.loc 1 315 27 view .LVU75
ARM GAS  /tmp/ccOAG39d.s 			page 12


 244 00ae 024A     		ldr	r2, .L13+4
 245 00b0 1360     		str	r3, [r2]
 246 00b2 B6E7     		b	.L6
 247              	.L14:
 248              		.align	2
 249              	.L13:
 250 00b4 00100240 		.word	1073876992
 251 00b8 00000000 		.word	.LANCHOR0
 252 00bc 00127A00 		.word	8000000
 253 00c0 00000000 		.word	.LANCHOR1
 254 00c4 00093D00 		.word	4000000
 255              		.cfi_endproc
 256              	.LFE66:
 258              		.global	APBPrescTable
 259              		.global	AHBPrescTable
 260              		.global	SystemCoreClock
 261              		.section	.data.SystemCoreClock,"aw"
 262              		.align	2
 263              		.set	.LANCHOR0,. + 0
 266              	SystemCoreClock:
 267 0000 0024F400 		.word	16000000
 268              		.section	.rodata.AHBPrescTable,"a"
 269              		.align	2
 270              		.set	.LANCHOR1,. + 0
 273              	AHBPrescTable:
 274 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\001\002\003\004\006"
 274      00000000 
 274      01020304 
 274      06
 275 000d 070809   		.ascii	"\007\010\011"
 276              		.section	.rodata.APBPrescTable,"a"
 277              		.align	2
 280              	APBPrescTable:
 281 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004"
 281      01020304 
 282              		.text
 283              	.Letext0:
 284              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 285              		.file 3 "Drivers/CMSIS/Include/core_cm3.h"
 286              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 287              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 288              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccOAG39d.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f1xx.c
     /tmp/ccOAG39d.s:16     .text.SystemInit:0000000000000000 $t
     /tmp/ccOAG39d.s:24     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccOAG39d.s:38     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccOAG39d.s:45     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccOAG39d.s:250    .text.SystemCoreClockUpdate:00000000000000b4 $d
     /tmp/ccOAG39d.s:280    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccOAG39d.s:273    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccOAG39d.s:266    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccOAG39d.s:262    .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccOAG39d.s:269    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccOAG39d.s:277    .rodata.APBPrescTable:0000000000000000 $d

NO UNDEFINED SYMBOLS
