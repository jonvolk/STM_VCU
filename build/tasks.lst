ARM GAS  /tmp/cci5v3JD.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTaskIsTaskSuspended:
  23              	.LFB16:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
ARM GAS  /tmp/cci5v3JD.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
ARM GAS  /tmp/cci5v3JD.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
ARM GAS  /tmp/cci5v3JD.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
ARM GAS  /tmp/cci5v3JD.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/cci5v3JD.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
ARM GAS  /tmp/cci5v3JD.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
ARM GAS  /tmp/cci5v3JD.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  /tmp/cci5v3JD.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
ARM GAS  /tmp/cci5v3JD.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
ARM GAS  /tmp/cci5v3JD.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
ARM GAS  /tmp/cci5v3JD.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
ARM GAS  /tmp/cci5v3JD.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/cci5v3JD.s 			page 14


 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
ARM GAS  /tmp/cci5v3JD.s 			page 15


 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
ARM GAS  /tmp/cci5v3JD.s 			page 16


 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
ARM GAS  /tmp/cci5v3JD.s 			page 17


 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /tmp/cci5v3JD.s 			page 18


 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cci5v3JD.s 			page 19


1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cci5v3JD.s 			page 20


1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  /tmp/cci5v3JD.s 			page 21


1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cci5v3JD.s 			page 22


1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cci5v3JD.s 			page 23


1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cci5v3JD.s 			page 24


1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cci5v3JD.s 			page 25


1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 26


1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 27


1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/cci5v3JD.s 			page 28


1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cci5v3JD.s 			page 29


1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
ARM GAS  /tmp/cci5v3JD.s 			page 30


1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
ARM GAS  /tmp/cci5v3JD.s 			page 31


1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  25              		.loc 1 1726 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  31              		.loc 1 1734 0
  32 0000 0246     		mov	r2, r0
  33 0002 70B1     		cbz	r0, .L12
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 32


1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  34              		.loc 1 1737 0
  35 0004 4169     		ldr	r1, [r0, #20]
  36 0006 0F4B     		ldr	r3, .L15
  37 0008 9942     		cmp	r1, r3
  38 000a 13D0     		beq	.L13
  39 000c 0023     		movs	r3, #0
  40              	.L4:
  41              		.loc 1 1737 0 is_stmt 0 discriminator 4
  42 000e ABB1     		cbz	r3, .L8
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  43              		.loc 1 1740 0 is_stmt 1
  44 0010 926A     		ldr	r2, [r2, #40]
  45 0012 0D49     		ldr	r1, .L15+4
  46 0014 8A42     		cmp	r2, r1
  47 0016 13D0     		beq	.L9
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  48              		.loc 1 1744 0
  49 0018 02B1     		cbz	r2, .L6
  50 001a 0023     		movs	r3, #0
  51              	.L6:
  52              		.loc 1 1744 0 is_stmt 0 discriminator 4
  53 001c 63B1     		cbz	r3, .L14
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  54              		.loc 1 1746 0 is_stmt 1
  55 001e 0120     		movs	r0, #1
  56              	.LVL1:
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  57              		.loc 1 1764 0
  58 0020 7047     		bx	lr
  59              	.LVL2:
  60              	.L12:
  61              	.LBB113:
ARM GAS  /tmp/cci5v3JD.s 			page 33


  62              	.LBB114:
  63              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
ARM GAS  /tmp/cci5v3JD.s 			page 34


  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
ARM GAS  /tmp/cci5v3JD.s 			page 35


 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
ARM GAS  /tmp/cci5v3JD.s 			page 36


 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
  64              		.loc 2 195 0
  65              		.syntax unified
  66              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
  67 0022 4FF05003 			mov r3, #80												
  68 0026 83F31188 		msr basepri, r3											
  69 002a BFF36F8F 		isb														
  70 002e BFF34F8F 		dsb														
  71              	
  72              	@ 0 "" 2
  73              	.LVL3:
  74              		.thumb
  75              		.syntax unified
  76              	.L3:
  77 0032 FEE7     		b	.L3
  78              	.L13:
  79              	.LBE114:
  80              	.LBE113:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
  81              		.loc 1 1737 0
  82 0034 0123     		movs	r3, #1
  83 0036 EAE7     		b	.L4
  84              	.L14:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  85              		.loc 1 1727 0
  86 0038 0020     		movs	r0, #0
  87              	.LVL4:
  88 003a 7047     		bx	lr
  89              	.LVL5:
  90              	.L8:
  91 003c 0020     		movs	r0, #0
  92              	.LVL6:
ARM GAS  /tmp/cci5v3JD.s 			page 37


  93 003e 7047     		bx	lr
  94              	.LVL7:
  95              	.L9:
  96 0040 0020     		movs	r0, #0
  97              	.LVL8:
  98 0042 7047     		bx	lr
  99              	.L16:
 100              		.align	2
 101              	.L15:
 102 0044 00000000 		.word	.LANCHOR0
 103 0048 00000000 		.word	.LANCHOR1
 104              		.cfi_endproc
 105              	.LFE16:
 107              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 108              		.align	1
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu softvfp
 114              	prvTaskCheckFreeStackSpace:
 115              	.LFB46:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cci5v3JD.s 			page 38


1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
ARM GAS  /tmp/cci5v3JD.s 			page 39


1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
ARM GAS  /tmp/cci5v3JD.s 			page 40


1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
ARM GAS  /tmp/cci5v3JD.s 			page 41


1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
ARM GAS  /tmp/cci5v3JD.s 			page 42


2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
ARM GAS  /tmp/cci5v3JD.s 			page 43


2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  /tmp/cci5v3JD.s 			page 44


2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cci5v3JD.s 			page 45


2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cci5v3JD.s 			page 46


2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cci5v3JD.s 			page 47


2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
ARM GAS  /tmp/cci5v3JD.s 			page 48


2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cci5v3JD.s 			page 49


2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 50


2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/cci5v3JD.s 			page 51


2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 52


2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/cci5v3JD.s 			page 53


2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
ARM GAS  /tmp/cci5v3JD.s 			page 54


2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
ARM GAS  /tmp/cci5v3JD.s 			page 55


2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cci5v3JD.s 			page 56


2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
ARM GAS  /tmp/cci5v3JD.s 			page 57


2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 58


2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  /tmp/cci5v3JD.s 			page 59


2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
ARM GAS  /tmp/cci5v3JD.s 			page 60


3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
ARM GAS  /tmp/cci5v3JD.s 			page 61


3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 62


3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 63


3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
ARM GAS  /tmp/cci5v3JD.s 			page 64


3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
ARM GAS  /tmp/cci5v3JD.s 			page 65


3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/cci5v3JD.s 			page 66


3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/cci5v3JD.s 			page 67


3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
ARM GAS  /tmp/cci5v3JD.s 			page 68


3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cci5v3JD.s 			page 69


3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 116              		.loc 1 3623 0
ARM GAS  /tmp/cci5v3JD.s 			page 70


 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              	.LVL9:
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 122              		.loc 1 3624 0
 123 0000 0023     		movs	r3, #0
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 124              		.loc 1 3626 0
 125 0002 01E0     		b	.L18
 126              	.LVL10:
 127              	.L19:
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 128              		.loc 1 3628 0
 129 0004 0130     		adds	r0, r0, #1
 130              	.LVL11:
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 131              		.loc 1 3629 0
 132 0006 0133     		adds	r3, r3, #1
 133              	.LVL12:
 134              	.L18:
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 135              		.loc 1 3626 0
 136 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 137 000a A52A     		cmp	r2, #165
 138 000c FAD0     		beq	.L19
 139              	.LVL13:
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 140              		.loc 1 3635 0
 141 000e C3F38F00 		ubfx	r0, r3, #2, #16
 142              	.LVL14:
 143 0012 7047     		bx	lr
 144              		.cfi_endproc
 145              	.LFE46:
 147              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 148              		.align	1
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu softvfp
 154              	prvResetNextTaskUnblockTime:
 155              	.LFB49:
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
ARM GAS  /tmp/cci5v3JD.s 			page 71


3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
ARM GAS  /tmp/cci5v3JD.s 			page 72


3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 156              		.loc 1 3725 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 161              		.loc 1 3728 0
 162 0000 0A4B     		ldr	r3, .L26
 163 0002 1B68     		ldr	r3, [r3]
 164 0004 1B68     		ldr	r3, [r3]
 165 0006 4BB9     		cbnz	r3, .L24
 166 0008 0123     		movs	r3, #1
 167              	.L21:
 168              		.loc 1 3728 0 is_stmt 0 discriminator 4
 169 000a 4BB9     		cbnz	r3, .L25
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
ARM GAS  /tmp/cci5v3JD.s 			page 73


 170              		.loc 1 3742 0 is_stmt 1
 171 000c 074B     		ldr	r3, .L26
 172 000e 1B68     		ldr	r3, [r3]
 173 0010 DB68     		ldr	r3, [r3, #12]
 174 0012 DB68     		ldr	r3, [r3, #12]
 175              	.LVL15:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 176              		.loc 1 3743 0
 177 0014 5A68     		ldr	r2, [r3, #4]
 178 0016 064B     		ldr	r3, .L26+4
 179              	.LVL16:
 180 0018 1A60     		str	r2, [r3]
 181 001a 7047     		bx	lr
 182              	.L24:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 183              		.loc 1 3728 0
 184 001c 0023     		movs	r3, #0
 185 001e F4E7     		b	.L21
 186              	.L25:
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 187              		.loc 1 3734 0
 188 0020 4FF0FF32 		mov	r2, #-1
 189 0024 024B     		ldr	r3, .L26+4
 190 0026 1A60     		str	r2, [r3]
 191 0028 7047     		bx	lr
 192              	.L27:
 193 002a 00BF     		.align	2
 194              	.L26:
 195 002c 00000000 		.word	.LANCHOR2
 196 0030 00000000 		.word	.LANCHOR3
 197              		.cfi_endproc
 198              	.LFE49:
 200              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 201              		.align	1
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu softvfp
 207              	prvInitialiseNewTask:
 208              	.LFB6:
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 209              		.loc 1 825 0
 210              		.cfi_startproc
 211              		@ args = 16, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              	.LVL17:
 214 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 215              	.LCFI0:
 216              		.cfi_def_cfa_offset 32
 217              		.cfi_offset 4, -32
 218              		.cfi_offset 5, -28
 219              		.cfi_offset 6, -24
 220              		.cfi_offset 7, -20
 221              		.cfi_offset 8, -16
 222              		.cfi_offset 9, -12
 223              		.cfi_offset 10, -8
 224              		.cfi_offset 14, -4
ARM GAS  /tmp/cci5v3JD.s 			page 74


 225 0004 8146     		mov	r9, r0
 226 0006 0D46     		mov	r5, r1
 227 0008 1746     		mov	r7, r2
 228 000a 9A46     		mov	r10, r3
 229 000c 089E     		ldr	r6, [sp, #32]
 230 000e DDF82480 		ldr	r8, [sp, #36]
 231 0012 0A9C     		ldr	r4, [sp, #40]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232              		.loc 1 847 0
 233 0014 9200     		lsls	r2, r2, #2
 234              	.LVL18:
 235 0016 A521     		movs	r1, #165
 236              	.LVL19:
 237 0018 206B     		ldr	r0, [r4, #48]
 238              	.LVL20:
 239 001a FFF7FEFF 		bl	memset
 240              	.LVL21:
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 241              		.loc 1 857 0
 242 001e 236B     		ldr	r3, [r4, #48]
 243 0020 07F18042 		add	r2, r7, #1073741824
 244 0024 013A     		subs	r2, r2, #1
 245 0026 03EB8207 		add	r7, r3, r2, lsl #2
 246              	.LVL22:
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247              		.loc 1 858 0
 248 002a 27F00707 		bic	r7, r7, #7
 249              	.LVL23:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 250              		.loc 1 885 0
 251 002e 0023     		movs	r3, #0
 252              	.LVL24:
 253              	.L29:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 254              		.loc 1 885 0 is_stmt 0 discriminator 1
 255 0030 0F2B     		cmp	r3, #15
 256 0032 07D8     		bhi	.L30
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 257              		.loc 1 887 0 is_stmt 1
 258 0034 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 259 0036 E218     		adds	r2, r4, r3
 260 0038 82F83410 		strb	r1, [r2, #52]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 261              		.loc 1 892 0
 262 003c EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 263 003e 0AB1     		cbz	r2, .L30
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 264              		.loc 1 885 0 discriminator 2
 265 0040 0133     		adds	r3, r3, #1
 266              	.LVL25:
 267 0042 F5E7     		b	.L29
 268              	.L30:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 269              		.loc 1 904 0
 270 0044 0023     		movs	r3, #0
 271              	.LVL26:
 272 0046 84F84330 		strb	r3, [r4, #67]
ARM GAS  /tmp/cci5v3JD.s 			page 75


 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 273              		.loc 1 908 0
 274 004a 372E     		cmp	r6, #55
 275 004c 00D9     		bls	.L32
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 276              		.loc 1 910 0
 277 004e 3726     		movs	r6, #55
 278              	.L32:
 279              	.LVL27:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280              		.loc 1 917 0
 281 0050 E662     		str	r6, [r4, #44]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 282              		.loc 1 920 0
 283 0052 E664     		str	r6, [r4, #76]
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 284              		.loc 1 921 0
 285 0054 0025     		movs	r5, #0
 286              	.LVL28:
 287 0056 2565     		str	r5, [r4, #80]
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 288              		.loc 1 925 0
 289 0058 201D     		adds	r0, r4, #4
 290 005a FFF7FEFF 		bl	vListInitialiseItem
 291              	.LVL29:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292              		.loc 1 926 0
 293 005e 04F11800 		add	r0, r4, #24
 294 0062 FFF7FEFF 		bl	vListInitialiseItem
 295              	.LVL30:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296              		.loc 1 930 0
 297 0066 2461     		str	r4, [r4, #16]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 298              		.loc 1 933 0
 299 0068 C6F13806 		rsb	r6, r6, #56
 300              	.LVL31:
 301 006c A661     		str	r6, [r4, #24]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 302              		.loc 1 934 0
 303 006e 6462     		str	r4, [r4, #36]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 304              		.loc 1 976 0
 305 0070 6565     		str	r5, [r4, #84]
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 306              		.loc 1 977 0
 307 0072 84F85850 		strb	r5, [r4, #88]
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 308              		.loc 1 1004 0
 309 0076 5246     		mov	r2, r10
 310 0078 4946     		mov	r1, r9
 311 007a 3846     		mov	r0, r7
 312 007c FFF7FEFF 		bl	pxPortInitialiseStack
 313              	.LVL32:
 314 0080 2060     		str	r0, [r4]
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 315              		.loc 1 1008 0
ARM GAS  /tmp/cci5v3JD.s 			page 76


 316 0082 B8F1000F 		cmp	r8, #0
 317 0086 01D0     		beq	.L28
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 318              		.loc 1 1012 0
 319 0088 C8F80040 		str	r4, [r8]
 320              	.L28:
 321 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 322              		.cfi_endproc
 323              	.LFE6:
 325              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 326              		.align	1
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu softvfp
 332              	prvInitialiseTaskLists:
 333              	.LFB42:
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 334              		.loc 1 3431 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338 0000 38B5     		push	{r3, r4, r5, lr}
 339              	.LCFI1:
 340              		.cfi_def_cfa_offset 16
 341              		.cfi_offset 3, -16
 342              		.cfi_offset 4, -12
 343              		.cfi_offset 5, -8
 344              		.cfi_offset 14, -4
 345              	.LVL33:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 346              		.loc 1 3434 0
 347 0002 0024     		movs	r4, #0
 348 0004 07E0     		b	.L37
 349              	.LVL34:
 350              	.L38:
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 351              		.loc 1 3436 0 discriminator 3
 352 0006 04EB8402 		add	r2, r4, r4, lsl #2
 353 000a 9300     		lsls	r3, r2, #2
 354 000c 0E48     		ldr	r0, .L40
 355 000e 1844     		add	r0, r0, r3
 356 0010 FFF7FEFF 		bl	vListInitialise
 357              	.LVL35:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 358              		.loc 1 3434 0 discriminator 3
 359 0014 0134     		adds	r4, r4, #1
 360              	.LVL36:
 361              	.L37:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 362              		.loc 1 3434 0 is_stmt 0 discriminator 1
 363 0016 372C     		cmp	r4, #55
 364 0018 F5D9     		bls	.L38
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 365              		.loc 1 3439 0 is_stmt 1
 366 001a 0C4D     		ldr	r5, .L40+4
 367 001c 2846     		mov	r0, r5
ARM GAS  /tmp/cci5v3JD.s 			page 77


 368 001e FFF7FEFF 		bl	vListInitialise
 369              	.LVL37:
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 370              		.loc 1 3440 0
 371 0022 0B4C     		ldr	r4, .L40+8
 372              	.LVL38:
 373 0024 2046     		mov	r0, r4
 374 0026 FFF7FEFF 		bl	vListInitialise
 375              	.LVL39:
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 376              		.loc 1 3441 0
 377 002a 0A48     		ldr	r0, .L40+12
 378 002c FFF7FEFF 		bl	vListInitialise
 379              	.LVL40:
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 380              		.loc 1 3445 0
 381 0030 0948     		ldr	r0, .L40+16
 382 0032 FFF7FEFF 		bl	vListInitialise
 383              	.LVL41:
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 384              		.loc 1 3451 0
 385 0036 0948     		ldr	r0, .L40+20
 386 0038 FFF7FEFF 		bl	vListInitialise
 387              	.LVL42:
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 388              		.loc 1 3457 0
 389 003c 084B     		ldr	r3, .L40+24
 390 003e 1D60     		str	r5, [r3]
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 391              		.loc 1 3458 0
 392 0040 084B     		ldr	r3, .L40+28
 393 0042 1C60     		str	r4, [r3]
 394 0044 38BD     		pop	{r3, r4, r5, pc}
 395              	.L41:
 396 0046 00BF     		.align	2
 397              	.L40:
 398 0048 00000000 		.word	.LANCHOR4
 399 004c 00000000 		.word	.LANCHOR5
 400 0050 00000000 		.word	.LANCHOR6
 401 0054 00000000 		.word	.LANCHOR1
 402 0058 00000000 		.word	.LANCHOR7
 403 005c 00000000 		.word	.LANCHOR0
 404 0060 00000000 		.word	.LANCHOR2
 405 0064 00000000 		.word	.LANCHOR8
 406              		.cfi_endproc
 407              	.LFE42:
 409              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 410              		.align	1
 411              		.syntax unified
 412              		.thumb
 413              		.thumb_func
 414              		.fpu softvfp
 416              	prvAddNewTaskToReadyList:
 417              	.LFB7:
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 418              		.loc 1 1022 0
 419              		.cfi_startproc
ARM GAS  /tmp/cci5v3JD.s 			page 78


 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              	.LVL43:
 423 0000 10B5     		push	{r4, lr}
 424              	.LCFI2:
 425              		.cfi_def_cfa_offset 8
 426              		.cfi_offset 4, -8
 427              		.cfi_offset 14, -4
 428 0002 0446     		mov	r4, r0
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 429              		.loc 1 1025 0
 430 0004 FFF7FEFF 		bl	vPortEnterCritical
 431              	.LVL44:
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 432              		.loc 1 1027 0
 433 0008 214A     		ldr	r2, .L49
 434 000a 1368     		ldr	r3, [r2]
 435 000c 0133     		adds	r3, r3, #1
 436 000e 1360     		str	r3, [r2]
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 437              		.loc 1 1028 0
 438 0010 204B     		ldr	r3, .L49+4
 439 0012 1B68     		ldr	r3, [r3]
 440 0014 002B     		cmp	r3, #0
 441 0016 32D0     		beq	.L48
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 442              		.loc 1 1051 0
 443 0018 1F4B     		ldr	r3, .L49+8
 444 001a 1B68     		ldr	r3, [r3]
 445 001c 3BB9     		cbnz	r3, .L44
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 446              		.loc 1 1053 0
 447 001e 1D4B     		ldr	r3, .L49+4
 448 0020 1B68     		ldr	r3, [r3]
 449 0022 DA6A     		ldr	r2, [r3, #44]
 450 0024 E36A     		ldr	r3, [r4, #44]
 451 0026 9A42     		cmp	r2, r3
 452 0028 01D8     		bhi	.L44
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 453              		.loc 1 1055 0
 454 002a 1A4B     		ldr	r3, .L49+4
 455 002c 1C60     		str	r4, [r3]
 456              	.L44:
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 457              		.loc 1 1068 0
 458 002e 1B4A     		ldr	r2, .L49+12
 459 0030 1368     		ldr	r3, [r2]
 460 0032 0133     		adds	r3, r3, #1
 461 0034 1360     		str	r3, [r2]
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 462              		.loc 1 1073 0
 463 0036 6364     		str	r3, [r4, #68]
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464              		.loc 1 1078 0
 465 0038 E36A     		ldr	r3, [r4, #44]
 466 003a 194A     		ldr	r2, .L49+16
 467 003c 1268     		ldr	r2, [r2]
ARM GAS  /tmp/cci5v3JD.s 			page 79


 468 003e 9342     		cmp	r3, r2
 469 0040 01D9     		bls	.L45
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 470              		.loc 1 1078 0 is_stmt 0 discriminator 1
 471 0042 174A     		ldr	r2, .L49+16
 472 0044 1360     		str	r3, [r2]
 473              	.L45:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 474              		.loc 1 1078 0 discriminator 3
 475 0046 03EB8303 		add	r3, r3, r3, lsl #2
 476 004a 9A00     		lsls	r2, r3, #2
 477 004c 211D     		adds	r1, r4, #4
 478 004e 1548     		ldr	r0, .L49+20
 479 0050 1044     		add	r0, r0, r2
 480 0052 FFF7FEFF 		bl	vListInsertEnd
 481              	.LVL45:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482              		.loc 1 1082 0 is_stmt 1 discriminator 3
 483 0056 FFF7FEFF 		bl	vPortExitCritical
 484              	.LVL46:
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 485              		.loc 1 1084 0 discriminator 3
 486 005a 0F4B     		ldr	r3, .L49+8
 487 005c 1B68     		ldr	r3, [r3]
 488 005e 6BB1     		cbz	r3, .L42
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 489              		.loc 1 1088 0
 490 0060 0C4B     		ldr	r3, .L49+4
 491 0062 1B68     		ldr	r3, [r3]
 492 0064 DA6A     		ldr	r2, [r3, #44]
 493 0066 E36A     		ldr	r3, [r4, #44]
 494 0068 9A42     		cmp	r2, r3
 495 006a 07D2     		bcs	.L42
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 496              		.loc 1 1090 0
 497 006c 4FF08052 		mov	r2, #268435456
 498 0070 0D4B     		ldr	r3, .L49+24
 499 0072 1A60     		str	r2, [r3]
 500              		.syntax unified
 501              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 502 0074 BFF34F8F 		dsb
 503              	@ 0 "" 2
 504              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 505 0078 BFF36F8F 		isb
 506              	@ 0 "" 2
 507              		.thumb
 508              		.syntax unified
 509              	.L42:
 510 007c 10BD     		pop	{r4, pc}
 511              	.LVL47:
 512              	.L48:
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513              		.loc 1 1032 0
 514 007e 054B     		ldr	r3, .L49+4
 515 0080 1C60     		str	r4, [r3]
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 516              		.loc 1 1034 0
ARM GAS  /tmp/cci5v3JD.s 			page 80


 517 0082 1368     		ldr	r3, [r2]
 518 0084 012B     		cmp	r3, #1
 519 0086 D2D1     		bne	.L44
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 520              		.loc 1 1039 0
 521 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 522              	.LVL48:
 523 008c CFE7     		b	.L44
 524              	.L50:
 525 008e 00BF     		.align	2
 526              	.L49:
 527 0090 00000000 		.word	.LANCHOR9
 528 0094 00000000 		.word	.LANCHOR10
 529 0098 00000000 		.word	.LANCHOR11
 530 009c 00000000 		.word	.LANCHOR12
 531 00a0 00000000 		.word	.LANCHOR13
 532 00a4 00000000 		.word	.LANCHOR4
 533 00a8 04ED00E0 		.word	-536810236
 534              		.cfi_endproc
 535              	.LFE7:
 537              		.section	.text.prvDeleteTCB,"ax",%progbits
 538              		.align	1
 539              		.syntax unified
 540              		.thumb
 541              		.thumb_func
 542              		.fpu softvfp
 544              	prvDeleteTCB:
 545              	.LFB48:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 546              		.loc 1 3671 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              	.LVL49:
 551 0000 10B5     		push	{r4, lr}
 552              	.LCFI3:
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 4, -8
 555              		.cfi_offset 14, -4
 556 0002 0446     		mov	r4, r0
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 557              		.loc 1 3697 0
 558 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 559 0008 63B1     		cbz	r3, .L57
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 560              		.loc 1 3704 0
 561 000a 012B     		cmp	r3, #1
 562 000c 11D0     		beq	.L58
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 563              		.loc 1 3714 0
 564 000e 022B     		cmp	r3, #2
 565 0010 12D0     		beq	.L51
 566              	.LBB115:
 567              	.LBB116:
 568              		.loc 2 195 0
 569              		.syntax unified
 570              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/cci5v3JD.s 			page 81


 571 0012 4FF05003 			mov r3, #80												
 572 0016 83F31188 		msr basepri, r3											
 573 001a BFF36F8F 		isb														
 574 001e BFF34F8F 		dsb														
 575              	
 576              	@ 0 "" 2
 577              	.LVL50:
 578              		.thumb
 579              		.syntax unified
 580              	.L55:
 581 0022 FEE7     		b	.L55
 582              	.L57:
 583              	.LBE116:
 584              	.LBE115:
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 585              		.loc 1 3701 0
 586 0024 006B     		ldr	r0, [r0, #48]
 587              	.LVL51:
 588 0026 FFF7FEFF 		bl	vPortFree
 589              	.LVL52:
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 590              		.loc 1 3702 0
 591 002a 2046     		mov	r0, r4
 592 002c FFF7FEFF 		bl	vPortFree
 593              	.LVL53:
 594 0030 10BD     		pop	{r4, pc}
 595              	.LVL54:
 596              	.L58:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 597              		.loc 1 3708 0
 598 0032 FFF7FEFF 		bl	vPortFree
 599              	.LVL55:
 600 0036 10BD     		pop	{r4, pc}
 601              	.LVL56:
 602              	.L51:
 603 0038 10BD     		pop	{r4, pc}
 604              		.cfi_endproc
 605              	.LFE48:
 607              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 608              		.align	1
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 612              		.fpu softvfp
 614              	prvCheckTasksWaitingTermination:
 615              	.LFB43:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 616              		.loc 1 3463 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              	.LBB117:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 621              		.loc 1 3473 0
 622 0000 0F4B     		ldr	r3, .L66
 623 0002 1B68     		ldr	r3, [r3]
 624 0004 D3B1     		cbz	r3, .L65
ARM GAS  /tmp/cci5v3JD.s 			page 82


 625              	.LBE117:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626              		.loc 1 3463 0
 627 0006 10B5     		push	{r4, lr}
 628              	.LCFI4:
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 4, -8
 631              		.cfi_offset 14, -4
 632              	.L61:
 633              	.LBB118:
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 634              		.loc 1 3475 0
 635 0008 FFF7FEFF 		bl	vPortEnterCritical
 636              	.LVL57:
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 637              		.loc 1 3477 0
 638 000c 0D4B     		ldr	r3, .L66+4
 639 000e DB68     		ldr	r3, [r3, #12]
 640 0010 DC68     		ldr	r4, [r3, #12]
 641              	.LVL58:
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 642              		.loc 1 3478 0
 643 0012 201D     		adds	r0, r4, #4
 644 0014 FFF7FEFF 		bl	uxListRemove
 645              	.LVL59:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 646              		.loc 1 3479 0
 647 0018 0B4A     		ldr	r2, .L66+8
 648 001a 1368     		ldr	r3, [r2]
 649 001c 013B     		subs	r3, r3, #1
 650 001e 1360     		str	r3, [r2]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 651              		.loc 1 3480 0
 652 0020 074A     		ldr	r2, .L66
 653 0022 1368     		ldr	r3, [r2]
 654 0024 013B     		subs	r3, r3, #1
 655 0026 1360     		str	r3, [r2]
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656              		.loc 1 3482 0
 657 0028 FFF7FEFF 		bl	vPortExitCritical
 658              	.LVL60:
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 659              		.loc 1 3484 0
 660 002c 2046     		mov	r0, r4
 661 002e FFF7FEFF 		bl	prvDeleteTCB
 662              	.LVL61:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 663              		.loc 1 3473 0
 664 0032 034B     		ldr	r3, .L66
 665 0034 1B68     		ldr	r3, [r3]
 666 0036 002B     		cmp	r3, #0
 667 0038 E6D1     		bne	.L61
 668              	.LBE118:
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 669              		.loc 1 3488 0
 670 003a 10BD     		pop	{r4, pc}
 671              	.LVL62:
ARM GAS  /tmp/cci5v3JD.s 			page 83


 672              	.L65:
 673              	.LCFI5:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 4
 676              		.cfi_restore 14
 677 003c 7047     		bx	lr
 678              	.L67:
 679 003e 00BF     		.align	2
 680              	.L66:
 681 0040 00000000 		.word	.LANCHOR14
 682 0044 00000000 		.word	.LANCHOR7
 683 0048 00000000 		.word	.LANCHOR9
 684              		.cfi_endproc
 685              	.LFE43:
 687              		.section	.text.prvIdleTask,"ax",%progbits
 688              		.align	1
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 692              		.fpu softvfp
 694              	prvIdleTask:
 695              	.LFB41:
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 696              		.loc 1 3219 0
 697              		.cfi_startproc
 698              		@ Volatile: function does not return.
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701              	.LVL63:
 702 0000 08B5     		push	{r3, lr}
 703              	.LCFI6:
 704              		.cfi_def_cfa_offset 8
 705              		.cfi_offset 3, -8
 706              		.cfi_offset 14, -4
 707              	.LVL64:
 708              	.L69:
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709              		.loc 1 3235 0
 710 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 711              	.LVL65:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 712              		.loc 1 3258 0
 713 0006 064B     		ldr	r3, .L72
 714 0008 1B68     		ldr	r3, [r3]
 715 000a 012B     		cmp	r3, #1
 716 000c F9D9     		bls	.L69
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 717              		.loc 1 3260 0
 718 000e 4FF08052 		mov	r2, #268435456
 719 0012 044B     		ldr	r3, .L72+4
 720 0014 1A60     		str	r2, [r3]
 721              		.syntax unified
 722              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 723 0016 BFF34F8F 		dsb
 724              	@ 0 "" 2
 725              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 726 001a BFF36F8F 		isb
ARM GAS  /tmp/cci5v3JD.s 			page 84


 727              	@ 0 "" 2
 728              		.thumb
 729              		.syntax unified
 730 001e F0E7     		b	.L69
 731              	.L73:
 732              		.align	2
 733              	.L72:
 734 0020 00000000 		.word	.LANCHOR4
 735 0024 04ED00E0 		.word	-536810236
 736              		.cfi_endproc
 737              	.LFE41:
 739              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 740              		.align	1
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 744              		.fpu softvfp
 746              	prvAddCurrentTaskToDelayedList:
 747              	.LFB63:
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/cci5v3JD.s 			page 85


3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cci5v3JD.s 			page 86


3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
ARM GAS  /tmp/cci5v3JD.s 			page 87


3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cci5v3JD.s 			page 88


3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
ARM GAS  /tmp/cci5v3JD.s 			page 89


4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
ARM GAS  /tmp/cci5v3JD.s 			page 90


4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cci5v3JD.s 			page 91


4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
ARM GAS  /tmp/cci5v3JD.s 			page 92


4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
ARM GAS  /tmp/cci5v3JD.s 			page 93


4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 94


4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/cci5v3JD.s 			page 95


4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 96


4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
ARM GAS  /tmp/cci5v3JD.s 			page 97


4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cci5v3JD.s 			page 98


4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
ARM GAS  /tmp/cci5v3JD.s 			page 99


4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 100


4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cci5v3JD.s 			page 101


4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
ARM GAS  /tmp/cci5v3JD.s 			page 102


4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  /tmp/cci5v3JD.s 			page 103


4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cci5v3JD.s 			page 104


4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 748              		.loc 1 4907 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 0, uses_anonymous_args = 0
 752              	.LVL66:
 753 0000 70B5     		push	{r4, r5, r6, lr}
 754              	.LCFI7:
 755              		.cfi_def_cfa_offset 16
 756              		.cfi_offset 4, -16
 757              		.cfi_offset 5, -12
 758              		.cfi_offset 6, -8
 759              		.cfi_offset 14, -4
 760 0002 0446     		mov	r4, r0
 761 0004 0E46     		mov	r6, r1
ARM GAS  /tmp/cci5v3JD.s 			page 105


4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 762              		.loc 1 4909 0
 763 0006 174B     		ldr	r3, .L81
 764 0008 1D68     		ldr	r5, [r3]
 765              	.LVL67:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 766              		.loc 1 4922 0
 767 000a 174B     		ldr	r3, .L81+4
 768 000c 1868     		ldr	r0, [r3]
 769              	.LVL68:
 770 000e 0430     		adds	r0, r0, #4
 771 0010 FFF7FEFF 		bl	uxListRemove
 772              	.LVL69:
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 773              		.loc 1 4935 0
 774 0014 B4F1FF3F 		cmp	r4, #-1
 775 0018 13D0     		beq	.L79
 776              	.L75:
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 777              		.loc 1 4947 0
 778 001a 2C44     		add	r4, r4, r5
ARM GAS  /tmp/cci5v3JD.s 			page 106


 779              	.LVL70:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 780              		.loc 1 4950 0
 781 001c 124B     		ldr	r3, .L81+4
 782 001e 1B68     		ldr	r3, [r3]
 783 0020 5C60     		str	r4, [r3, #4]
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 784              		.loc 1 4952 0
 785 0022 A542     		cmp	r5, r4
 786 0024 16D8     		bhi	.L80
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 787              		.loc 1 4962 0
 788 0026 114B     		ldr	r3, .L81+8
 789 0028 1868     		ldr	r0, [r3]
 790 002a 0F4B     		ldr	r3, .L81+4
 791 002c 1968     		ldr	r1, [r3]
 792 002e 0431     		adds	r1, r1, #4
 793 0030 FFF7FEFF 		bl	vListInsert
 794              	.LVL71:
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 795              		.loc 1 4967 0
 796 0034 0E4B     		ldr	r3, .L81+12
 797 0036 1B68     		ldr	r3, [r3]
 798 0038 9C42     		cmp	r4, r3
 799 003a 01D2     		bcs	.L74
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 800              		.loc 1 4969 0
 801 003c 0C4B     		ldr	r3, .L81+12
 802 003e 1C60     		str	r4, [r3]
 803              	.L74:
 804 0040 70BD     		pop	{r4, r5, r6, pc}
 805              	.LVL72:
 806              	.L79:
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 807              		.loc 1 4935 0 discriminator 1
 808 0042 002E     		cmp	r6, #0
 809 0044 E9D0     		beq	.L75
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810              		.loc 1 4940 0
 811 0046 084B     		ldr	r3, .L81+4
ARM GAS  /tmp/cci5v3JD.s 			page 107


 812 0048 1968     		ldr	r1, [r3]
 813 004a 0431     		adds	r1, r1, #4
 814 004c 0948     		ldr	r0, .L81+16
 815 004e FFF7FEFF 		bl	vListInsertEnd
 816              	.LVL73:
 817 0052 70BD     		pop	{r4, r5, r6, pc}
 818              	.LVL74:
 819              	.L80:
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 820              		.loc 1 4956 0
 821 0054 084B     		ldr	r3, .L81+20
 822 0056 1868     		ldr	r0, [r3]
 823 0058 034B     		ldr	r3, .L81+4
 824 005a 1968     		ldr	r1, [r3]
 825 005c 0431     		adds	r1, r1, #4
 826 005e FFF7FEFF 		bl	vListInsert
 827              	.LVL75:
 828 0062 70BD     		pop	{r4, r5, r6, pc}
 829              	.LVL76:
 830              	.L82:
 831              		.align	2
 832              	.L81:
 833 0064 00000000 		.word	.LANCHOR15
 834 0068 00000000 		.word	.LANCHOR10
 835 006c 00000000 		.word	.LANCHOR2
 836 0070 00000000 		.word	.LANCHOR3
 837 0074 00000000 		.word	.LANCHOR0
 838 0078 00000000 		.word	.LANCHOR8
 839              		.cfi_endproc
 840              	.LFE63:
 842              		.section	.text.xTaskCreateStatic,"ax",%progbits
 843              		.align	1
 844              		.global	xTaskCreateStatic
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu softvfp
 850              	xTaskCreateStatic:
 851              	.LFB4:
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 852              		.loc 1 582 0
 853              		.cfi_startproc
 854              		@ args = 12, pretend = 0, frame = 8
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              	.LVL77:
 857 0000 70B5     		push	{r4, r5, r6, lr}
 858              	.LCFI8:
 859              		.cfi_def_cfa_offset 16
 860              		.cfi_offset 4, -16
 861              		.cfi_offset 5, -12
 862              		.cfi_offset 6, -8
 863              		.cfi_offset 14, -4
 864 0002 86B0     		sub	sp, sp, #24
 865              	.LCFI9:
 866              		.cfi_def_cfa_offset 40
 867 0004 0B9D     		ldr	r5, [sp, #44]
 868 0006 0C9C     		ldr	r4, [sp, #48]
ARM GAS  /tmp/cci5v3JD.s 			page 108


 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 869              		.loc 1 586 0
 870 0008 75B1     		cbz	r5, .L91
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 871              		.loc 1 587 0
 872 000a B4B1     		cbz	r4, .L92
 873              	.LBB119:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 874              		.loc 1 594 0
 875 000c 5C26     		movs	r6, #92
 876 000e 0496     		str	r6, [sp, #16]
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 877              		.loc 1 595 0
 878 0010 049E     		ldr	r6, [sp, #16]
 879 0012 5C2E     		cmp	r6, #92
 880 0014 1AD0     		beq	.L88
 881              	.LBB120:
 882              	.LBB121:
 883              		.loc 2 195 0
 884              		.syntax unified
 885              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 886 0016 4FF05003 			mov r3, #80												
 887 001a 83F31188 		msr basepri, r3											
 888 001e BFF36F8F 		isb														
 889 0022 BFF34F8F 		dsb														
 890              	
 891              	@ 0 "" 2
 892              	.LVL78:
 893              		.thumb
 894              		.syntax unified
 895              	.L89:
 896 0026 FEE7     		b	.L89
 897              	.LVL79:
 898              	.L91:
 899              	.LBE121:
 900              	.LBE120:
 901              	.LBE119:
 902              	.LBB122:
 903              	.LBB123:
 904              		.syntax unified
 905              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 906 0028 4FF05003 			mov r3, #80												
 907 002c 83F31188 		msr basepri, r3											
 908 0030 BFF36F8F 		isb														
 909 0034 BFF34F8F 		dsb														
 910              	
 911              	@ 0 "" 2
 912              	.LVL80:
 913              		.thumb
 914              		.syntax unified
 915              	.L85:
 916 0038 FEE7     		b	.L85
 917              	.LVL81:
 918              	.L92:
 919              	.LBE123:
 920              	.LBE122:
 921              	.LBB124:
ARM GAS  /tmp/cci5v3JD.s 			page 109


 922              	.LBB125:
 923              		.syntax unified
 924              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 925 003a 4FF05003 			mov r3, #80												
 926 003e 83F31188 		msr basepri, r3											
 927 0042 BFF36F8F 		isb														
 928 0046 BFF34F8F 		dsb														
 929              	
 930              	@ 0 "" 2
 931              	.LVL82:
 932              		.thumb
 933              		.syntax unified
 934              	.L87:
 935 004a FEE7     		b	.L87
 936              	.LVL83:
 937              	.L88:
 938              	.LBE125:
 939              	.LBE124:
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 940              		.loc 1 605 0
 941 004c 2563     		str	r5, [r4, #48]
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 942              		.loc 1 611 0
 943 004e 0225     		movs	r5, #2
 944 0050 84F85950 		strb	r5, [r4, #89]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 945              		.loc 1 615 0
 946 0054 0025     		movs	r5, #0
 947 0056 0395     		str	r5, [sp, #12]
 948 0058 0294     		str	r4, [sp, #8]
 949 005a 05AD     		add	r5, sp, #20
 950 005c 0195     		str	r5, [sp, #4]
 951 005e 0A9D     		ldr	r5, [sp, #40]
 952 0060 0095     		str	r5, [sp]
 953 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 954              	.LVL84:
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 955              		.loc 1 616 0
 956 0066 2046     		mov	r0, r4
 957 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 958              	.LVL85:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 959              		.loc 1 624 0
 960 006c 0598     		ldr	r0, [sp, #20]
 961 006e 06B0     		add	sp, sp, #24
 962              	.LCFI10:
 963              		.cfi_def_cfa_offset 16
 964              		@ sp needed
 965 0070 70BD     		pop	{r4, r5, r6, pc}
 966              		.cfi_endproc
 967              	.LFE4:
 969              		.section	.text.xTaskCreate,"ax",%progbits
 970              		.align	1
 971              		.global	xTaskCreate
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
ARM GAS  /tmp/cci5v3JD.s 			page 110


 975              		.fpu softvfp
 977              	xTaskCreate:
 978              	.LFB5:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 979              		.loc 1 732 0
 980              		.cfi_startproc
 981              		@ args = 8, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              	.LVL86:
 984 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 985              	.LCFI11:
 986              		.cfi_def_cfa_offset 28
 987              		.cfi_offset 4, -28
 988              		.cfi_offset 5, -24
 989              		.cfi_offset 6, -20
 990              		.cfi_offset 7, -16
 991              		.cfi_offset 8, -12
 992              		.cfi_offset 9, -8
 993              		.cfi_offset 14, -4
 994 0004 85B0     		sub	sp, sp, #20
 995              	.LCFI12:
 996              		.cfi_def_cfa_offset 48
 997 0006 0646     		mov	r6, r0
 998 0008 0F46     		mov	r7, r1
 999 000a 1546     		mov	r5, r2
 1000 000c 9846     		mov	r8, r3
 1001              	.LBB126:
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1002              		.loc 1 766 0
 1003 000e 9000     		lsls	r0, r2, #2
 1004              	.LVL87:
 1005 0010 FFF7FEFF 		bl	pvPortMalloc
 1006              	.LVL88:
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1007              		.loc 1 768 0
 1008 0014 10B3     		cbz	r0, .L97
 1009 0016 8146     		mov	r9, r0
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1010              		.loc 1 771 0
 1011 0018 5C20     		movs	r0, #92
 1012              	.LVL89:
 1013 001a FFF7FEFF 		bl	pvPortMalloc
 1014              	.LVL90:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1015              		.loc 1 773 0
 1016 001e 0446     		mov	r4, r0
 1017 0020 C0B1     		cbz	r0, .L95
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1018              		.loc 1 776 0
 1019 0022 C0F83090 		str	r9, [r0, #48]
 1020              	.LVL91:
 1021              	.L94:
 1022              	.LBE126:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1023              		.loc 1 792 0
 1024 0026 DCB1     		cbz	r4, .L98
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cci5v3JD.s 			page 111


 1025              		.loc 1 798 0
 1026 0028 0023     		movs	r3, #0
 1027 002a 84F85930 		strb	r3, [r4, #89]
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1028              		.loc 1 802 0
 1029 002e 0393     		str	r3, [sp, #12]
 1030 0030 0294     		str	r4, [sp, #8]
 1031 0032 0D9B     		ldr	r3, [sp, #52]
 1032 0034 0193     		str	r3, [sp, #4]
 1033 0036 0C9B     		ldr	r3, [sp, #48]
 1034 0038 0093     		str	r3, [sp]
 1035 003a 4346     		mov	r3, r8
 1036 003c 2A46     		mov	r2, r5
 1037 003e 3946     		mov	r1, r7
 1038 0040 3046     		mov	r0, r6
 1039 0042 FFF7FEFF 		bl	prvInitialiseNewTask
 1040              	.LVL92:
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1041              		.loc 1 803 0
 1042 0046 2046     		mov	r0, r4
 1043 0048 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1044              	.LVL93:
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1045              		.loc 1 804 0
 1046 004c 0120     		movs	r0, #1
 1047              	.LVL94:
 1048              	.L93:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1049              		.loc 1 812 0
 1050 004e 05B0     		add	sp, sp, #20
 1051              	.LCFI13:
 1052              		.cfi_remember_state
 1053              		.cfi_def_cfa_offset 28
 1054              		@ sp needed
 1055 0050 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1056              	.LVL95:
 1057              	.L95:
 1058              	.LCFI14:
 1059              		.cfi_restore_state
 1060              	.LBB127:
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1061              		.loc 1 782 0
 1062 0054 4846     		mov	r0, r9
 1063              	.LVL96:
 1064 0056 FFF7FEFF 		bl	vPortFree
 1065              	.LVL97:
 1066 005a E4E7     		b	.L94
 1067              	.LVL98:
 1068              	.L97:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1069              		.loc 1 787 0
 1070 005c 0024     		movs	r4, #0
 1071 005e E2E7     		b	.L94
 1072              	.LVL99:
 1073              	.L98:
 1074              	.LBE127:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cci5v3JD.s 			page 112


 1075              		.loc 1 808 0
 1076 0060 4FF0FF30 		mov	r0, #-1
 1077              	.LVL100:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1078              		.loc 1 811 0
 1079 0064 F3E7     		b	.L93
 1080              		.cfi_endproc
 1081              	.LFE5:
 1083              		.section	.text.vTaskDelete,"ax",%progbits
 1084              		.align	1
 1085              		.global	vTaskDelete
 1086              		.syntax unified
 1087              		.thumb
 1088              		.thumb_func
 1089              		.fpu softvfp
 1091              	vTaskDelete:
 1092              	.LFB8:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1093              		.loc 1 1107 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
 1097              	.LVL101:
 1098 0000 38B5     		push	{r3, r4, r5, lr}
 1099              	.LCFI15:
 1100              		.cfi_def_cfa_offset 16
 1101              		.cfi_offset 3, -16
 1102              		.cfi_offset 4, -12
 1103              		.cfi_offset 5, -8
 1104              		.cfi_offset 14, -4
 1105 0002 0446     		mov	r4, r0
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1106              		.loc 1 1110 0
 1107 0004 FFF7FEFF 		bl	vPortEnterCritical
 1108              	.LVL102:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1109              		.loc 1 1114 0
 1110 0008 24B3     		cbz	r4, .L110
 1111              	.LVL103:
 1112              	.L101:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1113              		.loc 1 1117 0 discriminator 4
 1114 000a 251D     		adds	r5, r4, #4
 1115 000c 2846     		mov	r0, r5
 1116 000e FFF7FEFF 		bl	uxListRemove
 1117              	.LVL104:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1118              		.loc 1 1127 0 discriminator 4
 1119 0012 A36A     		ldr	r3, [r4, #40]
 1120 0014 1BB1     		cbz	r3, .L102
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1121              		.loc 1 1129 0
 1122 0016 04F11800 		add	r0, r4, #24
 1123 001a FFF7FEFF 		bl	uxListRemove
 1124              	.LVL105:
 1125              	.L102:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cci5v3JD.s 			page 113


 1126              		.loc 1 1140 0
 1127 001e 1E4A     		ldr	r2, .L113
 1128 0020 1368     		ldr	r3, [r2]
 1129 0022 0133     		adds	r3, r3, #1
 1130 0024 1360     		str	r3, [r2]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1131              		.loc 1 1142 0
 1132 0026 1D4B     		ldr	r3, .L113+4
 1133 0028 1B68     		ldr	r3, [r3]
 1134 002a 9C42     		cmp	r4, r3
 1135 002c 15D0     		beq	.L111
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1136              		.loc 1 1165 0
 1137 002e 1C4A     		ldr	r2, .L113+8
 1138 0030 1368     		ldr	r3, [r2]
 1139 0032 013B     		subs	r3, r3, #1
 1140 0034 1360     		str	r3, [r2]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1141              		.loc 1 1166 0
 1142 0036 2046     		mov	r0, r4
 1143 0038 FFF7FEFF 		bl	prvDeleteTCB
 1144              	.LVL106:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1145              		.loc 1 1170 0
 1146 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1147              	.LVL107:
 1148              	.L104:
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1149              		.loc 1 1175 0
 1150 0040 FFF7FEFF 		bl	vPortExitCritical
 1151              	.LVL108:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1152              		.loc 1 1179 0
 1153 0044 174B     		ldr	r3, .L113+12
 1154 0046 1B68     		ldr	r3, [r3]
 1155 0048 1BB1     		cbz	r3, .L100
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1156              		.loc 1 1181 0
 1157 004a 144B     		ldr	r3, .L113+4
 1158 004c 1B68     		ldr	r3, [r3]
 1159 004e 9C42     		cmp	r4, r3
 1160 0050 0CD0     		beq	.L112
 1161              	.L100:
 1162 0052 38BD     		pop	{r3, r4, r5, pc}
 1163              	.LVL109:
 1164              	.L110:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1165              		.loc 1 1114 0 discriminator 1
 1166 0054 114B     		ldr	r3, .L113+4
 1167 0056 1C68     		ldr	r4, [r3]
 1168              	.LVL110:
 1169 0058 D7E7     		b	.L101
 1170              	.LVL111:
 1171              	.L111:
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1172              		.loc 1 1149 0
 1173 005a 2946     		mov	r1, r5
ARM GAS  /tmp/cci5v3JD.s 			page 114


 1174 005c 1248     		ldr	r0, .L113+16
 1175 005e FFF7FEFF 		bl	vListInsertEnd
 1176              	.LVL112:
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1177              		.loc 1 1154 0
 1178 0062 124A     		ldr	r2, .L113+20
 1179 0064 1368     		ldr	r3, [r2]
 1180 0066 0133     		adds	r3, r3, #1
 1181 0068 1360     		str	r3, [r2]
 1182 006a E9E7     		b	.L104
 1183              	.L112:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1184              		.loc 1 1183 0
 1185 006c 104B     		ldr	r3, .L113+24
 1186 006e 1B68     		ldr	r3, [r3]
 1187 0070 43B1     		cbz	r3, .L106
 1188              	.LBB128:
 1189              	.LBB129:
 1190              		.loc 2 195 0
 1191              		.syntax unified
 1192              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1193 0072 4FF05003 			mov r3, #80												
 1194 0076 83F31188 		msr basepri, r3											
 1195 007a BFF36F8F 		isb														
 1196 007e BFF34F8F 		dsb														
 1197              	
 1198              	@ 0 "" 2
 1199              	.LVL113:
 1200              		.thumb
 1201              		.syntax unified
 1202              	.L107:
 1203 0082 FEE7     		b	.L107
 1204              	.L106:
 1205              	.LBE129:
 1206              	.LBE128:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1207              		.loc 1 1184 0
 1208 0084 4FF08052 		mov	r2, #268435456
 1209 0088 0A4B     		ldr	r3, .L113+28
 1210 008a 1A60     		str	r2, [r3]
 1211              		.syntax unified
 1212              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1213 008c BFF34F8F 		dsb
 1214              	@ 0 "" 2
 1215              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1216 0090 BFF36F8F 		isb
 1217              	@ 0 "" 2
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1218              		.loc 1 1191 0
 1219              		.thumb
 1220              		.syntax unified
 1221 0094 DDE7     		b	.L100
 1222              	.L114:
 1223 0096 00BF     		.align	2
 1224              	.L113:
 1225 0098 00000000 		.word	.LANCHOR12
 1226 009c 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/cci5v3JD.s 			page 115


 1227 00a0 00000000 		.word	.LANCHOR9
 1228 00a4 00000000 		.word	.LANCHOR11
 1229 00a8 00000000 		.word	.LANCHOR7
 1230 00ac 00000000 		.word	.LANCHOR14
 1231 00b0 00000000 		.word	.LANCHOR16
 1232 00b4 04ED00E0 		.word	-536810236
 1233              		.cfi_endproc
 1234              	.LFE8:
 1236              		.section	.text.eTaskGetState,"ax",%progbits
 1237              		.align	1
 1238              		.global	eTaskGetState
 1239              		.syntax unified
 1240              		.thumb
 1241              		.thumb_func
 1242              		.fpu softvfp
 1244              	eTaskGetState:
 1245              	.LFB11:
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1246              		.loc 1 1328 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 0
 1249              		@ frame_needed = 0, uses_anonymous_args = 0
 1250              	.LVL114:
 1251 0000 38B5     		push	{r3, r4, r5, lr}
 1252              	.LCFI16:
 1253              		.cfi_def_cfa_offset 16
 1254              		.cfi_offset 3, -16
 1255              		.cfi_offset 4, -12
 1256              		.cfi_offset 5, -8
 1257              		.cfi_offset 14, -4
 1258              	.LVL115:
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1259              		.loc 1 1333 0
 1260 0002 D0B1     		cbz	r0, .L127
 1261 0004 0546     		mov	r5, r0
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1262              		.loc 1 1335 0
 1263 0006 194B     		ldr	r3, .L129
 1264 0008 1B68     		ldr	r3, [r3]
 1265 000a 9842     		cmp	r0, r3
 1266 000c 22D0     		beq	.L120
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1267              		.loc 1 1342 0
 1268 000e FFF7FEFF 		bl	vPortEnterCritical
 1269              	.LVL116:
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1270              		.loc 1 1344 0
 1271 0012 6C69     		ldr	r4, [r5, #20]
 1272              	.LVL117:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1273              		.loc 1 1346 0
 1274 0014 FFF7FEFF 		bl	vPortExitCritical
 1275              	.LVL118:
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1276              		.loc 1 1348 0
 1277 0018 154B     		ldr	r3, .L129+4
 1278 001a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cci5v3JD.s 			page 116


 1279 001c 9C42     		cmp	r4, r3
 1280 001e 1BD0     		beq	.L121
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1281              		.loc 1 1348 0 is_stmt 0 discriminator 1
 1282 0020 144B     		ldr	r3, .L129+8
 1283 0022 1B68     		ldr	r3, [r3]
 1284 0024 9C42     		cmp	r4, r3
 1285 0026 19D0     		beq	.L122
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1286              		.loc 1 1356 0 is_stmt 1
 1287 0028 134B     		ldr	r3, .L129+12
 1288 002a 9C42     		cmp	r4, r3
 1289 002c 0ED0     		beq	.L128
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1290              		.loc 1 1373 0
 1291 002e 134B     		ldr	r3, .L129+16
 1292 0030 9C42     		cmp	r4, r3
 1293 0032 17D0     		beq	.L124
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1294              		.loc 1 1373 0 is_stmt 0 discriminator 1
 1295 0034 C4B9     		cbnz	r4, .L125
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1296              		.loc 1 1378 0 is_stmt 1
 1297 0036 0420     		movs	r0, #4
 1298 0038 38BD     		pop	{r3, r4, r5, pc}
 1299              	.LVL119:
 1300              	.L127:
 1301              	.LBB130:
 1302              	.LBB131:
 1303              		.loc 2 195 0
 1304              		.syntax unified
 1305              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1306 003a 4FF05003 			mov r3, #80												
 1307 003e 83F31188 		msr basepri, r3											
 1308 0042 BFF36F8F 		isb														
 1309 0046 BFF34F8F 		dsb														
 1310              	
 1311              	@ 0 "" 2
 1312              	.LVL120:
 1313              		.thumb
 1314              		.syntax unified
 1315              	.L117:
 1316 004a FEE7     		b	.L117
 1317              	.LVL121:
 1318              	.L128:
 1319              	.LBE131:
 1320              	.LBE130:
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1321              		.loc 1 1361 0
 1322 004c AB6A     		ldr	r3, [r5, #40]
 1323 004e 3BB9     		cbnz	r3, .L123
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1324              		.loc 1 1363 0
 1325 0050 0320     		movs	r0, #3
 1326 0052 38BD     		pop	{r3, r4, r5, pc}
 1327              	.LVL122:
 1328              	.L120:
ARM GAS  /tmp/cci5v3JD.s 			page 117


1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1329              		.loc 1 1338 0
 1330 0054 0020     		movs	r0, #0
 1331              	.LVL123:
 1332 0056 38BD     		pop	{r3, r4, r5, pc}
 1333              	.LVL124:
 1334              	.L121:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1335              		.loc 1 1352 0
 1336 0058 0220     		movs	r0, #2
 1337 005a 38BD     		pop	{r3, r4, r5, pc}
 1338              	.LVL125:
 1339              	.L122:
 1340 005c 0220     		movs	r0, #2
 1341 005e 38BD     		pop	{r3, r4, r5, pc}
 1342              	.LVL126:
 1343              	.L123:
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1344              		.loc 1 1367 0
 1345 0060 0220     		movs	r0, #2
 1346 0062 38BD     		pop	{r3, r4, r5, pc}
 1347              	.LVL127:
 1348              	.L124:
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1349              		.loc 1 1378 0
 1350 0064 0420     		movs	r0, #4
 1351 0066 38BD     		pop	{r3, r4, r5, pc}
 1352              	.LVL128:
 1353              	.L125:
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1354              		.loc 1 1386 0
 1355 0068 0120     		movs	r0, #1
 1356              	.LVL129:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1357              		.loc 1 1391 0
 1358 006a 38BD     		pop	{r3, r4, r5, pc}
 1359              	.LVL130:
 1360              	.L130:
 1361              		.align	2
 1362              	.L129:
 1363 006c 00000000 		.word	.LANCHOR10
 1364 0070 00000000 		.word	.LANCHOR2
 1365 0074 00000000 		.word	.LANCHOR8
 1366 0078 00000000 		.word	.LANCHOR0
 1367 007c 00000000 		.word	.LANCHOR7
 1368              		.cfi_endproc
 1369              	.LFE11:
 1371              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1372              		.align	1
 1373              		.global	uxTaskPriorityGet
 1374              		.syntax unified
 1375              		.thumb
 1376              		.thumb_func
 1377              		.fpu softvfp
 1379              	uxTaskPriorityGet:
 1380              	.LFB12:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/cci5v3JD.s 			page 118


 1381              		.loc 1 1399 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 0
 1384              		@ frame_needed = 0, uses_anonymous_args = 0
 1385              	.LVL131:
 1386 0000 10B5     		push	{r4, lr}
 1387              	.LCFI17:
 1388              		.cfi_def_cfa_offset 8
 1389              		.cfi_offset 4, -8
 1390              		.cfi_offset 14, -4
 1391 0002 0446     		mov	r4, r0
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1392              		.loc 1 1403 0
 1393 0004 FFF7FEFF 		bl	vPortEnterCritical
 1394              	.LVL132:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1395              		.loc 1 1407 0
 1396 0008 24B1     		cbz	r4, .L135
 1397              	.LVL133:
 1398              	.L132:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1399              		.loc 1 1408 0 discriminator 4
 1400 000a E46A     		ldr	r4, [r4, #44]
 1401              	.LVL134:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1402              		.loc 1 1410 0 discriminator 4
 1403 000c FFF7FEFF 		bl	vPortExitCritical
 1404              	.LVL135:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1405              		.loc 1 1413 0 discriminator 4
 1406 0010 2046     		mov	r0, r4
 1407 0012 10BD     		pop	{r4, pc}
 1408              	.LVL136:
 1409              	.L135:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1410              		.loc 1 1407 0 discriminator 1
 1411 0014 014B     		ldr	r3, .L136
 1412 0016 1C68     		ldr	r4, [r3]
 1413              	.LVL137:
 1414 0018 F7E7     		b	.L132
 1415              	.L137:
 1416 001a 00BF     		.align	2
 1417              	.L136:
 1418 001c 00000000 		.word	.LANCHOR10
 1419              		.cfi_endproc
 1420              	.LFE12:
 1422              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1423              		.align	1
 1424              		.global	uxTaskPriorityGetFromISR
 1425              		.syntax unified
 1426              		.thumb
 1427              		.thumb_func
 1428              		.fpu softvfp
 1430              	uxTaskPriorityGetFromISR:
 1431              	.LFB13:
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1432              		.loc 1 1421 0
ARM GAS  /tmp/cci5v3JD.s 			page 119


 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 0
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436              	.LVL138:
 1437 0000 10B5     		push	{r4, lr}
 1438              	.LCFI18:
 1439              		.cfi_def_cfa_offset 8
 1440              		.cfi_offset 4, -8
 1441              		.cfi_offset 14, -4
 1442 0002 0446     		mov	r4, r0
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1443              		.loc 1 1441 0
 1444 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1445              	.LVL139:
 1446              	.LBB132:
 1447              	.LBB133:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1448              		.loc 2 211 0
 1449              		.syntax unified
 1450              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1451 0008 EFF31183 			mrs r3, basepri											
 1452 000c 4FF05002 		mov r2, #80												
 1453 0010 82F31188 		msr basepri, r2											
 1454 0014 BFF36F8F 		isb														
 1455 0018 BFF34F8F 		dsb														
 1456              	
 1457              	@ 0 "" 2
 1458              		.thumb
 1459              		.syntax unified
 1460              	.LBE133:
 1461              	.LBE132:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1462              		.loc 1 1447 0
 1463 001c 1CB1     		cbz	r4, .L142
 1464              	.LVL140:
 1465              	.L139:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1466              		.loc 1 1448 0 discriminator 4
 1467 001e E06A     		ldr	r0, [r4, #44]
 1468              	.LVL141:
 1469              	.LBB134:
 1470              	.LBB135:
ARM GAS  /tmp/cci5v3JD.s 			page 120


 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1471              		.loc 2 229 0 discriminator 4
 1472              		.syntax unified
 1473              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1474 0020 83F31188 			msr basepri, r3	
 1475              	@ 0 "" 2
 1476              	.LVL142:
 1477              		.thumb
 1478              		.syntax unified
 1479              	.LBE135:
 1480              	.LBE134:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1481              		.loc 1 1453 0 discriminator 4
 1482 0024 10BD     		pop	{r4, pc}
 1483              	.LVL143:
 1484              	.L142:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1485              		.loc 1 1447 0 discriminator 1
 1486 0026 014A     		ldr	r2, .L143
 1487 0028 1468     		ldr	r4, [r2]
 1488              	.LVL144:
 1489 002a F8E7     		b	.L139
 1490              	.L144:
 1491              		.align	2
 1492              	.L143:
 1493 002c 00000000 		.word	.LANCHOR10
 1494              		.cfi_endproc
 1495              	.LFE13:
 1497              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1498              		.align	1
 1499              		.global	vTaskPrioritySet
 1500              		.syntax unified
 1501              		.thumb
 1502              		.thumb_func
 1503              		.fpu softvfp
 1505              	vTaskPrioritySet:
 1506              	.LFB14:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1507              		.loc 1 1461 0
 1508              		.cfi_startproc
ARM GAS  /tmp/cci5v3JD.s 			page 121


 1509              		@ args = 0, pretend = 0, frame = 0
 1510              		@ frame_needed = 0, uses_anonymous_args = 0
 1511              	.LVL145:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1512              		.loc 1 1466 0
 1513 0000 3729     		cmp	r1, #55
 1514 0002 08D9     		bls	.L146
 1515              	.LBB136:
 1516              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1517              		.loc 2 195 0
 1518              		.syntax unified
 1519              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1520 0004 4FF05003 			mov r3, #80												
 1521 0008 83F31188 		msr basepri, r3											
 1522 000c BFF36F8F 		isb														
 1523 0010 BFF34F8F 		dsb														
 1524              	
 1525              	@ 0 "" 2
 1526              	.LVL146:
 1527              		.thumb
 1528              		.syntax unified
 1529              	.L147:
 1530 0014 FEE7     		b	.L147
 1531              	.L146:
 1532              	.LBE137:
 1533              	.LBE136:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1534              		.loc 1 1461 0
 1535 0016 70B5     		push	{r4, r5, r6, lr}
 1536              	.LCFI19:
 1537              		.cfi_def_cfa_offset 16
 1538              		.cfi_offset 4, -16
 1539              		.cfi_offset 5, -12
 1540              		.cfi_offset 6, -8
 1541              		.cfi_offset 14, -4
 1542 0018 0D46     		mov	r5, r1
 1543 001a 0446     		mov	r4, r0
 1544              	.LVL147:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1545              		.loc 1 1478 0
 1546 001c FFF7FEFF 		bl	vPortEnterCritical
 1547              	.LVL148:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1548              		.loc 1 1482 0
 1549 0020 0CB9     		cbnz	r4, .L148
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1550              		.loc 1 1482 0 is_stmt 0 discriminator 1
 1551 0022 294B     		ldr	r3, .L164
 1552 0024 1C68     		ldr	r4, [r3]
 1553              	.LVL149:
 1554              	.L148:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1555              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1556 0026 E26C     		ldr	r2, [r4, #76]
 1557              	.LVL150:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cci5v3JD.s 			page 122


 1558              		.loc 1 1496 0 discriminator 4
 1559 0028 9542     		cmp	r5, r2
 1560 002a 3BD0     		beq	.L149
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1561              		.loc 1 1500 0
 1562 002c 3DD9     		bls	.L150
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1563              		.loc 1 1502 0
 1564 002e 264B     		ldr	r3, .L164
 1565 0030 1B68     		ldr	r3, [r3]
 1566 0032 9C42     		cmp	r4, r3
 1567 0034 3FD0     		beq	.L158
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1568              		.loc 1 1507 0
 1569 0036 244B     		ldr	r3, .L164
 1570 0038 1B68     		ldr	r3, [r3]
 1571 003a DB6A     		ldr	r3, [r3, #44]
 1572 003c 9D42     		cmp	r5, r3
 1573 003e 3CD2     		bcs	.L159
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1574              		.loc 1 1464 0
 1575 0040 0026     		movs	r6, #0
 1576              	.L151:
 1577              	.LVL151:
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1578              		.loc 1 1540 0
 1579 0042 E36A     		ldr	r3, [r4, #44]
 1580              	.LVL152:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1581              		.loc 1 1546 0
 1582 0044 9A42     		cmp	r2, r3
 1583 0046 00D1     		bne	.L152
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1584              		.loc 1 1548 0
 1585 0048 E562     		str	r5, [r4, #44]
 1586              	.L152:
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1587              		.loc 1 1556 0
 1588 004a E564     		str	r5, [r4, #76]
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1589              		.loc 1 1566 0
 1590 004c A269     		ldr	r2, [r4, #24]
 1591              	.LVL153:
 1592 004e 002A     		cmp	r2, #0
 1593 0050 02DB     		blt	.L153
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1594              		.loc 1 1568 0
 1595 0052 C5F13805 		rsb	r5, r5, #56
 1596              	.LVL154:
 1597 0056 A561     		str	r5, [r4, #24]
 1598              	.L153:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1599              		.loc 1 1579 0
 1600 0058 6169     		ldr	r1, [r4, #20]
 1601 005a 03EB8303 		add	r3, r3, r3, lsl #2
 1602              	.LVL155:
 1603 005e 9A00     		lsls	r2, r3, #2
ARM GAS  /tmp/cci5v3JD.s 			page 123


 1604 0060 1A4B     		ldr	r3, .L164+4
 1605 0062 1344     		add	r3, r3, r2
 1606 0064 9942     		cmp	r1, r3
 1607 0066 2CD1     		bne	.L161
 1608 0068 0123     		movs	r3, #1
 1609              	.L154:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1610              		.loc 1 1579 0 is_stmt 0 discriminator 4
 1611 006a 93B1     		cbz	r3, .L155
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1612              		.loc 1 1584 0 is_stmt 1
 1613 006c 251D     		adds	r5, r4, #4
 1614 006e 2846     		mov	r0, r5
 1615 0070 FFF7FEFF 		bl	uxListRemove
 1616              	.LVL156:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1617              		.loc 1 1595 0
 1618 0074 E36A     		ldr	r3, [r4, #44]
 1619 0076 164A     		ldr	r2, .L164+8
 1620 0078 1268     		ldr	r2, [r2]
 1621 007a 9342     		cmp	r3, r2
 1622 007c 01D9     		bls	.L156
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1623              		.loc 1 1595 0 is_stmt 0 discriminator 1
 1624 007e 144A     		ldr	r2, .L164+8
 1625 0080 1360     		str	r3, [r2]
 1626              	.L156:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1627              		.loc 1 1595 0 discriminator 3
 1628 0082 03EB8303 		add	r3, r3, r3, lsl #2
 1629 0086 9A00     		lsls	r2, r3, #2
 1630 0088 2946     		mov	r1, r5
 1631 008a 1048     		ldr	r0, .L164+4
 1632 008c 1044     		add	r0, r0, r2
 1633 008e FFF7FEFF 		bl	vListInsertEnd
 1634              	.LVL157:
 1635              	.L155:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1636              		.loc 1 1602 0 is_stmt 1
 1637 0092 3EB1     		cbz	r6, .L149
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1638              		.loc 1 1604 0
 1639 0094 4FF08052 		mov	r2, #268435456
 1640 0098 0E4B     		ldr	r3, .L164+12
 1641 009a 1A60     		str	r2, [r3]
 1642              		.syntax unified
 1643              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1644 009c BFF34F8F 		dsb
 1645              	@ 0 "" 2
 1646              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1647 00a0 BFF36F8F 		isb
 1648              	@ 0 "" 2
 1649              	.LVL158:
 1650              		.thumb
 1651              		.syntax unified
 1652              	.L149:
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cci5v3JD.s 			page 124


 1653              		.loc 1 1616 0
 1654 00a4 FFF7FEFF 		bl	vPortExitCritical
 1655              	.LVL159:
 1656 00a8 70BD     		pop	{r4, r5, r6, pc}
 1657              	.LVL160:
 1658              	.L150:
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1659              		.loc 1 1523 0
 1660 00aa 074B     		ldr	r3, .L164
 1661 00ac 1B68     		ldr	r3, [r3]
 1662 00ae 9C42     		cmp	r4, r3
 1663 00b0 05D0     		beq	.L160
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1664              		.loc 1 1464 0
 1665 00b2 0026     		movs	r6, #0
 1666 00b4 C5E7     		b	.L151
 1667              	.L158:
 1668 00b6 0026     		movs	r6, #0
 1669 00b8 C3E7     		b	.L151
 1670              	.L159:
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1671              		.loc 1 1509 0
 1672 00ba 0126     		movs	r6, #1
 1673 00bc C1E7     		b	.L151
 1674              	.L160:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1675              		.loc 1 1528 0
 1676 00be 0126     		movs	r6, #1
 1677 00c0 BFE7     		b	.L151
 1678              	.LVL161:
 1679              	.L161:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1680              		.loc 1 1579 0
 1681 00c2 0023     		movs	r3, #0
 1682 00c4 D1E7     		b	.L154
 1683              	.L165:
 1684 00c6 00BF     		.align	2
 1685              	.L164:
 1686 00c8 00000000 		.word	.LANCHOR10
 1687 00cc 00000000 		.word	.LANCHOR4
 1688 00d0 00000000 		.word	.LANCHOR13
 1689 00d4 04ED00E0 		.word	-536810236
 1690              		.cfi_endproc
 1691              	.LFE14:
 1693              		.section	.text.vTaskResume,"ax",%progbits
 1694              		.align	1
 1695              		.global	vTaskResume
 1696              		.syntax unified
 1697              		.thumb
 1698              		.thumb_func
 1699              		.fpu softvfp
 1701              	vTaskResume:
 1702              	.LFB17:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1703              		.loc 1 1772 0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cci5v3JD.s 			page 125


 1706              		@ frame_needed = 0, uses_anonymous_args = 0
 1707              	.LVL162:
 1708 0000 38B5     		push	{r3, r4, r5, lr}
 1709              	.LCFI20:
 1710              		.cfi_def_cfa_offset 16
 1711              		.cfi_offset 3, -16
 1712              		.cfi_offset 4, -12
 1713              		.cfi_offset 5, -8
 1714              		.cfi_offset 14, -4
 1715              	.LVL163:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1716              		.loc 1 1776 0
 1717 0002 68B1     		cbz	r0, .L173
 1718 0004 0446     		mov	r4, r0
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1719              		.loc 1 1780 0 discriminator 1
 1720 0006 1C4B     		ldr	r3, .L175
 1721 0008 1B68     		ldr	r3, [r3]
 1722 000a 9842     		cmp	r0, r3
 1723 000c 07D0     		beq	.L166
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1724              		.loc 1 1782 0
 1725 000e FFF7FEFF 		bl	vPortEnterCritical
 1726              	.LVL164:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1727              		.loc 1 1784 0
 1728 0012 2046     		mov	r0, r4
 1729 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1730              	.LVL165:
 1731 0018 58B9     		cbnz	r0, .L174
 1732              	.L170:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1733              		.loc 1 1811 0
 1734 001a FFF7FEFF 		bl	vPortExitCritical
 1735              	.LVL166:
 1736              	.L166:
 1737 001e 38BD     		pop	{r3, r4, r5, pc}
 1738              	.LVL167:
 1739              	.L173:
 1740              	.LBB138:
 1741              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1742              		.loc 2 195 0
 1743              		.syntax unified
 1744              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1745 0020 4FF05003 			mov r3, #80												
 1746 0024 83F31188 		msr basepri, r3											
 1747 0028 BFF36F8F 		isb														
 1748 002c BFF34F8F 		dsb														
 1749              	
 1750              	@ 0 "" 2
 1751              	.LVL168:
 1752              		.thumb
 1753              		.syntax unified
 1754              	.L168:
 1755 0030 FEE7     		b	.L168
 1756              	.LVL169:
ARM GAS  /tmp/cci5v3JD.s 			page 126


 1757              	.L174:
 1758              	.LBE139:
 1759              	.LBE138:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1760              		.loc 1 1790 0
 1761 0032 251D     		adds	r5, r4, #4
 1762 0034 2846     		mov	r0, r5
 1763 0036 FFF7FEFF 		bl	uxListRemove
 1764              	.LVL170:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1765              		.loc 1 1791 0
 1766 003a E36A     		ldr	r3, [r4, #44]
 1767 003c 0F4A     		ldr	r2, .L175+4
 1768 003e 1268     		ldr	r2, [r2]
 1769 0040 9342     		cmp	r3, r2
 1770 0042 01D9     		bls	.L171
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1771              		.loc 1 1791 0 is_stmt 0 discriminator 1
 1772 0044 0D4A     		ldr	r2, .L175+4
 1773 0046 1360     		str	r3, [r2]
 1774              	.L171:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1775              		.loc 1 1791 0 discriminator 3
 1776 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1777 004c 9A00     		lsls	r2, r3, #2
 1778 004e 2946     		mov	r1, r5
 1779 0050 0B48     		ldr	r0, .L175+8
 1780 0052 1044     		add	r0, r0, r2
 1781 0054 FFF7FEFF 		bl	vListInsertEnd
 1782              	.LVL171:
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1783              		.loc 1 1794 0 is_stmt 1 discriminator 3
 1784 0058 E26A     		ldr	r2, [r4, #44]
 1785 005a 074B     		ldr	r3, .L175
 1786 005c 1B68     		ldr	r3, [r3]
 1787 005e DB6A     		ldr	r3, [r3, #44]
 1788 0060 9A42     		cmp	r2, r3
 1789 0062 DAD3     		bcc	.L170
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1790              		.loc 1 1799 0
 1791 0064 4FF08052 		mov	r2, #268435456
 1792 0068 064B     		ldr	r3, .L175+12
 1793 006a 1A60     		str	r2, [r3]
 1794              		.syntax unified
 1795              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1796 006c BFF34F8F 		dsb
 1797              	@ 0 "" 2
 1798              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1799 0070 BFF36F8F 		isb
 1800              	@ 0 "" 2
 1801              		.thumb
 1802              		.syntax unified
 1803 0074 D1E7     		b	.L170
 1804              	.L176:
 1805 0076 00BF     		.align	2
 1806              	.L175:
 1807 0078 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/cci5v3JD.s 			page 127


 1808 007c 00000000 		.word	.LANCHOR13
 1809 0080 00000000 		.word	.LANCHOR4
 1810 0084 04ED00E0 		.word	-536810236
 1811              		.cfi_endproc
 1812              	.LFE17:
 1814              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1815              		.align	1
 1816              		.global	xTaskResumeFromISR
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
 1820              		.fpu softvfp
 1822              	xTaskResumeFromISR:
 1823              	.LFB18:
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1824              		.loc 1 1826 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828              	.LVL172:
 1829 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1830              	.LCFI21:
 1831              		.cfi_def_cfa_offset 24
 1832              		.cfi_offset 3, -24
 1833              		.cfi_offset 4, -20
 1834              		.cfi_offset 5, -16
 1835              		.cfi_offset 6, -12
 1836              		.cfi_offset 7, -8
 1837              		.cfi_offset 14, -4
 1838              	.LVL173:
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1839              		.loc 1 1831 0
 1840 0002 0028     		cmp	r0, #0
 1841 0004 32D0     		beq	.L187
 1842 0006 0446     		mov	r4, r0
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1843              		.loc 1 1849 0
 1844 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1845              	.LVL174:
 1846              	.LBB140:
 1847              	.LBB141:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1848              		.loc 2 211 0
 1849              		.syntax unified
 1850              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1851 000c EFF31187 			mrs r7, basepri											
 1852 0010 4FF05003 		mov r3, #80												
 1853 0014 83F31188 		msr basepri, r3											
 1854 0018 BFF36F8F 		isb														
 1855 001c BFF34F8F 		dsb														
 1856              	
 1857              	@ 0 "" 2
 1858              		.thumb
 1859              		.syntax unified
 1860              	.LBE141:
 1861              	.LBE140:
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cci5v3JD.s 			page 128


 1862              		.loc 1 1853 0
 1863 0020 2046     		mov	r0, r4
 1864 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1865              	.LVL175:
 1866 0026 0028     		cmp	r0, #0
 1867 0028 32D0     		beq	.L184
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1868              		.loc 1 1858 0
 1869 002a 1A4B     		ldr	r3, .L188
 1870 002c 1B68     		ldr	r3, [r3]
 1871 002e 43BB     		cbnz	r3, .L181
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1872              		.loc 1 1862 0
 1873 0030 E26A     		ldr	r2, [r4, #44]
 1874 0032 194B     		ldr	r3, .L188+4
 1875 0034 1B68     		ldr	r3, [r3]
 1876 0036 DB6A     		ldr	r3, [r3, #44]
 1877 0038 9A42     		cmp	r2, r3
 1878 003a 20D2     		bcs	.L185
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1879              		.loc 1 1827 0
 1880 003c 0025     		movs	r5, #0
 1881              	.L182:
 1882              	.LVL176:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1883              		.loc 1 1871 0
 1884 003e 261D     		adds	r6, r4, #4
 1885 0040 3046     		mov	r0, r6
 1886 0042 FFF7FEFF 		bl	uxListRemove
 1887              	.LVL177:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1888              		.loc 1 1872 0
 1889 0046 E36A     		ldr	r3, [r4, #44]
 1890 0048 144A     		ldr	r2, .L188+8
 1891 004a 1268     		ldr	r2, [r2]
 1892 004c 9342     		cmp	r3, r2
 1893 004e 01D9     		bls	.L183
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1894              		.loc 1 1872 0 is_stmt 0 discriminator 1
 1895 0050 124A     		ldr	r2, .L188+8
 1896 0052 1360     		str	r3, [r2]
 1897              	.L183:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1898              		.loc 1 1872 0 discriminator 3
 1899 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1900 0058 9A00     		lsls	r2, r3, #2
 1901 005a 3146     		mov	r1, r6
 1902 005c 1048     		ldr	r0, .L188+12
 1903 005e 1044     		add	r0, r0, r2
 1904 0060 FFF7FEFF 		bl	vListInsertEnd
 1905              	.LVL178:
 1906              	.L180:
 1907              	.LBB142:
 1908              	.LBB143:
 1909              		.loc 2 229 0 is_stmt 1
 1910              		.syntax unified
 1911              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/cci5v3JD.s 			page 129


 1912 0064 87F31188 			msr basepri, r7	
 1913              	@ 0 "" 2
 1914              	.LVL179:
 1915              		.thumb
 1916              		.syntax unified
 1917              	.LBE143:
 1918              	.LBE142:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1919              		.loc 1 1890 0
 1920 0068 2846     		mov	r0, r5
 1921 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1922              	.LVL180:
 1923              	.L187:
 1924              	.LBB144:
 1925              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1926              		.loc 2 195 0
 1927              		.syntax unified
 1928              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1929 006c 4FF05003 			mov r3, #80												
 1930 0070 83F31188 		msr basepri, r3											
 1931 0074 BFF36F8F 		isb														
 1932 0078 BFF34F8F 		dsb														
 1933              	
 1934              	@ 0 "" 2
 1935              	.LVL181:
 1936              		.thumb
 1937              		.syntax unified
 1938              	.L179:
 1939 007c FEE7     		b	.L179
 1940              	.LVL182:
 1941              	.L185:
 1942              	.LBE145:
 1943              	.LBE144:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1944              		.loc 1 1864 0
 1945 007e 0125     		movs	r5, #1
 1946 0080 DDE7     		b	.L182
 1947              	.L181:
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1948              		.loc 1 1879 0
 1949 0082 04F11801 		add	r1, r4, #24
 1950 0086 0748     		ldr	r0, .L188+16
 1951 0088 FFF7FEFF 		bl	vListInsertEnd
 1952              	.LVL183:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1953              		.loc 1 1827 0
 1954 008c 0025     		movs	r5, #0
 1955 008e E9E7     		b	.L180
 1956              	.L184:
 1957 0090 0025     		movs	r5, #0
 1958 0092 E7E7     		b	.L180
 1959              	.L189:
 1960              		.align	2
 1961              	.L188:
 1962 0094 00000000 		.word	.LANCHOR16
 1963 0098 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/cci5v3JD.s 			page 130


 1964 009c 00000000 		.word	.LANCHOR13
 1965 00a0 00000000 		.word	.LANCHOR4
 1966 00a4 00000000 		.word	.LANCHOR1
 1967              		.cfi_endproc
 1968              	.LFE18:
 1970              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1971              		.align	1
 1972              		.global	vTaskStartScheduler
 1973              		.syntax unified
 1974              		.thumb
 1975              		.thumb_func
 1976              		.fpu softvfp
 1978              	vTaskStartScheduler:
 1979              	.LFB19:
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1980              		.loc 1 1896 0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 16
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 1984 0000 10B5     		push	{r4, lr}
 1985              	.LCFI22:
 1986              		.cfi_def_cfa_offset 8
 1987              		.cfi_offset 4, -8
 1988              		.cfi_offset 14, -4
 1989 0002 88B0     		sub	sp, sp, #32
 1990              	.LCFI23:
 1991              		.cfi_def_cfa_offset 40
 1992              	.LBB146:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1993              		.loc 1 1902 0
 1994 0004 0024     		movs	r4, #0
 1995 0006 0594     		str	r4, [sp, #20]
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1996              		.loc 1 1903 0
 1997 0008 0694     		str	r4, [sp, #24]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1998              		.loc 1 1908 0
 1999 000a 07AA     		add	r2, sp, #28
 2000 000c 06A9     		add	r1, sp, #24
 2001 000e 05A8     		add	r0, sp, #20
 2002 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2003              	.LVL184:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2004              		.loc 1 1909 0
 2005 0014 059B     		ldr	r3, [sp, #20]
 2006 0016 0293     		str	r3, [sp, #8]
 2007 0018 069B     		ldr	r3, [sp, #24]
 2008 001a 0193     		str	r3, [sp, #4]
 2009 001c 0094     		str	r4, [sp]
 2010 001e 2346     		mov	r3, r4
 2011 0020 079A     		ldr	r2, [sp, #28]
 2012 0022 1949     		ldr	r1, .L201
 2013 0024 1948     		ldr	r0, .L201+4
 2014 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2015              	.LVL185:
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2016              		.loc 1 1917 0
ARM GAS  /tmp/cci5v3JD.s 			page 131


 2017 002a 48B1     		cbz	r0, .L196
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2018              		.loc 1 1919 0
 2019 002c 0120     		movs	r0, #1
 2020              	.L191:
 2021              	.LVL186:
 2022              	.LBE146:
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2023              		.loc 1 1940 0
 2024 002e 0128     		cmp	r0, #1
 2025 0030 08D0     		beq	.L198
 2026              	.L192:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2027              		.loc 1 1951 0
 2028 0032 0128     		cmp	r0, #1
 2029 0034 09D0     		beq	.L199
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2030              		.loc 1 2006 0
 2031 0036 B0F1FF3F 		cmp	r0, #-1
 2032 003a 1BD0     		beq	.L200
 2033              	.LVL187:
 2034              	.L190:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2035              		.loc 1 2012 0
 2036 003c 08B0     		add	sp, sp, #32
 2037              	.LCFI24:
 2038              		.cfi_remember_state
 2039              		.cfi_def_cfa_offset 8
 2040              		@ sp needed
 2041 003e 10BD     		pop	{r4, pc}
 2042              	.L196:
 2043              	.LCFI25:
 2044              		.cfi_restore_state
 2045              	.LBB147:
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2046              		.loc 1 1923 0
 2047 0040 0020     		movs	r0, #0
 2048 0042 F4E7     		b	.L191
 2049              	.LVL188:
 2050              	.L198:
 2051              	.LBE147:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2052              		.loc 1 1942 0
 2053 0044 FFF7FEFF 		bl	xTimerCreateTimerTask
 2054              	.LVL189:
 2055 0048 F3E7     		b	.L192
 2056              	.L199:
 2057              	.LBB148:
 2058              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2059              		.loc 2 195 0
 2060              		.syntax unified
 2061              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2062 004a 4FF05003 			mov r3, #80												
 2063 004e 83F31188 		msr basepri, r3											
 2064 0052 BFF36F8F 		isb														
 2065 0056 BFF34F8F 		dsb														
ARM GAS  /tmp/cci5v3JD.s 			page 132


 2066              	
 2067              	@ 0 "" 2
 2068              		.thumb
 2069              		.syntax unified
 2070              	.LBE149:
 2071              	.LBE148:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2072              		.loc 1 1977 0
 2073 005a 4FF0FF32 		mov	r2, #-1
 2074 005e 0C4B     		ldr	r3, .L201+8
 2075 0060 1A60     		str	r2, [r3]
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2076              		.loc 1 1978 0
 2077 0062 0122     		movs	r2, #1
 2078 0064 0B4B     		ldr	r3, .L201+12
 2079 0066 1A60     		str	r2, [r3]
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2080              		.loc 1 1979 0
 2081 0068 0022     		movs	r2, #0
 2082 006a 0B4B     		ldr	r3, .L201+16
 2083 006c 1A60     		str	r2, [r3]
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2084              		.loc 1 1991 0
 2085 006e FFF7FEFF 		bl	xPortStartScheduler
 2086              	.LVL190:
 2087 0072 E3E7     		b	.L190
 2088              	.LVL191:
 2089              	.L200:
 2090              	.LBB150:
 2091              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2092              		.loc 2 195 0
 2093              		.syntax unified
 2094              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2095 0074 4FF05003 			mov r3, #80												
 2096 0078 83F31188 		msr basepri, r3											
 2097 007c BFF36F8F 		isb														
 2098 0080 BFF34F8F 		dsb														
 2099              	
 2100              	@ 0 "" 2
 2101              	.LVL192:
 2102              		.thumb
 2103              		.syntax unified
 2104              	.L195:
 2105 0084 FEE7     		b	.L195
 2106              	.L202:
 2107 0086 00BF     		.align	2
 2108              	.L201:
 2109 0088 00000000 		.word	.LC0
 2110 008c 00000000 		.word	prvIdleTask
 2111 0090 00000000 		.word	.LANCHOR3
 2112 0094 00000000 		.word	.LANCHOR11
 2113 0098 00000000 		.word	.LANCHOR15
 2114              	.LBE151:
 2115              	.LBE150:
 2116              		.cfi_endproc
 2117              	.LFE19:
ARM GAS  /tmp/cci5v3JD.s 			page 133


 2119              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2120              		.align	1
 2121              		.global	vTaskEndScheduler
 2122              		.syntax unified
 2123              		.thumb
 2124              		.thumb_func
 2125              		.fpu softvfp
 2127              	vTaskEndScheduler:
 2128              	.LFB20:
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2129              		.loc 1 2016 0
 2130              		.cfi_startproc
 2131              		@ args = 0, pretend = 0, frame = 0
 2132              		@ frame_needed = 0, uses_anonymous_args = 0
 2133 0000 08B5     		push	{r3, lr}
 2134              	.LCFI26:
 2135              		.cfi_def_cfa_offset 8
 2136              		.cfi_offset 3, -8
 2137              		.cfi_offset 14, -4
 2138              	.LBB152:
 2139              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2140              		.loc 2 195 0
 2141              		.syntax unified
 2142              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2143 0002 4FF05003 			mov r3, #80												
 2144 0006 83F31188 		msr basepri, r3											
 2145 000a BFF36F8F 		isb														
 2146 000e BFF34F8F 		dsb														
 2147              	
 2148              	@ 0 "" 2
 2149              		.thumb
 2150              		.syntax unified
 2151              	.LBE153:
 2152              	.LBE152:
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2153              		.loc 1 2021 0
 2154 0012 0022     		movs	r2, #0
 2155 0014 024B     		ldr	r3, .L205
 2156 0016 1A60     		str	r2, [r3]
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2157              		.loc 1 2022 0
 2158 0018 FFF7FEFF 		bl	vPortEndScheduler
 2159              	.LVL193:
 2160 001c 08BD     		pop	{r3, pc}
 2161              	.L206:
 2162 001e 00BF     		.align	2
 2163              	.L205:
 2164 0020 00000000 		.word	.LANCHOR11
 2165              		.cfi_endproc
 2166              	.LFE20:
 2168              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2169              		.align	1
 2170              		.global	vTaskSuspendAll
 2171              		.syntax unified
 2172              		.thumb
 2173              		.thumb_func
ARM GAS  /tmp/cci5v3JD.s 			page 134


 2174              		.fpu softvfp
 2176              	vTaskSuspendAll:
 2177              	.LFB21:
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2178              		.loc 1 2027 0
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 0
 2181              		@ frame_needed = 0, uses_anonymous_args = 0
 2182              		@ link register save eliminated.
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2183              		.loc 1 2032 0
 2184 0000 024A     		ldr	r2, .L208
 2185 0002 1368     		ldr	r3, [r2]
 2186 0004 0133     		adds	r3, r3, #1
 2187 0006 1360     		str	r3, [r2]
 2188 0008 7047     		bx	lr
 2189              	.L209:
 2190 000a 00BF     		.align	2
 2191              	.L208:
 2192 000c 00000000 		.word	.LANCHOR16
 2193              		.cfi_endproc
 2194              	.LFE21:
 2196              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2197              		.align	1
 2198              		.global	xTaskGetTickCount
 2199              		.syntax unified
 2200              		.thumb
 2201              		.thumb_func
 2202              		.fpu softvfp
 2204              	xTaskGetTickCount:
 2205              	.LFB23:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2206              		.loc 1 2210 0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 0, uses_anonymous_args = 0
 2210              		@ link register save eliminated.
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2211              		.loc 1 2216 0
 2212 0000 014B     		ldr	r3, .L211
 2213 0002 1868     		ldr	r0, [r3]
 2214              	.LVL194:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2215              		.loc 1 2221 0
 2216 0004 7047     		bx	lr
 2217              	.L212:
 2218 0006 00BF     		.align	2
 2219              	.L211:
 2220 0008 00000000 		.word	.LANCHOR15
 2221              		.cfi_endproc
 2222              	.LFE23:
 2224              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2225              		.align	1
 2226              		.global	xTaskGetTickCountFromISR
 2227              		.syntax unified
 2228              		.thumb
 2229              		.thumb_func
ARM GAS  /tmp/cci5v3JD.s 			page 135


 2230              		.fpu softvfp
 2232              	xTaskGetTickCountFromISR:
 2233              	.LFB24:
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2234              		.loc 1 2225 0
 2235              		.cfi_startproc
 2236              		@ args = 0, pretend = 0, frame = 0
 2237              		@ frame_needed = 0, uses_anonymous_args = 0
 2238 0000 08B5     		push	{r3, lr}
 2239              	.LCFI27:
 2240              		.cfi_def_cfa_offset 8
 2241              		.cfi_offset 3, -8
 2242              		.cfi_offset 14, -4
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2243              		.loc 1 2243 0
 2244 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2245              	.LVL195:
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2246              		.loc 1 2247 0
 2247 0006 014B     		ldr	r3, .L215
 2248 0008 1868     		ldr	r0, [r3]
 2249              	.LVL196:
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2250              		.loc 1 2252 0
 2251 000a 08BD     		pop	{r3, pc}
 2252              	.L216:
 2253              		.align	2
 2254              	.L215:
 2255 000c 00000000 		.word	.LANCHOR15
 2256              		.cfi_endproc
 2257              	.LFE24:
 2259              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2260              		.align	1
 2261              		.global	uxTaskGetNumberOfTasks
 2262              		.syntax unified
 2263              		.thumb
 2264              		.thumb_func
 2265              		.fpu softvfp
 2267              	uxTaskGetNumberOfTasks:
 2268              	.LFB25:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2269              		.loc 1 2256 0
 2270              		.cfi_startproc
 2271              		@ args = 0, pretend = 0, frame = 0
 2272              		@ frame_needed = 0, uses_anonymous_args = 0
 2273              		@ link register save eliminated.
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2274              		.loc 1 2259 0
 2275 0000 014B     		ldr	r3, .L218
 2276 0002 1868     		ldr	r0, [r3]
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2277              		.loc 1 2260 0
 2278 0004 7047     		bx	lr
 2279              	.L219:
 2280 0006 00BF     		.align	2
 2281              	.L218:
 2282 0008 00000000 		.word	.LANCHOR9
ARM GAS  /tmp/cci5v3JD.s 			page 136


 2283              		.cfi_endproc
 2284              	.LFE25:
 2286              		.section	.text.pcTaskGetName,"ax",%progbits
 2287              		.align	1
 2288              		.global	pcTaskGetName
 2289              		.syntax unified
 2290              		.thumb
 2291              		.thumb_func
 2292              		.fpu softvfp
 2294              	pcTaskGetName:
 2295              	.LFB26:
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2296              		.loc 1 2264 0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              		@ link register save eliminated.
 2301              	.LVL197:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2302              		.loc 1 2269 0
 2303 0000 10B1     		cbz	r0, .L225
 2304              	.LVL198:
 2305              	.L221:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2306              		.loc 1 2270 0 discriminator 4
 2307 0002 20B1     		cbz	r0, .L226
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2308              		.loc 1 2272 0
 2309 0004 3430     		adds	r0, r0, #52
 2310              	.LVL199:
 2311 0006 7047     		bx	lr
 2312              	.LVL200:
 2313              	.L225:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2314              		.loc 1 2269 0 discriminator 1
 2315 0008 054B     		ldr	r3, .L227
 2316 000a 1868     		ldr	r0, [r3]
 2317              	.LVL201:
 2318 000c F9E7     		b	.L221
 2319              	.LVL202:
 2320              	.L226:
 2321              	.LBB154:
 2322              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2323              		.loc 2 195 0
 2324              		.syntax unified
 2325              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2326 000e 4FF05003 			mov r3, #80												
 2327 0012 83F31188 		msr basepri, r3											
 2328 0016 BFF36F8F 		isb														
 2329 001a BFF34F8F 		dsb														
 2330              	
 2331              	@ 0 "" 2
 2332              	.LVL203:
 2333              		.thumb
 2334              		.syntax unified
 2335              	.L223:
ARM GAS  /tmp/cci5v3JD.s 			page 137


 2336 001e FEE7     		b	.L223
 2337              	.L228:
 2338              		.align	2
 2339              	.L227:
 2340 0020 00000000 		.word	.LANCHOR10
 2341              	.LBE155:
 2342              	.LBE154:
 2343              		.cfi_endproc
 2344              	.LFE26:
 2346              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2347              		.align	1
 2348              		.global	xTaskIncrementTick
 2349              		.syntax unified
 2350              		.thumb
 2351              		.thumb_func
 2352              		.fpu softvfp
 2354              	xTaskIncrementTick:
 2355              	.LFB28:
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2356              		.loc 1 2584 0
 2357              		.cfi_startproc
 2358              		@ args = 0, pretend = 0, frame = 0
 2359              		@ frame_needed = 0, uses_anonymous_args = 0
 2360 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2361              	.LCFI28:
 2362              		.cfi_def_cfa_offset 24
 2363              		.cfi_offset 3, -24
 2364              		.cfi_offset 4, -20
 2365              		.cfi_offset 5, -16
 2366              		.cfi_offset 6, -12
 2367              		.cfi_offset 7, -8
 2368              		.cfi_offset 14, -4
 2369              	.LVL204:
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2370              		.loc 1 2593 0
 2371 0002 3C4B     		ldr	r3, .L254
 2372 0004 1B68     		ldr	r3, [r3]
 2373 0006 002B     		cmp	r3, #0
 2374 0008 68D1     		bne	.L230
 2375              	.LBB156:
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2376              		.loc 1 2597 0
 2377 000a 3B4B     		ldr	r3, .L254+4
 2378 000c 1D68     		ldr	r5, [r3]
 2379 000e 0135     		adds	r5, r5, #1
 2380              	.LVL205:
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2381              		.loc 1 2601 0
 2382 0010 1D60     		str	r5, [r3]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2383              		.loc 1 2603 0
 2384 0012 C5B9     		cbnz	r5, .L231
 2385              	.LBB157:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2386              		.loc 1 2605 0
 2387 0014 394B     		ldr	r3, .L254+8
 2388 0016 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cci5v3JD.s 			page 138


 2389 0018 1B68     		ldr	r3, [r3]
 2390 001a 43B1     		cbz	r3, .L232
 2391              	.LBB158:
 2392              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2393              		.loc 2 195 0
 2394              		.syntax unified
 2395              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2396 001c 4FF05003 			mov r3, #80												
 2397 0020 83F31188 		msr basepri, r3											
 2398 0024 BFF36F8F 		isb														
 2399 0028 BFF34F8F 		dsb														
 2400              	
 2401              	@ 0 "" 2
 2402              	.LVL206:
 2403              		.thumb
 2404              		.syntax unified
 2405              	.L233:
 2406 002c FEE7     		b	.L233
 2407              	.L232:
 2408              	.LBE159:
 2409              	.LBE158:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2410              		.loc 1 2605 0 discriminator 2
 2411 002e 334A     		ldr	r2, .L254+8
 2412 0030 1168     		ldr	r1, [r2]
 2413              	.LVL207:
 2414 0032 334B     		ldr	r3, .L254+12
 2415 0034 1868     		ldr	r0, [r3]
 2416 0036 1060     		str	r0, [r2]
 2417 0038 1960     		str	r1, [r3]
 2418 003a 324A     		ldr	r2, .L254+16
 2419 003c 1368     		ldr	r3, [r2]
 2420 003e 0133     		adds	r3, r3, #1
 2421 0040 1360     		str	r3, [r2]
 2422 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2423              	.LVL208:
 2424              	.L231:
 2425              	.LBE157:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2426              		.loc 1 2616 0
 2427 0046 304B     		ldr	r3, .L254+20
 2428 0048 1B68     		ldr	r3, [r3]
 2429 004a 9D42     		cmp	r5, r3
 2430 004c 3AD2     		bcs	.L245
 2431              	.LBE156:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2432              		.loc 1 2587 0
 2433 004e 0024     		movs	r4, #0
 2434              	.LVL209:
 2435              	.L235:
 2436              	.LBB160:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2437              		.loc 1 2699 0
 2438 0050 2E4B     		ldr	r3, .L254+24
 2439 0052 1B68     		ldr	r3, [r3]
 2440 0054 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/cci5v3JD.s 			page 139


 2441 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2442 005a 9A00     		lsls	r2, r3, #2
 2443 005c 2C4B     		ldr	r3, .L254+28
 2444 005e 9B58     		ldr	r3, [r3, r2]
 2445 0060 012B     		cmp	r3, #1
 2446 0062 40D9     		bls	.L243
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2447              		.loc 1 2701 0
 2448 0064 0124     		movs	r4, #1
 2449              	.LVL210:
 2450 0066 3EE0     		b	.L243
 2451              	.LVL211:
 2452              	.L247:
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2453              		.loc 1 2682 0
 2454 0068 0124     		movs	r4, #1
 2455              	.LVL212:
 2456              	.L234:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2457              		.loc 1 2620 0
 2458 006a 244B     		ldr	r3, .L254+8
 2459 006c 1B68     		ldr	r3, [r3]
 2460 006e 1B68     		ldr	r3, [r3]
 2461 0070 53B3     		cbz	r3, .L251
 2462 0072 0023     		movs	r3, #0
 2463              	.L236:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2464              		.loc 1 2620 0 is_stmt 0 discriminator 4
 2465 0074 53BB     		cbnz	r3, .L252
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2466              		.loc 1 2636 0 is_stmt 1
 2467 0076 214B     		ldr	r3, .L254+8
 2468 0078 1B68     		ldr	r3, [r3]
 2469 007a DB68     		ldr	r3, [r3, #12]
 2470 007c DE68     		ldr	r6, [r3, #12]
 2471              	.LVL213:
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2472              		.loc 1 2637 0
 2473 007e 7368     		ldr	r3, [r6, #4]
 2474              	.LVL214:
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2475              		.loc 1 2639 0
 2476 0080 9D42     		cmp	r5, r3
 2477 0082 28D3     		bcc	.L253
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2478              		.loc 1 2655 0
 2479 0084 371D     		adds	r7, r6, #4
 2480 0086 3846     		mov	r0, r7
 2481 0088 FFF7FEFF 		bl	uxListRemove
 2482              	.LVL215:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2483              		.loc 1 2659 0
 2484 008c B36A     		ldr	r3, [r6, #40]
 2485 008e 1BB1     		cbz	r3, .L239
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2486              		.loc 1 2661 0
 2487 0090 06F11800 		add	r0, r6, #24
ARM GAS  /tmp/cci5v3JD.s 			page 140


 2488 0094 FFF7FEFF 		bl	uxListRemove
 2489              	.LVL216:
 2490              	.L239:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2491              		.loc 1 2670 0
 2492 0098 F36A     		ldr	r3, [r6, #44]
 2493 009a 1E4A     		ldr	r2, .L254+32
 2494 009c 1268     		ldr	r2, [r2]
 2495 009e 9342     		cmp	r3, r2
 2496 00a0 01D9     		bls	.L240
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2497              		.loc 1 2670 0 is_stmt 0 discriminator 1
 2498 00a2 1C4A     		ldr	r2, .L254+32
 2499 00a4 1360     		str	r3, [r2]
 2500              	.L240:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2501              		.loc 1 2670 0 discriminator 3
 2502 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 2503 00aa 9A00     		lsls	r2, r3, #2
 2504 00ac 3946     		mov	r1, r7
 2505 00ae 1848     		ldr	r0, .L254+28
 2506 00b0 1044     		add	r0, r0, r2
 2507 00b2 FFF7FEFF 		bl	vListInsertEnd
 2508              	.LVL217:
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2509              		.loc 1 2680 0 is_stmt 1 discriminator 3
 2510 00b6 F26A     		ldr	r2, [r6, #44]
 2511 00b8 144B     		ldr	r3, .L254+24
 2512 00ba 1B68     		ldr	r3, [r3]
 2513 00bc DB6A     		ldr	r3, [r3, #44]
 2514 00be 9A42     		cmp	r2, r3
 2515 00c0 D2D2     		bcs	.L247
 2516 00c2 D2E7     		b	.L234
 2517              	.LVL218:
 2518              	.L245:
 2519 00c4 0024     		movs	r4, #0
 2520 00c6 D0E7     		b	.L234
 2521              	.LVL219:
 2522              	.L251:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2523              		.loc 1 2620 0
 2524 00c8 0123     		movs	r3, #1
 2525 00ca D3E7     		b	.L236
 2526              	.L252:
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2527              		.loc 1 2627 0
 2528 00cc 4FF0FF32 		mov	r2, #-1
 2529 00d0 0D4B     		ldr	r3, .L254+20
 2530 00d2 1A60     		str	r2, [r3]
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2531              		.loc 1 2628 0
 2532 00d4 BCE7     		b	.L235
 2533              	.LVL220:
 2534              	.L253:
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2535              		.loc 1 2646 0
 2536 00d6 0C4A     		ldr	r2, .L254+20
ARM GAS  /tmp/cci5v3JD.s 			page 141


 2537 00d8 1360     		str	r3, [r2]
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2538              		.loc 1 2647 0
 2539 00da B9E7     		b	.L235
 2540              	.LVL221:
 2541              	.L230:
 2542              	.LBE160:
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2543              		.loc 1 2727 0
 2544 00dc 0E4A     		ldr	r2, .L254+36
 2545 00de 1368     		ldr	r3, [r2]
 2546 00e0 0133     		adds	r3, r3, #1
 2547 00e2 1360     		str	r3, [r2]
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2548              		.loc 1 2587 0
 2549 00e4 0024     		movs	r4, #0
 2550              	.LVL222:
 2551              	.L243:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2552              		.loc 1 2740 0
 2553 00e6 0D4B     		ldr	r3, .L254+40
 2554 00e8 1B68     		ldr	r3, [r3]
 2555 00ea 03B1     		cbz	r3, .L229
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2556              		.loc 1 2742 0
 2557 00ec 0124     		movs	r4, #1
 2558              	.LVL223:
 2559              	.L229:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2560              		.loc 1 2752 0
 2561 00ee 2046     		mov	r0, r4
 2562 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2563              	.L255:
 2564 00f2 00BF     		.align	2
 2565              	.L254:
 2566 00f4 00000000 		.word	.LANCHOR16
 2567 00f8 00000000 		.word	.LANCHOR15
 2568 00fc 00000000 		.word	.LANCHOR2
 2569 0100 00000000 		.word	.LANCHOR8
 2570 0104 00000000 		.word	.LANCHOR17
 2571 0108 00000000 		.word	.LANCHOR3
 2572 010c 00000000 		.word	.LANCHOR10
 2573 0110 00000000 		.word	.LANCHOR4
 2574 0114 00000000 		.word	.LANCHOR13
 2575 0118 00000000 		.word	.LANCHOR18
 2576 011c 00000000 		.word	.LANCHOR19
 2577              		.cfi_endproc
 2578              	.LFE28:
 2580              		.section	.text.xTaskResumeAll,"ax",%progbits
 2581              		.align	1
 2582              		.global	xTaskResumeAll
 2583              		.syntax unified
 2584              		.thumb
 2585              		.thumb_func
 2586              		.fpu softvfp
 2588              	xTaskResumeAll:
 2589              	.LFB22:
ARM GAS  /tmp/cci5v3JD.s 			page 142


2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2590              		.loc 1 2100 0
 2591              		.cfi_startproc
 2592              		@ args = 0, pretend = 0, frame = 0
 2593              		@ frame_needed = 0, uses_anonymous_args = 0
 2594 0000 38B5     		push	{r3, r4, r5, lr}
 2595              	.LCFI29:
 2596              		.cfi_def_cfa_offset 16
 2597              		.cfi_offset 3, -16
 2598              		.cfi_offset 4, -12
 2599              		.cfi_offset 5, -8
 2600              		.cfi_offset 14, -4
 2601              	.LVL224:
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2602              		.loc 1 2106 0
 2603 0002 354B     		ldr	r3, .L274
 2604 0004 1B68     		ldr	r3, [r3]
 2605 0006 43B9     		cbnz	r3, .L257
 2606              	.LBB161:
 2607              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2608              		.loc 2 195 0
 2609              		.syntax unified
 2610              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2611 0008 4FF05003 			mov r3, #80												
 2612 000c 83F31188 		msr basepri, r3											
 2613 0010 BFF36F8F 		isb														
 2614 0014 BFF34F8F 		dsb														
 2615              	
 2616              	@ 0 "" 2
 2617              	.LVL225:
 2618              		.thumb
 2619              		.syntax unified
 2620              	.L258:
 2621 0018 FEE7     		b	.L258
 2622              	.L257:
 2623              	.LBE162:
 2624              	.LBE161:
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2625              		.loc 1 2113 0
 2626 001a FFF7FEFF 		bl	vPortEnterCritical
 2627              	.LVL226:
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2628              		.loc 1 2115 0
 2629 001e 2E4B     		ldr	r3, .L274
 2630 0020 1A68     		ldr	r2, [r3]
 2631 0022 013A     		subs	r2, r2, #1
 2632 0024 1A60     		str	r2, [r3]
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2633              		.loc 1 2117 0
 2634 0026 1B68     		ldr	r3, [r3]
 2635 0028 002B     		cmp	r3, #0
 2636 002a 50D1     		bne	.L268
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2637              		.loc 1 2119 0
 2638 002c 2B4B     		ldr	r3, .L274+4
 2639 002e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cci5v3JD.s 			page 143


 2640 0030 23B9     		cbnz	r3, .L269
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2641              		.loc 1 2102 0
 2642 0032 0024     		movs	r4, #0
 2643              	.LVL227:
 2644              	.L259:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2645              		.loc 1 2203 0
 2646 0034 FFF7FEFF 		bl	vPortExitCritical
 2647              	.LVL228:
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2648              		.loc 1 2206 0
 2649 0038 2046     		mov	r0, r4
 2650 003a 38BD     		pop	{r3, r4, r5, pc}
 2651              	.LVL229:
 2652              	.L269:
 2653 003c 0024     		movs	r4, #0
 2654              	.LVL230:
 2655              	.L260:
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2656              		.loc 1 2123 0
 2657 003e 284B     		ldr	r3, .L274+8
 2658 0040 1B68     		ldr	r3, [r3]
 2659 0042 1BB3     		cbz	r3, .L272
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2660              		.loc 1 2125 0
 2661 0044 264B     		ldr	r3, .L274+8
 2662 0046 DB68     		ldr	r3, [r3, #12]
 2663 0048 DC68     		ldr	r4, [r3, #12]
 2664              	.LVL231:
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2665              		.loc 1 2126 0
 2666 004a 04F11800 		add	r0, r4, #24
 2667 004e FFF7FEFF 		bl	uxListRemove
 2668              	.LVL232:
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2669              		.loc 1 2127 0
 2670 0052 251D     		adds	r5, r4, #4
 2671 0054 2846     		mov	r0, r5
 2672 0056 FFF7FEFF 		bl	uxListRemove
 2673              	.LVL233:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2674              		.loc 1 2128 0
 2675 005a E36A     		ldr	r3, [r4, #44]
 2676 005c 214A     		ldr	r2, .L274+12
 2677 005e 1268     		ldr	r2, [r2]
 2678 0060 9342     		cmp	r3, r2
 2679 0062 01D9     		bls	.L261
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2680              		.loc 1 2128 0 is_stmt 0 discriminator 1
 2681 0064 1F4A     		ldr	r2, .L274+12
 2682 0066 1360     		str	r3, [r2]
 2683              	.L261:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2684              		.loc 1 2128 0 discriminator 3
 2685 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2686 006c 9A00     		lsls	r2, r3, #2
ARM GAS  /tmp/cci5v3JD.s 			page 144


 2687 006e 2946     		mov	r1, r5
 2688 0070 1D48     		ldr	r0, .L274+16
 2689 0072 1044     		add	r0, r0, r2
 2690 0074 FFF7FEFF 		bl	vListInsertEnd
 2691              	.LVL234:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2692              		.loc 1 2132 0 is_stmt 1 discriminator 3
 2693 0078 E26A     		ldr	r2, [r4, #44]
 2694 007a 1C4B     		ldr	r3, .L274+20
 2695 007c 1B68     		ldr	r3, [r3]
 2696 007e DB6A     		ldr	r3, [r3, #44]
 2697 0080 9A42     		cmp	r2, r3
 2698 0082 DCD3     		bcc	.L260
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2699              		.loc 1 2134 0
 2700 0084 0122     		movs	r2, #1
 2701 0086 1A4B     		ldr	r3, .L274+24
 2702 0088 1A60     		str	r2, [r3]
 2703 008a D8E7     		b	.L260
 2704              	.L272:
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2705              		.loc 1 2142 0
 2706 008c 0CB1     		cbz	r4, .L264
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2707              		.loc 1 2150 0
 2708 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2709              	.LVL235:
 2710              	.L264:
 2711              	.LBB163:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2712              		.loc 1 2158 0
 2713 0092 184B     		ldr	r3, .L274+28
 2714 0094 1C68     		ldr	r4, [r3]
 2715              	.LVL236:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2716              		.loc 1 2160 0
 2717 0096 74B9     		cbnz	r4, .L267
 2718              	.L265:
 2719              	.LBE163:
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2720              		.loc 1 2183 0
 2721 0098 154B     		ldr	r3, .L274+24
 2722 009a 1B68     		ldr	r3, [r3]
 2723 009c CBB1     		cbz	r3, .L270
 2724              	.LVL237:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2725              		.loc 1 2190 0
 2726 009e 4FF08052 		mov	r2, #268435456
 2727 00a2 154B     		ldr	r3, .L274+32
 2728 00a4 1A60     		str	r2, [r3]
 2729              		.syntax unified
 2730              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2731 00a6 BFF34F8F 		dsb
 2732              	@ 0 "" 2
 2733              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2734 00aa BFF36F8F 		isb
 2735              	@ 0 "" 2
ARM GAS  /tmp/cci5v3JD.s 			page 145


2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2736              		.loc 1 2187 0
 2737              		.thumb
 2738              		.syntax unified
 2739 00ae 0124     		movs	r4, #1
 2740              	.LVL238:
 2741 00b0 C0E7     		b	.L259
 2742              	.LVL239:
 2743              	.L266:
 2744              	.LBB164:
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2745              		.loc 1 2173 0
 2746 00b2 013C     		subs	r4, r4, #1
 2747              	.LVL240:
 2748 00b4 07D0     		beq	.L273
 2749              	.L267:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2750              		.loc 1 2164 0
 2751 00b6 FFF7FEFF 		bl	xTaskIncrementTick
 2752              	.LVL241:
 2753 00ba 0028     		cmp	r0, #0
 2754 00bc F9D0     		beq	.L266
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2755              		.loc 1 2166 0
 2756 00be 0122     		movs	r2, #1
 2757 00c0 0B4B     		ldr	r3, .L274+24
 2758 00c2 1A60     		str	r2, [r3]
 2759 00c4 F5E7     		b	.L266
 2760              	.L273:
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2761              		.loc 1 2175 0
 2762 00c6 0022     		movs	r2, #0
 2763 00c8 0A4B     		ldr	r3, .L274+28
 2764 00ca 1A60     		str	r2, [r3]
 2765 00cc E4E7     		b	.L265
 2766              	.LVL242:
 2767              	.L268:
 2768              	.LBE164:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2769              		.loc 1 2102 0
 2770 00ce 0024     		movs	r4, #0
 2771 00d0 B0E7     		b	.L259
 2772              	.LVL243:
 2773              	.L270:
 2774 00d2 0024     		movs	r4, #0
 2775              	.LVL244:
 2776 00d4 AEE7     		b	.L259
 2777              	.L275:
 2778 00d6 00BF     		.align	2
 2779              	.L274:
 2780 00d8 00000000 		.word	.LANCHOR16
 2781 00dc 00000000 		.word	.LANCHOR9
 2782 00e0 00000000 		.word	.LANCHOR1
 2783 00e4 00000000 		.word	.LANCHOR13
 2784 00e8 00000000 		.word	.LANCHOR4
 2785 00ec 00000000 		.word	.LANCHOR10
 2786 00f0 00000000 		.word	.LANCHOR19
ARM GAS  /tmp/cci5v3JD.s 			page 146


 2787 00f4 00000000 		.word	.LANCHOR18
 2788 00f8 04ED00E0 		.word	-536810236
 2789              		.cfi_endproc
 2790              	.LFE22:
 2792              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2793              		.align	1
 2794              		.global	vTaskDelayUntil
 2795              		.syntax unified
 2796              		.thumb
 2797              		.thumb_func
 2798              		.fpu softvfp
 2800              	vTaskDelayUntil:
 2801              	.LFB9:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2802              		.loc 1 1199 0
 2803              		.cfi_startproc
 2804              		@ args = 0, pretend = 0, frame = 0
 2805              		@ frame_needed = 0, uses_anonymous_args = 0
 2806              	.LVL245:
 2807 0000 38B5     		push	{r3, r4, r5, lr}
 2808              	.LCFI30:
 2809              		.cfi_def_cfa_offset 16
 2810              		.cfi_offset 3, -16
 2811              		.cfi_offset 4, -12
 2812              		.cfi_offset 5, -8
 2813              		.cfi_offset 14, -4
 2814              	.LVL246:
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2815              		.loc 1 1203 0
 2816 0002 50B1     		cbz	r0, .L292
 2817 0004 0546     		mov	r5, r0
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2818              		.loc 1 1204 0
 2819 0006 89B9     		cbnz	r1, .L279
 2820              	.LBB165:
 2821              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2822              		.loc 2 195 0
 2823              		.syntax unified
 2824              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2825 0008 4FF05003 			mov r3, #80												
 2826 000c 83F31188 		msr basepri, r3											
 2827 0010 BFF36F8F 		isb														
 2828 0014 BFF34F8F 		dsb														
 2829              	
 2830              	@ 0 "" 2
 2831              	.LVL247:
 2832              		.thumb
 2833              		.syntax unified
 2834              	.L280:
 2835 0018 FEE7     		b	.L280
 2836              	.L292:
 2837              	.LBE166:
 2838              	.LBE165:
 2839              	.LBB167:
 2840              	.LBB168:
 2841              		.syntax unified
ARM GAS  /tmp/cci5v3JD.s 			page 147


 2842              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2843 001a 4FF05003 			mov r3, #80												
 2844 001e 83F31188 		msr basepri, r3											
 2845 0022 BFF36F8F 		isb														
 2846 0026 BFF34F8F 		dsb														
 2847              	
 2848              	@ 0 "" 2
 2849              	.LVL248:
 2850              		.thumb
 2851              		.syntax unified
 2852              	.L278:
 2853 002a FEE7     		b	.L278
 2854              	.L279:
 2855              	.LBE168:
 2856              	.LBE167:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2857              		.loc 1 1205 0
 2858 002c 1C4B     		ldr	r3, .L293
 2859 002e 1B68     		ldr	r3, [r3]
 2860 0030 43B1     		cbz	r3, .L281
 2861              	.LBB169:
 2862              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2863              		.loc 2 195 0
 2864              		.syntax unified
 2865              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2866 0032 4FF05003 			mov r3, #80												
 2867 0036 83F31188 		msr basepri, r3											
 2868 003a BFF36F8F 		isb														
 2869 003e BFF34F8F 		dsb														
 2870              	
 2871              	@ 0 "" 2
 2872              	.LVL249:
 2873              		.thumb
 2874              		.syntax unified
 2875              	.L282:
 2876 0042 FEE7     		b	.L282
 2877              	.L281:
 2878 0044 0C46     		mov	r4, r1
 2879              	.LBE170:
 2880              	.LBE169:
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2881              		.loc 1 1207 0
 2882 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2883              	.LVL250:
 2884              	.LBB171:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2885              		.loc 1 1211 0
 2886 004a 164B     		ldr	r3, .L293+4
 2887 004c 1868     		ldr	r0, [r3]
 2888              	.LVL251:
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2889              		.loc 1 1214 0
 2890 004e 2A68     		ldr	r2, [r5]
 2891 0050 1444     		add	r4, r4, r2
 2892              	.LVL252:
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cci5v3JD.s 			page 148


 2893              		.loc 1 1216 0
 2894 0052 9042     		cmp	r0, r2
 2895 0054 16D2     		bcs	.L283
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2896              		.loc 1 1223 0
 2897 0056 A242     		cmp	r2, r4
 2898 0058 1AD9     		bls	.L287
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2899              		.loc 1 1223 0 is_stmt 0 discriminator 1
 2900 005a A042     		cmp	r0, r4
 2901 005c 1AD3     		bcc	.L288
 2902              	.LBE171:
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2903              		.loc 1 1201 0 is_stmt 1
 2904 005e 0022     		movs	r2, #0
 2905              	.L284:
 2906              	.LVL253:
 2907              	.LBB172:
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2908              		.loc 1 1248 0
 2909 0060 2C60     		str	r4, [r5]
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2910              		.loc 1 1250 0
 2911 0062 1AB1     		cbz	r2, .L285
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2912              		.loc 1 1256 0
 2913 0064 0021     		movs	r1, #0
 2914 0066 201A     		subs	r0, r4, r0
 2915              	.LVL254:
 2916 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2917              	.LVL255:
 2918              	.L285:
 2919              	.LBE172:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2920              		.loc 1 1263 0
 2921 006c FFF7FEFF 		bl	xTaskResumeAll
 2922              	.LVL256:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2923              		.loc 1 1267 0
 2924 0070 38B9     		cbnz	r0, .L276
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2925              		.loc 1 1269 0
 2926 0072 4FF08052 		mov	r2, #268435456
 2927 0076 0C4B     		ldr	r3, .L293+8
 2928 0078 1A60     		str	r2, [r3]
 2929              		.syntax unified
 2930              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2931 007a BFF34F8F 		dsb
 2932              	@ 0 "" 2
 2933              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2934 007e BFF36F8F 		isb
 2935              	@ 0 "" 2
 2936              		.thumb
 2937              		.syntax unified
 2938              	.L276:
 2939 0082 38BD     		pop	{r3, r4, r5, pc}
 2940              	.LVL257:
ARM GAS  /tmp/cci5v3JD.s 			page 149


 2941              	.L283:
 2942              	.LBB173:
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2943              		.loc 1 1237 0
 2944 0084 A242     		cmp	r2, r4
 2945 0086 07D8     		bhi	.L289
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2946              		.loc 1 1237 0 is_stmt 0 discriminator 1
 2947 0088 A042     		cmp	r0, r4
 2948 008a 07D3     		bcc	.L290
 2949              	.LBE173:
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2950              		.loc 1 1201 0 is_stmt 1
 2951 008c 0022     		movs	r2, #0
 2952 008e E7E7     		b	.L284
 2953              	.L287:
 2954 0090 0022     		movs	r2, #0
 2955 0092 E5E7     		b	.L284
 2956              	.L288:
 2957              	.LBB174:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2958              		.loc 1 1225 0
 2959 0094 0122     		movs	r2, #1
 2960 0096 E3E7     		b	.L284
 2961              	.L289:
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2962              		.loc 1 1239 0
 2963 0098 0122     		movs	r2, #1
 2964 009a E1E7     		b	.L284
 2965              	.L290:
 2966 009c 0122     		movs	r2, #1
 2967 009e DFE7     		b	.L284
 2968              	.L294:
 2969              		.align	2
 2970              	.L293:
 2971 00a0 00000000 		.word	.LANCHOR16
 2972 00a4 00000000 		.word	.LANCHOR15
 2973 00a8 04ED00E0 		.word	-536810236
 2974              	.LBE174:
 2975              		.cfi_endproc
 2976              	.LFE9:
 2978              		.section	.text.vTaskDelay,"ax",%progbits
 2979              		.align	1
 2980              		.global	vTaskDelay
 2981              		.syntax unified
 2982              		.thumb
 2983              		.thumb_func
 2984              		.fpu softvfp
 2986              	vTaskDelay:
 2987              	.LFB10:
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2988              		.loc 1 1283 0
 2989              		.cfi_startproc
 2990              		@ args = 0, pretend = 0, frame = 0
 2991              		@ frame_needed = 0, uses_anonymous_args = 0
 2992              	.LVL258:
 2993 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cci5v3JD.s 			page 150


 2994              	.LCFI31:
 2995              		.cfi_def_cfa_offset 8
 2996              		.cfi_offset 4, -8
 2997              		.cfi_offset 14, -4
 2998              	.LVL259:
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2999              		.loc 1 1287 0
 3000 0002 A8B1     		cbz	r0, .L300
 3001 0004 0446     		mov	r4, r0
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3002              		.loc 1 1289 0
 3003 0006 104B     		ldr	r3, .L302
 3004 0008 1B68     		ldr	r3, [r3]
 3005 000a 43B1     		cbz	r3, .L297
 3006              	.LBB175:
 3007              	.LBB176:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3008              		.loc 2 195 0
 3009              		.syntax unified
 3010              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3011 000c 4FF05003 			mov r3, #80												
 3012 0010 83F31188 		msr basepri, r3											
 3013 0014 BFF36F8F 		isb														
 3014 0018 BFF34F8F 		dsb														
 3015              	
 3016              	@ 0 "" 2
 3017              	.LVL260:
 3018              		.thumb
 3019              		.syntax unified
 3020              	.L298:
 3021 001c FEE7     		b	.L298
 3022              	.L297:
 3023              	.LBE176:
 3024              	.LBE175:
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3025              		.loc 1 1290 0
 3026 001e FFF7FEFF 		bl	vTaskSuspendAll
 3027              	.LVL261:
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3028              		.loc 1 1301 0
 3029 0022 0021     		movs	r1, #0
 3030 0024 2046     		mov	r0, r4
 3031 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3032              	.LVL262:
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3033              		.loc 1 1303 0
 3034 002a FFF7FEFF 		bl	xTaskResumeAll
 3035              	.LVL263:
 3036 002e 00E0     		b	.L296
 3037              	.LVL264:
 3038              	.L300:
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3039              		.loc 1 1284 0
 3040 0030 0020     		movs	r0, #0
 3041              	.LVL265:
 3042              	.L296:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cci5v3JD.s 			page 151


 3043              		.loc 1 1312 0
 3044 0032 38B9     		cbnz	r0, .L295
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3045              		.loc 1 1314 0
 3046 0034 4FF08052 		mov	r2, #268435456
 3047 0038 044B     		ldr	r3, .L302+4
 3048 003a 1A60     		str	r2, [r3]
 3049              		.syntax unified
 3050              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3051 003c BFF34F8F 		dsb
 3052              	@ 0 "" 2
 3053              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3054 0040 BFF36F8F 		isb
 3055              	@ 0 "" 2
 3056              		.thumb
 3057              		.syntax unified
 3058              	.L295:
 3059 0044 10BD     		pop	{r4, pc}
 3060              	.L303:
 3061 0046 00BF     		.align	2
 3062              	.L302:
 3063 0048 00000000 		.word	.LANCHOR16
 3064 004c 04ED00E0 		.word	-536810236
 3065              		.cfi_endproc
 3066              	.LFE10:
 3068              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3069              		.align	1
 3070              		.global	vTaskSwitchContext
 3071              		.syntax unified
 3072              		.thumb
 3073              		.thumb_func
 3074              		.fpu softvfp
 3076              	vTaskSwitchContext:
 3077              	.LFB29:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3078              		.loc 1 2846 0
 3079              		.cfi_startproc
 3080              		@ args = 0, pretend = 0, frame = 0
 3081              		@ frame_needed = 0, uses_anonymous_args = 0
 3082              		@ link register save eliminated.
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3083              		.loc 1 2847 0
 3084 0000 204B     		ldr	r3, .L320
 3085 0002 1B68     		ldr	r3, [r3]
 3086 0004 6BB9     		cbnz	r3, .L316
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3087              		.loc 1 2855 0
 3088 0006 0022     		movs	r2, #0
 3089 0008 1F4B     		ldr	r3, .L320+4
 3090 000a 1A60     		str	r2, [r3]
 3091              	.LBB177:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3092              		.loc 1 2890 0
 3093 000c 1F4B     		ldr	r3, .L320+8
 3094 000e 1B68     		ldr	r3, [r3]
 3095              	.LVL266:
 3096              	.L307:
ARM GAS  /tmp/cci5v3JD.s 			page 152


2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3097              		.loc 1 2890 0 is_stmt 0 discriminator 4
 3098 0010 03EB8301 		add	r1, r3, r3, lsl #2
 3099 0014 8A00     		lsls	r2, r1, #2
 3100 0016 1E49     		ldr	r1, .L320+12
 3101 0018 8A58     		ldr	r2, [r1, r2]
 3102 001a 7AB9     		cbnz	r2, .L317
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3103              		.loc 1 2890 0 discriminator 5
 3104 001c 2BB1     		cbz	r3, .L318
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3105              		.loc 1 2890 0 discriminator 3
 3106 001e 013B     		subs	r3, r3, #1
 3107              	.LVL267:
 3108 0020 F6E7     		b	.L307
 3109              	.LVL268:
 3110              	.L316:
 3111              	.LBE177:
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3112              		.loc 1 2851 0 is_stmt 1
 3113 0022 0122     		movs	r2, #1
 3114 0024 184B     		ldr	r3, .L320+4
 3115 0026 1A60     		str	r2, [r3]
 3116 0028 7047     		bx	lr
 3117              	.LVL269:
 3118              	.L318:
 3119              	.LBB182:
 3120              	.LBB178:
 3121              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3122              		.loc 2 195 0
 3123              		.syntax unified
 3124              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3125 002a 4FF05003 			mov r3, #80												
 3126 002e 83F31188 		msr basepri, r3											
 3127 0032 BFF36F8F 		isb														
 3128 0036 BFF34F8F 		dsb														
 3129              	
 3130              	@ 0 "" 2
 3131              	.LVL270:
 3132              		.thumb
 3133              		.syntax unified
 3134              	.L309:
 3135 003a FEE7     		b	.L309
 3136              	.LVL271:
 3137              	.L317:
 3138              	.LBE179:
 3139              	.LBE178:
 3140              	.LBE182:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3141              		.loc 1 2846 0 discriminator 6
 3142 003c 10B4     		push	{r4}
 3143              	.LCFI32:
 3144              		.cfi_def_cfa_offset 4
 3145              		.cfi_offset 4, -4
 3146              	.LVL272:
 3147              	.LBB183:
ARM GAS  /tmp/cci5v3JD.s 			page 153


 3148              	.LBB180:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3149              		.loc 1 2890 0 discriminator 6
 3150 003e 0846     		mov	r0, r1
 3151 0040 9A00     		lsls	r2, r3, #2
 3152 0042 D418     		adds	r4, r2, r3
 3153 0044 A100     		lsls	r1, r4, #2
 3154 0046 0144     		add	r1, r1, r0
 3155 0048 4C68     		ldr	r4, [r1, #4]
 3156 004a 6468     		ldr	r4, [r4, #4]
 3157 004c 4C60     		str	r4, [r1, #4]
 3158 004e 1A44     		add	r2, r2, r3
 3159 0050 9100     		lsls	r1, r2, #2
 3160 0052 0831     		adds	r1, r1, #8
 3161 0054 0844     		add	r0, r0, r1
 3162 0056 8442     		cmp	r4, r0
 3163 0058 0CD0     		beq	.L319
 3164              	.L311:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3165              		.loc 1 2890 0 is_stmt 0 discriminator 9
 3166 005a 03EB8302 		add	r2, r3, r3, lsl #2
 3167 005e 9100     		lsls	r1, r2, #2
 3168 0060 0B4A     		ldr	r2, .L320+12
 3169 0062 0A44     		add	r2, r2, r1
 3170 0064 5268     		ldr	r2, [r2, #4]
 3171 0066 D168     		ldr	r1, [r2, #12]
 3172 0068 0A4A     		ldr	r2, .L320+16
 3173 006a 1160     		str	r1, [r2]
 3174              	.LBE180:
 3175 006c 074A     		ldr	r2, .L320+8
 3176 006e 1360     		str	r3, [r2]
 3177              	.LBE183:
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3178              		.loc 1 2901 0 is_stmt 1 discriminator 9
 3179 0070 10BC     		pop	{r4}
 3180              	.LCFI33:
 3181              		.cfi_remember_state
 3182              		.cfi_restore 4
 3183              		.cfi_def_cfa_offset 0
 3184 0072 7047     		bx	lr
 3185              	.L319:
 3186              	.LCFI34:
 3187              		.cfi_restore_state
 3188              	.LBB184:
 3189              	.LBB181:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3190              		.loc 1 2890 0 discriminator 7
 3191 0074 6068     		ldr	r0, [r4, #4]
 3192 0076 03EB8302 		add	r2, r3, r3, lsl #2
 3193 007a 9100     		lsls	r1, r2, #2
 3194 007c 044A     		ldr	r2, .L320+12
 3195 007e 0A44     		add	r2, r2, r1
 3196 0080 5060     		str	r0, [r2, #4]
 3197 0082 EAE7     		b	.L311
 3198              	.L321:
 3199              		.align	2
 3200              	.L320:
ARM GAS  /tmp/cci5v3JD.s 			page 154


 3201 0084 00000000 		.word	.LANCHOR16
 3202 0088 00000000 		.word	.LANCHOR19
 3203 008c 00000000 		.word	.LANCHOR13
 3204 0090 00000000 		.word	.LANCHOR4
 3205 0094 00000000 		.word	.LANCHOR10
 3206              	.LBE181:
 3207              	.LBE184:
 3208              		.cfi_endproc
 3209              	.LFE29:
 3211              		.section	.text.vTaskSuspend,"ax",%progbits
 3212              		.align	1
 3213              		.global	vTaskSuspend
 3214              		.syntax unified
 3215              		.thumb
 3216              		.thumb_func
 3217              		.fpu softvfp
 3219              	vTaskSuspend:
 3220              	.LFB15:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3221              		.loc 1 1625 0
 3222              		.cfi_startproc
 3223              		@ args = 0, pretend = 0, frame = 0
 3224              		@ frame_needed = 0, uses_anonymous_args = 0
 3225              	.LVL273:
 3226 0000 38B5     		push	{r3, r4, r5, lr}
 3227              	.LCFI35:
 3228              		.cfi_def_cfa_offset 16
 3229              		.cfi_offset 3, -16
 3230              		.cfi_offset 4, -12
 3231              		.cfi_offset 5, -8
 3232              		.cfi_offset 14, -4
 3233 0002 0446     		mov	r4, r0
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3234              		.loc 1 1628 0
 3235 0004 FFF7FEFF 		bl	vPortEnterCritical
 3236              	.LVL274:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3237              		.loc 1 1632 0
 3238 0008 E4B1     		cbz	r4, .L334
 3239              	.LVL275:
 3240              	.L323:
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3241              		.loc 1 1638 0 discriminator 4
 3242 000a 251D     		adds	r5, r4, #4
 3243 000c 2846     		mov	r0, r5
 3244 000e FFF7FEFF 		bl	uxListRemove
 3245              	.LVL276:
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3246              		.loc 1 1648 0 discriminator 4
 3247 0012 A36A     		ldr	r3, [r4, #40]
 3248 0014 1BB1     		cbz	r3, .L324
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3249              		.loc 1 1650 0
 3250 0016 04F11800 		add	r0, r4, #24
 3251 001a FFF7FEFF 		bl	uxListRemove
 3252              	.LVL277:
 3253              	.L324:
ARM GAS  /tmp/cci5v3JD.s 			page 155


1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3254              		.loc 1 1657 0
 3255 001e 2946     		mov	r1, r5
 3256 0020 2248     		ldr	r0, .L338
 3257 0022 FFF7FEFF 		bl	vListInsertEnd
 3258              	.LVL278:
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3259              		.loc 1 1661 0
 3260 0026 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3261 002a DBB2     		uxtb	r3, r3
 3262 002c 012B     		cmp	r3, #1
 3263 002e 0CD0     		beq	.L335
 3264              	.L325:
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3265              		.loc 1 1670 0
 3266 0030 FFF7FEFF 		bl	vPortExitCritical
 3267              	.LVL279:
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3268              		.loc 1 1672 0
 3269 0034 1E4B     		ldr	r3, .L338+4
 3270 0036 1B68     		ldr	r3, [r3]
 3271 0038 5BB9     		cbnz	r3, .L336
 3272              	.L326:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3273              		.loc 1 1687 0
 3274 003a 1E4B     		ldr	r3, .L338+8
 3275 003c 1B68     		ldr	r3, [r3]
 3276 003e 9C42     		cmp	r4, r3
 3277 0040 0ED0     		beq	.L337
 3278              	.L322:
 3279 0042 38BD     		pop	{r3, r4, r5, pc}
 3280              	.LVL280:
 3281              	.L334:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3282              		.loc 1 1632 0 discriminator 1
 3283 0044 1B4B     		ldr	r3, .L338+8
 3284 0046 1C68     		ldr	r4, [r3]
 3285              	.LVL281:
 3286 0048 DFE7     		b	.L323
 3287              	.LVL282:
 3288              	.L335:
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3289              		.loc 1 1665 0
 3290 004a 0023     		movs	r3, #0
 3291 004c 84F85830 		strb	r3, [r4, #88]
 3292 0050 EEE7     		b	.L325
 3293              	.L336:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3294              		.loc 1 1676 0
 3295 0052 FFF7FEFF 		bl	vPortEnterCritical
 3296              	.LVL283:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3297              		.loc 1 1678 0
 3298 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3299              	.LVL284:
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3300              		.loc 1 1680 0
ARM GAS  /tmp/cci5v3JD.s 			page 156


 3301 005a FFF7FEFF 		bl	vPortExitCritical
 3302              	.LVL285:
 3303 005e ECE7     		b	.L326
 3304              	.L337:
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3305              		.loc 1 1689 0
 3306 0060 134B     		ldr	r3, .L338+4
 3307 0062 1B68     		ldr	r3, [r3]
 3308 0064 A3B1     		cbz	r3, .L328
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3309              		.loc 1 1692 0
 3310 0066 144B     		ldr	r3, .L338+12
 3311 0068 1B68     		ldr	r3, [r3]
 3312 006a 43B1     		cbz	r3, .L329
 3313              	.LBB185:
 3314              	.LBB186:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3315              		.loc 2 195 0
 3316              		.syntax unified
 3317              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3318 006c 4FF05003 			mov r3, #80												
 3319 0070 83F31188 		msr basepri, r3											
 3320 0074 BFF36F8F 		isb														
 3321 0078 BFF34F8F 		dsb														
 3322              	
 3323              	@ 0 "" 2
 3324              	.LVL286:
 3325              		.thumb
 3326              		.syntax unified
 3327              	.L330:
 3328 007c FEE7     		b	.L330
 3329              	.L329:
 3330              	.LBE186:
 3331              	.LBE185:
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3332              		.loc 1 1693 0
 3333 007e 4FF08052 		mov	r2, #268435456
 3334 0082 0E4B     		ldr	r3, .L338+16
 3335 0084 1A60     		str	r2, [r3]
 3336              		.syntax unified
 3337              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3338 0086 BFF34F8F 		dsb
 3339              	@ 0 "" 2
 3340              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3341 008a BFF36F8F 		isb
 3342              	@ 0 "" 2
 3343              		.thumb
 3344              		.syntax unified
 3345 008e 38BD     		pop	{r3, r4, r5, pc}
 3346              	.LVL287:
 3347              	.L328:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3348              		.loc 1 1700 0
 3349 0090 064B     		ldr	r3, .L338
 3350 0092 1A68     		ldr	r2, [r3]
 3351 0094 0A4B     		ldr	r3, .L338+20
 3352 0096 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cci5v3JD.s 			page 157


 3353 0098 9A42     		cmp	r2, r3
 3354 009a 03D1     		bne	.L331
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3355              		.loc 1 1706 0
 3356 009c 0022     		movs	r2, #0
 3357 009e 054B     		ldr	r3, .L338+8
 3358 00a0 1A60     		str	r2, [r3]
 3359 00a2 38BD     		pop	{r3, r4, r5, pc}
 3360              	.LVL288:
 3361              	.L331:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3362              		.loc 1 1710 0
 3363 00a4 FFF7FEFF 		bl	vTaskSwitchContext
 3364              	.LVL289:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3365              		.loc 1 1718 0
 3366 00a8 CBE7     		b	.L322
 3367              	.L339:
 3368 00aa 00BF     		.align	2
 3369              	.L338:
 3370 00ac 00000000 		.word	.LANCHOR0
 3371 00b0 00000000 		.word	.LANCHOR11
 3372 00b4 00000000 		.word	.LANCHOR10
 3373 00b8 00000000 		.word	.LANCHOR16
 3374 00bc 04ED00E0 		.word	-536810236
 3375 00c0 00000000 		.word	.LANCHOR9
 3376              		.cfi_endproc
 3377              	.LFE15:
 3379              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3380              		.align	1
 3381              		.global	vTaskPlaceOnEventList
 3382              		.syntax unified
 3383              		.thumb
 3384              		.thumb_func
 3385              		.fpu softvfp
 3387              	vTaskPlaceOnEventList:
 3388              	.LFB30:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3389              		.loc 1 2905 0
 3390              		.cfi_startproc
 3391              		@ args = 0, pretend = 0, frame = 0
 3392              		@ frame_needed = 0, uses_anonymous_args = 0
 3393              	.LVL290:
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3394              		.loc 1 2906 0
 3395 0000 40B9     		cbnz	r0, .L341
 3396              	.LBB187:
 3397              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3398              		.loc 2 195 0
 3399              		.syntax unified
 3400              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3401 0002 4FF05003 			mov r3, #80												
 3402 0006 83F31188 		msr basepri, r3											
 3403 000a BFF36F8F 		isb														
 3404 000e BFF34F8F 		dsb														
 3405              	
ARM GAS  /tmp/cci5v3JD.s 			page 158


 3406              	@ 0 "" 2
 3407              	.LVL291:
 3408              		.thumb
 3409              		.syntax unified
 3410              	.L342:
 3411 0012 FEE7     		b	.L342
 3412              	.L341:
 3413              	.LBE188:
 3414              	.LBE187:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3415              		.loc 1 2905 0
 3416 0014 10B5     		push	{r4, lr}
 3417              	.LCFI36:
 3418              		.cfi_def_cfa_offset 8
 3419              		.cfi_offset 4, -8
 3420              		.cfi_offset 14, -4
 3421 0016 0C46     		mov	r4, r1
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3422              		.loc 1 2915 0
 3423 0018 044B     		ldr	r3, .L345
 3424 001a 1968     		ldr	r1, [r3]
 3425              	.LVL292:
 3426 001c 1831     		adds	r1, r1, #24
 3427 001e FFF7FEFF 		bl	vListInsert
 3428              	.LVL293:
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3429              		.loc 1 2917 0
 3430 0022 0121     		movs	r1, #1
 3431 0024 2046     		mov	r0, r4
 3432 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3433              	.LVL294:
 3434 002a 10BD     		pop	{r4, pc}
 3435              	.LVL295:
 3436              	.L346:
 3437              		.align	2
 3438              	.L345:
 3439 002c 00000000 		.word	.LANCHOR10
 3440              		.cfi_endproc
 3441              	.LFE30:
 3443              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3444              		.align	1
 3445              		.global	vTaskPlaceOnUnorderedEventList
 3446              		.syntax unified
 3447              		.thumb
 3448              		.thumb_func
 3449              		.fpu softvfp
 3451              	vTaskPlaceOnUnorderedEventList:
 3452              	.LFB31:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3453              		.loc 1 2922 0
 3454              		.cfi_startproc
 3455              		@ args = 0, pretend = 0, frame = 0
 3456              		@ frame_needed = 0, uses_anonymous_args = 0
 3457              	.LVL296:
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3458              		.loc 1 2923 0
 3459 0000 60B1     		cbz	r0, .L354
ARM GAS  /tmp/cci5v3JD.s 			page 159


 3460 0002 0346     		mov	r3, r0
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3461              		.loc 1 2927 0
 3462 0004 1348     		ldr	r0, .L355
 3463              	.LVL297:
 3464 0006 0068     		ldr	r0, [r0]
 3465 0008 88B9     		cbnz	r0, .L350
 3466              	.LBB189:
 3467              	.LBB190:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3468              		.loc 2 195 0
 3469              		.syntax unified
 3470              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3471 000a 4FF05003 			mov r3, #80												
 3472 000e 83F31188 		msr basepri, r3											
 3473 0012 BFF36F8F 		isb														
 3474 0016 BFF34F8F 		dsb														
 3475              	
 3476              	@ 0 "" 2
 3477              	.LVL298:
 3478              		.thumb
 3479              		.syntax unified
 3480              	.L351:
 3481 001a FEE7     		b	.L351
 3482              	.LVL299:
 3483              	.L354:
 3484              	.LBE190:
 3485              	.LBE189:
 3486              	.LBB191:
 3487              	.LBB192:
 3488              		.syntax unified
 3489              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3490 001c 4FF05003 			mov r3, #80												
 3491 0020 83F31188 		msr basepri, r3											
 3492 0024 BFF36F8F 		isb														
 3493 0028 BFF34F8F 		dsb														
 3494              	
 3495              	@ 0 "" 2
 3496              	.LVL300:
 3497              		.thumb
 3498              		.syntax unified
 3499              	.L349:
 3500 002c FEE7     		b	.L349
 3501              	.LVL301:
 3502              	.L350:
 3503              	.LBE192:
 3504              	.LBE191:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3505              		.loc 1 2922 0
 3506 002e 10B5     		push	{r4, lr}
 3507              	.LCFI37:
 3508              		.cfi_def_cfa_offset 8
 3509              		.cfi_offset 4, -8
 3510              		.cfi_offset 14, -4
 3511 0030 1846     		mov	r0, r3
 3512 0032 1446     		mov	r4, r2
 3513 0034 0B46     		mov	r3, r1
ARM GAS  /tmp/cci5v3JD.s 			page 160


 3514              	.LVL302:
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3515              		.loc 1 2932 0
 3516 0036 084A     		ldr	r2, .L355+4
 3517              	.LVL303:
 3518 0038 1168     		ldr	r1, [r2]
 3519              	.LVL304:
 3520 003a 43F00043 		orr	r3, r3, #-2147483648
 3521              	.LVL305:
 3522 003e 8B61     		str	r3, [r1, #24]
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3523              		.loc 1 2939 0
 3524 0040 1168     		ldr	r1, [r2]
 3525 0042 1831     		adds	r1, r1, #24
 3526 0044 FFF7FEFF 		bl	vListInsertEnd
 3527              	.LVL306:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3528              		.loc 1 2941 0
 3529 0048 0121     		movs	r1, #1
 3530 004a 2046     		mov	r0, r4
 3531 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3532              	.LVL307:
 3533 0050 10BD     		pop	{r4, pc}
 3534              	.LVL308:
 3535              	.L356:
 3536 0052 00BF     		.align	2
 3537              	.L355:
 3538 0054 00000000 		.word	.LANCHOR16
 3539 0058 00000000 		.word	.LANCHOR10
 3540              		.cfi_endproc
 3541              	.LFE31:
 3543              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3544              		.align	1
 3545              		.global	vTaskPlaceOnEventListRestricted
 3546              		.syntax unified
 3547              		.thumb
 3548              		.thumb_func
 3549              		.fpu softvfp
 3551              	vTaskPlaceOnEventListRestricted:
 3552              	.LFB32:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3553              		.loc 1 2948 0
 3554              		.cfi_startproc
 3555              		@ args = 0, pretend = 0, frame = 0
 3556              		@ frame_needed = 0, uses_anonymous_args = 0
 3557              	.LVL309:
 3558 0000 38B5     		push	{r3, r4, r5, lr}
 3559              	.LCFI38:
 3560              		.cfi_def_cfa_offset 16
 3561              		.cfi_offset 3, -16
 3562              		.cfi_offset 4, -12
 3563              		.cfi_offset 5, -8
 3564              		.cfi_offset 14, -4
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3565              		.loc 1 2949 0
 3566 0002 70B1     		cbz	r0, .L363
 3567 0004 0C46     		mov	r4, r1
ARM GAS  /tmp/cci5v3JD.s 			page 161


 3568 0006 1546     		mov	r5, r2
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3569              		.loc 1 2961 0
 3570 0008 0A4A     		ldr	r2, .L364
 3571              	.LVL310:
 3572 000a 1168     		ldr	r1, [r2]
 3573              	.LVL311:
 3574 000c 1831     		adds	r1, r1, #24
 3575 000e FFF7FEFF 		bl	vListInsertEnd
 3576              	.LVL312:
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3577              		.loc 1 2966 0
 3578 0012 0DB1     		cbz	r5, .L360
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3579              		.loc 1 2968 0
 3580 0014 4FF0FF34 		mov	r4, #-1
 3581              	.LVL313:
 3582              	.L360:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3583              		.loc 1 2972 0
 3584 0018 2946     		mov	r1, r5
 3585 001a 2046     		mov	r0, r4
 3586 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3587              	.LVL314:
 3588 0020 38BD     		pop	{r3, r4, r5, pc}
 3589              	.LVL315:
 3590              	.L363:
 3591              	.LBB193:
 3592              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3593              		.loc 2 195 0
 3594              		.syntax unified
 3595              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3596 0022 4FF05003 			mov r3, #80												
 3597 0026 83F31188 		msr basepri, r3											
 3598 002a BFF36F8F 		isb														
 3599 002e BFF34F8F 		dsb														
 3600              	
 3601              	@ 0 "" 2
 3602              	.LVL316:
 3603              		.thumb
 3604              		.syntax unified
 3605              	.L359:
 3606 0032 FEE7     		b	.L359
 3607              	.L365:
 3608              		.align	2
 3609              	.L364:
 3610 0034 00000000 		.word	.LANCHOR10
 3611              	.LBE194:
 3612              	.LBE193:
 3613              		.cfi_endproc
 3614              	.LFE32:
 3616              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3617              		.align	1
 3618              		.global	xTaskRemoveFromEventList
 3619              		.syntax unified
 3620              		.thumb
ARM GAS  /tmp/cci5v3JD.s 			page 162


 3621              		.thumb_func
 3622              		.fpu softvfp
 3624              	xTaskRemoveFromEventList:
 3625              	.LFB33:
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3626              		.loc 1 2979 0
 3627              		.cfi_startproc
 3628              		@ args = 0, pretend = 0, frame = 0
 3629              		@ frame_needed = 0, uses_anonymous_args = 0
 3630              	.LVL317:
 3631 0000 38B5     		push	{r3, r4, r5, lr}
 3632              	.LCFI39:
 3633              		.cfi_def_cfa_offset 16
 3634              		.cfi_offset 3, -16
 3635              		.cfi_offset 4, -12
 3636              		.cfi_offset 5, -8
 3637              		.cfi_offset 14, -4
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3638              		.loc 1 2996 0
 3639 0002 C368     		ldr	r3, [r0, #12]
 3640 0004 DC68     		ldr	r4, [r3, #12]
 3641              	.LVL318:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3642              		.loc 1 2997 0
 3643 0006 24B3     		cbz	r4, .L375
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3644              		.loc 1 2998 0
 3645 0008 04F11805 		add	r5, r4, #24
 3646 000c 2846     		mov	r0, r5
 3647              	.LVL319:
 3648 000e FFF7FEFF 		bl	uxListRemove
 3649              	.LVL320:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3650              		.loc 1 3000 0
 3651 0012 184B     		ldr	r3, .L376
 3652 0014 1B68     		ldr	r3, [r3]
 3653 0016 2BBB     		cbnz	r3, .L369
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3654              		.loc 1 3002 0
 3655 0018 251D     		adds	r5, r4, #4
 3656 001a 2846     		mov	r0, r5
 3657 001c FFF7FEFF 		bl	uxListRemove
 3658              	.LVL321:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3659              		.loc 1 3003 0
 3660 0020 E36A     		ldr	r3, [r4, #44]
 3661 0022 154A     		ldr	r2, .L376+4
 3662 0024 1268     		ldr	r2, [r2]
 3663 0026 9342     		cmp	r3, r2
 3664 0028 01D9     		bls	.L370
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3665              		.loc 1 3003 0 is_stmt 0 discriminator 1
 3666 002a 134A     		ldr	r2, .L376+4
 3667 002c 1360     		str	r3, [r2]
 3668              	.L370:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3669              		.loc 1 3003 0 discriminator 3
ARM GAS  /tmp/cci5v3JD.s 			page 163


 3670 002e 03EB8303 		add	r3, r3, r3, lsl #2
 3671 0032 9A00     		lsls	r2, r3, #2
 3672 0034 2946     		mov	r1, r5
 3673 0036 1148     		ldr	r0, .L376+8
 3674 0038 1044     		add	r0, r0, r2
 3675 003a FFF7FEFF 		bl	vListInsertEnd
 3676              	.LVL322:
 3677              	.L371:
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3678              		.loc 1 3012 0 is_stmt 1
 3679 003e E26A     		ldr	r2, [r4, #44]
 3680 0040 0F4B     		ldr	r3, .L376+12
 3681 0042 1B68     		ldr	r3, [r3]
 3682 0044 DB6A     		ldr	r3, [r3, #44]
 3683 0046 9A42     		cmp	r2, r3
 3684 0048 11D9     		bls	.L373
 3685              	.LVL323:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3686              		.loc 1 3021 0
 3687 004a 0120     		movs	r0, #1
 3688 004c 0D4B     		ldr	r3, .L376+16
 3689 004e 1860     		str	r0, [r3]
 3690 0050 38BD     		pop	{r3, r4, r5, pc}
 3691              	.LVL324:
 3692              	.L375:
 3693              	.LBB195:
 3694              	.LBB196:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3695              		.loc 2 195 0
 3696              		.syntax unified
 3697              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3698 0052 4FF05003 			mov r3, #80												
 3699 0056 83F31188 		msr basepri, r3											
 3700 005a BFF36F8F 		isb														
 3701 005e BFF34F8F 		dsb														
 3702              	
 3703              	@ 0 "" 2
 3704              	.LVL325:
 3705              		.thumb
 3706              		.syntax unified
 3707              	.L368:
 3708 0062 FEE7     		b	.L368
 3709              	.LVL326:
 3710              	.L369:
 3711              	.LBE196:
 3712              	.LBE195:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3713              		.loc 1 3009 0
 3714 0064 2946     		mov	r1, r5
 3715 0066 0848     		ldr	r0, .L376+20
 3716 0068 FFF7FEFF 		bl	vListInsertEnd
 3717              	.LVL327:
 3718 006c E7E7     		b	.L371
 3719              	.L373:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3720              		.loc 1 3025 0
 3721 006e 0020     		movs	r0, #0
ARM GAS  /tmp/cci5v3JD.s 			page 164


 3722              	.LVL328:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3723              		.loc 1 3043 0
 3724 0070 38BD     		pop	{r3, r4, r5, pc}
 3725              	.LVL329:
 3726              	.L377:
 3727 0072 00BF     		.align	2
 3728              	.L376:
 3729 0074 00000000 		.word	.LANCHOR16
 3730 0078 00000000 		.word	.LANCHOR13
 3731 007c 00000000 		.word	.LANCHOR4
 3732 0080 00000000 		.word	.LANCHOR10
 3733 0084 00000000 		.word	.LANCHOR19
 3734 0088 00000000 		.word	.LANCHOR1
 3735              		.cfi_endproc
 3736              	.LFE33:
 3738              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3739              		.align	1
 3740              		.global	vTaskRemoveFromUnorderedEventList
 3741              		.syntax unified
 3742              		.thumb
 3743              		.thumb_func
 3744              		.fpu softvfp
 3746              	vTaskRemoveFromUnorderedEventList:
 3747              	.LFB34:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3748              		.loc 1 3047 0
 3749              		.cfi_startproc
 3750              		@ args = 0, pretend = 0, frame = 0
 3751              		@ frame_needed = 0, uses_anonymous_args = 0
 3752              	.LVL330:
 3753 0000 38B5     		push	{r3, r4, r5, lr}
 3754              	.LCFI40:
 3755              		.cfi_def_cfa_offset 16
 3756              		.cfi_offset 3, -16
 3757              		.cfi_offset 4, -12
 3758              		.cfi_offset 5, -8
 3759              		.cfi_offset 14, -4
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3760              		.loc 1 3052 0
 3761 0002 1C4B     		ldr	r3, .L387
 3762 0004 1B68     		ldr	r3, [r3]
 3763 0006 43B9     		cbnz	r3, .L379
 3764              	.LBB197:
 3765              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3766              		.loc 2 195 0
 3767              		.syntax unified
 3768              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3769 0008 4FF05003 			mov r3, #80												
 3770 000c 83F31188 		msr basepri, r3											
 3771 0010 BFF36F8F 		isb														
 3772 0014 BFF34F8F 		dsb														
 3773              	
 3774              	@ 0 "" 2
 3775              	.LVL331:
 3776              		.thumb
ARM GAS  /tmp/cci5v3JD.s 			page 165


 3777              		.syntax unified
 3778              	.L380:
 3779 0018 FEE7     		b	.L380
 3780              	.L379:
 3781              	.LBE198:
 3782              	.LBE197:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3783              		.loc 1 3055 0
 3784 001a 41F00041 		orr	r1, r1, #-2147483648
 3785              	.LVL332:
 3786 001e 0160     		str	r1, [r0]
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3787              		.loc 1 3059 0
 3788 0020 C468     		ldr	r4, [r0, #12]
 3789              	.LVL333:
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3790              		.loc 1 3060 0
 3791 0022 F4B1     		cbz	r4, .L386
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3792              		.loc 1 3061 0
 3793 0024 FFF7FEFF 		bl	uxListRemove
 3794              	.LVL334:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3795              		.loc 1 3066 0
 3796 0028 251D     		adds	r5, r4, #4
 3797 002a 2846     		mov	r0, r5
 3798 002c FFF7FEFF 		bl	uxListRemove
 3799              	.LVL335:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3800              		.loc 1 3067 0
 3801 0030 E36A     		ldr	r3, [r4, #44]
 3802 0032 114A     		ldr	r2, .L387+4
 3803 0034 1268     		ldr	r2, [r2]
 3804 0036 9342     		cmp	r3, r2
 3805 0038 01D9     		bls	.L383
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3806              		.loc 1 3067 0 is_stmt 0 discriminator 1
 3807 003a 0F4A     		ldr	r2, .L387+4
 3808 003c 1360     		str	r3, [r2]
 3809              	.L383:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3810              		.loc 1 3067 0 discriminator 3
 3811 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3812 0042 9A00     		lsls	r2, r3, #2
 3813 0044 2946     		mov	r1, r5
 3814 0046 0D48     		ldr	r0, .L387+8
 3815 0048 1044     		add	r0, r0, r2
 3816 004a FFF7FEFF 		bl	vListInsertEnd
 3817              	.LVL336:
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3818              		.loc 1 3069 0 is_stmt 1 discriminator 3
 3819 004e E26A     		ldr	r2, [r4, #44]
 3820 0050 0B4B     		ldr	r3, .L387+12
 3821 0052 1B68     		ldr	r3, [r3]
 3822 0054 DB6A     		ldr	r3, [r3, #44]
 3823 0056 9A42     		cmp	r2, r3
 3824 0058 02D9     		bls	.L378
ARM GAS  /tmp/cci5v3JD.s 			page 166


3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3825              		.loc 1 3075 0
 3826 005a 0122     		movs	r2, #1
 3827 005c 094B     		ldr	r3, .L387+16
 3828 005e 1A60     		str	r2, [r3]
 3829              	.L378:
 3830 0060 38BD     		pop	{r3, r4, r5, pc}
 3831              	.LVL337:
 3832              	.L386:
 3833              	.LBB199:
 3834              	.LBB200:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3835              		.loc 2 195 0
 3836              		.syntax unified
 3837              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3838 0062 4FF05003 			mov r3, #80												
 3839 0066 83F31188 		msr basepri, r3											
 3840 006a BFF36F8F 		isb														
 3841 006e BFF34F8F 		dsb														
 3842              	
 3843              	@ 0 "" 2
 3844              	.LVL338:
 3845              		.thumb
 3846              		.syntax unified
 3847              	.L382:
 3848 0072 FEE7     		b	.L382
 3849              	.L388:
 3850              		.align	2
 3851              	.L387:
 3852 0074 00000000 		.word	.LANCHOR16
 3853 0078 00000000 		.word	.LANCHOR13
 3854 007c 00000000 		.word	.LANCHOR4
 3855 0080 00000000 		.word	.LANCHOR10
 3856 0084 00000000 		.word	.LANCHOR19
 3857              	.LBE200:
 3858              	.LBE199:
 3859              		.cfi_endproc
 3860              	.LFE34:
 3862              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3863              		.align	1
 3864              		.global	vTaskSetTimeOutState
 3865              		.syntax unified
 3866              		.thumb
 3867              		.thumb_func
 3868              		.fpu softvfp
 3870              	vTaskSetTimeOutState:
 3871              	.LFB35:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3872              		.loc 1 3081 0
 3873              		.cfi_startproc
 3874              		@ args = 0, pretend = 0, frame = 0
 3875              		@ frame_needed = 0, uses_anonymous_args = 0
 3876              	.LVL339:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3877              		.loc 1 3082 0
 3878 0000 40B9     		cbnz	r0, .L390
 3879              	.LBB201:
ARM GAS  /tmp/cci5v3JD.s 			page 167


 3880              	.LBB202:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3881              		.loc 2 195 0
 3882              		.syntax unified
 3883              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3884 0002 4FF05003 			mov r3, #80												
 3885 0006 83F31188 		msr basepri, r3											
 3886 000a BFF36F8F 		isb														
 3887 000e BFF34F8F 		dsb														
 3888              	
 3889              	@ 0 "" 2
 3890              	.LVL340:
 3891              		.thumb
 3892              		.syntax unified
 3893              	.L391:
 3894 0012 FEE7     		b	.L391
 3895              	.L390:
 3896              	.LBE202:
 3897              	.LBE201:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3898              		.loc 1 3081 0
 3899 0014 10B5     		push	{r4, lr}
 3900              	.LCFI41:
 3901              		.cfi_def_cfa_offset 8
 3902              		.cfi_offset 4, -8
 3903              		.cfi_offset 14, -4
 3904 0016 0446     		mov	r4, r0
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3905              		.loc 1 3083 0
 3906 0018 FFF7FEFF 		bl	vPortEnterCritical
 3907              	.LVL341:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3908              		.loc 1 3085 0
 3909 001c 044B     		ldr	r3, .L394
 3910 001e 1B68     		ldr	r3, [r3]
 3911 0020 2360     		str	r3, [r4]
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3912              		.loc 1 3086 0
 3913 0022 044B     		ldr	r3, .L394+4
 3914 0024 1B68     		ldr	r3, [r3]
 3915 0026 6360     		str	r3, [r4, #4]
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3916              		.loc 1 3088 0
 3917 0028 FFF7FEFF 		bl	vPortExitCritical
 3918              	.LVL342:
 3919 002c 10BD     		pop	{r4, pc}
 3920              	.LVL343:
 3921              	.L395:
 3922 002e 00BF     		.align	2
 3923              	.L394:
 3924 0030 00000000 		.word	.LANCHOR17
 3925 0034 00000000 		.word	.LANCHOR15
 3926              		.cfi_endproc
 3927              	.LFE35:
 3929              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3930              		.align	1
 3931              		.global	vTaskInternalSetTimeOutState
ARM GAS  /tmp/cci5v3JD.s 			page 168


 3932              		.syntax unified
 3933              		.thumb
 3934              		.thumb_func
 3935              		.fpu softvfp
 3937              	vTaskInternalSetTimeOutState:
 3938              	.LFB36:
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3939              		.loc 1 3093 0
 3940              		.cfi_startproc
 3941              		@ args = 0, pretend = 0, frame = 0
 3942              		@ frame_needed = 0, uses_anonymous_args = 0
 3943              		@ link register save eliminated.
 3944              	.LVL344:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3945              		.loc 1 3095 0
 3946 0000 034B     		ldr	r3, .L397
 3947 0002 1B68     		ldr	r3, [r3]
 3948 0004 0360     		str	r3, [r0]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3949              		.loc 1 3096 0
 3950 0006 034B     		ldr	r3, .L397+4
 3951 0008 1B68     		ldr	r3, [r3]
 3952 000a 4360     		str	r3, [r0, #4]
 3953 000c 7047     		bx	lr
 3954              	.L398:
 3955 000e 00BF     		.align	2
 3956              	.L397:
 3957 0010 00000000 		.word	.LANCHOR17
 3958 0014 00000000 		.word	.LANCHOR15
 3959              		.cfi_endproc
 3960              	.LFE36:
 3962              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3963              		.align	1
 3964              		.global	xTaskCheckForTimeOut
 3965              		.syntax unified
 3966              		.thumb
 3967              		.thumb_func
 3968              		.fpu softvfp
 3970              	xTaskCheckForTimeOut:
 3971              	.LFB37:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3972              		.loc 1 3101 0
 3973              		.cfi_startproc
 3974              		@ args = 0, pretend = 0, frame = 0
 3975              		@ frame_needed = 0, uses_anonymous_args = 0
 3976              	.LVL345:
 3977 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3978              	.LCFI42:
 3979              		.cfi_def_cfa_offset 24
 3980              		.cfi_offset 3, -24
 3981              		.cfi_offset 4, -20
 3982              		.cfi_offset 5, -16
 3983              		.cfi_offset 6, -12
 3984              		.cfi_offset 7, -8
 3985              		.cfi_offset 14, -4
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3986              		.loc 1 3104 0
ARM GAS  /tmp/cci5v3JD.s 			page 169


 3987 0002 E0B1     		cbz	r0, .L410
 3988 0004 0546     		mov	r5, r0
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3989              		.loc 1 3105 0
 3990 0006 19B3     		cbz	r1, .L411
 3991 0008 0C46     		mov	r4, r1
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3992              		.loc 1 3107 0
 3993 000a FFF7FEFF 		bl	vPortEnterCritical
 3994              	.LVL346:
 3995              	.LBB203:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3996              		.loc 1 3110 0
 3997 000e 1A4B     		ldr	r3, .L413
 3998 0010 1868     		ldr	r0, [r3]
 3999              	.LVL347:
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4000              		.loc 1 3111 0
 4001 0012 6968     		ldr	r1, [r5, #4]
 4002 0014 421A     		subs	r2, r0, r1
 4003              	.LVL348:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4004              		.loc 1 3125 0
 4005 0016 2368     		ldr	r3, [r4]
 4006 0018 B3F1FF3F 		cmp	r3, #-1
 4007 001c 28D0     		beq	.L407
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4008              		.loc 1 3135 0
 4009 001e 2F68     		ldr	r7, [r5]
 4010 0020 164E     		ldr	r6, .L413+4
 4011 0022 3668     		ldr	r6, [r6]
 4012 0024 B742     		cmp	r7, r6
 4013 0026 01D0     		beq	.L405
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4014              		.loc 1 3135 0 is_stmt 0 discriminator 1
 4015 0028 8842     		cmp	r0, r1
 4016 002a 23D2     		bcs	.L408
 4017              	.L405:
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4018              		.loc 1 3144 0 is_stmt 1
 4019 002c 9A42     		cmp	r2, r3
 4020 002e 18D3     		bcc	.L412
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4021              		.loc 1 3153 0
 4022 0030 0023     		movs	r3, #0
 4023 0032 2360     		str	r3, [r4]
 4024              	.LVL349:
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4025              		.loc 1 3154 0
 4026 0034 0124     		movs	r4, #1
 4027              	.LVL350:
 4028              	.L404:
 4029              	.LBE203:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4030              		.loc 1 3157 0
 4031 0036 FFF7FEFF 		bl	vPortExitCritical
 4032              	.LVL351:
ARM GAS  /tmp/cci5v3JD.s 			page 170


3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4033              		.loc 1 3160 0
 4034 003a 2046     		mov	r0, r4
 4035 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4036              	.LVL352:
 4037              	.L410:
 4038              	.LBB204:
 4039              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4040              		.loc 2 195 0
 4041              		.syntax unified
 4042              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4043 003e 4FF05003 			mov r3, #80												
 4044 0042 83F31188 		msr basepri, r3											
 4045 0046 BFF36F8F 		isb														
 4046 004a BFF34F8F 		dsb														
 4047              	
 4048              	@ 0 "" 2
 4049              	.LVL353:
 4050              		.thumb
 4051              		.syntax unified
 4052              	.L401:
 4053 004e FEE7     		b	.L401
 4054              	.L411:
 4055              	.LBE205:
 4056              	.LBE204:
 4057              	.LBB206:
 4058              	.LBB207:
 4059              		.syntax unified
 4060              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4061 0050 4FF05003 			mov r3, #80												
 4062 0054 83F31188 		msr basepri, r3											
 4063 0058 BFF36F8F 		isb														
 4064 005c BFF34F8F 		dsb														
 4065              	
 4066              	@ 0 "" 2
 4067              	.LVL354:
 4068              		.thumb
 4069              		.syntax unified
 4070              	.L403:
 4071 0060 FEE7     		b	.L403
 4072              	.LVL355:
 4073              	.L412:
 4074              	.LBE207:
 4075              	.LBE206:
 4076              	.LBB208:
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4077              		.loc 1 3147 0
 4078 0062 9B1A     		subs	r3, r3, r2
 4079 0064 2360     		str	r3, [r4]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4080              		.loc 1 3148 0
 4081 0066 2846     		mov	r0, r5
 4082              	.LVL356:
 4083 0068 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4084              	.LVL357:
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cci5v3JD.s 			page 171


 4085              		.loc 1 3149 0
 4086 006c 0024     		movs	r4, #0
 4087              	.LVL358:
 4088 006e E2E7     		b	.L404
 4089              	.LVL359:
 4090              	.L407:
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4091              		.loc 1 3130 0
 4092 0070 0024     		movs	r4, #0
 4093              	.LVL360:
 4094 0072 E0E7     		b	.L404
 4095              	.LVL361:
 4096              	.L408:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4097              		.loc 1 3142 0
 4098 0074 0124     		movs	r4, #1
 4099              	.LVL362:
 4100 0076 DEE7     		b	.L404
 4101              	.L414:
 4102              		.align	2
 4103              	.L413:
 4104 0078 00000000 		.word	.LANCHOR15
 4105 007c 00000000 		.word	.LANCHOR17
 4106              	.LBE208:
 4107              		.cfi_endproc
 4108              	.LFE37:
 4110              		.section	.text.vTaskMissedYield,"ax",%progbits
 4111              		.align	1
 4112              		.global	vTaskMissedYield
 4113              		.syntax unified
 4114              		.thumb
 4115              		.thumb_func
 4116              		.fpu softvfp
 4118              	vTaskMissedYield:
 4119              	.LFB38:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4120              		.loc 1 3164 0
 4121              		.cfi_startproc
 4122              		@ args = 0, pretend = 0, frame = 0
 4123              		@ frame_needed = 0, uses_anonymous_args = 0
 4124              		@ link register save eliminated.
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4125              		.loc 1 3165 0
 4126 0000 0122     		movs	r2, #1
 4127 0002 014B     		ldr	r3, .L416
 4128 0004 1A60     		str	r2, [r3]
 4129 0006 7047     		bx	lr
 4130              	.L417:
 4131              		.align	2
 4132              	.L416:
 4133 0008 00000000 		.word	.LANCHOR19
 4134              		.cfi_endproc
 4135              	.LFE38:
 4137              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4138              		.align	1
 4139              		.global	uxTaskGetTaskNumber
 4140              		.syntax unified
ARM GAS  /tmp/cci5v3JD.s 			page 172


 4141              		.thumb
 4142              		.thumb_func
 4143              		.fpu softvfp
 4145              	uxTaskGetTaskNumber:
 4146              	.LFB39:
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4147              		.loc 1 3172 0
 4148              		.cfi_startproc
 4149              		@ args = 0, pretend = 0, frame = 0
 4150              		@ frame_needed = 0, uses_anonymous_args = 0
 4151              		@ link register save eliminated.
 4152              	.LVL363:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4153              		.loc 1 3176 0
 4154 0000 08B1     		cbz	r0, .L420
 4155              	.LVL364:
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4156              		.loc 1 3179 0
 4157 0002 806C     		ldr	r0, [r0, #72]
 4158              	.LVL365:
 4159 0004 7047     		bx	lr
 4160              	.LVL366:
 4161              	.L420:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4162              		.loc 1 3183 0
 4163 0006 0020     		movs	r0, #0
 4164              	.LVL367:
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4165              		.loc 1 3187 0
 4166 0008 7047     		bx	lr
 4167              		.cfi_endproc
 4168              	.LFE39:
 4170              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4171              		.align	1
 4172              		.global	vTaskSetTaskNumber
 4173              		.syntax unified
 4174              		.thumb
 4175              		.thumb_func
 4176              		.fpu softvfp
 4178              	vTaskSetTaskNumber:
 4179              	.LFB40:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4180              		.loc 1 3195 0
 4181              		.cfi_startproc
 4182              		@ args = 0, pretend = 0, frame = 0
 4183              		@ frame_needed = 0, uses_anonymous_args = 0
 4184              		@ link register save eliminated.
 4185              	.LVL368:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4186              		.loc 1 3198 0
 4187 0000 00B1     		cbz	r0, .L421
 4188              	.LVL369:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4189              		.loc 1 3201 0
 4190 0002 8164     		str	r1, [r0, #72]
 4191              	.LVL370:
 4192              	.L421:
ARM GAS  /tmp/cci5v3JD.s 			page 173


 4193 0004 7047     		bx	lr
 4194              		.cfi_endproc
 4195              	.LFE40:
 4197              		.section	.text.vTaskGetInfo,"ax",%progbits
 4198              		.align	1
 4199              		.global	vTaskGetInfo
 4200              		.syntax unified
 4201              		.thumb
 4202              		.thumb_func
 4203              		.fpu softvfp
 4205              	vTaskGetInfo:
 4206              	.LFB44:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4207              		.loc 1 3494 0
 4208              		.cfi_startproc
 4209              		@ args = 0, pretend = 0, frame = 0
 4210              		@ frame_needed = 0, uses_anonymous_args = 0
 4211              	.LVL371:
 4212 0000 70B5     		push	{r4, r5, r6, lr}
 4213              	.LCFI43:
 4214              		.cfi_def_cfa_offset 16
 4215              		.cfi_offset 4, -16
 4216              		.cfi_offset 5, -12
 4217              		.cfi_offset 6, -8
 4218              		.cfi_offset 14, -4
 4219 0002 0D46     		mov	r5, r1
 4220 0004 1646     		mov	r6, r2
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4221              		.loc 1 3498 0
 4222 0006 0446     		mov	r4, r0
 4223 0008 D0B1     		cbz	r0, .L433
 4224              	.LVL372:
 4225              	.L424:
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4226              		.loc 1 3500 0 discriminator 4
 4227 000a 2C60     		str	r4, [r5]
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4228              		.loc 1 3501 0 discriminator 4
 4229 000c 04F13402 		add	r2, r4, #52
 4230 0010 6A60     		str	r2, [r5, #4]
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4231              		.loc 1 3502 0 discriminator 4
 4232 0012 E26A     		ldr	r2, [r4, #44]
 4233 0014 2A61     		str	r2, [r5, #16]
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4234              		.loc 1 3503 0 discriminator 4
 4235 0016 226B     		ldr	r2, [r4, #48]
 4236 0018 EA61     		str	r2, [r5, #28]
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4237              		.loc 1 3504 0 discriminator 4
 4238 001a 626C     		ldr	r2, [r4, #68]
 4239 001c AA60     		str	r2, [r5, #8]
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4240              		.loc 1 3508 0 discriminator 4
 4241 001e E26C     		ldr	r2, [r4, #76]
 4242 0020 6A61     		str	r2, [r5, #20]
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cci5v3JD.s 			page 174


 4243              		.loc 1 3522 0 discriminator 4
 4244 0022 0022     		movs	r2, #0
 4245 0024 AA61     		str	r2, [r5, #24]
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4246              		.loc 1 3529 0 discriminator 4
 4247 0026 052B     		cmp	r3, #5
 4248 0028 19D0     		beq	.L425
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4249              		.loc 1 3531 0
 4250 002a 124A     		ldr	r2, .L437
 4251 002c 1268     		ldr	r2, [r2]
 4252 002e 9442     		cmp	r4, r2
 4253 0030 09D0     		beq	.L434
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4254              		.loc 1 3537 0
 4255 0032 2B73     		strb	r3, [r5, #12]
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4256              		.loc 1 3544 0
 4257 0034 032B     		cmp	r3, #3
 4258 0036 09D0     		beq	.L435
 4259              	.LVL373:
 4260              	.L427:
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4261              		.loc 1 3566 0
 4262 0038 B6B9     		cbnz	r6, .L436
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4263              		.loc 1 3580 0
 4264 003a 0023     		movs	r3, #0
 4265 003c 2B84     		strh	r3, [r5, #32]	@ movhi
 4266 003e 70BD     		pop	{r4, r5, r6, pc}
 4267              	.LVL374:
 4268              	.L433:
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4269              		.loc 1 3498 0 discriminator 1
 4270 0040 0C4A     		ldr	r2, .L437
 4271              	.LVL375:
 4272 0042 1468     		ldr	r4, [r2]
 4273 0044 E1E7     		b	.L424
 4274              	.LVL376:
 4275              	.L434:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4276              		.loc 1 3533 0
 4277 0046 0023     		movs	r3, #0
 4278              	.LVL377:
 4279 0048 2B73     		strb	r3, [r5, #12]
 4280 004a F5E7     		b	.L427
 4281              	.LVL378:
 4282              	.L435:
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4283              		.loc 1 3546 0
 4284 004c FFF7FEFF 		bl	vTaskSuspendAll
 4285              	.LVL379:
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4286              		.loc 1 3548 0
 4287 0050 A36A     		ldr	r3, [r4, #40]
 4288 0052 0BB1     		cbz	r3, .L428
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
ARM GAS  /tmp/cci5v3JD.s 			page 175


 4289              		.loc 1 3550 0
 4290 0054 0223     		movs	r3, #2
 4291 0056 2B73     		strb	r3, [r5, #12]
 4292              	.L428:
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4293              		.loc 1 3553 0
 4294 0058 FFF7FEFF 		bl	xTaskResumeAll
 4295              	.LVL380:
 4296 005c ECE7     		b	.L427
 4297              	.LVL381:
 4298              	.L425:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4299              		.loc 1 3561 0
 4300 005e 2046     		mov	r0, r4
 4301              	.LVL382:
 4302 0060 FFF7FEFF 		bl	eTaskGetState
 4303              	.LVL383:
 4304 0064 2873     		strb	r0, [r5, #12]
 4305 0066 E7E7     		b	.L427
 4306              	.L436:
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4307              		.loc 1 3574 0
 4308 0068 206B     		ldr	r0, [r4, #48]
 4309 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4310              	.LVL384:
 4311 006e 2884     		strh	r0, [r5, #32]	@ movhi
 4312 0070 70BD     		pop	{r4, r5, r6, pc}
 4313              	.LVL385:
 4314              	.L438:
 4315 0072 00BF     		.align	2
 4316              	.L437:
 4317 0074 00000000 		.word	.LANCHOR10
 4318              		.cfi_endproc
 4319              	.LFE44:
 4321              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4322              		.align	1
 4323              		.syntax unified
 4324              		.thumb
 4325              		.thumb_func
 4326              		.fpu softvfp
 4328              	prvListTasksWithinSingleList:
 4329              	.LFB45:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4330              		.loc 1 3590 0
 4331              		.cfi_startproc
 4332              		@ args = 0, pretend = 0, frame = 0
 4333              		@ frame_needed = 0, uses_anonymous_args = 0
 4334              	.LVL386:
 4335 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4336              	.LCFI44:
 4337              		.cfi_def_cfa_offset 32
 4338              		.cfi_offset 4, -32
 4339              		.cfi_offset 5, -28
 4340              		.cfi_offset 6, -24
 4341              		.cfi_offset 7, -20
 4342              		.cfi_offset 8, -16
 4343              		.cfi_offset 9, -12
ARM GAS  /tmp/cci5v3JD.s 			page 176


 4344              		.cfi_offset 10, -8
 4345              		.cfi_offset 14, -4
 4346              	.LVL387:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4347              		.loc 1 3594 0
 4348 0004 0B68     		ldr	r3, [r1]
 4349 0006 3BB3     		cbz	r3, .L444
 4350              	.LVL388:
 4351              	.LBB209:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4352              		.loc 1 3596 0
 4353 0008 4B68     		ldr	r3, [r1, #4]
 4354 000a 5B68     		ldr	r3, [r3, #4]
 4355 000c 4B60     		str	r3, [r1, #4]
 4356 000e 01F10809 		add	r9, r1, #8
 4357 0012 4B45     		cmp	r3, r9
 4358 0014 07D0     		beq	.L446
 4359              	.L441:
 4360 0016 9046     		mov	r8, r2
 4361 0018 0D46     		mov	r5, r1
 4362 001a 0746     		mov	r7, r0
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4363              		.loc 1 3596 0 is_stmt 0 discriminator 3
 4364 001c 4B68     		ldr	r3, [r1, #4]
 4365 001e D3F80CA0 		ldr	r10, [r3, #12]
 4366              	.LVL389:
 4367              	.LBE209:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4368              		.loc 1 3592 0 is_stmt 1 discriminator 3
 4369 0022 0024     		movs	r4, #0
 4370 0024 10E0     		b	.L443
 4371              	.LVL390:
 4372              	.L446:
 4373              	.LBB210:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4374              		.loc 1 3596 0 discriminator 1
 4375 0026 5B68     		ldr	r3, [r3, #4]
 4376 0028 4B60     		str	r3, [r1, #4]
 4377 002a F4E7     		b	.L441
 4378              	.LVL391:
 4379              	.L442:
 4380              	.LBE210:
 4381              	.LBB211:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4382              		.loc 1 3604 0 discriminator 3
 4383 002c 6B68     		ldr	r3, [r5, #4]
 4384 002e DE68     		ldr	r6, [r3, #12]
 4385              	.LVL392:
 4386              	.LBE211:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4387              		.loc 1 3605 0 discriminator 3
 4388 0030 04EBC403 		add	r3, r4, r4, lsl #3
 4389 0034 9900     		lsls	r1, r3, #2
 4390 0036 4346     		mov	r3, r8
 4391 0038 0122     		movs	r2, #1
 4392 003a 3944     		add	r1, r1, r7
 4393 003c 3046     		mov	r0, r6
ARM GAS  /tmp/cci5v3JD.s 			page 177


 4394 003e FFF7FEFF 		bl	vTaskGetInfo
 4395              	.LVL393:
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4396              		.loc 1 3606 0 discriminator 3
 4397 0042 0134     		adds	r4, r4, #1
 4398              	.LVL394:
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4399              		.loc 1 3607 0 discriminator 3
 4400 0044 B245     		cmp	r10, r6
 4401 0046 08D0     		beq	.L439
 4402              	.LVL395:
 4403              	.L443:
 4404              	.LBB212:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4405              		.loc 1 3604 0
 4406 0048 6B68     		ldr	r3, [r5, #4]
 4407 004a 5B68     		ldr	r3, [r3, #4]
 4408 004c 6B60     		str	r3, [r5, #4]
 4409 004e 9945     		cmp	r9, r3
 4410 0050 ECD1     		bne	.L442
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4411              		.loc 1 3604 0 is_stmt 0 discriminator 1
 4412 0052 5B68     		ldr	r3, [r3, #4]
 4413 0054 6B60     		str	r3, [r5, #4]
 4414 0056 E9E7     		b	.L442
 4415              	.LVL396:
 4416              	.L444:
 4417              	.LBE212:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4418              		.loc 1 3592 0 is_stmt 1
 4419 0058 0024     		movs	r4, #0
 4420              	.LVL397:
 4421              	.L439:
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4422              		.loc 1 3615 0
 4423 005a 2046     		mov	r0, r4
 4424 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4425              		.cfi_endproc
 4426              	.LFE45:
 4428              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4429              		.align	1
 4430              		.global	uxTaskGetSystemState
 4431              		.syntax unified
 4432              		.thumb
 4433              		.thumb_func
 4434              		.fpu softvfp
 4436              	uxTaskGetSystemState:
 4437              	.LFB27:
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4438              		.loc 1 2404 0
 4439              		.cfi_startproc
 4440              		@ args = 0, pretend = 0, frame = 0
 4441              		@ frame_needed = 0, uses_anonymous_args = 0
 4442              	.LVL398:
 4443 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4444              	.LCFI45:
 4445              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cci5v3JD.s 			page 178


 4446              		.cfi_offset 3, -24
 4447              		.cfi_offset 4, -20
 4448              		.cfi_offset 5, -16
 4449              		.cfi_offset 6, -12
 4450              		.cfi_offset 7, -8
 4451              		.cfi_offset 14, -4
 4452 0002 0746     		mov	r7, r0
 4453 0004 0C46     		mov	r4, r1
 4454 0006 1646     		mov	r6, r2
 4455              	.LVL399:
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4456              		.loc 1 2407 0
 4457 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4458              	.LVL400:
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4459              		.loc 1 2410 0
 4460 000c 224B     		ldr	r3, .L452
 4461 000e 1B68     		ldr	r3, [r3]
 4462 0010 A342     		cmp	r3, r4
 4463 0012 3ED8     		bhi	.L450
 4464 0014 3824     		movs	r4, #56
 4465              	.LVL401:
 4466 0016 0025     		movs	r5, #0
 4467              	.LVL402:
 4468              	.L449:
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4469              		.loc 1 2416 0 discriminator 1
 4470 0018 013C     		subs	r4, r4, #1
 4471              	.LVL403:
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4472              		.loc 1 2417 0 discriminator 1
 4473 001a 05EBC503 		add	r3, r5, r5, lsl #3
 4474 001e 9800     		lsls	r0, r3, #2
 4475 0020 04EB8402 		add	r2, r4, r4, lsl #2
 4476 0024 9300     		lsls	r3, r2, #2
 4477 0026 0122     		movs	r2, #1
 4478 0028 1C49     		ldr	r1, .L452+4
 4479 002a 1944     		add	r1, r1, r3
 4480 002c 3844     		add	r0, r0, r7
 4481 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4482              	.LVL404:
 4483 0032 0544     		add	r5, r5, r0
 4484              	.LVL405:
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4485              		.loc 1 2419 0 discriminator 1
 4486 0034 002C     		cmp	r4, #0
 4487 0036 EFD1     		bne	.L449
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4488              		.loc 1 2423 0
 4489 0038 05EBC503 		add	r3, r5, r5, lsl #3
 4490 003c 9800     		lsls	r0, r3, #2
 4491 003e 184B     		ldr	r3, .L452+8
 4492 0040 1968     		ldr	r1, [r3]
 4493 0042 0222     		movs	r2, #2
 4494 0044 3844     		add	r0, r0, r7
 4495 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4496              	.LVL406:
ARM GAS  /tmp/cci5v3JD.s 			page 179


 4497 004a 2C18     		adds	r4, r5, r0
 4498              	.LVL407:
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4499              		.loc 1 2424 0
 4500 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4501 0050 9800     		lsls	r0, r3, #2
 4502 0052 144B     		ldr	r3, .L452+12
 4503 0054 1968     		ldr	r1, [r3]
 4504 0056 0222     		movs	r2, #2
 4505 0058 3844     		add	r0, r0, r7
 4506 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4507              	.LVL408:
 4508 005e 0444     		add	r4, r4, r0
 4509              	.LVL409:
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4510              		.loc 1 2430 0
 4511 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4512 0064 9800     		lsls	r0, r3, #2
 4513 0066 0422     		movs	r2, #4
 4514 0068 0F49     		ldr	r1, .L452+16
 4515 006a 3844     		add	r0, r0, r7
 4516 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4517              	.LVL410:
 4518 0070 0444     		add	r4, r4, r0
 4519              	.LVL411:
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4520              		.loc 1 2438 0
 4521 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4522 0076 9800     		lsls	r0, r3, #2
 4523 0078 0322     		movs	r2, #3
 4524 007a 0C49     		ldr	r1, .L452+20
 4525 007c 3844     		add	r0, r0, r7
 4526 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4527              	.LVL412:
 4528 0082 0444     		add	r4, r4, r0
 4529              	.LVL413:
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4530              		.loc 1 2455 0
 4531 0084 0EB1     		cbz	r6, .L448
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4532              		.loc 1 2457 0
 4533 0086 0023     		movs	r3, #0
 4534 0088 3360     		str	r3, [r6]
 4535              	.LVL414:
 4536              	.L448:
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4537              		.loc 1 2467 0
 4538 008a FFF7FEFF 		bl	xTaskResumeAll
 4539              	.LVL415:
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4540              		.loc 1 2470 0
 4541 008e 2046     		mov	r0, r4
 4542 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4543              	.LVL416:
 4544              	.L450:
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4545              		.loc 1 2405 0
ARM GAS  /tmp/cci5v3JD.s 			page 180


 4546 0092 0024     		movs	r4, #0
 4547              	.LVL417:
 4548 0094 F9E7     		b	.L448
 4549              	.L453:
 4550 0096 00BF     		.align	2
 4551              	.L452:
 4552 0098 00000000 		.word	.LANCHOR9
 4553 009c 00000000 		.word	.LANCHOR4
 4554 00a0 00000000 		.word	.LANCHOR2
 4555 00a4 00000000 		.word	.LANCHOR8
 4556 00a8 00000000 		.word	.LANCHOR7
 4557 00ac 00000000 		.word	.LANCHOR0
 4558              		.cfi_endproc
 4559              	.LFE27:
 4561              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4562              		.align	1
 4563              		.global	uxTaskGetStackHighWaterMark
 4564              		.syntax unified
 4565              		.thumb
 4566              		.thumb_func
 4567              		.fpu softvfp
 4569              	uxTaskGetStackHighWaterMark:
 4570              	.LFB47:
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4571              		.loc 1 3643 0
 4572              		.cfi_startproc
 4573              		@ args = 0, pretend = 0, frame = 0
 4574              		@ frame_needed = 0, uses_anonymous_args = 0
 4575              	.LVL418:
 4576 0000 08B5     		push	{r3, lr}
 4577              	.LCFI46:
 4578              		.cfi_def_cfa_offset 8
 4579              		.cfi_offset 3, -8
 4580              		.cfi_offset 14, -4
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4581              		.loc 1 3648 0
 4582 0002 0346     		mov	r3, r0
 4583 0004 18B1     		cbz	r0, .L458
 4584              	.L455:
 4585              	.LVL419:
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4586              		.loc 1 3660 0 discriminator 4
 4587 0006 186B     		ldr	r0, [r3, #48]
 4588              	.LVL420:
 4589 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4590              	.LVL421:
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4591              		.loc 1 3663 0 discriminator 4
 4592 000c 08BD     		pop	{r3, pc}
 4593              	.LVL422:
 4594              	.L458:
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4595              		.loc 1 3648 0 discriminator 1
 4596 000e 014B     		ldr	r3, .L459
 4597 0010 1B68     		ldr	r3, [r3]
 4598 0012 F8E7     		b	.L455
 4599              	.L460:
ARM GAS  /tmp/cci5v3JD.s 			page 181


 4600              		.align	2
 4601              	.L459:
 4602 0014 00000000 		.word	.LANCHOR10
 4603              		.cfi_endproc
 4604              	.LFE47:
 4606              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4607              		.align	1
 4608              		.global	xTaskGetCurrentTaskHandle
 4609              		.syntax unified
 4610              		.thumb
 4611              		.thumb_func
 4612              		.fpu softvfp
 4614              	xTaskGetCurrentTaskHandle:
 4615              	.LFB50:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4616              		.loc 1 3751 0
 4617              		.cfi_startproc
 4618              		@ args = 0, pretend = 0, frame = 0
 4619              		@ frame_needed = 0, uses_anonymous_args = 0
 4620              		@ link register save eliminated.
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4621              		.loc 1 3757 0
 4622 0000 014B     		ldr	r3, .L462
 4623 0002 1868     		ldr	r0, [r3]
 4624              	.LVL423:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4625              		.loc 1 3760 0
 4626 0004 7047     		bx	lr
 4627              	.L463:
 4628 0006 00BF     		.align	2
 4629              	.L462:
 4630 0008 00000000 		.word	.LANCHOR10
 4631              		.cfi_endproc
 4632              	.LFE50:
 4634              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4635              		.align	1
 4636              		.global	xTaskGetSchedulerState
 4637              		.syntax unified
 4638              		.thumb
 4639              		.thumb_func
 4640              		.fpu softvfp
 4642              	xTaskGetSchedulerState:
 4643              	.LFB51:
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4644              		.loc 1 3768 0
 4645              		.cfi_startproc
 4646              		@ args = 0, pretend = 0, frame = 0
 4647              		@ frame_needed = 0, uses_anonymous_args = 0
 4648              		@ link register save eliminated.
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4649              		.loc 1 3771 0
 4650 0000 054B     		ldr	r3, .L468
 4651 0002 1B68     		ldr	r3, [r3]
 4652 0004 23B1     		cbz	r3, .L466
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4653              		.loc 1 3777 0
 4654 0006 054B     		ldr	r3, .L468+4
ARM GAS  /tmp/cci5v3JD.s 			page 182


 4655 0008 1B68     		ldr	r3, [r3]
 4656 000a 1BB9     		cbnz	r3, .L467
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4657              		.loc 1 3779 0
 4658 000c 0220     		movs	r0, #2
 4659 000e 7047     		bx	lr
 4660              	.L466:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4661              		.loc 1 3773 0
 4662 0010 0120     		movs	r0, #1
 4663 0012 7047     		bx	lr
 4664              	.L467:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4665              		.loc 1 3783 0
 4666 0014 0020     		movs	r0, #0
 4667              	.LVL424:
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4668              		.loc 1 3788 0
 4669 0016 7047     		bx	lr
 4670              	.L469:
 4671              		.align	2
 4672              	.L468:
 4673 0018 00000000 		.word	.LANCHOR11
 4674 001c 00000000 		.word	.LANCHOR16
 4675              		.cfi_endproc
 4676              	.LFE51:
 4678              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4679              		.align	1
 4680              		.global	xTaskPriorityInherit
 4681              		.syntax unified
 4682              		.thumb
 4683              		.thumb_func
 4684              		.fpu softvfp
 4686              	xTaskPriorityInherit:
 4687              	.LFB52:
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4688              		.loc 1 3796 0
 4689              		.cfi_startproc
 4690              		@ args = 0, pretend = 0, frame = 0
 4691              		@ frame_needed = 0, uses_anonymous_args = 0
 4692              	.LVL425:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4693              		.loc 1 3803 0
 4694 0000 0028     		cmp	r0, #0
 4695 0002 44D0     		beq	.L477
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4696              		.loc 1 3796 0
 4697 0004 38B5     		push	{r3, r4, r5, lr}
 4698              	.LCFI47:
 4699              		.cfi_def_cfa_offset 16
 4700              		.cfi_offset 3, -16
 4701              		.cfi_offset 4, -12
 4702              		.cfi_offset 5, -8
 4703              		.cfi_offset 14, -4
 4704 0006 0546     		mov	r5, r0
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4705              		.loc 1 3808 0
ARM GAS  /tmp/cci5v3JD.s 			page 183


 4706 0008 C26A     		ldr	r2, [r0, #44]
 4707 000a 2249     		ldr	r1, .L487
 4708 000c 0968     		ldr	r1, [r1]
 4709 000e C96A     		ldr	r1, [r1, #44]
 4710 0010 8A42     		cmp	r2, r1
 4711 0012 32D2     		bcs	.L472
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4712              		.loc 1 3813 0
 4713 0014 8169     		ldr	r1, [r0, #24]
 4714 0016 0029     		cmp	r1, #0
 4715 0018 05DB     		blt	.L473
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4716              		.loc 1 3815 0
 4717 001a 1E49     		ldr	r1, .L487
 4718 001c 0968     		ldr	r1, [r1]
 4719 001e C96A     		ldr	r1, [r1, #44]
 4720 0020 C1F13801 		rsb	r1, r1, #56
 4721 0024 8161     		str	r1, [r0, #24]
 4722              	.L473:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4723              		.loc 1 3824 0
 4724 0026 6869     		ldr	r0, [r5, #20]
 4725              	.LVL426:
 4726 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4727 002c 9100     		lsls	r1, r2, #2
 4728 002e 1A4A     		ldr	r2, .L487+4
 4729 0030 0A44     		add	r2, r2, r1
 4730 0032 9042     		cmp	r0, r2
 4731 0034 07D0     		beq	.L484
 4732 0036 0022     		movs	r2, #0
 4733              	.L474:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4734              		.loc 1 3824 0 is_stmt 0 discriminator 4
 4735 0038 3AB9     		cbnz	r2, .L485
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4736              		.loc 1 3842 0 is_stmt 1
 4737 003a 164A     		ldr	r2, .L487
 4738 003c 1268     		ldr	r2, [r2]
 4739 003e D26A     		ldr	r2, [r2, #44]
 4740 0040 EA62     		str	r2, [r5, #44]
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4741              		.loc 1 3848 0
 4742 0042 0120     		movs	r0, #1
 4743 0044 38BD     		pop	{r3, r4, r5, pc}
 4744              	.LVL427:
 4745              	.L484:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4746              		.loc 1 3824 0
 4747 0046 0122     		movs	r2, #1
 4748 0048 F6E7     		b	.L474
 4749              	.L485:
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4750              		.loc 1 3826 0
 4751 004a 2C1D     		adds	r4, r5, #4
 4752 004c 2046     		mov	r0, r4
 4753 004e FFF7FEFF 		bl	uxListRemove
 4754              	.LVL428:
ARM GAS  /tmp/cci5v3JD.s 			page 184


3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4755              		.loc 1 3836 0
 4756 0052 104B     		ldr	r3, .L487
 4757 0054 1B68     		ldr	r3, [r3]
 4758 0056 DB6A     		ldr	r3, [r3, #44]
 4759 0058 EB62     		str	r3, [r5, #44]
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4760              		.loc 1 3837 0
 4761 005a 104A     		ldr	r2, .L487+8
 4762 005c 1268     		ldr	r2, [r2]
 4763 005e 9342     		cmp	r3, r2
 4764 0060 01D9     		bls	.L476
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4765              		.loc 1 3837 0 is_stmt 0 discriminator 1
 4766 0062 0E4A     		ldr	r2, .L487+8
 4767 0064 1360     		str	r3, [r2]
 4768              	.L476:
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4769              		.loc 1 3837 0 discriminator 3
 4770 0066 03EB8303 		add	r3, r3, r3, lsl #2
 4771 006a 9A00     		lsls	r2, r3, #2
 4772 006c 2146     		mov	r1, r4
 4773 006e 0A48     		ldr	r0, .L487+4
 4774 0070 1044     		add	r0, r0, r2
 4775 0072 FFF7FEFF 		bl	vListInsertEnd
 4776              	.LVL429:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4777              		.loc 1 3848 0 is_stmt 1 discriminator 3
 4778 0076 0120     		movs	r0, #1
 4779 0078 38BD     		pop	{r3, r4, r5, pc}
 4780              	.LVL430:
 4781              	.L472:
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4782              		.loc 1 3852 0
 4783 007a C26C     		ldr	r2, [r0, #76]
 4784 007c 054B     		ldr	r3, .L487
 4785 007e 1B68     		ldr	r3, [r3]
 4786 0080 DB6A     		ldr	r3, [r3, #44]
 4787 0082 9A42     		cmp	r2, r3
 4788 0084 01D2     		bcs	.L486
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4789              		.loc 1 3861 0
 4790 0086 0120     		movs	r0, #1
 4791              	.LVL431:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4792              		.loc 1 3875 0
 4793 0088 38BD     		pop	{r3, r4, r5, pc}
 4794              	.LVL432:
 4795              	.L486:
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4796              		.loc 1 3798 0
 4797 008a 0020     		movs	r0, #0
 4798              	.LVL433:
 4799 008c 38BD     		pop	{r3, r4, r5, pc}
 4800              	.LVL434:
 4801              	.L477:
 4802              	.LCFI48:
ARM GAS  /tmp/cci5v3JD.s 			page 185


 4803              		.cfi_def_cfa_offset 0
 4804              		.cfi_restore 3
 4805              		.cfi_restore 4
 4806              		.cfi_restore 5
 4807              		.cfi_restore 14
 4808 008e 0020     		movs	r0, #0
 4809              	.LVL435:
 4810 0090 7047     		bx	lr
 4811              	.L488:
 4812 0092 00BF     		.align	2
 4813              	.L487:
 4814 0094 00000000 		.word	.LANCHOR10
 4815 0098 00000000 		.word	.LANCHOR4
 4816 009c 00000000 		.word	.LANCHOR13
 4817              		.cfi_endproc
 4818              	.LFE52:
 4820              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4821              		.align	1
 4822              		.global	xTaskPriorityDisinherit
 4823              		.syntax unified
 4824              		.thumb
 4825              		.thumb_func
 4826              		.fpu softvfp
 4828              	xTaskPriorityDisinherit:
 4829              	.LFB53:
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4830              		.loc 1 3883 0
 4831              		.cfi_startproc
 4832              		@ args = 0, pretend = 0, frame = 0
 4833              		@ frame_needed = 0, uses_anonymous_args = 0
 4834              	.LVL436:
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4835              		.loc 1 3887 0
 4836 0000 0028     		cmp	r0, #0
 4837 0002 39D0     		beq	.L496
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4838              		.loc 1 3883 0
 4839 0004 38B5     		push	{r3, r4, r5, lr}
 4840              	.LCFI49:
 4841              		.cfi_def_cfa_offset 16
 4842              		.cfi_offset 3, -16
 4843              		.cfi_offset 4, -12
 4844              		.cfi_offset 5, -8
 4845              		.cfi_offset 14, -4
 4846 0006 0446     		mov	r4, r0
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4847              		.loc 1 3893 0
 4848 0008 1E4A     		ldr	r2, .L503
 4849 000a 1268     		ldr	r2, [r2]
 4850 000c 9042     		cmp	r0, r2
 4851 000e 08D0     		beq	.L491
 4852              	.LBB213:
 4853              	.LBB214:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4854              		.loc 2 195 0
 4855              		.syntax unified
 4856              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/cci5v3JD.s 			page 186


 4857 0010 4FF05003 			mov r3, #80												
 4858 0014 83F31188 		msr basepri, r3											
 4859 0018 BFF36F8F 		isb														
 4860 001c BFF34F8F 		dsb														
 4861              	
 4862              	@ 0 "" 2
 4863              	.LVL437:
 4864              		.thumb
 4865              		.syntax unified
 4866              	.L492:
 4867 0020 FEE7     		b	.L492
 4868              	.L491:
 4869              	.LBE214:
 4870              	.LBE213:
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4871              		.loc 1 3894 0
 4872 0022 026D     		ldr	r2, [r0, #80]
 4873 0024 42B9     		cbnz	r2, .L493
 4874              	.LBB215:
 4875              	.LBB216:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4876              		.loc 2 195 0
 4877              		.syntax unified
 4878              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4879 0026 4FF05003 			mov r3, #80												
 4880 002a 83F31188 		msr basepri, r3											
 4881 002e BFF36F8F 		isb														
 4882 0032 BFF34F8F 		dsb														
 4883              	
 4884              	@ 0 "" 2
 4885              	.LVL438:
 4886              		.thumb
 4887              		.syntax unified
 4888              	.L494:
 4889 0036 FEE7     		b	.L494
 4890              	.L493:
 4891              	.LBE216:
 4892              	.LBE215:
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4893              		.loc 1 3895 0
 4894 0038 013A     		subs	r2, r2, #1
 4895 003a 0265     		str	r2, [r0, #80]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4896              		.loc 1 3899 0
 4897 003c C06A     		ldr	r0, [r0, #44]
 4898              	.LVL439:
 4899 003e E16C     		ldr	r1, [r4, #76]
 4900 0040 8842     		cmp	r0, r1
 4901 0042 1BD0     		beq	.L497
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4902              		.loc 1 3902 0
 4903 0044 E2B9     		cbnz	r2, .L498
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4904              		.loc 1 3909 0
 4905 0046 251D     		adds	r5, r4, #4
 4906 0048 2846     		mov	r0, r5
 4907 004a FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/cci5v3JD.s 			page 187


 4908              	.LVL440:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4909              		.loc 1 3921 0
 4910 004e E36C     		ldr	r3, [r4, #76]
 4911 0050 E362     		str	r3, [r4, #44]
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4912              		.loc 1 3926 0
 4913 0052 C3F13802 		rsb	r2, r3, #56
 4914 0056 A261     		str	r2, [r4, #24]
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4915              		.loc 1 3927 0
 4916 0058 0B4A     		ldr	r2, .L503+4
 4917 005a 1268     		ldr	r2, [r2]
 4918 005c 9342     		cmp	r3, r2
 4919 005e 01D9     		bls	.L495
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4920              		.loc 1 3927 0 is_stmt 0 discriminator 1
 4921 0060 094A     		ldr	r2, .L503+4
 4922 0062 1360     		str	r3, [r2]
 4923              	.L495:
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4924              		.loc 1 3927 0 discriminator 3
 4925 0064 03EB8303 		add	r3, r3, r3, lsl #2
 4926 0068 9A00     		lsls	r2, r3, #2
 4927 006a 2946     		mov	r1, r5
 4928 006c 0748     		ldr	r0, .L503+8
 4929 006e 1044     		add	r0, r0, r2
 4930 0070 FFF7FEFF 		bl	vListInsertEnd
 4931              	.LVL441:
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4932              		.loc 1 3937 0 is_stmt 1 discriminator 3
 4933 0074 0120     		movs	r0, #1
 4934 0076 38BD     		pop	{r3, r4, r5, pc}
 4935              	.LVL442:
 4936              	.L496:
 4937              	.LCFI50:
 4938              		.cfi_def_cfa_offset 0
 4939              		.cfi_restore 3
 4940              		.cfi_restore 4
 4941              		.cfi_restore 5
 4942              		.cfi_restore 14
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4943              		.loc 1 3885 0
 4944 0078 0020     		movs	r0, #0
 4945              	.LVL443:
 4946 007a 7047     		bx	lr
 4947              	.LVL444:
 4948              	.L497:
 4949              	.LCFI51:
 4950              		.cfi_def_cfa_offset 16
 4951              		.cfi_offset 3, -16
 4952              		.cfi_offset 4, -12
 4953              		.cfi_offset 5, -8
 4954              		.cfi_offset 14, -4
 4955 007c 0020     		movs	r0, #0
 4956 007e 38BD     		pop	{r3, r4, r5, pc}
 4957              	.LVL445:
ARM GAS  /tmp/cci5v3JD.s 			page 188


 4958              	.L498:
 4959 0080 0020     		movs	r0, #0
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4960              		.loc 1 3955 0
 4961 0082 38BD     		pop	{r3, r4, r5, pc}
 4962              	.LVL446:
 4963              	.L504:
 4964              		.align	2
 4965              	.L503:
 4966 0084 00000000 		.word	.LANCHOR10
 4967 0088 00000000 		.word	.LANCHOR13
 4968 008c 00000000 		.word	.LANCHOR4
 4969              		.cfi_endproc
 4970              	.LFE53:
 4972              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4973              		.align	1
 4974              		.global	vTaskPriorityDisinheritAfterTimeout
 4975              		.syntax unified
 4976              		.thumb
 4977              		.thumb_func
 4978              		.fpu softvfp
 4980              	vTaskPriorityDisinheritAfterTimeout:
 4981              	.LFB54:
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4982              		.loc 1 3963 0
 4983              		.cfi_startproc
 4984              		@ args = 0, pretend = 0, frame = 0
 4985              		@ frame_needed = 0, uses_anonymous_args = 0
 4986              	.LVL447:
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4987              		.loc 1 3968 0
 4988 0000 0028     		cmp	r0, #0
 4989 0002 4BD0     		beq	.L517
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4990              		.loc 1 3963 0
 4991 0004 38B5     		push	{r3, r4, r5, lr}
 4992              	.LCFI52:
 4993              		.cfi_def_cfa_offset 16
 4994              		.cfi_offset 3, -16
 4995              		.cfi_offset 4, -12
 4996              		.cfi_offset 5, -8
 4997              		.cfi_offset 14, -4
 4998 0006 0446     		mov	r4, r0
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4999              		.loc 1 3972 0
 5000 0008 006D     		ldr	r0, [r0, #80]
 5001              	.LVL448:
 5002 000a 40B9     		cbnz	r0, .L507
 5003              	.LBB217:
 5004              	.LBB218:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5005              		.loc 2 195 0
 5006              		.syntax unified
 5007              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5008 000c 4FF05003 			mov r3, #80												
 5009 0010 83F31188 		msr basepri, r3											
 5010 0014 BFF36F8F 		isb														
ARM GAS  /tmp/cci5v3JD.s 			page 189


 5011 0018 BFF34F8F 		dsb														
 5012              	
 5013              	@ 0 "" 2
 5014              	.LVL449:
 5015              		.thumb
 5016              		.syntax unified
 5017              	.L508:
 5018 001c FEE7     		b	.L508
 5019              	.L507:
 5020              	.LBE218:
 5021              	.LBE217:
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5022              		.loc 1 3978 0
 5023 001e E26C     		ldr	r2, [r4, #76]
 5024 0020 8A42     		cmp	r2, r1
 5025 0022 00D2     		bcs	.L509
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5026              		.loc 1 3980 0
 5027 0024 0A46     		mov	r2, r1
 5028              	.L509:
 5029              	.LVL450:
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5030              		.loc 1 3988 0
 5031 0026 E16A     		ldr	r1, [r4, #44]
 5032              	.LVL451:
 5033 0028 8A42     		cmp	r2, r1
 5034 002a 01D0     		beq	.L505
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5035              		.loc 1 3994 0
 5036 002c 0128     		cmp	r0, #1
 5037 002e 00D0     		beq	.L520
 5038              	.LVL452:
 5039              	.L505:
 5040 0030 38BD     		pop	{r3, r4, r5, pc}
 5041              	.LVL453:
 5042              	.L520:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5043              		.loc 1 3999 0
 5044 0032 1B48     		ldr	r0, .L521
 5045 0034 0068     		ldr	r0, [r0]
 5046 0036 8442     		cmp	r4, r0
 5047 0038 08D1     		bne	.L510
 5048              	.LBB219:
 5049              	.LBB220:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5050              		.loc 2 195 0
 5051              		.syntax unified
 5052              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5053 003a 4FF05003 			mov r3, #80												
 5054 003e 83F31188 		msr basepri, r3											
 5055 0042 BFF36F8F 		isb														
 5056 0046 BFF34F8F 		dsb														
 5057              	
 5058              	@ 0 "" 2
 5059              	.LVL454:
 5060              		.thumb
 5061              		.syntax unified
ARM GAS  /tmp/cci5v3JD.s 			page 190


 5062              	.L511:
 5063 004a FEE7     		b	.L511
 5064              	.L510:
 5065              	.LVL455:
 5066              	.LBE220:
 5067              	.LBE219:
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5068              		.loc 1 4006 0
 5069 004c E262     		str	r2, [r4, #44]
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5070              		.loc 1 4010 0
 5071 004e A069     		ldr	r0, [r4, #24]
 5072 0050 0028     		cmp	r0, #0
 5073 0052 02DB     		blt	.L512
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5074              		.loc 1 4012 0
 5075 0054 C2F13802 		rsb	r2, r2, #56
 5076              	.LVL456:
 5077 0058 A261     		str	r2, [r4, #24]
 5078              	.L512:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5079              		.loc 1 4025 0
 5080 005a 6369     		ldr	r3, [r4, #20]
 5081 005c 01EB8101 		add	r1, r1, r1, lsl #2
 5082              	.LVL457:
 5083 0060 8800     		lsls	r0, r1, #2
 5084 0062 104A     		ldr	r2, .L521+4
 5085 0064 0244     		add	r2, r2, r0
 5086 0066 9342     		cmp	r3, r2
 5087 0068 16D1     		bne	.L515
 5088 006a 0122     		movs	r2, #1
 5089              	.L513:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5090              		.loc 1 4025 0 is_stmt 0 discriminator 4
 5091 006c 002A     		cmp	r2, #0
 5092 006e DFD0     		beq	.L505
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 5093              		.loc 1 4027 0 is_stmt 1
 5094 0070 251D     		adds	r5, r4, #4
 5095 0072 2846     		mov	r0, r5
 5096 0074 FFF7FEFF 		bl	uxListRemove
 5097              	.LVL458:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5098              		.loc 1 4036 0
 5099 0078 E36A     		ldr	r3, [r4, #44]
 5100 007a 0B4A     		ldr	r2, .L521+8
 5101 007c 1268     		ldr	r2, [r2]
 5102 007e 9342     		cmp	r3, r2
 5103 0080 01D9     		bls	.L514
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5104              		.loc 1 4036 0 is_stmt 0 discriminator 1
 5105 0082 094A     		ldr	r2, .L521+8
 5106 0084 1360     		str	r3, [r2]
 5107              	.L514:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5108              		.loc 1 4036 0 discriminator 3
 5109 0086 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  /tmp/cci5v3JD.s 			page 191


 5110 008a 9A00     		lsls	r2, r3, #2
 5111 008c 2946     		mov	r1, r5
 5112 008e 0548     		ldr	r0, .L521+4
 5113 0090 1044     		add	r0, r0, r2
 5114 0092 FFF7FEFF 		bl	vListInsertEnd
 5115              	.LVL459:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5116              		.loc 1 4057 0 is_stmt 1 discriminator 3
 5117 0096 CBE7     		b	.L505
 5118              	.LVL460:
 5119              	.L515:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5120              		.loc 1 4025 0
 5121 0098 0022     		movs	r2, #0
 5122 009a E7E7     		b	.L513
 5123              	.LVL461:
 5124              	.L517:
 5125              	.LCFI53:
 5126              		.cfi_def_cfa_offset 0
 5127              		.cfi_restore 3
 5128              		.cfi_restore 4
 5129              		.cfi_restore 5
 5130              		.cfi_restore 14
 5131 009c 7047     		bx	lr
 5132              	.L522:
 5133 009e 00BF     		.align	2
 5134              	.L521:
 5135 00a0 00000000 		.word	.LANCHOR10
 5136 00a4 00000000 		.word	.LANCHOR4
 5137 00a8 00000000 		.word	.LANCHOR13
 5138              		.cfi_endproc
 5139              	.LFE54:
 5141              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5142              		.align	1
 5143              		.global	uxTaskResetEventItemValue
 5144              		.syntax unified
 5145              		.thumb
 5146              		.thumb_func
 5147              		.fpu softvfp
 5149              	uxTaskResetEventItemValue:
 5150              	.LFB55:
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5151              		.loc 1 4377 0
 5152              		.cfi_startproc
 5153              		@ args = 0, pretend = 0, frame = 0
 5154              		@ frame_needed = 0, uses_anonymous_args = 0
 5155              		@ link register save eliminated.
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5156              		.loc 1 4380 0
 5157 0000 044B     		ldr	r3, .L524
 5158 0002 1A68     		ldr	r2, [r3]
 5159 0004 9069     		ldr	r0, [r2, #24]
 5160              	.LVL462:
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5161              		.loc 1 4384 0
 5162 0006 1A68     		ldr	r2, [r3]
 5163 0008 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cci5v3JD.s 			page 192


 5164 000a DB6A     		ldr	r3, [r3, #44]
 5165 000c C3F13803 		rsb	r3, r3, #56
 5166 0010 9361     		str	r3, [r2, #24]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5167              		.loc 1 4387 0
 5168 0012 7047     		bx	lr
 5169              	.L525:
 5170              		.align	2
 5171              	.L524:
 5172 0014 00000000 		.word	.LANCHOR10
 5173              		.cfi_endproc
 5174              	.LFE55:
 5176              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5177              		.align	1
 5178              		.global	pvTaskIncrementMutexHeldCount
 5179              		.syntax unified
 5180              		.thumb
 5181              		.thumb_func
 5182              		.fpu softvfp
 5184              	pvTaskIncrementMutexHeldCount:
 5185              	.LFB56:
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5186              		.loc 1 4393 0
 5187              		.cfi_startproc
 5188              		@ args = 0, pretend = 0, frame = 0
 5189              		@ frame_needed = 0, uses_anonymous_args = 0
 5190              		@ link register save eliminated.
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5191              		.loc 1 4396 0
 5192 0000 054B     		ldr	r3, .L528
 5193 0002 1B68     		ldr	r3, [r3]
 5194 0004 23B1     		cbz	r3, .L527
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5195              		.loc 1 4398 0
 5196 0006 044B     		ldr	r3, .L528
 5197 0008 1A68     		ldr	r2, [r3]
 5198 000a 136D     		ldr	r3, [r2, #80]
 5199 000c 0133     		adds	r3, r3, #1
 5200 000e 1365     		str	r3, [r2, #80]
 5201              	.L527:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5202              		.loc 1 4401 0
 5203 0010 014B     		ldr	r3, .L528
 5204 0012 1868     		ldr	r0, [r3]
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5205              		.loc 1 4402 0
 5206 0014 7047     		bx	lr
 5207              	.L529:
 5208 0016 00BF     		.align	2
 5209              	.L528:
 5210 0018 00000000 		.word	.LANCHOR10
 5211              		.cfi_endproc
 5212              	.LFE56:
 5214              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5215              		.align	1
 5216              		.global	ulTaskNotifyTake
 5217              		.syntax unified
ARM GAS  /tmp/cci5v3JD.s 			page 193


 5218              		.thumb
 5219              		.thumb_func
 5220              		.fpu softvfp
 5222              	ulTaskNotifyTake:
 5223              	.LFB57:
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5224              		.loc 1 4410 0
 5225              		.cfi_startproc
 5226              		@ args = 0, pretend = 0, frame = 0
 5227              		@ frame_needed = 0, uses_anonymous_args = 0
 5228              	.LVL463:
 5229 0000 38B5     		push	{r3, r4, r5, lr}
 5230              	.LCFI54:
 5231              		.cfi_def_cfa_offset 16
 5232              		.cfi_offset 3, -16
 5233              		.cfi_offset 4, -12
 5234              		.cfi_offset 5, -8
 5235              		.cfi_offset 14, -4
 5236 0002 0546     		mov	r5, r0
 5237 0004 0C46     		mov	r4, r1
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5238              		.loc 1 4413 0
 5239 0006 FFF7FEFF 		bl	vPortEnterCritical
 5240              	.LVL464:
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5241              		.loc 1 4416 0
 5242 000a 194B     		ldr	r3, .L537
 5243 000c 1B68     		ldr	r3, [r3]
 5244 000e 5B6D     		ldr	r3, [r3, #84]
 5245 0010 2BB9     		cbnz	r3, .L531
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5246              		.loc 1 4419 0
 5247 0012 174B     		ldr	r3, .L537
 5248 0014 1B68     		ldr	r3, [r3]
 5249 0016 0122     		movs	r2, #1
 5250 0018 83F85820 		strb	r2, [r3, #88]
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5251              		.loc 1 4421 0
 5252 001c ACB9     		cbnz	r4, .L535
 5253              	.L531:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5254              		.loc 1 4442 0
 5255 001e FFF7FEFF 		bl	vPortExitCritical
 5256              	.LVL465:
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5257              		.loc 1 4444 0
 5258 0022 FFF7FEFF 		bl	vPortEnterCritical
 5259              	.LVL466:
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5260              		.loc 1 4447 0
 5261 0026 124B     		ldr	r3, .L537
 5262 0028 1B68     		ldr	r3, [r3]
 5263 002a 5C6D     		ldr	r4, [r3, #84]
 5264              	.LVL467:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5265              		.loc 1 4449 0
 5266 002c 24B1     		cbz	r4, .L532
ARM GAS  /tmp/cci5v3JD.s 			page 194


4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5267              		.loc 1 4451 0
 5268 002e CDB9     		cbnz	r5, .L536
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5269              		.loc 1 4457 0
 5270 0030 0F4B     		ldr	r3, .L537
 5271 0032 1B68     		ldr	r3, [r3]
 5272 0034 621E     		subs	r2, r4, #1
 5273 0036 5A65     		str	r2, [r3, #84]
 5274              	.L532:
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5275              		.loc 1 4465 0
 5276 0038 0D4B     		ldr	r3, .L537
 5277 003a 1B68     		ldr	r3, [r3]
 5278 003c 0022     		movs	r2, #0
 5279 003e 83F85820 		strb	r2, [r3, #88]
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5280              		.loc 1 4467 0
 5281 0042 FFF7FEFF 		bl	vPortExitCritical
 5282              	.LVL468:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5283              		.loc 1 4470 0
 5284 0046 2046     		mov	r0, r4
 5285 0048 38BD     		pop	{r3, r4, r5, pc}
 5286              	.LVL469:
 5287              	.L535:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5288              		.loc 1 4423 0
 5289 004a 1146     		mov	r1, r2
 5290 004c 2046     		mov	r0, r4
 5291 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5292              	.LVL470:
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5293              		.loc 1 4430 0
 5294 0052 4FF08052 		mov	r2, #268435456
 5295 0056 074B     		ldr	r3, .L537+4
 5296 0058 1A60     		str	r2, [r3]
 5297              		.syntax unified
 5298              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5299 005a BFF34F8F 		dsb
 5300              	@ 0 "" 2
 5301              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5302 005e BFF36F8F 		isb
 5303              	@ 0 "" 2
 5304              		.thumb
 5305              		.syntax unified
 5306 0062 DCE7     		b	.L531
 5307              	.LVL471:
 5308              	.L536:
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5309              		.loc 1 4453 0
 5310 0064 024B     		ldr	r3, .L537
 5311 0066 1B68     		ldr	r3, [r3]
 5312 0068 0022     		movs	r2, #0
 5313 006a 5A65     		str	r2, [r3, #84]
 5314 006c E4E7     		b	.L532
 5315              	.L538:
ARM GAS  /tmp/cci5v3JD.s 			page 195


 5316 006e 00BF     		.align	2
 5317              	.L537:
 5318 0070 00000000 		.word	.LANCHOR10
 5319 0074 04ED00E0 		.word	-536810236
 5320              		.cfi_endproc
 5321              	.LFE57:
 5323              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5324              		.align	1
 5325              		.global	xTaskNotifyWait
 5326              		.syntax unified
 5327              		.thumb
 5328              		.thumb_func
 5329              		.fpu softvfp
 5331              	xTaskNotifyWait:
 5332              	.LFB58:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5333              		.loc 1 4478 0
 5334              		.cfi_startproc
 5335              		@ args = 0, pretend = 0, frame = 0
 5336              		@ frame_needed = 0, uses_anonymous_args = 0
 5337              	.LVL472:
 5338 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5339              	.LCFI55:
 5340              		.cfi_def_cfa_offset 24
 5341              		.cfi_offset 3, -24
 5342              		.cfi_offset 4, -20
 5343              		.cfi_offset 5, -16
 5344              		.cfi_offset 6, -12
 5345              		.cfi_offset 7, -8
 5346              		.cfi_offset 14, -4
 5347 0002 0746     		mov	r7, r0
 5348 0004 0D46     		mov	r5, r1
 5349 0006 1446     		mov	r4, r2
 5350 0008 1E46     		mov	r6, r3
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5351              		.loc 1 4481 0
 5352 000a FFF7FEFF 		bl	vPortEnterCritical
 5353              	.LVL473:
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5354              		.loc 1 4484 0
 5355 000e 204B     		ldr	r3, .L547
 5356 0010 1B68     		ldr	r3, [r3]
 5357 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5358 0016 DBB2     		uxtb	r3, r3
 5359 0018 022B     		cmp	r3, #2
 5360 001a 0AD0     		beq	.L540
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5361              		.loc 1 4489 0
 5362 001c 1C4B     		ldr	r3, .L547
 5363 001e 1A68     		ldr	r2, [r3]
 5364 0020 506D     		ldr	r0, [r2, #84]
 5365 0022 20EA0700 		bic	r0, r0, r7
 5366 0026 5065     		str	r0, [r2, #84]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5367              		.loc 1 4492 0
 5368 0028 1B68     		ldr	r3, [r3]
 5369 002a 0122     		movs	r2, #1
ARM GAS  /tmp/cci5v3JD.s 			page 196


 5370 002c 83F85820 		strb	r2, [r3, #88]
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5371              		.loc 1 4494 0
 5372 0030 CEB9     		cbnz	r6, .L545
 5373              	.L540:
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5374              		.loc 1 4515 0
 5375 0032 FFF7FEFF 		bl	vPortExitCritical
 5376              	.LVL474:
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5377              		.loc 1 4517 0
 5378 0036 FFF7FEFF 		bl	vPortEnterCritical
 5379              	.LVL475:
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5380              		.loc 1 4521 0
 5381 003a 1CB1     		cbz	r4, .L541
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5382              		.loc 1 4525 0
 5383 003c 144B     		ldr	r3, .L547
 5384 003e 1B68     		ldr	r3, [r3]
 5385 0040 5B6D     		ldr	r3, [r3, #84]
 5386 0042 2360     		str	r3, [r4]
 5387              	.L541:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5388              		.loc 1 4532 0
 5389 0044 124B     		ldr	r3, .L547
 5390 0046 1B68     		ldr	r3, [r3]
 5391 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5392 004c DBB2     		uxtb	r3, r3
 5393 004e 022B     		cmp	r3, #2
 5394 0050 16D0     		beq	.L546
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5395              		.loc 1 4535 0
 5396 0052 0024     		movs	r4, #0
 5397              	.LVL476:
 5398              	.L542:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5399              		.loc 1 4545 0
 5400 0054 0E4B     		ldr	r3, .L547
 5401 0056 1B68     		ldr	r3, [r3]
 5402 0058 0022     		movs	r2, #0
 5403 005a 83F85820 		strb	r2, [r3, #88]
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5404              		.loc 1 4547 0
 5405 005e FFF7FEFF 		bl	vPortExitCritical
 5406              	.LVL477:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5407              		.loc 1 4550 0
 5408 0062 2046     		mov	r0, r4
 5409 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5410              	.LVL478:
 5411              	.L545:
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5412              		.loc 1 4496 0
 5413 0066 1146     		mov	r1, r2
 5414 0068 3046     		mov	r0, r6
 5415 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  /tmp/cci5v3JD.s 			page 197


 5416              	.LVL479:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5417              		.loc 1 4503 0
 5418 006e 4FF08052 		mov	r2, #268435456
 5419 0072 084B     		ldr	r3, .L547+4
 5420 0074 1A60     		str	r2, [r3]
 5421              		.syntax unified
 5422              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5423 0076 BFF34F8F 		dsb
 5424              	@ 0 "" 2
 5425              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5426 007a BFF36F8F 		isb
 5427              	@ 0 "" 2
 5428              		.thumb
 5429              		.syntax unified
 5430 007e D8E7     		b	.L540
 5431              	.L546:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5432              		.loc 1 4541 0
 5433 0080 034B     		ldr	r3, .L547
 5434 0082 1A68     		ldr	r2, [r3]
 5435 0084 536D     		ldr	r3, [r2, #84]
 5436 0086 23EA0505 		bic	r5, r3, r5
 5437              	.LVL480:
 5438 008a 5565     		str	r5, [r2, #84]
 5439              	.LVL481:
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5440              		.loc 1 4542 0
 5441 008c 0124     		movs	r4, #1
 5442              	.LVL482:
 5443 008e E1E7     		b	.L542
 5444              	.L548:
 5445              		.align	2
 5446              	.L547:
 5447 0090 00000000 		.word	.LANCHOR10
 5448 0094 04ED00E0 		.word	-536810236
 5449              		.cfi_endproc
 5450              	.LFE58:
 5452              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5453              		.align	1
 5454              		.global	xTaskGenericNotify
 5455              		.syntax unified
 5456              		.thumb
 5457              		.thumb_func
 5458              		.fpu softvfp
 5460              	xTaskGenericNotify:
 5461              	.LFB59:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5462              		.loc 1 4558 0
 5463              		.cfi_startproc
 5464              		@ args = 0, pretend = 0, frame = 0
 5465              		@ frame_needed = 0, uses_anonymous_args = 0
 5466              	.LVL483:
 5467 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5468              	.LCFI56:
 5469              		.cfi_def_cfa_offset 24
 5470              		.cfi_offset 3, -24
ARM GAS  /tmp/cci5v3JD.s 			page 198


 5471              		.cfi_offset 4, -20
 5472              		.cfi_offset 5, -16
 5473              		.cfi_offset 6, -12
 5474              		.cfi_offset 7, -8
 5475              		.cfi_offset 14, -4
 5476              	.LVL484:
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5477              		.loc 1 4563 0
 5478 0002 A8B1     		cbz	r0, .L566
 5479 0004 0446     		mov	r4, r0
 5480 0006 1F46     		mov	r7, r3
 5481 0008 1546     		mov	r5, r2
 5482 000a 0E46     		mov	r6, r1
 5483              	.LVL485:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5484              		.loc 1 4566 0
 5485 000c FFF7FEFF 		bl	vPortEnterCritical
 5486              	.LVL486:
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5487              		.loc 1 4568 0
 5488 0010 0FB1     		cbz	r7, .L552
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5489              		.loc 1 4570 0
 5490 0012 636D     		ldr	r3, [r4, #84]
 5491 0014 3B60     		str	r3, [r7]
 5492              	.L552:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5493              		.loc 1 4573 0
 5494 0016 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5495 001a DBB2     		uxtb	r3, r3
 5496              	.LVL487:
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5497              		.loc 1 4575 0
 5498 001c 0222     		movs	r2, #2
 5499 001e 84F85820 		strb	r2, [r4, #88]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5500              		.loc 1 4577 0
 5501 0022 6A1E     		subs	r2, r5, #1
 5502 0024 032A     		cmp	r2, #3
 5503 0026 3DD8     		bhi	.L563
 5504 0028 DFE802F0 		tbb	[pc, r2]
 5505              	.L555:
 5506 002c 0B       		.byte	(.L554-.L555)/2
 5507 002d 2F       		.byte	(.L556-.L555)/2
 5508 002e 34       		.byte	(.L557-.L555)/2
 5509 002f 37       		.byte	(.L558-.L555)/2
 5510              	.LVL488:
 5511              		.p2align 1
 5512              	.L566:
 5513              	.LBB221:
 5514              	.LBB222:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5515              		.loc 2 195 0
 5516              		.syntax unified
 5517              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5518 0030 4FF05003 			mov r3, #80												
 5519 0034 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cci5v3JD.s 			page 199


 5520 0038 BFF36F8F 		isb														
 5521 003c BFF34F8F 		dsb														
 5522              	
 5523              	@ 0 "" 2
 5524              	.LVL489:
 5525              		.thumb
 5526              		.syntax unified
 5527              	.L551:
 5528 0040 FEE7     		b	.L551
 5529              	.LVL490:
 5530              	.L554:
 5531              	.LBE222:
 5532              	.LBE221:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5533              		.loc 1 4580 0
 5534 0042 626D     		ldr	r2, [r4, #84]
 5535 0044 1643     		orrs	r6, r6, r2
 5536              	.LVL491:
 5537 0046 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5538              		.loc 1 4560 0
 5539 0048 0125     		movs	r5, #1
 5540              	.L553:
 5541              	.LVL492:
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5542              		.loc 1 4613 0
 5543 004a 012B     		cmp	r3, #1
 5544 004c 3CD1     		bne	.L559
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5545              		.loc 1 4615 0
 5546 004e 261D     		adds	r6, r4, #4
 5547 0050 3046     		mov	r0, r6
 5548 0052 FFF7FEFF 		bl	uxListRemove
 5549              	.LVL493:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5550              		.loc 1 4616 0
 5551 0056 E36A     		ldr	r3, [r4, #44]
 5552 0058 1D4A     		ldr	r2, .L567
 5553 005a 1268     		ldr	r2, [r2]
 5554 005c 9342     		cmp	r3, r2
 5555 005e 01D9     		bls	.L560
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5556              		.loc 1 4616 0 is_stmt 0 discriminator 1
 5557 0060 1B4A     		ldr	r2, .L567
 5558 0062 1360     		str	r3, [r2]
 5559              	.L560:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5560              		.loc 1 4616 0 discriminator 3
 5561 0064 03EB8303 		add	r3, r3, r3, lsl #2
 5562 0068 9A00     		lsls	r2, r3, #2
 5563 006a 3146     		mov	r1, r6
 5564 006c 1948     		ldr	r0, .L567+4
 5565 006e 1044     		add	r0, r0, r2
 5566 0070 FFF7FEFF 		bl	vListInsertEnd
 5567              	.LVL494:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5568              		.loc 1 4619 0 is_stmt 1 discriminator 3
ARM GAS  /tmp/cci5v3JD.s 			page 200


 5569 0074 A36A     		ldr	r3, [r4, #40]
 5570 0076 CBB1     		cbz	r3, .L561
 5571              	.LBB223:
 5572              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5573              		.loc 2 195 0
 5574              		.syntax unified
 5575              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5576 0078 4FF05003 			mov r3, #80												
 5577 007c 83F31188 		msr basepri, r3											
 5578 0080 BFF36F8F 		isb														
 5579 0084 BFF34F8F 		dsb														
 5580              	
 5581              	@ 0 "" 2
 5582              	.LVL495:
 5583              		.thumb
 5584              		.syntax unified
 5585              	.L562:
 5586 0088 FEE7     		b	.L562
 5587              	.LVL496:
 5588              	.L556:
 5589              	.LBE224:
 5590              	.LBE223:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5591              		.loc 1 4584 0
 5592 008a 626D     		ldr	r2, [r4, #84]
 5593 008c 0132     		adds	r2, r2, #1
 5594 008e 6265     		str	r2, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5595              		.loc 1 4560 0
 5596 0090 0125     		movs	r5, #1
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5597              		.loc 1 4585 0
 5598 0092 DAE7     		b	.L553
 5599              	.L557:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5600              		.loc 1 4588 0
 5601 0094 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5602              		.loc 1 4560 0
 5603 0096 0125     		movs	r5, #1
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5604              		.loc 1 4589 0
 5605 0098 D7E7     		b	.L553
 5606              	.L558:
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5607              		.loc 1 4592 0
 5608 009a 022B     		cmp	r3, #2
 5609 009c 04D0     		beq	.L564
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5610              		.loc 1 4594 0
 5611 009e 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5612              		.loc 1 4560 0
 5613 00a0 0125     		movs	r5, #1
 5614 00a2 D2E7     		b	.L553
 5615              	.L563:
ARM GAS  /tmp/cci5v3JD.s 			page 201


 5616 00a4 0125     		movs	r5, #1
 5617 00a6 D0E7     		b	.L553
 5618              	.L564:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5619              		.loc 1 4599 0
 5620 00a8 0025     		movs	r5, #0
 5621 00aa CEE7     		b	.L553
 5622              	.LVL497:
 5623              	.L561:
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5624              		.loc 1 4637 0
 5625 00ac E26A     		ldr	r2, [r4, #44]
 5626 00ae 0A4B     		ldr	r3, .L567+8
 5627 00b0 1B68     		ldr	r3, [r3]
 5628 00b2 DB6A     		ldr	r3, [r3, #44]
 5629 00b4 9A42     		cmp	r2, r3
 5630 00b6 07D9     		bls	.L559
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5631              		.loc 1 4641 0
 5632 00b8 4FF08052 		mov	r2, #268435456
 5633 00bc 074B     		ldr	r3, .L567+12
 5634 00be 1A60     		str	r2, [r3]
 5635              		.syntax unified
 5636              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5637 00c0 BFF34F8F 		dsb
 5638              	@ 0 "" 2
 5639              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5640 00c4 BFF36F8F 		isb
 5641              	@ 0 "" 2
 5642              		.thumb
 5643              		.syntax unified
 5644              	.L559:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5645              		.loc 1 4653 0
 5646 00c8 FFF7FEFF 		bl	vPortExitCritical
 5647              	.LVL498:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5648              		.loc 1 4656 0
 5649 00cc 2846     		mov	r0, r5
 5650 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5651              	.LVL499:
 5652              	.L568:
 5653              		.align	2
 5654              	.L567:
 5655 00d0 00000000 		.word	.LANCHOR13
 5656 00d4 00000000 		.word	.LANCHOR4
 5657 00d8 00000000 		.word	.LANCHOR10
 5658 00dc 04ED00E0 		.word	-536810236
 5659              		.cfi_endproc
 5660              	.LFE59:
 5662              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5663              		.align	1
 5664              		.global	xTaskGenericNotifyFromISR
 5665              		.syntax unified
 5666              		.thumb
 5667              		.thumb_func
 5668              		.fpu softvfp
ARM GAS  /tmp/cci5v3JD.s 			page 202


 5670              	xTaskGenericNotifyFromISR:
 5671              	.LFB60:
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5672              		.loc 1 4664 0
 5673              		.cfi_startproc
 5674              		@ args = 4, pretend = 0, frame = 0
 5675              		@ frame_needed = 0, uses_anonymous_args = 0
 5676              	.LVL500:
 5677 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5678              	.LCFI57:
 5679              		.cfi_def_cfa_offset 32
 5680              		.cfi_offset 3, -32
 5681              		.cfi_offset 4, -28
 5682              		.cfi_offset 5, -24
 5683              		.cfi_offset 6, -20
 5684              		.cfi_offset 7, -16
 5685              		.cfi_offset 8, -12
 5686              		.cfi_offset 9, -8
 5687              		.cfi_offset 14, -4
 5688 0004 089E     		ldr	r6, [sp, #32]
 5689              	.LVL501:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5690              		.loc 1 4670 0
 5691 0006 10B3     		cbz	r0, .L589
 5692 0008 0446     		mov	r4, r0
 5693 000a 9946     		mov	r9, r3
 5694 000c 1546     		mov	r5, r2
 5695 000e 8846     		mov	r8, r1
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5696              		.loc 1 4688 0
 5697 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5698              	.LVL502:
 5699              	.LBB225:
 5700              	.LBB226:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5701              		.loc 2 211 0
 5702              		.syntax unified
 5703              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5704 0014 EFF31187 			mrs r7, basepri											
 5705 0018 4FF05003 		mov r3, #80												
 5706 001c 83F31188 		msr basepri, r3											
 5707 0020 BFF36F8F 		isb														
 5708 0024 BFF34F8F 		dsb														
 5709              	
 5710              	@ 0 "" 2
 5711              		.thumb
 5712              		.syntax unified
 5713              	.LBE226:
 5714              	.LBE225:
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5715              		.loc 1 4694 0
 5716 0028 B9F1000F 		cmp	r9, #0
 5717 002c 02D0     		beq	.L572
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5718              		.loc 1 4696 0
 5719 002e 636D     		ldr	r3, [r4, #84]
 5720 0030 C9F80030 		str	r3, [r9]
ARM GAS  /tmp/cci5v3JD.s 			page 203


 5721              	.L572:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5722              		.loc 1 4699 0
 5723 0034 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5724 0038 DBB2     		uxtb	r3, r3
 5725              	.LVL503:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5726              		.loc 1 4700 0
 5727 003a 0222     		movs	r2, #2
 5728 003c 84F85820 		strb	r2, [r4, #88]
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5729              		.loc 1 4702 0
 5730 0040 6A1E     		subs	r2, r5, #1
 5731 0042 032A     		cmp	r2, #3
 5732 0044 2DD8     		bhi	.L586
 5733 0046 DFE802F0 		tbb	[pc, r2]
 5734              	.L575:
 5735 004a 0B       		.byte	(.L574-.L575)/2
 5736 004b 1D       		.byte	(.L576-.L575)/2
 5737 004c 22       		.byte	(.L577-.L575)/2
 5738 004d 26       		.byte	(.L578-.L575)/2
 5739              	.LVL504:
 5740              		.p2align 1
 5741              	.L589:
 5742              	.LBB227:
 5743              	.LBB228:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5744              		.loc 2 195 0
 5745              		.syntax unified
 5746              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5747 004e 4FF05003 			mov r3, #80												
 5748 0052 83F31188 		msr basepri, r3											
 5749 0056 BFF36F8F 		isb														
 5750 005a BFF34F8F 		dsb														
 5751              	
 5752              	@ 0 "" 2
 5753              	.LVL505:
 5754              		.thumb
 5755              		.syntax unified
 5756              	.L571:
 5757 005e FEE7     		b	.L571
 5758              	.LVL506:
 5759              	.L574:
 5760              	.LBE228:
 5761              	.LBE227:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5762              		.loc 1 4705 0
 5763 0060 626D     		ldr	r2, [r4, #84]
 5764 0062 42EA0802 		orr	r2, r2, r8
 5765 0066 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5766              		.loc 1 4667 0
 5767 0068 0125     		movs	r5, #1
 5768              	.L573:
 5769              	.LVL507:
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5770              		.loc 1 4738 0
ARM GAS  /tmp/cci5v3JD.s 			page 204


 5771 006a 012B     		cmp	r3, #1
 5772 006c 3DD1     		bne	.L579
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5773              		.loc 1 4741 0
 5774 006e A36A     		ldr	r3, [r4, #40]
 5775              	.LVL508:
 5776 0070 DBB1     		cbz	r3, .L580
 5777              	.LBB229:
 5778              	.LBB230:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5779              		.loc 2 195 0
 5780              		.syntax unified
 5781              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5782 0072 4FF05003 			mov r3, #80												
 5783 0076 83F31188 		msr basepri, r3											
 5784 007a BFF36F8F 		isb														
 5785 007e BFF34F8F 		dsb														
 5786              	
 5787              	@ 0 "" 2
 5788              	.LVL509:
 5789              		.thumb
 5790              		.syntax unified
 5791              	.L581:
 5792 0082 FEE7     		b	.L581
 5793              	.LVL510:
 5794              	.L576:
 5795              	.LBE230:
 5796              	.LBE229:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5797              		.loc 1 4709 0
 5798 0084 626D     		ldr	r2, [r4, #84]
 5799 0086 0132     		adds	r2, r2, #1
 5800 0088 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5801              		.loc 1 4667 0
 5802 008a 0125     		movs	r5, #1
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5803              		.loc 1 4710 0
 5804 008c EDE7     		b	.L573
 5805              	.L577:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5806              		.loc 1 4713 0
 5807 008e C4F85480 		str	r8, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5808              		.loc 1 4667 0
 5809 0092 0125     		movs	r5, #1
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5810              		.loc 1 4714 0
 5811 0094 E9E7     		b	.L573
 5812              	.L578:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5813              		.loc 1 4717 0
 5814 0096 022B     		cmp	r3, #2
 5815 0098 05D0     		beq	.L587
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5816              		.loc 1 4719 0
 5817 009a C4F85480 		str	r8, [r4, #84]
ARM GAS  /tmp/cci5v3JD.s 			page 205


4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5818              		.loc 1 4667 0
 5819 009e 0125     		movs	r5, #1
 5820 00a0 E3E7     		b	.L573
 5821              	.L586:
 5822 00a2 0125     		movs	r5, #1
 5823 00a4 E1E7     		b	.L573
 5824              	.L587:
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5825              		.loc 1 4724 0
 5826 00a6 0025     		movs	r5, #0
 5827 00a8 DFE7     		b	.L573
 5828              	.LVL511:
 5829              	.L580:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5830              		.loc 1 4743 0
 5831 00aa 174B     		ldr	r3, .L590
 5832 00ac 1B68     		ldr	r3, [r3]
 5833 00ae 0BBB     		cbnz	r3, .L582
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5834              		.loc 1 4745 0
 5835 00b0 04F10408 		add	r8, r4, #4
 5836              	.LVL512:
 5837 00b4 4046     		mov	r0, r8
 5838 00b6 FFF7FEFF 		bl	uxListRemove
 5839              	.LVL513:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5840              		.loc 1 4746 0
 5841 00ba E36A     		ldr	r3, [r4, #44]
 5842 00bc 134A     		ldr	r2, .L590+4
 5843 00be 1268     		ldr	r2, [r2]
 5844 00c0 9342     		cmp	r3, r2
 5845 00c2 01D9     		bls	.L583
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5846              		.loc 1 4746 0 is_stmt 0 discriminator 1
 5847 00c4 114A     		ldr	r2, .L590+4
 5848 00c6 1360     		str	r3, [r2]
 5849              	.L583:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5850              		.loc 1 4746 0 discriminator 3
 5851 00c8 03EB8303 		add	r3, r3, r3, lsl #2
 5852 00cc 9A00     		lsls	r2, r3, #2
 5853 00ce 4146     		mov	r1, r8
 5854 00d0 0F48     		ldr	r0, .L590+8
 5855 00d2 1044     		add	r0, r0, r2
 5856 00d4 FFF7FEFF 		bl	vListInsertEnd
 5857              	.LVL514:
 5858              	.L584:
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5859              		.loc 1 4755 0 is_stmt 1
 5860 00d8 E26A     		ldr	r2, [r4, #44]
 5861 00da 0E4B     		ldr	r3, .L590+12
 5862 00dc 1B68     		ldr	r3, [r3]
 5863 00de DB6A     		ldr	r3, [r3, #44]
 5864 00e0 9A42     		cmp	r2, r3
 5865 00e2 02D9     		bls	.L579
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/cci5v3JD.s 			page 206


 5866              		.loc 1 4759 0
 5867 00e4 66B1     		cbz	r6, .L585
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5868              		.loc 1 4761 0
 5869 00e6 0123     		movs	r3, #1
 5870 00e8 3360     		str	r3, [r6]
 5871              	.L579:
 5872              	.LVL515:
 5873              	.LBB231:
 5874              	.LBB232:
 5875              		.loc 2 229 0
 5876              		.syntax unified
 5877              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5878 00ea 87F31188 			msr basepri, r7	
 5879              	@ 0 "" 2
 5880              	.LVL516:
 5881              		.thumb
 5882              		.syntax unified
 5883              	.LBE232:
 5884              	.LBE231:
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5885              		.loc 1 4780 0
 5886 00ee 2846     		mov	r0, r5
 5887 00f0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5888              	.LVL517:
 5889              	.L582:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5890              		.loc 1 4752 0
 5891 00f4 04F11801 		add	r1, r4, #24
 5892 00f8 0748     		ldr	r0, .L590+16
 5893 00fa FFF7FEFF 		bl	vListInsertEnd
 5894              	.LVL518:
 5895 00fe EBE7     		b	.L584
 5896              	.LVL519:
 5897              	.L585:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5898              		.loc 1 4768 0
 5899 0100 0122     		movs	r2, #1
 5900 0102 064B     		ldr	r3, .L590+20
 5901 0104 1A60     		str	r2, [r3]
 5902 0106 F0E7     		b	.L579
 5903              	.L591:
 5904              		.align	2
 5905              	.L590:
 5906 0108 00000000 		.word	.LANCHOR16
 5907 010c 00000000 		.word	.LANCHOR13
 5908 0110 00000000 		.word	.LANCHOR4
 5909 0114 00000000 		.word	.LANCHOR10
 5910 0118 00000000 		.word	.LANCHOR1
 5911 011c 00000000 		.word	.LANCHOR19
 5912              		.cfi_endproc
 5913              	.LFE60:
 5915              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5916              		.align	1
 5917              		.global	vTaskNotifyGiveFromISR
 5918              		.syntax unified
 5919              		.thumb
ARM GAS  /tmp/cci5v3JD.s 			page 207


 5920              		.thumb_func
 5921              		.fpu softvfp
 5923              	vTaskNotifyGiveFromISR:
 5924              	.LFB61:
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5925              		.loc 1 4788 0
 5926              		.cfi_startproc
 5927              		@ args = 0, pretend = 0, frame = 0
 5928              		@ frame_needed = 0, uses_anonymous_args = 0
 5929              	.LVL520:
 5930 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5931              	.LCFI58:
 5932              		.cfi_def_cfa_offset 24
 5933              		.cfi_offset 3, -24
 5934              		.cfi_offset 4, -20
 5935              		.cfi_offset 5, -16
 5936              		.cfi_offset 6, -12
 5937              		.cfi_offset 7, -8
 5938              		.cfi_offset 14, -4
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5939              		.loc 1 4793 0
 5940 0002 18B3     		cbz	r0, .L603
 5941 0004 0446     		mov	r4, r0
 5942 0006 0D46     		mov	r5, r1
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5943              		.loc 1 4811 0
 5944 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5945              	.LVL521:
 5946              	.LBB233:
 5947              	.LBB234:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5948              		.loc 2 211 0
 5949              		.syntax unified
 5950              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5951 000c EFF31186 			mrs r6, basepri											
 5952 0010 4FF05003 		mov r3, #80												
 5953 0014 83F31188 		msr basepri, r3											
 5954 0018 BFF36F8F 		isb														
 5955 001c BFF34F8F 		dsb														
 5956              	
 5957              	@ 0 "" 2
 5958              		.thumb
 5959              		.syntax unified
 5960              	.LBE234:
 5961              	.LBE233:
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5962              		.loc 1 4817 0
 5963 0020 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5964 0024 DBB2     		uxtb	r3, r3
 5965              	.LVL522:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5966              		.loc 1 4818 0
 5967 0026 0222     		movs	r2, #2
 5968 0028 84F85820 		strb	r2, [r4, #88]
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5969              		.loc 1 4822 0
 5970 002c 626D     		ldr	r2, [r4, #84]
ARM GAS  /tmp/cci5v3JD.s 			page 208


 5971 002e 0132     		adds	r2, r2, #1
 5972 0030 6265     		str	r2, [r4, #84]
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5973              		.loc 1 4828 0
 5974 0032 012B     		cmp	r3, #1
 5975 0034 32D1     		bne	.L595
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5976              		.loc 1 4831 0
 5977 0036 A36A     		ldr	r3, [r4, #40]
 5978              	.LVL523:
 5979 0038 8BB1     		cbz	r3, .L596
 5980              	.LBB235:
 5981              	.LBB236:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5982              		.loc 2 195 0
 5983              		.syntax unified
 5984              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5985 003a 4FF05003 			mov r3, #80												
 5986 003e 83F31188 		msr basepri, r3											
 5987 0042 BFF36F8F 		isb														
 5988 0046 BFF34F8F 		dsb														
 5989              	
 5990              	@ 0 "" 2
 5991              	.LVL524:
 5992              		.thumb
 5993              		.syntax unified
 5994              	.L597:
 5995 004a FEE7     		b	.L597
 5996              	.LVL525:
 5997              	.L603:
 5998              	.LBE236:
 5999              	.LBE235:
 6000              	.LBB237:
 6001              	.LBB238:
 6002              		.syntax unified
 6003              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6004 004c 4FF05003 			mov r3, #80												
 6005 0050 83F31188 		msr basepri, r3											
 6006 0054 BFF36F8F 		isb														
 6007 0058 BFF34F8F 		dsb														
 6008              	
 6009              	@ 0 "" 2
 6010              	.LVL526:
 6011              		.thumb
 6012              		.syntax unified
 6013              	.L594:
 6014 005c FEE7     		b	.L594
 6015              	.LVL527:
 6016              	.L596:
 6017              	.LBE238:
 6018              	.LBE237:
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6019              		.loc 1 4833 0
 6020 005e 164B     		ldr	r3, .L604
 6021 0060 1B68     		ldr	r3, [r3]
 6022 0062 F3B9     		cbnz	r3, .L598
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/cci5v3JD.s 			page 209


 6023              		.loc 1 4835 0
 6024 0064 271D     		adds	r7, r4, #4
 6025 0066 3846     		mov	r0, r7
 6026 0068 FFF7FEFF 		bl	uxListRemove
 6027              	.LVL528:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6028              		.loc 1 4836 0
 6029 006c E36A     		ldr	r3, [r4, #44]
 6030 006e 134A     		ldr	r2, .L604+4
 6031 0070 1268     		ldr	r2, [r2]
 6032 0072 9342     		cmp	r3, r2
 6033 0074 01D9     		bls	.L599
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6034              		.loc 1 4836 0 is_stmt 0 discriminator 1
 6035 0076 114A     		ldr	r2, .L604+4
 6036 0078 1360     		str	r3, [r2]
 6037              	.L599:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6038              		.loc 1 4836 0 discriminator 3
 6039 007a 03EB8303 		add	r3, r3, r3, lsl #2
 6040 007e 9A00     		lsls	r2, r3, #2
 6041 0080 3946     		mov	r1, r7
 6042 0082 0F48     		ldr	r0, .L604+8
 6043 0084 1044     		add	r0, r0, r2
 6044 0086 FFF7FEFF 		bl	vListInsertEnd
 6045              	.LVL529:
 6046              	.L600:
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6047              		.loc 1 4845 0 is_stmt 1
 6048 008a E26A     		ldr	r2, [r4, #44]
 6049 008c 0D4B     		ldr	r3, .L604+12
 6050 008e 1B68     		ldr	r3, [r3]
 6051 0090 DB6A     		ldr	r3, [r3, #44]
 6052 0092 9A42     		cmp	r2, r3
 6053 0094 02D9     		bls	.L595
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6054              		.loc 1 4849 0
 6055 0096 55B1     		cbz	r5, .L601
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6056              		.loc 1 4851 0
 6057 0098 0123     		movs	r3, #1
 6058 009a 2B60     		str	r3, [r5]
 6059              	.L595:
 6060              	.LVL530:
 6061              	.LBB239:
 6062              	.LBB240:
 6063              		.loc 2 229 0
 6064              		.syntax unified
 6065              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6066 009c 86F31188 			msr basepri, r6	
 6067              	@ 0 "" 2
 6068              	.LVL531:
 6069              		.thumb
 6070              		.syntax unified
 6071 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6072              	.LVL532:
 6073              	.L598:
ARM GAS  /tmp/cci5v3JD.s 			page 210


 6074              	.LBE240:
 6075              	.LBE239:
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6076              		.loc 1 4842 0
 6077 00a2 04F11801 		add	r1, r4, #24
 6078 00a6 0848     		ldr	r0, .L604+16
 6079 00a8 FFF7FEFF 		bl	vListInsertEnd
 6080              	.LVL533:
 6081 00ac EDE7     		b	.L600
 6082              	.L601:
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6083              		.loc 1 4858 0
 6084 00ae 0122     		movs	r2, #1
 6085 00b0 064B     		ldr	r3, .L604+20
 6086 00b2 1A60     		str	r2, [r3]
 6087 00b4 F2E7     		b	.L595
 6088              	.L605:
 6089 00b6 00BF     		.align	2
 6090              	.L604:
 6091 00b8 00000000 		.word	.LANCHOR16
 6092 00bc 00000000 		.word	.LANCHOR13
 6093 00c0 00000000 		.word	.LANCHOR4
 6094 00c4 00000000 		.word	.LANCHOR10
 6095 00c8 00000000 		.word	.LANCHOR1
 6096 00cc 00000000 		.word	.LANCHOR19
 6097              		.cfi_endproc
 6098              	.LFE61:
 6100              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6101              		.align	1
 6102              		.global	xTaskNotifyStateClear
 6103              		.syntax unified
 6104              		.thumb
 6105              		.thumb_func
 6106              		.fpu softvfp
 6108              	xTaskNotifyStateClear:
 6109              	.LFB62:
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6110              		.loc 1 4877 0
 6111              		.cfi_startproc
 6112              		@ args = 0, pretend = 0, frame = 0
 6113              		@ frame_needed = 0, uses_anonymous_args = 0
 6114              	.LVL534:
 6115 0000 10B5     		push	{r4, lr}
 6116              	.LCFI59:
 6117              		.cfi_def_cfa_offset 8
 6118              		.cfi_offset 4, -8
 6119              		.cfi_offset 14, -4
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6120              		.loc 1 4883 0
 6121 0002 0446     		mov	r4, r0
 6122 0004 58B1     		cbz	r0, .L612
 6123              	.L607:
 6124              	.LVL535:
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6125              		.loc 1 4885 0 discriminator 4
 6126 0006 FFF7FEFF 		bl	vPortEnterCritical
 6127              	.LVL536:
ARM GAS  /tmp/cci5v3JD.s 			page 211


4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6128              		.loc 1 4887 0 discriminator 4
 6129 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 6130 000e DBB2     		uxtb	r3, r3
 6131 0010 022B     		cmp	r3, #2
 6132 0012 07D0     		beq	.L613
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6133              		.loc 1 4894 0
 6134 0014 0024     		movs	r4, #0
 6135              	.LVL537:
 6136              	.L608:
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6137              		.loc 1 4897 0
 6138 0016 FFF7FEFF 		bl	vPortExitCritical
 6139              	.LVL538:
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6140              		.loc 1 4900 0
 6141 001a 2046     		mov	r0, r4
 6142 001c 10BD     		pop	{r4, pc}
 6143              	.LVL539:
 6144              	.L612:
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6145              		.loc 1 4883 0 discriminator 1
 6146 001e 044B     		ldr	r3, .L614
 6147 0020 1C68     		ldr	r4, [r3]
 6148 0022 F0E7     		b	.L607
 6149              	.LVL540:
 6150              	.L613:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6151              		.loc 1 4889 0
 6152 0024 0023     		movs	r3, #0
 6153 0026 84F85830 		strb	r3, [r4, #88]
 6154              	.LVL541:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6155              		.loc 1 4890 0
 6156 002a 0124     		movs	r4, #1
 6157              	.LVL542:
 6158 002c F3E7     		b	.L608
 6159              	.L615:
 6160 002e 00BF     		.align	2
 6161              	.L614:
 6162 0030 00000000 		.word	.LANCHOR10
 6163              		.cfi_endproc
 6164              	.LFE62:
 6166              		.global	pxCurrentTCB
 6167              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6168              		.align	2
 6169              		.set	.LANCHOR10,. + 0
 6172              	pxCurrentTCB:
 6173 0000 00000000 		.space	4
 6174              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6175              		.align	2
 6176              		.set	.LANCHOR2,. + 0
 6179              	pxDelayedTaskList:
 6180 0000 00000000 		.space	4
 6181              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6182              		.align	2
ARM GAS  /tmp/cci5v3JD.s 			page 212


 6183              		.set	.LANCHOR8,. + 0
 6186              	pxOverflowDelayedTaskList:
 6187 0000 00000000 		.space	4
 6188              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6189              		.align	2
 6190              		.set	.LANCHOR4,. + 0
 6193              	pxReadyTasksLists:
 6194 0000 00000000 		.space	1120
 6194      00000000 
 6194      00000000 
 6194      00000000 
 6194      00000000 
 6195              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6196              		.align	2
 6197              		.set	.LANCHOR9,. + 0
 6200              	uxCurrentNumberOfTasks:
 6201 0000 00000000 		.space	4
 6202              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6203              		.align	2
 6204              		.set	.LANCHOR14,. + 0
 6207              	uxDeletedTasksWaitingCleanUp:
 6208 0000 00000000 		.space	4
 6209              		.section	.bss.uxPendedTicks,"aw",%nobits
 6210              		.align	2
 6211              		.set	.LANCHOR18,. + 0
 6214              	uxPendedTicks:
 6215 0000 00000000 		.space	4
 6216              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6217              		.align	2
 6218              		.set	.LANCHOR16,. + 0
 6221              	uxSchedulerSuspended:
 6222 0000 00000000 		.space	4
 6223              		.section	.bss.uxTaskNumber,"aw",%nobits
 6224              		.align	2
 6225              		.set	.LANCHOR12,. + 0
 6228              	uxTaskNumber:
 6229 0000 00000000 		.space	4
 6230              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6231              		.align	2
 6232              		.set	.LANCHOR13,. + 0
 6235              	uxTopReadyPriority:
 6236 0000 00000000 		.space	4
 6237              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6238              		.align	2
 6239              		.set	.LANCHOR5,. + 0
 6242              	xDelayedTaskList1:
 6243 0000 00000000 		.space	20
 6243      00000000 
 6243      00000000 
 6243      00000000 
 6243      00000000 
 6244              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6245              		.align	2
 6246              		.set	.LANCHOR6,. + 0
 6249              	xDelayedTaskList2:
 6250 0000 00000000 		.space	20
 6250      00000000 
ARM GAS  /tmp/cci5v3JD.s 			page 213


 6250      00000000 
 6250      00000000 
 6250      00000000 
 6251              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6252              		.align	2
 6253              		.set	.LANCHOR3,. + 0
 6256              	xNextTaskUnblockTime:
 6257 0000 00000000 		.space	4
 6258              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6259              		.align	2
 6260              		.set	.LANCHOR17,. + 0
 6263              	xNumOfOverflows:
 6264 0000 00000000 		.space	4
 6265              		.section	.bss.xPendingReadyList,"aw",%nobits
 6266              		.align	2
 6267              		.set	.LANCHOR1,. + 0
 6270              	xPendingReadyList:
 6271 0000 00000000 		.space	20
 6271      00000000 
 6271      00000000 
 6271      00000000 
 6271      00000000 
 6272              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6273              		.align	2
 6274              		.set	.LANCHOR11,. + 0
 6277              	xSchedulerRunning:
 6278 0000 00000000 		.space	4
 6279              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6280              		.align	2
 6281              		.set	.LANCHOR0,. + 0
 6284              	xSuspendedTaskList:
 6285 0000 00000000 		.space	20
 6285      00000000 
 6285      00000000 
 6285      00000000 
 6285      00000000 
 6286              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6287              		.align	2
 6288              		.set	.LANCHOR7,. + 0
 6291              	xTasksWaitingTermination:
 6292 0000 00000000 		.space	20
 6292      00000000 
 6292      00000000 
 6292      00000000 
 6292      00000000 
 6293              		.section	.bss.xTickCount,"aw",%nobits
 6294              		.align	2
 6295              		.set	.LANCHOR15,. + 0
 6298              	xTickCount:
 6299 0000 00000000 		.space	4
 6300              		.section	.bss.xYieldPending,"aw",%nobits
 6301              		.align	2
 6302              		.set	.LANCHOR19,. + 0
 6305              	xYieldPending:
 6306 0000 00000000 		.space	4
 6307              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6308              		.align	2
ARM GAS  /tmp/cci5v3JD.s 			page 214


 6309              	.LC0:
 6310 0000 49444C45 		.ascii	"IDLE\000"
 6310      00
 6311              		.text
 6312              	.Letext0:
 6313              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 6314              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 6315              		.file 5 "/usr/include/newlib/sys/lock.h"
 6316              		.file 6 "/usr/include/newlib/sys/_types.h"
 6317              		.file 7 "/usr/include/newlib/sys/reent.h"
 6318              		.file 8 "/usr/include/newlib/stdlib.h"
 6319              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 6320              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 6321              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6322              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6323              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6324              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6325              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6326              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 6327              		.file 17 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cci5v3JD.s 			page 215


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cci5v3JD.s:16     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cci5v3JD.s:22     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cci5v3JD.s:102    .text.prvTaskIsTaskSuspended:0000000000000044 $d
     /tmp/cci5v3JD.s:108    .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/cci5v3JD.s:114    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/cci5v3JD.s:148    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cci5v3JD.s:154    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cci5v3JD.s:195    .text.prvResetNextTaskUnblockTime:000000000000002c $d
     /tmp/cci5v3JD.s:201    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cci5v3JD.s:207    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cci5v3JD.s:326    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cci5v3JD.s:332    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cci5v3JD.s:398    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/cci5v3JD.s:410    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cci5v3JD.s:416    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cci5v3JD.s:527    .text.prvAddNewTaskToReadyList:0000000000000090 $d
     /tmp/cci5v3JD.s:538    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cci5v3JD.s:544    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cci5v3JD.s:608    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cci5v3JD.s:614    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cci5v3JD.s:681    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/cci5v3JD.s:688    .text.prvIdleTask:0000000000000000 $t
     /tmp/cci5v3JD.s:694    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cci5v3JD.s:734    .text.prvIdleTask:0000000000000020 $d
     /tmp/cci5v3JD.s:740    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cci5v3JD.s:746    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cci5v3JD.s:833    .text.prvAddCurrentTaskToDelayedList:0000000000000064 $d
     /tmp/cci5v3JD.s:843    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/cci5v3JD.s:850    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/cci5v3JD.s:970    .text.xTaskCreate:0000000000000000 $t
     /tmp/cci5v3JD.s:977    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cci5v3JD.s:1084   .text.vTaskDelete:0000000000000000 $t
     /tmp/cci5v3JD.s:1091   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cci5v3JD.s:1225   .text.vTaskDelete:0000000000000098 $d
     /tmp/cci5v3JD.s:1237   .text.eTaskGetState:0000000000000000 $t
     /tmp/cci5v3JD.s:1244   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/cci5v3JD.s:1363   .text.eTaskGetState:000000000000006c $d
     /tmp/cci5v3JD.s:1372   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cci5v3JD.s:1379   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cci5v3JD.s:1418   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/cci5v3JD.s:1423   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cci5v3JD.s:1430   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cci5v3JD.s:1493   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/cci5v3JD.s:1498   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cci5v3JD.s:1505   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cci5v3JD.s:1686   .text.vTaskPrioritySet:00000000000000c8 $d
     /tmp/cci5v3JD.s:1694   .text.vTaskResume:0000000000000000 $t
     /tmp/cci5v3JD.s:1701   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cci5v3JD.s:1807   .text.vTaskResume:0000000000000078 $d
     /tmp/cci5v3JD.s:1815   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cci5v3JD.s:1822   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cci5v3JD.s:1962   .text.xTaskResumeFromISR:0000000000000094 $d
     /tmp/cci5v3JD.s:1971   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cci5v3JD.s:1978   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cci5v3JD.s:2109   .text.vTaskStartScheduler:0000000000000088 $d
ARM GAS  /tmp/cci5v3JD.s 			page 216


     /tmp/cci5v3JD.s:2120   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cci5v3JD.s:2127   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cci5v3JD.s:2164   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/cci5v3JD.s:2169   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cci5v3JD.s:2176   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cci5v3JD.s:2192   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/cci5v3JD.s:2197   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cci5v3JD.s:2204   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cci5v3JD.s:2220   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/cci5v3JD.s:2225   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cci5v3JD.s:2232   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cci5v3JD.s:2255   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/cci5v3JD.s:2260   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cci5v3JD.s:2267   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cci5v3JD.s:2282   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/cci5v3JD.s:2287   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cci5v3JD.s:2294   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cci5v3JD.s:2340   .text.pcTaskGetName:0000000000000020 $d
     /tmp/cci5v3JD.s:2347   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cci5v3JD.s:2354   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cci5v3JD.s:2566   .text.xTaskIncrementTick:00000000000000f4 $d
     /tmp/cci5v3JD.s:2581   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cci5v3JD.s:2588   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cci5v3JD.s:2780   .text.xTaskResumeAll:00000000000000d8 $d
     /tmp/cci5v3JD.s:2793   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/cci5v3JD.s:2800   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/cci5v3JD.s:2971   .text.vTaskDelayUntil:00000000000000a0 $d
     /tmp/cci5v3JD.s:2979   .text.vTaskDelay:0000000000000000 $t
     /tmp/cci5v3JD.s:2986   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cci5v3JD.s:3063   .text.vTaskDelay:0000000000000048 $d
     /tmp/cci5v3JD.s:3069   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cci5v3JD.s:3076   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cci5v3JD.s:3201   .text.vTaskSwitchContext:0000000000000084 $d
     /tmp/cci5v3JD.s:3212   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cci5v3JD.s:3219   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cci5v3JD.s:3370   .text.vTaskSuspend:00000000000000ac $d
     /tmp/cci5v3JD.s:3380   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cci5v3JD.s:3387   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cci5v3JD.s:3439   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/cci5v3JD.s:3444   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cci5v3JD.s:3451   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cci5v3JD.s:3538   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/cci5v3JD.s:3544   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/cci5v3JD.s:3551   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/cci5v3JD.s:3610   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
     /tmp/cci5v3JD.s:3617   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cci5v3JD.s:3624   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cci5v3JD.s:3729   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/cci5v3JD.s:3739   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cci5v3JD.s:3746   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/cci5v3JD.s:3852   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/cci5v3JD.s:3863   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cci5v3JD.s:3870   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cci5v3JD.s:3924   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/cci5v3JD.s:3930   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/cci5v3JD.s:3937   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/cci5v3JD.s:3957   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
ARM GAS  /tmp/cci5v3JD.s 			page 217


     /tmp/cci5v3JD.s:3963   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cci5v3JD.s:3970   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cci5v3JD.s:4104   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/cci5v3JD.s:4111   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cci5v3JD.s:4118   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cci5v3JD.s:4133   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/cci5v3JD.s:4138   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/cci5v3JD.s:4145   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/cci5v3JD.s:4171   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/cci5v3JD.s:4178   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/cci5v3JD.s:4198   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/cci5v3JD.s:4205   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/cci5v3JD.s:4317   .text.vTaskGetInfo:0000000000000074 $d
     /tmp/cci5v3JD.s:4322   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/cci5v3JD.s:4328   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/cci5v3JD.s:4429   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/cci5v3JD.s:4436   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/cci5v3JD.s:4552   .text.uxTaskGetSystemState:0000000000000098 $d
     /tmp/cci5v3JD.s:4562   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/cci5v3JD.s:4569   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/cci5v3JD.s:4602   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/cci5v3JD.s:4607   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cci5v3JD.s:4614   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cci5v3JD.s:4630   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/cci5v3JD.s:4635   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cci5v3JD.s:4642   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cci5v3JD.s:4673   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/cci5v3JD.s:4679   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/cci5v3JD.s:4686   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/cci5v3JD.s:4814   .text.xTaskPriorityInherit:0000000000000094 $d
     /tmp/cci5v3JD.s:4821   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cci5v3JD.s:4828   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cci5v3JD.s:4966   .text.xTaskPriorityDisinherit:0000000000000084 $d
     /tmp/cci5v3JD.s:4973   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/cci5v3JD.s:4980   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/cci5v3JD.s:5135   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000a0 $d
     /tmp/cci5v3JD.s:5142   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cci5v3JD.s:5149   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cci5v3JD.s:5172   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/cci5v3JD.s:5177   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cci5v3JD.s:5184   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cci5v3JD.s:5210   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/cci5v3JD.s:5215   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cci5v3JD.s:5222   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cci5v3JD.s:5318   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/cci5v3JD.s:5324   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cci5v3JD.s:5331   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cci5v3JD.s:5447   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/cci5v3JD.s:5453   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cci5v3JD.s:5460   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cci5v3JD.s:5506   .text.xTaskGenericNotify:000000000000002c $d
     /tmp/cci5v3JD.s:5511   .text.xTaskGenericNotify:0000000000000030 $t
     /tmp/cci5v3JD.s:5655   .text.xTaskGenericNotify:00000000000000d0 $d
     /tmp/cci5v3JD.s:5663   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cci5v3JD.s:5670   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cci5v3JD.s:5735   .text.xTaskGenericNotifyFromISR:000000000000004a $d
     /tmp/cci5v3JD.s:5740   .text.xTaskGenericNotifyFromISR:000000000000004e $t
ARM GAS  /tmp/cci5v3JD.s 			page 218


     /tmp/cci5v3JD.s:5906   .text.xTaskGenericNotifyFromISR:0000000000000108 $d
     /tmp/cci5v3JD.s:5916   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cci5v3JD.s:5923   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cci5v3JD.s:6091   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
     /tmp/cci5v3JD.s:6101   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cci5v3JD.s:6108   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cci5v3JD.s:6162   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/cci5v3JD.s:6172   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cci5v3JD.s:6168   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cci5v3JD.s:6175   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cci5v3JD.s:6179   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cci5v3JD.s:6182   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cci5v3JD.s:6186   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cci5v3JD.s:6189   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cci5v3JD.s:6193   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cci5v3JD.s:6196   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cci5v3JD.s:6200   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cci5v3JD.s:6203   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cci5v3JD.s:6207   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cci5v3JD.s:6210   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cci5v3JD.s:6214   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cci5v3JD.s:6217   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cci5v3JD.s:6221   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cci5v3JD.s:6224   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cci5v3JD.s:6228   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cci5v3JD.s:6231   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cci5v3JD.s:6235   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cci5v3JD.s:6238   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cci5v3JD.s:6242   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cci5v3JD.s:6245   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cci5v3JD.s:6249   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cci5v3JD.s:6252   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cci5v3JD.s:6256   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cci5v3JD.s:6259   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cci5v3JD.s:6263   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cci5v3JD.s:6266   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cci5v3JD.s:6270   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cci5v3JD.s:6273   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cci5v3JD.s:6277   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cci5v3JD.s:6280   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cci5v3JD.s:6284   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cci5v3JD.s:6287   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cci5v3JD.s:6291   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cci5v3JD.s:6294   .bss.xTickCount:0000000000000000 $d
     /tmp/cci5v3JD.s:6298   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cci5v3JD.s:6301   .bss.xYieldPending:0000000000000000 $d
     /tmp/cci5v3JD.s:6305   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cci5v3JD.s:6308   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
ARM GAS  /tmp/cci5v3JD.s 			page 219


vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
