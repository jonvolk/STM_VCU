ARM GAS  /tmp/ccuv3C2e.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTaskIsTaskSuspended:
  23              	.LFB16:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
ARM GAS  /tmp/ccuv3C2e.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
ARM GAS  /tmp/ccuv3C2e.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
ARM GAS  /tmp/ccuv3C2e.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
ARM GAS  /tmp/ccuv3C2e.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/ccuv3C2e.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
ARM GAS  /tmp/ccuv3C2e.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccuv3C2e.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  /tmp/ccuv3C2e.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
ARM GAS  /tmp/ccuv3C2e.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
ARM GAS  /tmp/ccuv3C2e.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
ARM GAS  /tmp/ccuv3C2e.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
ARM GAS  /tmp/ccuv3C2e.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/ccuv3C2e.s 			page 14


 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
ARM GAS  /tmp/ccuv3C2e.s 			page 15


 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
ARM GAS  /tmp/ccuv3C2e.s 			page 16


 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
ARM GAS  /tmp/ccuv3C2e.s 			page 17


 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /tmp/ccuv3C2e.s 			page 18


 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccuv3C2e.s 			page 19


1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccuv3C2e.s 			page 20


1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  /tmp/ccuv3C2e.s 			page 21


1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccuv3C2e.s 			page 22


1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccuv3C2e.s 			page 23


1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccuv3C2e.s 			page 24


1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccuv3C2e.s 			page 25


1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 26


1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 27


1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/ccuv3C2e.s 			page 28


1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccuv3C2e.s 			page 29


1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
ARM GAS  /tmp/ccuv3C2e.s 			page 30


1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
ARM GAS  /tmp/ccuv3C2e.s 			page 31


1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  25              		.loc 1 1726 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  31              		.loc 1 1734 0
  32 0000 0246     		mov	r2, r0
  33 0002 70B1     		cbz	r0, .L12
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 32


1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  34              		.loc 1 1737 0
  35 0004 4169     		ldr	r1, [r0, #20]
  36 0006 0F4B     		ldr	r3, .L15
  37 0008 9942     		cmp	r1, r3
  38 000a 13D0     		beq	.L13
  39 000c 0023     		movs	r3, #0
  40              	.L4:
  41              		.loc 1 1737 0 is_stmt 0 discriminator 4
  42 000e ABB1     		cbz	r3, .L8
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  43              		.loc 1 1740 0 is_stmt 1
  44 0010 926A     		ldr	r2, [r2, #40]
  45 0012 0D49     		ldr	r1, .L15+4
  46 0014 8A42     		cmp	r2, r1
  47 0016 13D0     		beq	.L9
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  48              		.loc 1 1744 0
  49 0018 02B1     		cbz	r2, .L6
  50 001a 0023     		movs	r3, #0
  51              	.L6:
  52              		.loc 1 1744 0 is_stmt 0 discriminator 4
  53 001c 63B1     		cbz	r3, .L14
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  54              		.loc 1 1746 0 is_stmt 1
  55 001e 0120     		movs	r0, #1
  56              	.LVL1:
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  57              		.loc 1 1764 0
  58 0020 7047     		bx	lr
  59              	.LVL2:
  60              	.L12:
  61              	.LBB113:
ARM GAS  /tmp/ccuv3C2e.s 			page 33


  62              	.LBB114:
  63              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
ARM GAS  /tmp/ccuv3C2e.s 			page 34


  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
ARM GAS  /tmp/ccuv3C2e.s 			page 35


 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
ARM GAS  /tmp/ccuv3C2e.s 			page 36


 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
  64              		.loc 2 195 0
  65              		.syntax unified
  66              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
  67 0022 4FF05003 			mov r3, #80												
  68 0026 83F31188 		msr basepri, r3											
  69 002a BFF36F8F 		isb														
  70 002e BFF34F8F 		dsb														
  71              	
  72              	@ 0 "" 2
  73              	.LVL3:
  74              		.thumb
  75              		.syntax unified
  76              	.L3:
  77 0032 FEE7     		b	.L3
  78              	.L13:
  79              	.LBE114:
  80              	.LBE113:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
  81              		.loc 1 1737 0
  82 0034 0123     		movs	r3, #1
  83 0036 EAE7     		b	.L4
  84              	.L14:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  85              		.loc 1 1727 0
  86 0038 0020     		movs	r0, #0
  87              	.LVL4:
  88 003a 7047     		bx	lr
  89              	.LVL5:
  90              	.L8:
  91 003c 0020     		movs	r0, #0
  92              	.LVL6:
ARM GAS  /tmp/ccuv3C2e.s 			page 37


  93 003e 7047     		bx	lr
  94              	.LVL7:
  95              	.L9:
  96 0040 0020     		movs	r0, #0
  97              	.LVL8:
  98 0042 7047     		bx	lr
  99              	.L16:
 100              		.align	2
 101              	.L15:
 102 0044 00000000 		.word	.LANCHOR0
 103 0048 00000000 		.word	.LANCHOR1
 104              		.cfi_endproc
 105              	.LFE16:
 107              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 108              		.align	1
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu softvfp
 114              	prvTaskCheckFreeStackSpace:
 115              	.LFB46:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccuv3C2e.s 			page 38


1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
ARM GAS  /tmp/ccuv3C2e.s 			page 39


1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
ARM GAS  /tmp/ccuv3C2e.s 			page 40


1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
ARM GAS  /tmp/ccuv3C2e.s 			page 41


1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
ARM GAS  /tmp/ccuv3C2e.s 			page 42


2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
ARM GAS  /tmp/ccuv3C2e.s 			page 43


2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  /tmp/ccuv3C2e.s 			page 44


2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccuv3C2e.s 			page 45


2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccuv3C2e.s 			page 46


2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccuv3C2e.s 			page 47


2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
ARM GAS  /tmp/ccuv3C2e.s 			page 48


2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccuv3C2e.s 			page 49


2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 50


2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccuv3C2e.s 			page 51


2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 52


2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccuv3C2e.s 			page 53


2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
ARM GAS  /tmp/ccuv3C2e.s 			page 54


2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
ARM GAS  /tmp/ccuv3C2e.s 			page 55


2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccuv3C2e.s 			page 56


2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
ARM GAS  /tmp/ccuv3C2e.s 			page 57


2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 58


2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  /tmp/ccuv3C2e.s 			page 59


2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
ARM GAS  /tmp/ccuv3C2e.s 			page 60


3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
ARM GAS  /tmp/ccuv3C2e.s 			page 61


3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 62


3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 63


3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
ARM GAS  /tmp/ccuv3C2e.s 			page 64


3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
ARM GAS  /tmp/ccuv3C2e.s 			page 65


3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccuv3C2e.s 			page 66


3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccuv3C2e.s 			page 67


3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
ARM GAS  /tmp/ccuv3C2e.s 			page 68


3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccuv3C2e.s 			page 69


3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 116              		.loc 1 3623 0
ARM GAS  /tmp/ccuv3C2e.s 			page 70


 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              	.LVL9:
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 122              		.loc 1 3624 0
 123 0000 0023     		movs	r3, #0
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 124              		.loc 1 3626 0
 125 0002 01E0     		b	.L18
 126              	.LVL10:
 127              	.L19:
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 128              		.loc 1 3628 0
 129 0004 0130     		adds	r0, r0, #1
 130              	.LVL11:
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 131              		.loc 1 3629 0
 132 0006 0133     		adds	r3, r3, #1
 133              	.LVL12:
 134              	.L18:
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 135              		.loc 1 3626 0
 136 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 137 000a A52A     		cmp	r2, #165
 138 000c FAD0     		beq	.L19
 139              	.LVL13:
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 140              		.loc 1 3635 0
 141 000e C3F38F00 		ubfx	r0, r3, #2, #16
 142              	.LVL14:
 143 0012 7047     		bx	lr
 144              		.cfi_endproc
 145              	.LFE46:
 147              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 148              		.align	1
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu softvfp
 154              	prvResetNextTaskUnblockTime:
 155              	.LFB49:
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
ARM GAS  /tmp/ccuv3C2e.s 			page 71


3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
ARM GAS  /tmp/ccuv3C2e.s 			page 72


3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 156              		.loc 1 3725 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 161              		.loc 1 3728 0
 162 0000 0A4B     		ldr	r3, .L26
 163 0002 1B68     		ldr	r3, [r3]
 164 0004 1B68     		ldr	r3, [r3]
 165 0006 4BB9     		cbnz	r3, .L24
 166 0008 0123     		movs	r3, #1
 167              	.L21:
 168              		.loc 1 3728 0 is_stmt 0 discriminator 4
 169 000a 4BB9     		cbnz	r3, .L25
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
ARM GAS  /tmp/ccuv3C2e.s 			page 73


 170              		.loc 1 3742 0 is_stmt 1
 171 000c 074B     		ldr	r3, .L26
 172 000e 1B68     		ldr	r3, [r3]
 173 0010 DB68     		ldr	r3, [r3, #12]
 174 0012 DB68     		ldr	r3, [r3, #12]
 175              	.LVL15:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 176              		.loc 1 3743 0
 177 0014 5A68     		ldr	r2, [r3, #4]
 178 0016 064B     		ldr	r3, .L26+4
 179              	.LVL16:
 180 0018 1A60     		str	r2, [r3]
 181 001a 7047     		bx	lr
 182              	.L24:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 183              		.loc 1 3728 0
 184 001c 0023     		movs	r3, #0
 185 001e F4E7     		b	.L21
 186              	.L25:
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 187              		.loc 1 3734 0
 188 0020 4FF0FF32 		mov	r2, #-1
 189 0024 024B     		ldr	r3, .L26+4
 190 0026 1A60     		str	r2, [r3]
 191 0028 7047     		bx	lr
 192              	.L27:
 193 002a 00BF     		.align	2
 194              	.L26:
 195 002c 00000000 		.word	.LANCHOR2
 196 0030 00000000 		.word	.LANCHOR3
 197              		.cfi_endproc
 198              	.LFE49:
 200              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 201              		.align	1
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu softvfp
 207              	prvInitialiseNewTask:
 208              	.LFB6:
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 209              		.loc 1 825 0
 210              		.cfi_startproc
 211              		@ args = 16, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              	.LVL17:
 214 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 215              		.cfi_def_cfa_offset 32
 216              		.cfi_offset 4, -32
 217              		.cfi_offset 5, -28
 218              		.cfi_offset 6, -24
 219              		.cfi_offset 7, -20
 220              		.cfi_offset 8, -16
 221              		.cfi_offset 9, -12
 222              		.cfi_offset 10, -8
 223              		.cfi_offset 14, -4
 224 0004 8146     		mov	r9, r0
ARM GAS  /tmp/ccuv3C2e.s 			page 74


 225 0006 0D46     		mov	r5, r1
 226 0008 1746     		mov	r7, r2
 227 000a 9A46     		mov	r10, r3
 228 000c 089E     		ldr	r6, [sp, #32]
 229 000e DDF82480 		ldr	r8, [sp, #36]
 230 0012 0A9C     		ldr	r4, [sp, #40]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 231              		.loc 1 847 0
 232 0014 9200     		lsls	r2, r2, #2
 233              	.LVL18:
 234 0016 A521     		movs	r1, #165
 235              	.LVL19:
 236 0018 206B     		ldr	r0, [r4, #48]
 237              	.LVL20:
 238 001a FFF7FEFF 		bl	memset
 239              	.LVL21:
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 240              		.loc 1 857 0
 241 001e 236B     		ldr	r3, [r4, #48]
 242 0020 07F18042 		add	r2, r7, #1073741824
 243 0024 013A     		subs	r2, r2, #1
 244 0026 03EB8207 		add	r7, r3, r2, lsl #2
 245              	.LVL22:
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 246              		.loc 1 858 0
 247 002a 27F00707 		bic	r7, r7, #7
 248              	.LVL23:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 249              		.loc 1 885 0
 250 002e 0023     		movs	r3, #0
 251              	.LVL24:
 252              	.L29:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 253              		.loc 1 885 0 is_stmt 0 discriminator 1
 254 0030 0F2B     		cmp	r3, #15
 255 0032 07D8     		bhi	.L30
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256              		.loc 1 887 0 is_stmt 1
 257 0034 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 258 0036 E218     		adds	r2, r4, r3
 259 0038 82F83410 		strb	r1, [r2, #52]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 260              		.loc 1 892 0
 261 003c EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 262 003e 0AB1     		cbz	r2, .L30
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 263              		.loc 1 885 0 discriminator 2
 264 0040 0133     		adds	r3, r3, #1
 265              	.LVL25:
 266 0042 F5E7     		b	.L29
 267              	.L30:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 268              		.loc 1 904 0
 269 0044 0023     		movs	r3, #0
 270              	.LVL26:
 271 0046 84F84330 		strb	r3, [r4, #67]
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccuv3C2e.s 			page 75


 272              		.loc 1 908 0
 273 004a 372E     		cmp	r6, #55
 274 004c 00D9     		bls	.L32
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 275              		.loc 1 910 0
 276 004e 3726     		movs	r6, #55
 277              	.L32:
 278              	.LVL27:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 279              		.loc 1 917 0
 280 0050 E662     		str	r6, [r4, #44]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 281              		.loc 1 920 0
 282 0052 E664     		str	r6, [r4, #76]
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 283              		.loc 1 921 0
 284 0054 0025     		movs	r5, #0
 285              	.LVL28:
 286 0056 2565     		str	r5, [r4, #80]
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 287              		.loc 1 925 0
 288 0058 201D     		adds	r0, r4, #4
 289 005a FFF7FEFF 		bl	vListInitialiseItem
 290              	.LVL29:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291              		.loc 1 926 0
 292 005e 04F11800 		add	r0, r4, #24
 293 0062 FFF7FEFF 		bl	vListInitialiseItem
 294              	.LVL30:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 295              		.loc 1 930 0
 296 0066 2461     		str	r4, [r4, #16]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 297              		.loc 1 933 0
 298 0068 C6F13806 		rsb	r6, r6, #56
 299              	.LVL31:
 300 006c A661     		str	r6, [r4, #24]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301              		.loc 1 934 0
 302 006e 6462     		str	r4, [r4, #36]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 303              		.loc 1 976 0
 304 0070 6565     		str	r5, [r4, #84]
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 305              		.loc 1 977 0
 306 0072 84F85850 		strb	r5, [r4, #88]
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 307              		.loc 1 1004 0
 308 0076 5246     		mov	r2, r10
 309 0078 4946     		mov	r1, r9
 310 007a 3846     		mov	r0, r7
 311 007c FFF7FEFF 		bl	pxPortInitialiseStack
 312              	.LVL32:
 313 0080 2060     		str	r0, [r4]
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 314              		.loc 1 1008 0
 315 0082 B8F1000F 		cmp	r8, #0
ARM GAS  /tmp/ccuv3C2e.s 			page 76


 316 0086 01D0     		beq	.L28
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 317              		.loc 1 1012 0
 318 0088 C8F80040 		str	r4, [r8]
 319              	.L28:
 320 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 321              		.cfi_endproc
 322              	.LFE6:
 324              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 325              		.align	1
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu softvfp
 331              	prvInitialiseTaskLists:
 332              	.LFB42:
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 333              		.loc 1 3431 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337 0000 38B5     		push	{r3, r4, r5, lr}
 338              		.cfi_def_cfa_offset 16
 339              		.cfi_offset 3, -16
 340              		.cfi_offset 4, -12
 341              		.cfi_offset 5, -8
 342              		.cfi_offset 14, -4
 343              	.LVL33:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 344              		.loc 1 3434 0
 345 0002 0024     		movs	r4, #0
 346 0004 07E0     		b	.L37
 347              	.LVL34:
 348              	.L38:
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 349              		.loc 1 3436 0 discriminator 3
 350 0006 04EB8402 		add	r2, r4, r4, lsl #2
 351 000a 9300     		lsls	r3, r2, #2
 352 000c 0E48     		ldr	r0, .L40
 353 000e 1844     		add	r0, r0, r3
 354 0010 FFF7FEFF 		bl	vListInitialise
 355              	.LVL35:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 356              		.loc 1 3434 0 discriminator 3
 357 0014 0134     		adds	r4, r4, #1
 358              	.LVL36:
 359              	.L37:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 360              		.loc 1 3434 0 is_stmt 0 discriminator 1
 361 0016 372C     		cmp	r4, #55
 362 0018 F5D9     		bls	.L38
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 363              		.loc 1 3439 0 is_stmt 1
 364 001a 0C4D     		ldr	r5, .L40+4
 365 001c 2846     		mov	r0, r5
 366 001e FFF7FEFF 		bl	vListInitialise
 367              	.LVL37:
ARM GAS  /tmp/ccuv3C2e.s 			page 77


3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 368              		.loc 1 3440 0
 369 0022 0B4C     		ldr	r4, .L40+8
 370              	.LVL38:
 371 0024 2046     		mov	r0, r4
 372 0026 FFF7FEFF 		bl	vListInitialise
 373              	.LVL39:
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374              		.loc 1 3441 0
 375 002a 0A48     		ldr	r0, .L40+12
 376 002c FFF7FEFF 		bl	vListInitialise
 377              	.LVL40:
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 378              		.loc 1 3445 0
 379 0030 0948     		ldr	r0, .L40+16
 380 0032 FFF7FEFF 		bl	vListInitialise
 381              	.LVL41:
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 382              		.loc 1 3451 0
 383 0036 0948     		ldr	r0, .L40+20
 384 0038 FFF7FEFF 		bl	vListInitialise
 385              	.LVL42:
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 386              		.loc 1 3457 0
 387 003c 084B     		ldr	r3, .L40+24
 388 003e 1D60     		str	r5, [r3]
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 389              		.loc 1 3458 0
 390 0040 084B     		ldr	r3, .L40+28
 391 0042 1C60     		str	r4, [r3]
 392 0044 38BD     		pop	{r3, r4, r5, pc}
 393              	.L41:
 394 0046 00BF     		.align	2
 395              	.L40:
 396 0048 00000000 		.word	.LANCHOR4
 397 004c 00000000 		.word	.LANCHOR5
 398 0050 00000000 		.word	.LANCHOR6
 399 0054 00000000 		.word	.LANCHOR1
 400 0058 00000000 		.word	.LANCHOR7
 401 005c 00000000 		.word	.LANCHOR0
 402 0060 00000000 		.word	.LANCHOR2
 403 0064 00000000 		.word	.LANCHOR8
 404              		.cfi_endproc
 405              	.LFE42:
 407              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 408              		.align	1
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu softvfp
 414              	prvAddNewTaskToReadyList:
 415              	.LFB7:
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 416              		.loc 1 1022 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccuv3C2e.s 			page 78


 420              	.LVL43:
 421 0000 10B5     		push	{r4, lr}
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 4, -8
 424              		.cfi_offset 14, -4
 425 0002 0446     		mov	r4, r0
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 426              		.loc 1 1025 0
 427 0004 FFF7FEFF 		bl	vPortEnterCritical
 428              	.LVL44:
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 429              		.loc 1 1027 0
 430 0008 214A     		ldr	r2, .L49
 431 000a 1368     		ldr	r3, [r2]
 432 000c 0133     		adds	r3, r3, #1
 433 000e 1360     		str	r3, [r2]
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 434              		.loc 1 1028 0
 435 0010 204B     		ldr	r3, .L49+4
 436 0012 1B68     		ldr	r3, [r3]
 437 0014 002B     		cmp	r3, #0
 438 0016 32D0     		beq	.L48
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 439              		.loc 1 1051 0
 440 0018 1F4B     		ldr	r3, .L49+8
 441 001a 1B68     		ldr	r3, [r3]
 442 001c 3BB9     		cbnz	r3, .L44
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 443              		.loc 1 1053 0
 444 001e 1D4B     		ldr	r3, .L49+4
 445 0020 1B68     		ldr	r3, [r3]
 446 0022 DA6A     		ldr	r2, [r3, #44]
 447 0024 E36A     		ldr	r3, [r4, #44]
 448 0026 9A42     		cmp	r2, r3
 449 0028 01D8     		bhi	.L44
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 450              		.loc 1 1055 0
 451 002a 1A4B     		ldr	r3, .L49+4
 452 002c 1C60     		str	r4, [r3]
 453              	.L44:
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 454              		.loc 1 1068 0
 455 002e 1B4A     		ldr	r2, .L49+12
 456 0030 1368     		ldr	r3, [r2]
 457 0032 0133     		adds	r3, r3, #1
 458 0034 1360     		str	r3, [r2]
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 459              		.loc 1 1073 0
 460 0036 6364     		str	r3, [r4, #68]
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461              		.loc 1 1078 0
 462 0038 E36A     		ldr	r3, [r4, #44]
 463 003a 194A     		ldr	r2, .L49+16
 464 003c 1268     		ldr	r2, [r2]
 465 003e 9342     		cmp	r3, r2
 466 0040 01D9     		bls	.L45
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 79


 467              		.loc 1 1078 0 is_stmt 0 discriminator 1
 468 0042 174A     		ldr	r2, .L49+16
 469 0044 1360     		str	r3, [r2]
 470              	.L45:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471              		.loc 1 1078 0 discriminator 3
 472 0046 03EB8303 		add	r3, r3, r3, lsl #2
 473 004a 9A00     		lsls	r2, r3, #2
 474 004c 211D     		adds	r1, r4, #4
 475 004e 1548     		ldr	r0, .L49+20
 476 0050 1044     		add	r0, r0, r2
 477 0052 FFF7FEFF 		bl	vListInsertEnd
 478              	.LVL45:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 479              		.loc 1 1082 0 is_stmt 1 discriminator 3
 480 0056 FFF7FEFF 		bl	vPortExitCritical
 481              	.LVL46:
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 482              		.loc 1 1084 0 discriminator 3
 483 005a 0F4B     		ldr	r3, .L49+8
 484 005c 1B68     		ldr	r3, [r3]
 485 005e 6BB1     		cbz	r3, .L42
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 486              		.loc 1 1088 0
 487 0060 0C4B     		ldr	r3, .L49+4
 488 0062 1B68     		ldr	r3, [r3]
 489 0064 DA6A     		ldr	r2, [r3, #44]
 490 0066 E36A     		ldr	r3, [r4, #44]
 491 0068 9A42     		cmp	r2, r3
 492 006a 07D2     		bcs	.L42
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 493              		.loc 1 1090 0
 494 006c 4FF08052 		mov	r2, #268435456
 495 0070 0D4B     		ldr	r3, .L49+24
 496 0072 1A60     		str	r2, [r3]
 497              		.syntax unified
 498              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 499 0074 BFF34F8F 		dsb
 500              	@ 0 "" 2
 501              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 502 0078 BFF36F8F 		isb
 503              	@ 0 "" 2
 504              		.thumb
 505              		.syntax unified
 506              	.L42:
 507 007c 10BD     		pop	{r4, pc}
 508              	.LVL47:
 509              	.L48:
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510              		.loc 1 1032 0
 511 007e 054B     		ldr	r3, .L49+4
 512 0080 1C60     		str	r4, [r3]
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 513              		.loc 1 1034 0
 514 0082 1368     		ldr	r3, [r2]
 515 0084 012B     		cmp	r3, #1
 516 0086 D2D1     		bne	.L44
ARM GAS  /tmp/ccuv3C2e.s 			page 80


1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 517              		.loc 1 1039 0
 518 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 519              	.LVL48:
 520 008c CFE7     		b	.L44
 521              	.L50:
 522 008e 00BF     		.align	2
 523              	.L49:
 524 0090 00000000 		.word	.LANCHOR9
 525 0094 00000000 		.word	.LANCHOR10
 526 0098 00000000 		.word	.LANCHOR11
 527 009c 00000000 		.word	.LANCHOR12
 528 00a0 00000000 		.word	.LANCHOR13
 529 00a4 00000000 		.word	.LANCHOR4
 530 00a8 04ED00E0 		.word	-536810236
 531              		.cfi_endproc
 532              	.LFE7:
 534              		.section	.text.prvDeleteTCB,"ax",%progbits
 535              		.align	1
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 539              		.fpu softvfp
 541              	prvDeleteTCB:
 542              	.LFB48:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 543              		.loc 1 3671 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              	.LVL49:
 548 0000 10B5     		push	{r4, lr}
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 4, -8
 551              		.cfi_offset 14, -4
 552 0002 0446     		mov	r4, r0
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 553              		.loc 1 3697 0
 554 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 555 0008 63B1     		cbz	r3, .L57
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 556              		.loc 1 3704 0
 557 000a 012B     		cmp	r3, #1
 558 000c 11D0     		beq	.L58
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 559              		.loc 1 3714 0
 560 000e 022B     		cmp	r3, #2
 561 0010 12D0     		beq	.L51
 562              	.LBB115:
 563              	.LBB116:
 564              		.loc 2 195 0
 565              		.syntax unified
 566              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 567 0012 4FF05003 			mov r3, #80												
 568 0016 83F31188 		msr basepri, r3											
 569 001a BFF36F8F 		isb														
 570 001e BFF34F8F 		dsb														
ARM GAS  /tmp/ccuv3C2e.s 			page 81


 571              	
 572              	@ 0 "" 2
 573              	.LVL50:
 574              		.thumb
 575              		.syntax unified
 576              	.L55:
 577 0022 FEE7     		b	.L55
 578              	.L57:
 579              	.LBE116:
 580              	.LBE115:
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 581              		.loc 1 3701 0
 582 0024 006B     		ldr	r0, [r0, #48]
 583              	.LVL51:
 584 0026 FFF7FEFF 		bl	vPortFree
 585              	.LVL52:
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 586              		.loc 1 3702 0
 587 002a 2046     		mov	r0, r4
 588 002c FFF7FEFF 		bl	vPortFree
 589              	.LVL53:
 590 0030 10BD     		pop	{r4, pc}
 591              	.LVL54:
 592              	.L58:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 593              		.loc 1 3708 0
 594 0032 FFF7FEFF 		bl	vPortFree
 595              	.LVL55:
 596 0036 10BD     		pop	{r4, pc}
 597              	.LVL56:
 598              	.L51:
 599 0038 10BD     		pop	{r4, pc}
 600              		.cfi_endproc
 601              	.LFE48:
 603              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 604              		.align	1
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 608              		.fpu softvfp
 610              	prvCheckTasksWaitingTermination:
 611              	.LFB43:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 612              		.loc 1 3463 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              	.LBB117:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 617              		.loc 1 3473 0
 618 0000 0F4B     		ldr	r3, .L66
 619 0002 1B68     		ldr	r3, [r3]
 620 0004 D3B1     		cbz	r3, .L65
 621              	.LBE117:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622              		.loc 1 3463 0
 623 0006 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccuv3C2e.s 			page 82


 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 4, -8
 626              		.cfi_offset 14, -4
 627              	.L61:
 628              	.LBB118:
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 629              		.loc 1 3475 0
 630 0008 FFF7FEFF 		bl	vPortEnterCritical
 631              	.LVL57:
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 632              		.loc 1 3477 0
 633 000c 0D4B     		ldr	r3, .L66+4
 634 000e DB68     		ldr	r3, [r3, #12]
 635 0010 DC68     		ldr	r4, [r3, #12]
 636              	.LVL58:
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 637              		.loc 1 3478 0
 638 0012 201D     		adds	r0, r4, #4
 639 0014 FFF7FEFF 		bl	uxListRemove
 640              	.LVL59:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 641              		.loc 1 3479 0
 642 0018 0B4A     		ldr	r2, .L66+8
 643 001a 1368     		ldr	r3, [r2]
 644 001c 013B     		subs	r3, r3, #1
 645 001e 1360     		str	r3, [r2]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 646              		.loc 1 3480 0
 647 0020 074A     		ldr	r2, .L66
 648 0022 1368     		ldr	r3, [r2]
 649 0024 013B     		subs	r3, r3, #1
 650 0026 1360     		str	r3, [r2]
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 651              		.loc 1 3482 0
 652 0028 FFF7FEFF 		bl	vPortExitCritical
 653              	.LVL60:
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 654              		.loc 1 3484 0
 655 002c 2046     		mov	r0, r4
 656 002e FFF7FEFF 		bl	prvDeleteTCB
 657              	.LVL61:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 658              		.loc 1 3473 0
 659 0032 034B     		ldr	r3, .L66
 660 0034 1B68     		ldr	r3, [r3]
 661 0036 002B     		cmp	r3, #0
 662 0038 E6D1     		bne	.L61
 663              	.LBE118:
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 664              		.loc 1 3488 0
 665 003a 10BD     		pop	{r4, pc}
 666              	.LVL62:
 667              	.L65:
 668              		.cfi_def_cfa_offset 0
 669              		.cfi_restore 4
 670              		.cfi_restore 14
 671 003c 7047     		bx	lr
ARM GAS  /tmp/ccuv3C2e.s 			page 83


 672              	.L67:
 673 003e 00BF     		.align	2
 674              	.L66:
 675 0040 00000000 		.word	.LANCHOR14
 676 0044 00000000 		.word	.LANCHOR7
 677 0048 00000000 		.word	.LANCHOR9
 678              		.cfi_endproc
 679              	.LFE43:
 681              		.section	.text.prvIdleTask,"ax",%progbits
 682              		.align	1
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 686              		.fpu softvfp
 688              	prvIdleTask:
 689              	.LFB41:
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 690              		.loc 1 3219 0
 691              		.cfi_startproc
 692              		@ Volatile: function does not return.
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              	.LVL63:
 696 0000 08B5     		push	{r3, lr}
 697              		.cfi_def_cfa_offset 8
 698              		.cfi_offset 3, -8
 699              		.cfi_offset 14, -4
 700              	.LVL64:
 701              	.L69:
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 702              		.loc 1 3235 0
 703 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 704              	.LVL65:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 705              		.loc 1 3258 0
 706 0006 064B     		ldr	r3, .L72
 707 0008 1B68     		ldr	r3, [r3]
 708 000a 012B     		cmp	r3, #1
 709 000c F9D9     		bls	.L69
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710              		.loc 1 3260 0
 711 000e 4FF08052 		mov	r2, #268435456
 712 0012 044B     		ldr	r3, .L72+4
 713 0014 1A60     		str	r2, [r3]
 714              		.syntax unified
 715              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 716 0016 BFF34F8F 		dsb
 717              	@ 0 "" 2
 718              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 719 001a BFF36F8F 		isb
 720              	@ 0 "" 2
 721              		.thumb
 722              		.syntax unified
 723 001e F0E7     		b	.L69
 724              	.L73:
 725              		.align	2
 726              	.L72:
ARM GAS  /tmp/ccuv3C2e.s 			page 84


 727 0020 00000000 		.word	.LANCHOR4
 728 0024 04ED00E0 		.word	-536810236
 729              		.cfi_endproc
 730              	.LFE41:
 732              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 733              		.align	1
 734              		.syntax unified
 735              		.thumb
 736              		.thumb_func
 737              		.fpu softvfp
 739              	prvAddCurrentTaskToDelayedList:
 740              	.LFB63:
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccuv3C2e.s 			page 85


3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
ARM GAS  /tmp/ccuv3C2e.s 			page 86


3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
ARM GAS  /tmp/ccuv3C2e.s 			page 87


3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 88


3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccuv3C2e.s 			page 89


4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
ARM GAS  /tmp/ccuv3C2e.s 			page 90


4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 91


4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
ARM GAS  /tmp/ccuv3C2e.s 			page 92


4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccuv3C2e.s 			page 93


4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccuv3C2e.s 			page 94


4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccuv3C2e.s 			page 95


4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
ARM GAS  /tmp/ccuv3C2e.s 			page 96


4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  /tmp/ccuv3C2e.s 			page 97


4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
ARM GAS  /tmp/ccuv3C2e.s 			page 98


4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 99


4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccuv3C2e.s 			page 100


4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  /tmp/ccuv3C2e.s 			page 101


4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
ARM GAS  /tmp/ccuv3C2e.s 			page 102


4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 103


4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 104


4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 741              		.loc 1 4907 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 745              	.LVL66:
 746 0000 70B5     		push	{r4, r5, r6, lr}
 747              		.cfi_def_cfa_offset 16
 748              		.cfi_offset 4, -16
 749              		.cfi_offset 5, -12
 750              		.cfi_offset 6, -8
 751              		.cfi_offset 14, -4
 752 0002 0446     		mov	r4, r0
 753 0004 0E46     		mov	r6, r1
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 754              		.loc 1 4909 0
 755 0006 174B     		ldr	r3, .L81
 756 0008 1D68     		ldr	r5, [r3]
 757              	.LVL67:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  /tmp/ccuv3C2e.s 			page 105


4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 758              		.loc 1 4922 0
 759 000a 174B     		ldr	r3, .L81+4
 760 000c 1868     		ldr	r0, [r3]
 761              	.LVL68:
 762 000e 0430     		adds	r0, r0, #4
 763 0010 FFF7FEFF 		bl	uxListRemove
 764              	.LVL69:
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 765              		.loc 1 4935 0
 766 0014 B4F1FF3F 		cmp	r4, #-1
 767 0018 13D0     		beq	.L79
 768              	.L75:
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 769              		.loc 1 4947 0
 770 001a 2C44     		add	r4, r4, r5
 771              	.LVL70:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 772              		.loc 1 4950 0
 773 001c 124B     		ldr	r3, .L81+4
 774 001e 1B68     		ldr	r3, [r3]
 775 0020 5C60     		str	r4, [r3, #4]
ARM GAS  /tmp/ccuv3C2e.s 			page 106


4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 776              		.loc 1 4952 0
 777 0022 A542     		cmp	r5, r4
 778 0024 16D8     		bhi	.L80
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 779              		.loc 1 4962 0
 780 0026 114B     		ldr	r3, .L81+8
 781 0028 1868     		ldr	r0, [r3]
 782 002a 0F4B     		ldr	r3, .L81+4
 783 002c 1968     		ldr	r1, [r3]
 784 002e 0431     		adds	r1, r1, #4
 785 0030 FFF7FEFF 		bl	vListInsert
 786              	.LVL71:
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 787              		.loc 1 4967 0
 788 0034 0E4B     		ldr	r3, .L81+12
 789 0036 1B68     		ldr	r3, [r3]
 790 0038 9C42     		cmp	r4, r3
 791 003a 01D2     		bcs	.L74
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 792              		.loc 1 4969 0
 793 003c 0C4B     		ldr	r3, .L81+12
 794 003e 1C60     		str	r4, [r3]
 795              	.L74:
 796 0040 70BD     		pop	{r4, r5, r6, pc}
 797              	.LVL72:
 798              	.L79:
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 799              		.loc 1 4935 0 discriminator 1
 800 0042 002E     		cmp	r6, #0
 801 0044 E9D0     		beq	.L75
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 802              		.loc 1 4940 0
 803 0046 084B     		ldr	r3, .L81+4
 804 0048 1968     		ldr	r1, [r3]
 805 004a 0431     		adds	r1, r1, #4
 806 004c 0948     		ldr	r0, .L81+16
 807 004e FFF7FEFF 		bl	vListInsertEnd
 808              	.LVL73:
 809 0052 70BD     		pop	{r4, r5, r6, pc}
 810              	.LVL74:
 811              	.L80:
ARM GAS  /tmp/ccuv3C2e.s 			page 107


4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 812              		.loc 1 4956 0
 813 0054 084B     		ldr	r3, .L81+20
 814 0056 1868     		ldr	r0, [r3]
 815 0058 034B     		ldr	r3, .L81+4
 816 005a 1968     		ldr	r1, [r3]
 817 005c 0431     		adds	r1, r1, #4
 818 005e FFF7FEFF 		bl	vListInsert
 819              	.LVL75:
 820 0062 70BD     		pop	{r4, r5, r6, pc}
 821              	.LVL76:
 822              	.L82:
 823              		.align	2
 824              	.L81:
 825 0064 00000000 		.word	.LANCHOR15
 826 0068 00000000 		.word	.LANCHOR10
 827 006c 00000000 		.word	.LANCHOR2
 828 0070 00000000 		.word	.LANCHOR3
 829 0074 00000000 		.word	.LANCHOR0
 830 0078 00000000 		.word	.LANCHOR8
 831              		.cfi_endproc
 832              	.LFE63:
 834              		.section	.text.xTaskCreateStatic,"ax",%progbits
 835              		.align	1
 836              		.global	xTaskCreateStatic
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu softvfp
 842              	xTaskCreateStatic:
 843              	.LFB4:
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 844              		.loc 1 582 0
 845              		.cfi_startproc
 846              		@ args = 12, pretend = 0, frame = 8
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              	.LVL77:
 849 0000 70B5     		push	{r4, r5, r6, lr}
 850              		.cfi_def_cfa_offset 16
 851              		.cfi_offset 4, -16
 852              		.cfi_offset 5, -12
 853              		.cfi_offset 6, -8
 854              		.cfi_offset 14, -4
 855 0002 86B0     		sub	sp, sp, #24
 856              		.cfi_def_cfa_offset 40
 857 0004 0B9D     		ldr	r5, [sp, #44]
 858 0006 0C9C     		ldr	r4, [sp, #48]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 859              		.loc 1 586 0
 860 0008 75B1     		cbz	r5, .L91
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 861              		.loc 1 587 0
 862 000a B4B1     		cbz	r4, .L92
 863              	.LBB119:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 864              		.loc 1 594 0
 865 000c 5C26     		movs	r6, #92
ARM GAS  /tmp/ccuv3C2e.s 			page 108


 866 000e 0496     		str	r6, [sp, #16]
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 867              		.loc 1 595 0
 868 0010 049E     		ldr	r6, [sp, #16]
 869 0012 5C2E     		cmp	r6, #92
 870 0014 1AD0     		beq	.L88
 871              	.LBB120:
 872              	.LBB121:
 873              		.loc 2 195 0
 874              		.syntax unified
 875              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 876 0016 4FF05003 			mov r3, #80												
 877 001a 83F31188 		msr basepri, r3											
 878 001e BFF36F8F 		isb														
 879 0022 BFF34F8F 		dsb														
 880              	
 881              	@ 0 "" 2
 882              	.LVL78:
 883              		.thumb
 884              		.syntax unified
 885              	.L89:
 886 0026 FEE7     		b	.L89
 887              	.LVL79:
 888              	.L91:
 889              	.LBE121:
 890              	.LBE120:
 891              	.LBE119:
 892              	.LBB122:
 893              	.LBB123:
 894              		.syntax unified
 895              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 896 0028 4FF05003 			mov r3, #80												
 897 002c 83F31188 		msr basepri, r3											
 898 0030 BFF36F8F 		isb														
 899 0034 BFF34F8F 		dsb														
 900              	
 901              	@ 0 "" 2
 902              	.LVL80:
 903              		.thumb
 904              		.syntax unified
 905              	.L85:
 906 0038 FEE7     		b	.L85
 907              	.LVL81:
 908              	.L92:
 909              	.LBE123:
 910              	.LBE122:
 911              	.LBB124:
 912              	.LBB125:
 913              		.syntax unified
 914              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 915 003a 4FF05003 			mov r3, #80												
 916 003e 83F31188 		msr basepri, r3											
 917 0042 BFF36F8F 		isb														
 918 0046 BFF34F8F 		dsb														
 919              	
 920              	@ 0 "" 2
 921              	.LVL82:
ARM GAS  /tmp/ccuv3C2e.s 			page 109


 922              		.thumb
 923              		.syntax unified
 924              	.L87:
 925 004a FEE7     		b	.L87
 926              	.LVL83:
 927              	.L88:
 928              	.LBE125:
 929              	.LBE124:
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930              		.loc 1 605 0
 931 004c 2563     		str	r5, [r4, #48]
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 932              		.loc 1 611 0
 933 004e 0225     		movs	r5, #2
 934 0050 84F85950 		strb	r5, [r4, #89]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 935              		.loc 1 615 0
 936 0054 0025     		movs	r5, #0
 937 0056 0395     		str	r5, [sp, #12]
 938 0058 0294     		str	r4, [sp, #8]
 939 005a 05AD     		add	r5, sp, #20
 940 005c 0195     		str	r5, [sp, #4]
 941 005e 0A9D     		ldr	r5, [sp, #40]
 942 0060 0095     		str	r5, [sp]
 943 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 944              	.LVL84:
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 945              		.loc 1 616 0
 946 0066 2046     		mov	r0, r4
 947 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 948              	.LVL85:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949              		.loc 1 624 0
 950 006c 0598     		ldr	r0, [sp, #20]
 951 006e 06B0     		add	sp, sp, #24
 952              		.cfi_def_cfa_offset 16
 953              		@ sp needed
 954 0070 70BD     		pop	{r4, r5, r6, pc}
 955              		.cfi_endproc
 956              	.LFE4:
 958              		.section	.text.xTaskCreate,"ax",%progbits
 959              		.align	1
 960              		.global	xTaskCreate
 961              		.syntax unified
 962              		.thumb
 963              		.thumb_func
 964              		.fpu softvfp
 966              	xTaskCreate:
 967              	.LFB5:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 968              		.loc 1 732 0
 969              		.cfi_startproc
 970              		@ args = 8, pretend = 0, frame = 0
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972              	.LVL86:
 973 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 974              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccuv3C2e.s 			page 110


 975              		.cfi_offset 4, -28
 976              		.cfi_offset 5, -24
 977              		.cfi_offset 6, -20
 978              		.cfi_offset 7, -16
 979              		.cfi_offset 8, -12
 980              		.cfi_offset 9, -8
 981              		.cfi_offset 14, -4
 982 0004 85B0     		sub	sp, sp, #20
 983              		.cfi_def_cfa_offset 48
 984 0006 0646     		mov	r6, r0
 985 0008 0F46     		mov	r7, r1
 986 000a 1546     		mov	r5, r2
 987 000c 9846     		mov	r8, r3
 988              	.LBB126:
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 989              		.loc 1 766 0
 990 000e 9000     		lsls	r0, r2, #2
 991              	.LVL87:
 992 0010 FFF7FEFF 		bl	pvPortMalloc
 993              	.LVL88:
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 994              		.loc 1 768 0
 995 0014 10B3     		cbz	r0, .L97
 996 0016 8146     		mov	r9, r0
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997              		.loc 1 771 0
 998 0018 5C20     		movs	r0, #92
 999              	.LVL89:
 1000 001a FFF7FEFF 		bl	pvPortMalloc
 1001              	.LVL90:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1002              		.loc 1 773 0
 1003 001e 0446     		mov	r4, r0
 1004 0020 C0B1     		cbz	r0, .L95
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1005              		.loc 1 776 0
 1006 0022 C0F83090 		str	r9, [r0, #48]
 1007              	.LVL91:
 1008              	.L94:
 1009              	.LBE126:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1010              		.loc 1 792 0
 1011 0026 DCB1     		cbz	r4, .L98
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1012              		.loc 1 798 0
 1013 0028 0023     		movs	r3, #0
 1014 002a 84F85930 		strb	r3, [r4, #89]
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1015              		.loc 1 802 0
 1016 002e 0393     		str	r3, [sp, #12]
 1017 0030 0294     		str	r4, [sp, #8]
 1018 0032 0D9B     		ldr	r3, [sp, #52]
 1019 0034 0193     		str	r3, [sp, #4]
 1020 0036 0C9B     		ldr	r3, [sp, #48]
 1021 0038 0093     		str	r3, [sp]
 1022 003a 4346     		mov	r3, r8
 1023 003c 2A46     		mov	r2, r5
ARM GAS  /tmp/ccuv3C2e.s 			page 111


 1024 003e 3946     		mov	r1, r7
 1025 0040 3046     		mov	r0, r6
 1026 0042 FFF7FEFF 		bl	prvInitialiseNewTask
 1027              	.LVL92:
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1028              		.loc 1 803 0
 1029 0046 2046     		mov	r0, r4
 1030 0048 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1031              	.LVL93:
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1032              		.loc 1 804 0
 1033 004c 0120     		movs	r0, #1
 1034              	.LVL94:
 1035              	.L93:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1036              		.loc 1 812 0
 1037 004e 05B0     		add	sp, sp, #20
 1038              		.cfi_remember_state
 1039              		.cfi_def_cfa_offset 28
 1040              		@ sp needed
 1041 0050 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1042              	.LVL95:
 1043              	.L95:
 1044              		.cfi_restore_state
 1045              	.LBB127:
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1046              		.loc 1 782 0
 1047 0054 4846     		mov	r0, r9
 1048              	.LVL96:
 1049 0056 FFF7FEFF 		bl	vPortFree
 1050              	.LVL97:
 1051 005a E4E7     		b	.L94
 1052              	.LVL98:
 1053              	.L97:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1054              		.loc 1 787 0
 1055 005c 0024     		movs	r4, #0
 1056 005e E2E7     		b	.L94
 1057              	.LVL99:
 1058              	.L98:
 1059              	.LBE127:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1060              		.loc 1 808 0
 1061 0060 4FF0FF30 		mov	r0, #-1
 1062              	.LVL100:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1063              		.loc 1 811 0
 1064 0064 F3E7     		b	.L93
 1065              		.cfi_endproc
 1066              	.LFE5:
 1068              		.section	.text.vTaskDelete,"ax",%progbits
 1069              		.align	1
 1070              		.global	vTaskDelete
 1071              		.syntax unified
 1072              		.thumb
 1073              		.thumb_func
 1074              		.fpu softvfp
ARM GAS  /tmp/ccuv3C2e.s 			page 112


 1076              	vTaskDelete:
 1077              	.LFB8:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1078              		.loc 1 1107 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082              	.LVL101:
 1083 0000 38B5     		push	{r3, r4, r5, lr}
 1084              		.cfi_def_cfa_offset 16
 1085              		.cfi_offset 3, -16
 1086              		.cfi_offset 4, -12
 1087              		.cfi_offset 5, -8
 1088              		.cfi_offset 14, -4
 1089 0002 0446     		mov	r4, r0
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1090              		.loc 1 1110 0
 1091 0004 FFF7FEFF 		bl	vPortEnterCritical
 1092              	.LVL102:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1093              		.loc 1 1114 0
 1094 0008 24B3     		cbz	r4, .L110
 1095              	.LVL103:
 1096              	.L101:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1097              		.loc 1 1117 0 discriminator 4
 1098 000a 251D     		adds	r5, r4, #4
 1099 000c 2846     		mov	r0, r5
 1100 000e FFF7FEFF 		bl	uxListRemove
 1101              	.LVL104:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1102              		.loc 1 1127 0 discriminator 4
 1103 0012 A36A     		ldr	r3, [r4, #40]
 1104 0014 1BB1     		cbz	r3, .L102
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1105              		.loc 1 1129 0
 1106 0016 04F11800 		add	r0, r4, #24
 1107 001a FFF7FEFF 		bl	uxListRemove
 1108              	.LVL105:
 1109              	.L102:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1110              		.loc 1 1140 0
 1111 001e 1E4A     		ldr	r2, .L113
 1112 0020 1368     		ldr	r3, [r2]
 1113 0022 0133     		adds	r3, r3, #1
 1114 0024 1360     		str	r3, [r2]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1115              		.loc 1 1142 0
 1116 0026 1D4B     		ldr	r3, .L113+4
 1117 0028 1B68     		ldr	r3, [r3]
 1118 002a 9C42     		cmp	r4, r3
 1119 002c 15D0     		beq	.L111
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1120              		.loc 1 1165 0
 1121 002e 1C4A     		ldr	r2, .L113+8
 1122 0030 1368     		ldr	r3, [r2]
 1123 0032 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccuv3C2e.s 			page 113


 1124 0034 1360     		str	r3, [r2]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1125              		.loc 1 1166 0
 1126 0036 2046     		mov	r0, r4
 1127 0038 FFF7FEFF 		bl	prvDeleteTCB
 1128              	.LVL106:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1129              		.loc 1 1170 0
 1130 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1131              	.LVL107:
 1132              	.L104:
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1133              		.loc 1 1175 0
 1134 0040 FFF7FEFF 		bl	vPortExitCritical
 1135              	.LVL108:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1136              		.loc 1 1179 0
 1137 0044 174B     		ldr	r3, .L113+12
 1138 0046 1B68     		ldr	r3, [r3]
 1139 0048 1BB1     		cbz	r3, .L100
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1140              		.loc 1 1181 0
 1141 004a 144B     		ldr	r3, .L113+4
 1142 004c 1B68     		ldr	r3, [r3]
 1143 004e 9C42     		cmp	r4, r3
 1144 0050 0CD0     		beq	.L112
 1145              	.L100:
 1146 0052 38BD     		pop	{r3, r4, r5, pc}
 1147              	.LVL109:
 1148              	.L110:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1149              		.loc 1 1114 0 discriminator 1
 1150 0054 114B     		ldr	r3, .L113+4
 1151 0056 1C68     		ldr	r4, [r3]
 1152              	.LVL110:
 1153 0058 D7E7     		b	.L101
 1154              	.LVL111:
 1155              	.L111:
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1156              		.loc 1 1149 0
 1157 005a 2946     		mov	r1, r5
 1158 005c 1248     		ldr	r0, .L113+16
 1159 005e FFF7FEFF 		bl	vListInsertEnd
 1160              	.LVL112:
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1161              		.loc 1 1154 0
 1162 0062 124A     		ldr	r2, .L113+20
 1163 0064 1368     		ldr	r3, [r2]
 1164 0066 0133     		adds	r3, r3, #1
 1165 0068 1360     		str	r3, [r2]
 1166 006a E9E7     		b	.L104
 1167              	.L112:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1168              		.loc 1 1183 0
 1169 006c 104B     		ldr	r3, .L113+24
 1170 006e 1B68     		ldr	r3, [r3]
 1171 0070 43B1     		cbz	r3, .L106
ARM GAS  /tmp/ccuv3C2e.s 			page 114


 1172              	.LBB128:
 1173              	.LBB129:
 1174              		.loc 2 195 0
 1175              		.syntax unified
 1176              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1177 0072 4FF05003 			mov r3, #80												
 1178 0076 83F31188 		msr basepri, r3											
 1179 007a BFF36F8F 		isb														
 1180 007e BFF34F8F 		dsb														
 1181              	
 1182              	@ 0 "" 2
 1183              	.LVL113:
 1184              		.thumb
 1185              		.syntax unified
 1186              	.L107:
 1187 0082 FEE7     		b	.L107
 1188              	.L106:
 1189              	.LBE129:
 1190              	.LBE128:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1191              		.loc 1 1184 0
 1192 0084 4FF08052 		mov	r2, #268435456
 1193 0088 0A4B     		ldr	r3, .L113+28
 1194 008a 1A60     		str	r2, [r3]
 1195              		.syntax unified
 1196              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1197 008c BFF34F8F 		dsb
 1198              	@ 0 "" 2
 1199              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1200 0090 BFF36F8F 		isb
 1201              	@ 0 "" 2
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1202              		.loc 1 1191 0
 1203              		.thumb
 1204              		.syntax unified
 1205 0094 DDE7     		b	.L100
 1206              	.L114:
 1207 0096 00BF     		.align	2
 1208              	.L113:
 1209 0098 00000000 		.word	.LANCHOR12
 1210 009c 00000000 		.word	.LANCHOR10
 1211 00a0 00000000 		.word	.LANCHOR9
 1212 00a4 00000000 		.word	.LANCHOR11
 1213 00a8 00000000 		.word	.LANCHOR7
 1214 00ac 00000000 		.word	.LANCHOR14
 1215 00b0 00000000 		.word	.LANCHOR16
 1216 00b4 04ED00E0 		.word	-536810236
 1217              		.cfi_endproc
 1218              	.LFE8:
 1220              		.section	.text.eTaskGetState,"ax",%progbits
 1221              		.align	1
 1222              		.global	eTaskGetState
 1223              		.syntax unified
 1224              		.thumb
 1225              		.thumb_func
 1226              		.fpu softvfp
 1228              	eTaskGetState:
ARM GAS  /tmp/ccuv3C2e.s 			page 115


 1229              	.LFB11:
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1230              		.loc 1 1328 0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 1234              	.LVL114:
 1235 0000 38B5     		push	{r3, r4, r5, lr}
 1236              		.cfi_def_cfa_offset 16
 1237              		.cfi_offset 3, -16
 1238              		.cfi_offset 4, -12
 1239              		.cfi_offset 5, -8
 1240              		.cfi_offset 14, -4
 1241              	.LVL115:
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1242              		.loc 1 1333 0
 1243 0002 D0B1     		cbz	r0, .L127
 1244 0004 0546     		mov	r5, r0
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1245              		.loc 1 1335 0
 1246 0006 194B     		ldr	r3, .L129
 1247 0008 1B68     		ldr	r3, [r3]
 1248 000a 9842     		cmp	r0, r3
 1249 000c 22D0     		beq	.L120
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1250              		.loc 1 1342 0
 1251 000e FFF7FEFF 		bl	vPortEnterCritical
 1252              	.LVL116:
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1253              		.loc 1 1344 0
 1254 0012 6C69     		ldr	r4, [r5, #20]
 1255              	.LVL117:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1256              		.loc 1 1346 0
 1257 0014 FFF7FEFF 		bl	vPortExitCritical
 1258              	.LVL118:
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1259              		.loc 1 1348 0
 1260 0018 154B     		ldr	r3, .L129+4
 1261 001a 1B68     		ldr	r3, [r3]
 1262 001c 9C42     		cmp	r4, r3
 1263 001e 1BD0     		beq	.L121
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1264              		.loc 1 1348 0 is_stmt 0 discriminator 1
 1265 0020 144B     		ldr	r3, .L129+8
 1266 0022 1B68     		ldr	r3, [r3]
 1267 0024 9C42     		cmp	r4, r3
 1268 0026 19D0     		beq	.L122
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1269              		.loc 1 1356 0 is_stmt 1
 1270 0028 134B     		ldr	r3, .L129+12
 1271 002a 9C42     		cmp	r4, r3
 1272 002c 0ED0     		beq	.L128
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1273              		.loc 1 1373 0
 1274 002e 134B     		ldr	r3, .L129+16
 1275 0030 9C42     		cmp	r4, r3
ARM GAS  /tmp/ccuv3C2e.s 			page 116


 1276 0032 17D0     		beq	.L124
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1277              		.loc 1 1373 0 is_stmt 0 discriminator 1
 1278 0034 C4B9     		cbnz	r4, .L125
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1279              		.loc 1 1378 0 is_stmt 1
 1280 0036 0420     		movs	r0, #4
 1281 0038 38BD     		pop	{r3, r4, r5, pc}
 1282              	.LVL119:
 1283              	.L127:
 1284              	.LBB130:
 1285              	.LBB131:
 1286              		.loc 2 195 0
 1287              		.syntax unified
 1288              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1289 003a 4FF05003 			mov r3, #80												
 1290 003e 83F31188 		msr basepri, r3											
 1291 0042 BFF36F8F 		isb														
 1292 0046 BFF34F8F 		dsb														
 1293              	
 1294              	@ 0 "" 2
 1295              	.LVL120:
 1296              		.thumb
 1297              		.syntax unified
 1298              	.L117:
 1299 004a FEE7     		b	.L117
 1300              	.LVL121:
 1301              	.L128:
 1302              	.LBE131:
 1303              	.LBE130:
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1304              		.loc 1 1361 0
 1305 004c AB6A     		ldr	r3, [r5, #40]
 1306 004e 3BB9     		cbnz	r3, .L123
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1307              		.loc 1 1363 0
 1308 0050 0320     		movs	r0, #3
 1309 0052 38BD     		pop	{r3, r4, r5, pc}
 1310              	.LVL122:
 1311              	.L120:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1312              		.loc 1 1338 0
 1313 0054 0020     		movs	r0, #0
 1314              	.LVL123:
 1315 0056 38BD     		pop	{r3, r4, r5, pc}
 1316              	.LVL124:
 1317              	.L121:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1318              		.loc 1 1352 0
 1319 0058 0220     		movs	r0, #2
 1320 005a 38BD     		pop	{r3, r4, r5, pc}
 1321              	.LVL125:
 1322              	.L122:
 1323 005c 0220     		movs	r0, #2
 1324 005e 38BD     		pop	{r3, r4, r5, pc}
 1325              	.LVL126:
 1326              	.L123:
ARM GAS  /tmp/ccuv3C2e.s 			page 117


1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1327              		.loc 1 1367 0
 1328 0060 0220     		movs	r0, #2
 1329 0062 38BD     		pop	{r3, r4, r5, pc}
 1330              	.LVL127:
 1331              	.L124:
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1332              		.loc 1 1378 0
 1333 0064 0420     		movs	r0, #4
 1334 0066 38BD     		pop	{r3, r4, r5, pc}
 1335              	.LVL128:
 1336              	.L125:
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1337              		.loc 1 1386 0
 1338 0068 0120     		movs	r0, #1
 1339              	.LVL129:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1340              		.loc 1 1391 0
 1341 006a 38BD     		pop	{r3, r4, r5, pc}
 1342              	.LVL130:
 1343              	.L130:
 1344              		.align	2
 1345              	.L129:
 1346 006c 00000000 		.word	.LANCHOR10
 1347 0070 00000000 		.word	.LANCHOR2
 1348 0074 00000000 		.word	.LANCHOR8
 1349 0078 00000000 		.word	.LANCHOR0
 1350 007c 00000000 		.word	.LANCHOR7
 1351              		.cfi_endproc
 1352              	.LFE11:
 1354              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1355              		.align	1
 1356              		.global	uxTaskPriorityGet
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu softvfp
 1362              	uxTaskPriorityGet:
 1363              	.LFB12:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1364              		.loc 1 1399 0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 0
 1367              		@ frame_needed = 0, uses_anonymous_args = 0
 1368              	.LVL131:
 1369 0000 10B5     		push	{r4, lr}
 1370              		.cfi_def_cfa_offset 8
 1371              		.cfi_offset 4, -8
 1372              		.cfi_offset 14, -4
 1373 0002 0446     		mov	r4, r0
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1374              		.loc 1 1403 0
 1375 0004 FFF7FEFF 		bl	vPortEnterCritical
 1376              	.LVL132:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1377              		.loc 1 1407 0
 1378 0008 24B1     		cbz	r4, .L135
ARM GAS  /tmp/ccuv3C2e.s 			page 118


 1379              	.LVL133:
 1380              	.L132:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1381              		.loc 1 1408 0 discriminator 4
 1382 000a E46A     		ldr	r4, [r4, #44]
 1383              	.LVL134:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1384              		.loc 1 1410 0 discriminator 4
 1385 000c FFF7FEFF 		bl	vPortExitCritical
 1386              	.LVL135:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1387              		.loc 1 1413 0 discriminator 4
 1388 0010 2046     		mov	r0, r4
 1389 0012 10BD     		pop	{r4, pc}
 1390              	.LVL136:
 1391              	.L135:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1392              		.loc 1 1407 0 discriminator 1
 1393 0014 014B     		ldr	r3, .L136
 1394 0016 1C68     		ldr	r4, [r3]
 1395              	.LVL137:
 1396 0018 F7E7     		b	.L132
 1397              	.L137:
 1398 001a 00BF     		.align	2
 1399              	.L136:
 1400 001c 00000000 		.word	.LANCHOR10
 1401              		.cfi_endproc
 1402              	.LFE12:
 1404              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1405              		.align	1
 1406              		.global	uxTaskPriorityGetFromISR
 1407              		.syntax unified
 1408              		.thumb
 1409              		.thumb_func
 1410              		.fpu softvfp
 1412              	uxTaskPriorityGetFromISR:
 1413              	.LFB13:
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1414              		.loc 1 1421 0
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 0
 1417              		@ frame_needed = 0, uses_anonymous_args = 0
 1418              	.LVL138:
 1419 0000 10B5     		push	{r4, lr}
 1420              		.cfi_def_cfa_offset 8
 1421              		.cfi_offset 4, -8
 1422              		.cfi_offset 14, -4
 1423 0002 0446     		mov	r4, r0
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1424              		.loc 1 1441 0
 1425 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1426              	.LVL139:
 1427              	.LBB132:
 1428              	.LBB133:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
ARM GAS  /tmp/ccuv3C2e.s 			page 119


 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1429              		.loc 2 211 0
 1430              		.syntax unified
 1431              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1432 0008 EFF31183 			mrs r3, basepri											
 1433 000c 4FF05002 		mov r2, #80												
 1434 0010 82F31188 		msr basepri, r2											
 1435 0014 BFF36F8F 		isb														
 1436 0018 BFF34F8F 		dsb														
 1437              	
 1438              	@ 0 "" 2
 1439              		.thumb
 1440              		.syntax unified
 1441              	.LBE133:
 1442              	.LBE132:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1443              		.loc 1 1447 0
 1444 001c 1CB1     		cbz	r4, .L142
 1445              	.LVL140:
 1446              	.L139:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1447              		.loc 1 1448 0 discriminator 4
 1448 001e E06A     		ldr	r0, [r4, #44]
 1449              	.LVL141:
 1450              	.LBB134:
 1451              	.LBB135:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1452              		.loc 2 229 0 discriminator 4
ARM GAS  /tmp/ccuv3C2e.s 			page 120


 1453              		.syntax unified
 1454              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1455 0020 83F31188 			msr basepri, r3	
 1456              	@ 0 "" 2
 1457              	.LVL142:
 1458              		.thumb
 1459              		.syntax unified
 1460              	.LBE135:
 1461              	.LBE134:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1462              		.loc 1 1453 0 discriminator 4
 1463 0024 10BD     		pop	{r4, pc}
 1464              	.LVL143:
 1465              	.L142:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1466              		.loc 1 1447 0 discriminator 1
 1467 0026 014A     		ldr	r2, .L143
 1468 0028 1468     		ldr	r4, [r2]
 1469              	.LVL144:
 1470 002a F8E7     		b	.L139
 1471              	.L144:
 1472              		.align	2
 1473              	.L143:
 1474 002c 00000000 		.word	.LANCHOR10
 1475              		.cfi_endproc
 1476              	.LFE13:
 1478              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1479              		.align	1
 1480              		.global	vTaskPrioritySet
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1484              		.fpu softvfp
 1486              	vTaskPrioritySet:
 1487              	.LFB14:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1488              		.loc 1 1461 0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 0
 1491              		@ frame_needed = 0, uses_anonymous_args = 0
 1492              	.LVL145:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1493              		.loc 1 1466 0
 1494 0000 3729     		cmp	r1, #55
 1495 0002 08D9     		bls	.L146
 1496              	.LBB136:
 1497              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1498              		.loc 2 195 0
 1499              		.syntax unified
 1500              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1501 0004 4FF05003 			mov r3, #80												
 1502 0008 83F31188 		msr basepri, r3											
 1503 000c BFF36F8F 		isb														
 1504 0010 BFF34F8F 		dsb														
 1505              	
 1506              	@ 0 "" 2
ARM GAS  /tmp/ccuv3C2e.s 			page 121


 1507              	.LVL146:
 1508              		.thumb
 1509              		.syntax unified
 1510              	.L147:
 1511 0014 FEE7     		b	.L147
 1512              	.L146:
 1513              	.LBE137:
 1514              	.LBE136:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1515              		.loc 1 1461 0
 1516 0016 70B5     		push	{r4, r5, r6, lr}
 1517              		.cfi_def_cfa_offset 16
 1518              		.cfi_offset 4, -16
 1519              		.cfi_offset 5, -12
 1520              		.cfi_offset 6, -8
 1521              		.cfi_offset 14, -4
 1522 0018 0D46     		mov	r5, r1
 1523 001a 0446     		mov	r4, r0
 1524              	.LVL147:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1525              		.loc 1 1478 0
 1526 001c FFF7FEFF 		bl	vPortEnterCritical
 1527              	.LVL148:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1528              		.loc 1 1482 0
 1529 0020 0CB9     		cbnz	r4, .L148
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1530              		.loc 1 1482 0 is_stmt 0 discriminator 1
 1531 0022 294B     		ldr	r3, .L164
 1532 0024 1C68     		ldr	r4, [r3]
 1533              	.LVL149:
 1534              	.L148:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1535              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1536 0026 E26C     		ldr	r2, [r4, #76]
 1537              	.LVL150:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1538              		.loc 1 1496 0 discriminator 4
 1539 0028 9542     		cmp	r5, r2
 1540 002a 3BD0     		beq	.L149
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1541              		.loc 1 1500 0
 1542 002c 3DD9     		bls	.L150
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1543              		.loc 1 1502 0
 1544 002e 264B     		ldr	r3, .L164
 1545 0030 1B68     		ldr	r3, [r3]
 1546 0032 9C42     		cmp	r4, r3
 1547 0034 3FD0     		beq	.L158
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1548              		.loc 1 1507 0
 1549 0036 244B     		ldr	r3, .L164
 1550 0038 1B68     		ldr	r3, [r3]
 1551 003a DB6A     		ldr	r3, [r3, #44]
 1552 003c 9D42     		cmp	r5, r3
 1553 003e 3CD2     		bcs	.L159
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 122


 1554              		.loc 1 1464 0
 1555 0040 0026     		movs	r6, #0
 1556              	.L151:
 1557              	.LVL151:
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1558              		.loc 1 1540 0
 1559 0042 E36A     		ldr	r3, [r4, #44]
 1560              	.LVL152:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1561              		.loc 1 1546 0
 1562 0044 9A42     		cmp	r2, r3
 1563 0046 00D1     		bne	.L152
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1564              		.loc 1 1548 0
 1565 0048 E562     		str	r5, [r4, #44]
 1566              	.L152:
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1567              		.loc 1 1556 0
 1568 004a E564     		str	r5, [r4, #76]
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1569              		.loc 1 1566 0
 1570 004c A269     		ldr	r2, [r4, #24]
 1571              	.LVL153:
 1572 004e 002A     		cmp	r2, #0
 1573 0050 02DB     		blt	.L153
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1574              		.loc 1 1568 0
 1575 0052 C5F13805 		rsb	r5, r5, #56
 1576              	.LVL154:
 1577 0056 A561     		str	r5, [r4, #24]
 1578              	.L153:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1579              		.loc 1 1579 0
 1580 0058 6169     		ldr	r1, [r4, #20]
 1581 005a 03EB8303 		add	r3, r3, r3, lsl #2
 1582              	.LVL155:
 1583 005e 9A00     		lsls	r2, r3, #2
 1584 0060 1A4B     		ldr	r3, .L164+4
 1585 0062 1344     		add	r3, r3, r2
 1586 0064 9942     		cmp	r1, r3
 1587 0066 2CD1     		bne	.L161
 1588 0068 0123     		movs	r3, #1
 1589              	.L154:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1590              		.loc 1 1579 0 is_stmt 0 discriminator 4
 1591 006a 93B1     		cbz	r3, .L155
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1592              		.loc 1 1584 0 is_stmt 1
 1593 006c 251D     		adds	r5, r4, #4
 1594 006e 2846     		mov	r0, r5
 1595 0070 FFF7FEFF 		bl	uxListRemove
 1596              	.LVL156:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1597              		.loc 1 1595 0
 1598 0074 E36A     		ldr	r3, [r4, #44]
 1599 0076 164A     		ldr	r2, .L164+8
 1600 0078 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccuv3C2e.s 			page 123


 1601 007a 9342     		cmp	r3, r2
 1602 007c 01D9     		bls	.L156
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1603              		.loc 1 1595 0 is_stmt 0 discriminator 1
 1604 007e 144A     		ldr	r2, .L164+8
 1605 0080 1360     		str	r3, [r2]
 1606              	.L156:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1607              		.loc 1 1595 0 discriminator 3
 1608 0082 03EB8303 		add	r3, r3, r3, lsl #2
 1609 0086 9A00     		lsls	r2, r3, #2
 1610 0088 2946     		mov	r1, r5
 1611 008a 1048     		ldr	r0, .L164+4
 1612 008c 1044     		add	r0, r0, r2
 1613 008e FFF7FEFF 		bl	vListInsertEnd
 1614              	.LVL157:
 1615              	.L155:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1616              		.loc 1 1602 0 is_stmt 1
 1617 0092 3EB1     		cbz	r6, .L149
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1618              		.loc 1 1604 0
 1619 0094 4FF08052 		mov	r2, #268435456
 1620 0098 0E4B     		ldr	r3, .L164+12
 1621 009a 1A60     		str	r2, [r3]
 1622              		.syntax unified
 1623              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1624 009c BFF34F8F 		dsb
 1625              	@ 0 "" 2
 1626              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1627 00a0 BFF36F8F 		isb
 1628              	@ 0 "" 2
 1629              	.LVL158:
 1630              		.thumb
 1631              		.syntax unified
 1632              	.L149:
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1633              		.loc 1 1616 0
 1634 00a4 FFF7FEFF 		bl	vPortExitCritical
 1635              	.LVL159:
 1636 00a8 70BD     		pop	{r4, r5, r6, pc}
 1637              	.LVL160:
 1638              	.L150:
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1639              		.loc 1 1523 0
 1640 00aa 074B     		ldr	r3, .L164
 1641 00ac 1B68     		ldr	r3, [r3]
 1642 00ae 9C42     		cmp	r4, r3
 1643 00b0 05D0     		beq	.L160
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1644              		.loc 1 1464 0
 1645 00b2 0026     		movs	r6, #0
 1646 00b4 C5E7     		b	.L151
 1647              	.L158:
 1648 00b6 0026     		movs	r6, #0
 1649 00b8 C3E7     		b	.L151
 1650              	.L159:
ARM GAS  /tmp/ccuv3C2e.s 			page 124


1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1651              		.loc 1 1509 0
 1652 00ba 0126     		movs	r6, #1
 1653 00bc C1E7     		b	.L151
 1654              	.L160:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1655              		.loc 1 1528 0
 1656 00be 0126     		movs	r6, #1
 1657 00c0 BFE7     		b	.L151
 1658              	.LVL161:
 1659              	.L161:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1660              		.loc 1 1579 0
 1661 00c2 0023     		movs	r3, #0
 1662 00c4 D1E7     		b	.L154
 1663              	.L165:
 1664 00c6 00BF     		.align	2
 1665              	.L164:
 1666 00c8 00000000 		.word	.LANCHOR10
 1667 00cc 00000000 		.word	.LANCHOR4
 1668 00d0 00000000 		.word	.LANCHOR13
 1669 00d4 04ED00E0 		.word	-536810236
 1670              		.cfi_endproc
 1671              	.LFE14:
 1673              		.section	.text.vTaskResume,"ax",%progbits
 1674              		.align	1
 1675              		.global	vTaskResume
 1676              		.syntax unified
 1677              		.thumb
 1678              		.thumb_func
 1679              		.fpu softvfp
 1681              	vTaskResume:
 1682              	.LFB17:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1683              		.loc 1 1772 0
 1684              		.cfi_startproc
 1685              		@ args = 0, pretend = 0, frame = 0
 1686              		@ frame_needed = 0, uses_anonymous_args = 0
 1687              	.LVL162:
 1688 0000 38B5     		push	{r3, r4, r5, lr}
 1689              		.cfi_def_cfa_offset 16
 1690              		.cfi_offset 3, -16
 1691              		.cfi_offset 4, -12
 1692              		.cfi_offset 5, -8
 1693              		.cfi_offset 14, -4
 1694              	.LVL163:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1695              		.loc 1 1776 0
 1696 0002 68B1     		cbz	r0, .L173
 1697 0004 0446     		mov	r4, r0
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1698              		.loc 1 1780 0 discriminator 1
 1699 0006 1C4B     		ldr	r3, .L175
 1700 0008 1B68     		ldr	r3, [r3]
 1701 000a 9842     		cmp	r0, r3
 1702 000c 07D0     		beq	.L166
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccuv3C2e.s 			page 125


 1703              		.loc 1 1782 0
 1704 000e FFF7FEFF 		bl	vPortEnterCritical
 1705              	.LVL164:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1706              		.loc 1 1784 0
 1707 0012 2046     		mov	r0, r4
 1708 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1709              	.LVL165:
 1710 0018 58B9     		cbnz	r0, .L174
 1711              	.L170:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1712              		.loc 1 1811 0
 1713 001a FFF7FEFF 		bl	vPortExitCritical
 1714              	.LVL166:
 1715              	.L166:
 1716 001e 38BD     		pop	{r3, r4, r5, pc}
 1717              	.LVL167:
 1718              	.L173:
 1719              	.LBB138:
 1720              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1721              		.loc 2 195 0
 1722              		.syntax unified
 1723              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1724 0020 4FF05003 			mov r3, #80												
 1725 0024 83F31188 		msr basepri, r3											
 1726 0028 BFF36F8F 		isb														
 1727 002c BFF34F8F 		dsb														
 1728              	
 1729              	@ 0 "" 2
 1730              	.LVL168:
 1731              		.thumb
 1732              		.syntax unified
 1733              	.L168:
 1734 0030 FEE7     		b	.L168
 1735              	.LVL169:
 1736              	.L174:
 1737              	.LBE139:
 1738              	.LBE138:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1739              		.loc 1 1790 0
 1740 0032 251D     		adds	r5, r4, #4
 1741 0034 2846     		mov	r0, r5
 1742 0036 FFF7FEFF 		bl	uxListRemove
 1743              	.LVL170:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1744              		.loc 1 1791 0
 1745 003a E36A     		ldr	r3, [r4, #44]
 1746 003c 0F4A     		ldr	r2, .L175+4
 1747 003e 1268     		ldr	r2, [r2]
 1748 0040 9342     		cmp	r3, r2
 1749 0042 01D9     		bls	.L171
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1750              		.loc 1 1791 0 is_stmt 0 discriminator 1
 1751 0044 0D4A     		ldr	r2, .L175+4
 1752 0046 1360     		str	r3, [r2]
 1753              	.L171:
ARM GAS  /tmp/ccuv3C2e.s 			page 126


1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1754              		.loc 1 1791 0 discriminator 3
 1755 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1756 004c 9A00     		lsls	r2, r3, #2
 1757 004e 2946     		mov	r1, r5
 1758 0050 0B48     		ldr	r0, .L175+8
 1759 0052 1044     		add	r0, r0, r2
 1760 0054 FFF7FEFF 		bl	vListInsertEnd
 1761              	.LVL171:
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1762              		.loc 1 1794 0 is_stmt 1 discriminator 3
 1763 0058 E26A     		ldr	r2, [r4, #44]
 1764 005a 074B     		ldr	r3, .L175
 1765 005c 1B68     		ldr	r3, [r3]
 1766 005e DB6A     		ldr	r3, [r3, #44]
 1767 0060 9A42     		cmp	r2, r3
 1768 0062 DAD3     		bcc	.L170
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1769              		.loc 1 1799 0
 1770 0064 4FF08052 		mov	r2, #268435456
 1771 0068 064B     		ldr	r3, .L175+12
 1772 006a 1A60     		str	r2, [r3]
 1773              		.syntax unified
 1774              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1775 006c BFF34F8F 		dsb
 1776              	@ 0 "" 2
 1777              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1778 0070 BFF36F8F 		isb
 1779              	@ 0 "" 2
 1780              		.thumb
 1781              		.syntax unified
 1782 0074 D1E7     		b	.L170
 1783              	.L176:
 1784 0076 00BF     		.align	2
 1785              	.L175:
 1786 0078 00000000 		.word	.LANCHOR10
 1787 007c 00000000 		.word	.LANCHOR13
 1788 0080 00000000 		.word	.LANCHOR4
 1789 0084 04ED00E0 		.word	-536810236
 1790              		.cfi_endproc
 1791              	.LFE17:
 1793              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1794              		.align	1
 1795              		.global	xTaskResumeFromISR
 1796              		.syntax unified
 1797              		.thumb
 1798              		.thumb_func
 1799              		.fpu softvfp
 1801              	xTaskResumeFromISR:
 1802              	.LFB18:
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1803              		.loc 1 1826 0
 1804              		.cfi_startproc
 1805              		@ args = 0, pretend = 0, frame = 0
 1806              		@ frame_needed = 0, uses_anonymous_args = 0
 1807              	.LVL172:
 1808 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccuv3C2e.s 			page 127


 1809              		.cfi_def_cfa_offset 24
 1810              		.cfi_offset 3, -24
 1811              		.cfi_offset 4, -20
 1812              		.cfi_offset 5, -16
 1813              		.cfi_offset 6, -12
 1814              		.cfi_offset 7, -8
 1815              		.cfi_offset 14, -4
 1816              	.LVL173:
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1817              		.loc 1 1831 0
 1818 0002 0028     		cmp	r0, #0
 1819 0004 32D0     		beq	.L187
 1820 0006 0446     		mov	r4, r0
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1821              		.loc 1 1849 0
 1822 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1823              	.LVL174:
 1824              	.LBB140:
 1825              	.LBB141:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1826              		.loc 2 211 0
 1827              		.syntax unified
 1828              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1829 000c EFF31187 			mrs r7, basepri											
 1830 0010 4FF05003 		mov r3, #80												
 1831 0014 83F31188 		msr basepri, r3											
 1832 0018 BFF36F8F 		isb														
 1833 001c BFF34F8F 		dsb														
 1834              	
 1835              	@ 0 "" 2
 1836              		.thumb
 1837              		.syntax unified
 1838              	.LBE141:
 1839              	.LBE140:
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1840              		.loc 1 1853 0
 1841 0020 2046     		mov	r0, r4
 1842 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1843              	.LVL175:
 1844 0026 0028     		cmp	r0, #0
 1845 0028 32D0     		beq	.L184
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1846              		.loc 1 1858 0
 1847 002a 1A4B     		ldr	r3, .L188
 1848 002c 1B68     		ldr	r3, [r3]
 1849 002e 43BB     		cbnz	r3, .L181
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1850              		.loc 1 1862 0
 1851 0030 E26A     		ldr	r2, [r4, #44]
 1852 0032 194B     		ldr	r3, .L188+4
 1853 0034 1B68     		ldr	r3, [r3]
 1854 0036 DB6A     		ldr	r3, [r3, #44]
 1855 0038 9A42     		cmp	r2, r3
 1856 003a 20D2     		bcs	.L185
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1857              		.loc 1 1827 0
 1858 003c 0025     		movs	r5, #0
ARM GAS  /tmp/ccuv3C2e.s 			page 128


 1859              	.L182:
 1860              	.LVL176:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1861              		.loc 1 1871 0
 1862 003e 261D     		adds	r6, r4, #4
 1863 0040 3046     		mov	r0, r6
 1864 0042 FFF7FEFF 		bl	uxListRemove
 1865              	.LVL177:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1866              		.loc 1 1872 0
 1867 0046 E36A     		ldr	r3, [r4, #44]
 1868 0048 144A     		ldr	r2, .L188+8
 1869 004a 1268     		ldr	r2, [r2]
 1870 004c 9342     		cmp	r3, r2
 1871 004e 01D9     		bls	.L183
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1872              		.loc 1 1872 0 is_stmt 0 discriminator 1
 1873 0050 124A     		ldr	r2, .L188+8
 1874 0052 1360     		str	r3, [r2]
 1875              	.L183:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1876              		.loc 1 1872 0 discriminator 3
 1877 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1878 0058 9A00     		lsls	r2, r3, #2
 1879 005a 3146     		mov	r1, r6
 1880 005c 1048     		ldr	r0, .L188+12
 1881 005e 1044     		add	r0, r0, r2
 1882 0060 FFF7FEFF 		bl	vListInsertEnd
 1883              	.LVL178:
 1884              	.L180:
 1885              	.LBB142:
 1886              	.LBB143:
 1887              		.loc 2 229 0 is_stmt 1
 1888              		.syntax unified
 1889              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1890 0064 87F31188 			msr basepri, r7	
 1891              	@ 0 "" 2
 1892              	.LVL179:
 1893              		.thumb
 1894              		.syntax unified
 1895              	.LBE143:
 1896              	.LBE142:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1897              		.loc 1 1890 0
 1898 0068 2846     		mov	r0, r5
 1899 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1900              	.LVL180:
 1901              	.L187:
 1902              	.LBB144:
 1903              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1904              		.loc 2 195 0
 1905              		.syntax unified
 1906              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1907 006c 4FF05003 			mov r3, #80												
 1908 0070 83F31188 		msr basepri, r3											
 1909 0074 BFF36F8F 		isb														
ARM GAS  /tmp/ccuv3C2e.s 			page 129


 1910 0078 BFF34F8F 		dsb														
 1911              	
 1912              	@ 0 "" 2
 1913              	.LVL181:
 1914              		.thumb
 1915              		.syntax unified
 1916              	.L179:
 1917 007c FEE7     		b	.L179
 1918              	.LVL182:
 1919              	.L185:
 1920              	.LBE145:
 1921              	.LBE144:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1922              		.loc 1 1864 0
 1923 007e 0125     		movs	r5, #1
 1924 0080 DDE7     		b	.L182
 1925              	.L181:
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1926              		.loc 1 1879 0
 1927 0082 04F11801 		add	r1, r4, #24
 1928 0086 0748     		ldr	r0, .L188+16
 1929 0088 FFF7FEFF 		bl	vListInsertEnd
 1930              	.LVL183:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1931              		.loc 1 1827 0
 1932 008c 0025     		movs	r5, #0
 1933 008e E9E7     		b	.L180
 1934              	.L184:
 1935 0090 0025     		movs	r5, #0
 1936 0092 E7E7     		b	.L180
 1937              	.L189:
 1938              		.align	2
 1939              	.L188:
 1940 0094 00000000 		.word	.LANCHOR16
 1941 0098 00000000 		.word	.LANCHOR10
 1942 009c 00000000 		.word	.LANCHOR13
 1943 00a0 00000000 		.word	.LANCHOR4
 1944 00a4 00000000 		.word	.LANCHOR1
 1945              		.cfi_endproc
 1946              	.LFE18:
 1948              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1949              		.align	1
 1950              		.global	vTaskStartScheduler
 1951              		.syntax unified
 1952              		.thumb
 1953              		.thumb_func
 1954              		.fpu softvfp
 1956              	vTaskStartScheduler:
 1957              	.LFB19:
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1958              		.loc 1 1896 0
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 16
 1961              		@ frame_needed = 0, uses_anonymous_args = 0
 1962 0000 10B5     		push	{r4, lr}
 1963              		.cfi_def_cfa_offset 8
 1964              		.cfi_offset 4, -8
ARM GAS  /tmp/ccuv3C2e.s 			page 130


 1965              		.cfi_offset 14, -4
 1966 0002 88B0     		sub	sp, sp, #32
 1967              		.cfi_def_cfa_offset 40
 1968              	.LBB146:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1969              		.loc 1 1902 0
 1970 0004 0024     		movs	r4, #0
 1971 0006 0594     		str	r4, [sp, #20]
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1972              		.loc 1 1903 0
 1973 0008 0694     		str	r4, [sp, #24]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1974              		.loc 1 1908 0
 1975 000a 07AA     		add	r2, sp, #28
 1976 000c 06A9     		add	r1, sp, #24
 1977 000e 05A8     		add	r0, sp, #20
 1978 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1979              	.LVL184:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1980              		.loc 1 1909 0
 1981 0014 059B     		ldr	r3, [sp, #20]
 1982 0016 0293     		str	r3, [sp, #8]
 1983 0018 069B     		ldr	r3, [sp, #24]
 1984 001a 0193     		str	r3, [sp, #4]
 1985 001c 0094     		str	r4, [sp]
 1986 001e 2346     		mov	r3, r4
 1987 0020 079A     		ldr	r2, [sp, #28]
 1988 0022 1949     		ldr	r1, .L201
 1989 0024 1948     		ldr	r0, .L201+4
 1990 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1991              	.LVL185:
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1992              		.loc 1 1917 0
 1993 002a 48B1     		cbz	r0, .L196
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1994              		.loc 1 1919 0
 1995 002c 0120     		movs	r0, #1
 1996              	.L191:
 1997              	.LVL186:
 1998              	.LBE146:
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1999              		.loc 1 1940 0
 2000 002e 0128     		cmp	r0, #1
 2001 0030 08D0     		beq	.L198
 2002              	.L192:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2003              		.loc 1 1951 0
 2004 0032 0128     		cmp	r0, #1
 2005 0034 09D0     		beq	.L199
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2006              		.loc 1 2006 0
 2007 0036 B0F1FF3F 		cmp	r0, #-1
 2008 003a 1BD0     		beq	.L200
 2009              	.LVL187:
 2010              	.L190:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2011              		.loc 1 2012 0
ARM GAS  /tmp/ccuv3C2e.s 			page 131


 2012 003c 08B0     		add	sp, sp, #32
 2013              		.cfi_remember_state
 2014              		.cfi_def_cfa_offset 8
 2015              		@ sp needed
 2016 003e 10BD     		pop	{r4, pc}
 2017              	.L196:
 2018              		.cfi_restore_state
 2019              	.LBB147:
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2020              		.loc 1 1923 0
 2021 0040 0020     		movs	r0, #0
 2022 0042 F4E7     		b	.L191
 2023              	.LVL188:
 2024              	.L198:
 2025              	.LBE147:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2026              		.loc 1 1942 0
 2027 0044 FFF7FEFF 		bl	xTimerCreateTimerTask
 2028              	.LVL189:
 2029 0048 F3E7     		b	.L192
 2030              	.L199:
 2031              	.LBB148:
 2032              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2033              		.loc 2 195 0
 2034              		.syntax unified
 2035              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2036 004a 4FF05003 			mov r3, #80												
 2037 004e 83F31188 		msr basepri, r3											
 2038 0052 BFF36F8F 		isb														
 2039 0056 BFF34F8F 		dsb														
 2040              	
 2041              	@ 0 "" 2
 2042              		.thumb
 2043              		.syntax unified
 2044              	.LBE149:
 2045              	.LBE148:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2046              		.loc 1 1977 0
 2047 005a 4FF0FF32 		mov	r2, #-1
 2048 005e 0C4B     		ldr	r3, .L201+8
 2049 0060 1A60     		str	r2, [r3]
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2050              		.loc 1 1978 0
 2051 0062 0122     		movs	r2, #1
 2052 0064 0B4B     		ldr	r3, .L201+12
 2053 0066 1A60     		str	r2, [r3]
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2054              		.loc 1 1979 0
 2055 0068 0022     		movs	r2, #0
 2056 006a 0B4B     		ldr	r3, .L201+16
 2057 006c 1A60     		str	r2, [r3]
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2058              		.loc 1 1991 0
 2059 006e FFF7FEFF 		bl	xPortStartScheduler
 2060              	.LVL190:
 2061 0072 E3E7     		b	.L190
ARM GAS  /tmp/ccuv3C2e.s 			page 132


 2062              	.LVL191:
 2063              	.L200:
 2064              	.LBB150:
 2065              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2066              		.loc 2 195 0
 2067              		.syntax unified
 2068              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2069 0074 4FF05003 			mov r3, #80												
 2070 0078 83F31188 		msr basepri, r3											
 2071 007c BFF36F8F 		isb														
 2072 0080 BFF34F8F 		dsb														
 2073              	
 2074              	@ 0 "" 2
 2075              	.LVL192:
 2076              		.thumb
 2077              		.syntax unified
 2078              	.L195:
 2079 0084 FEE7     		b	.L195
 2080              	.L202:
 2081 0086 00BF     		.align	2
 2082              	.L201:
 2083 0088 00000000 		.word	.LC0
 2084 008c 00000000 		.word	prvIdleTask
 2085 0090 00000000 		.word	.LANCHOR3
 2086 0094 00000000 		.word	.LANCHOR11
 2087 0098 00000000 		.word	.LANCHOR15
 2088              	.LBE151:
 2089              	.LBE150:
 2090              		.cfi_endproc
 2091              	.LFE19:
 2093              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2094              		.align	1
 2095              		.global	vTaskEndScheduler
 2096              		.syntax unified
 2097              		.thumb
 2098              		.thumb_func
 2099              		.fpu softvfp
 2101              	vTaskEndScheduler:
 2102              	.LFB20:
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2103              		.loc 1 2016 0
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 0
 2106              		@ frame_needed = 0, uses_anonymous_args = 0
 2107 0000 08B5     		push	{r3, lr}
 2108              		.cfi_def_cfa_offset 8
 2109              		.cfi_offset 3, -8
 2110              		.cfi_offset 14, -4
 2111              	.LBB152:
 2112              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2113              		.loc 2 195 0
 2114              		.syntax unified
 2115              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2116 0002 4FF05003 			mov r3, #80												
 2117 0006 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccuv3C2e.s 			page 133


 2118 000a BFF36F8F 		isb														
 2119 000e BFF34F8F 		dsb														
 2120              	
 2121              	@ 0 "" 2
 2122              		.thumb
 2123              		.syntax unified
 2124              	.LBE153:
 2125              	.LBE152:
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2126              		.loc 1 2021 0
 2127 0012 0022     		movs	r2, #0
 2128 0014 024B     		ldr	r3, .L205
 2129 0016 1A60     		str	r2, [r3]
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2130              		.loc 1 2022 0
 2131 0018 FFF7FEFF 		bl	vPortEndScheduler
 2132              	.LVL193:
 2133 001c 08BD     		pop	{r3, pc}
 2134              	.L206:
 2135 001e 00BF     		.align	2
 2136              	.L205:
 2137 0020 00000000 		.word	.LANCHOR11
 2138              		.cfi_endproc
 2139              	.LFE20:
 2141              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2142              		.align	1
 2143              		.global	vTaskSuspendAll
 2144              		.syntax unified
 2145              		.thumb
 2146              		.thumb_func
 2147              		.fpu softvfp
 2149              	vTaskSuspendAll:
 2150              	.LFB21:
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2151              		.loc 1 2027 0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 0
 2154              		@ frame_needed = 0, uses_anonymous_args = 0
 2155              		@ link register save eliminated.
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2156              		.loc 1 2032 0
 2157 0000 024A     		ldr	r2, .L208
 2158 0002 1368     		ldr	r3, [r2]
 2159 0004 0133     		adds	r3, r3, #1
 2160 0006 1360     		str	r3, [r2]
 2161 0008 7047     		bx	lr
 2162              	.L209:
 2163 000a 00BF     		.align	2
 2164              	.L208:
 2165 000c 00000000 		.word	.LANCHOR16
 2166              		.cfi_endproc
 2167              	.LFE21:
 2169              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2170              		.align	1
 2171              		.global	xTaskGetTickCount
 2172              		.syntax unified
 2173              		.thumb
ARM GAS  /tmp/ccuv3C2e.s 			page 134


 2174              		.thumb_func
 2175              		.fpu softvfp
 2177              	xTaskGetTickCount:
 2178              	.LFB23:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2179              		.loc 1 2210 0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 0
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
 2183              		@ link register save eliminated.
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2184              		.loc 1 2216 0
 2185 0000 014B     		ldr	r3, .L211
 2186 0002 1868     		ldr	r0, [r3]
 2187              	.LVL194:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2188              		.loc 1 2221 0
 2189 0004 7047     		bx	lr
 2190              	.L212:
 2191 0006 00BF     		.align	2
 2192              	.L211:
 2193 0008 00000000 		.word	.LANCHOR15
 2194              		.cfi_endproc
 2195              	.LFE23:
 2197              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2198              		.align	1
 2199              		.global	xTaskGetTickCountFromISR
 2200              		.syntax unified
 2201              		.thumb
 2202              		.thumb_func
 2203              		.fpu softvfp
 2205              	xTaskGetTickCountFromISR:
 2206              	.LFB24:
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2207              		.loc 1 2225 0
 2208              		.cfi_startproc
 2209              		@ args = 0, pretend = 0, frame = 0
 2210              		@ frame_needed = 0, uses_anonymous_args = 0
 2211 0000 08B5     		push	{r3, lr}
 2212              		.cfi_def_cfa_offset 8
 2213              		.cfi_offset 3, -8
 2214              		.cfi_offset 14, -4
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2215              		.loc 1 2243 0
 2216 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2217              	.LVL195:
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2218              		.loc 1 2247 0
 2219 0006 014B     		ldr	r3, .L215
 2220 0008 1868     		ldr	r0, [r3]
 2221              	.LVL196:
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2222              		.loc 1 2252 0
 2223 000a 08BD     		pop	{r3, pc}
 2224              	.L216:
 2225              		.align	2
 2226              	.L215:
ARM GAS  /tmp/ccuv3C2e.s 			page 135


 2227 000c 00000000 		.word	.LANCHOR15
 2228              		.cfi_endproc
 2229              	.LFE24:
 2231              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2232              		.align	1
 2233              		.global	uxTaskGetNumberOfTasks
 2234              		.syntax unified
 2235              		.thumb
 2236              		.thumb_func
 2237              		.fpu softvfp
 2239              	uxTaskGetNumberOfTasks:
 2240              	.LFB25:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2241              		.loc 1 2256 0
 2242              		.cfi_startproc
 2243              		@ args = 0, pretend = 0, frame = 0
 2244              		@ frame_needed = 0, uses_anonymous_args = 0
 2245              		@ link register save eliminated.
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2246              		.loc 1 2259 0
 2247 0000 014B     		ldr	r3, .L218
 2248 0002 1868     		ldr	r0, [r3]
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2249              		.loc 1 2260 0
 2250 0004 7047     		bx	lr
 2251              	.L219:
 2252 0006 00BF     		.align	2
 2253              	.L218:
 2254 0008 00000000 		.word	.LANCHOR9
 2255              		.cfi_endproc
 2256              	.LFE25:
 2258              		.section	.text.pcTaskGetName,"ax",%progbits
 2259              		.align	1
 2260              		.global	pcTaskGetName
 2261              		.syntax unified
 2262              		.thumb
 2263              		.thumb_func
 2264              		.fpu softvfp
 2266              	pcTaskGetName:
 2267              	.LFB26:
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2268              		.loc 1 2264 0
 2269              		.cfi_startproc
 2270              		@ args = 0, pretend = 0, frame = 0
 2271              		@ frame_needed = 0, uses_anonymous_args = 0
 2272              		@ link register save eliminated.
 2273              	.LVL197:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2274              		.loc 1 2269 0
 2275 0000 10B1     		cbz	r0, .L225
 2276              	.LVL198:
 2277              	.L221:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2278              		.loc 1 2270 0 discriminator 4
 2279 0002 20B1     		cbz	r0, .L226
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2280              		.loc 1 2272 0
ARM GAS  /tmp/ccuv3C2e.s 			page 136


 2281 0004 3430     		adds	r0, r0, #52
 2282              	.LVL199:
 2283 0006 7047     		bx	lr
 2284              	.LVL200:
 2285              	.L225:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2286              		.loc 1 2269 0 discriminator 1
 2287 0008 054B     		ldr	r3, .L227
 2288 000a 1868     		ldr	r0, [r3]
 2289              	.LVL201:
 2290 000c F9E7     		b	.L221
 2291              	.LVL202:
 2292              	.L226:
 2293              	.LBB154:
 2294              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2295              		.loc 2 195 0
 2296              		.syntax unified
 2297              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2298 000e 4FF05003 			mov r3, #80												
 2299 0012 83F31188 		msr basepri, r3											
 2300 0016 BFF36F8F 		isb														
 2301 001a BFF34F8F 		dsb														
 2302              	
 2303              	@ 0 "" 2
 2304              	.LVL203:
 2305              		.thumb
 2306              		.syntax unified
 2307              	.L223:
 2308 001e FEE7     		b	.L223
 2309              	.L228:
 2310              		.align	2
 2311              	.L227:
 2312 0020 00000000 		.word	.LANCHOR10
 2313              	.LBE155:
 2314              	.LBE154:
 2315              		.cfi_endproc
 2316              	.LFE26:
 2318              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2319              		.align	1
 2320              		.global	xTaskIncrementTick
 2321              		.syntax unified
 2322              		.thumb
 2323              		.thumb_func
 2324              		.fpu softvfp
 2326              	xTaskIncrementTick:
 2327              	.LFB28:
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2328              		.loc 1 2584 0
 2329              		.cfi_startproc
 2330              		@ args = 0, pretend = 0, frame = 0
 2331              		@ frame_needed = 0, uses_anonymous_args = 0
 2332 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2333              		.cfi_def_cfa_offset 24
 2334              		.cfi_offset 3, -24
 2335              		.cfi_offset 4, -20
 2336              		.cfi_offset 5, -16
ARM GAS  /tmp/ccuv3C2e.s 			page 137


 2337              		.cfi_offset 6, -12
 2338              		.cfi_offset 7, -8
 2339              		.cfi_offset 14, -4
 2340              	.LVL204:
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2341              		.loc 1 2593 0
 2342 0002 3C4B     		ldr	r3, .L254
 2343 0004 1B68     		ldr	r3, [r3]
 2344 0006 002B     		cmp	r3, #0
 2345 0008 68D1     		bne	.L230
 2346              	.LBB156:
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2347              		.loc 1 2597 0
 2348 000a 3B4B     		ldr	r3, .L254+4
 2349 000c 1D68     		ldr	r5, [r3]
 2350 000e 0135     		adds	r5, r5, #1
 2351              	.LVL205:
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2352              		.loc 1 2601 0
 2353 0010 1D60     		str	r5, [r3]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2354              		.loc 1 2603 0
 2355 0012 C5B9     		cbnz	r5, .L231
 2356              	.LBB157:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2357              		.loc 1 2605 0
 2358 0014 394B     		ldr	r3, .L254+8
 2359 0016 1B68     		ldr	r3, [r3]
 2360 0018 1B68     		ldr	r3, [r3]
 2361 001a 43B1     		cbz	r3, .L232
 2362              	.LBB158:
 2363              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2364              		.loc 2 195 0
 2365              		.syntax unified
 2366              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2367 001c 4FF05003 			mov r3, #80												
 2368 0020 83F31188 		msr basepri, r3											
 2369 0024 BFF36F8F 		isb														
 2370 0028 BFF34F8F 		dsb														
 2371              	
 2372              	@ 0 "" 2
 2373              	.LVL206:
 2374              		.thumb
 2375              		.syntax unified
 2376              	.L233:
 2377 002c FEE7     		b	.L233
 2378              	.L232:
 2379              	.LBE159:
 2380              	.LBE158:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2381              		.loc 1 2605 0 discriminator 2
 2382 002e 334A     		ldr	r2, .L254+8
 2383 0030 1168     		ldr	r1, [r2]
 2384              	.LVL207:
 2385 0032 334B     		ldr	r3, .L254+12
 2386 0034 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccuv3C2e.s 			page 138


 2387 0036 1060     		str	r0, [r2]
 2388 0038 1960     		str	r1, [r3]
 2389 003a 324A     		ldr	r2, .L254+16
 2390 003c 1368     		ldr	r3, [r2]
 2391 003e 0133     		adds	r3, r3, #1
 2392 0040 1360     		str	r3, [r2]
 2393 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2394              	.LVL208:
 2395              	.L231:
 2396              	.LBE157:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2397              		.loc 1 2616 0
 2398 0046 304B     		ldr	r3, .L254+20
 2399 0048 1B68     		ldr	r3, [r3]
 2400 004a 9D42     		cmp	r5, r3
 2401 004c 3AD2     		bcs	.L245
 2402              	.LBE156:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2403              		.loc 1 2587 0
 2404 004e 0024     		movs	r4, #0
 2405              	.LVL209:
 2406              	.L235:
 2407              	.LBB160:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2408              		.loc 1 2699 0
 2409 0050 2E4B     		ldr	r3, .L254+24
 2410 0052 1B68     		ldr	r3, [r3]
 2411 0054 DB6A     		ldr	r3, [r3, #44]
 2412 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2413 005a 9A00     		lsls	r2, r3, #2
 2414 005c 2C4B     		ldr	r3, .L254+28
 2415 005e 9B58     		ldr	r3, [r3, r2]
 2416 0060 012B     		cmp	r3, #1
 2417 0062 40D9     		bls	.L243
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2418              		.loc 1 2701 0
 2419 0064 0124     		movs	r4, #1
 2420              	.LVL210:
 2421 0066 3EE0     		b	.L243
 2422              	.LVL211:
 2423              	.L247:
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2424              		.loc 1 2682 0
 2425 0068 0124     		movs	r4, #1
 2426              	.LVL212:
 2427              	.L234:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2428              		.loc 1 2620 0
 2429 006a 244B     		ldr	r3, .L254+8
 2430 006c 1B68     		ldr	r3, [r3]
 2431 006e 1B68     		ldr	r3, [r3]
 2432 0070 53B3     		cbz	r3, .L251
 2433 0072 0023     		movs	r3, #0
 2434              	.L236:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2435              		.loc 1 2620 0 is_stmt 0 discriminator 4
 2436 0074 53BB     		cbnz	r3, .L252
ARM GAS  /tmp/ccuv3C2e.s 			page 139


2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2437              		.loc 1 2636 0 is_stmt 1
 2438 0076 214B     		ldr	r3, .L254+8
 2439 0078 1B68     		ldr	r3, [r3]
 2440 007a DB68     		ldr	r3, [r3, #12]
 2441 007c DE68     		ldr	r6, [r3, #12]
 2442              	.LVL213:
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2443              		.loc 1 2637 0
 2444 007e 7368     		ldr	r3, [r6, #4]
 2445              	.LVL214:
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2446              		.loc 1 2639 0
 2447 0080 9D42     		cmp	r5, r3
 2448 0082 28D3     		bcc	.L253
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2449              		.loc 1 2655 0
 2450 0084 371D     		adds	r7, r6, #4
 2451 0086 3846     		mov	r0, r7
 2452 0088 FFF7FEFF 		bl	uxListRemove
 2453              	.LVL215:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2454              		.loc 1 2659 0
 2455 008c B36A     		ldr	r3, [r6, #40]
 2456 008e 1BB1     		cbz	r3, .L239
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2457              		.loc 1 2661 0
 2458 0090 06F11800 		add	r0, r6, #24
 2459 0094 FFF7FEFF 		bl	uxListRemove
 2460              	.LVL216:
 2461              	.L239:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2462              		.loc 1 2670 0
 2463 0098 F36A     		ldr	r3, [r6, #44]
 2464 009a 1E4A     		ldr	r2, .L254+32
 2465 009c 1268     		ldr	r2, [r2]
 2466 009e 9342     		cmp	r3, r2
 2467 00a0 01D9     		bls	.L240
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2468              		.loc 1 2670 0 is_stmt 0 discriminator 1
 2469 00a2 1C4A     		ldr	r2, .L254+32
 2470 00a4 1360     		str	r3, [r2]
 2471              	.L240:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2472              		.loc 1 2670 0 discriminator 3
 2473 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 2474 00aa 9A00     		lsls	r2, r3, #2
 2475 00ac 3946     		mov	r1, r7
 2476 00ae 1848     		ldr	r0, .L254+28
 2477 00b0 1044     		add	r0, r0, r2
 2478 00b2 FFF7FEFF 		bl	vListInsertEnd
 2479              	.LVL217:
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2480              		.loc 1 2680 0 is_stmt 1 discriminator 3
 2481 00b6 F26A     		ldr	r2, [r6, #44]
 2482 00b8 144B     		ldr	r3, .L254+24
 2483 00ba 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccuv3C2e.s 			page 140


 2484 00bc DB6A     		ldr	r3, [r3, #44]
 2485 00be 9A42     		cmp	r2, r3
 2486 00c0 D2D2     		bcs	.L247
 2487 00c2 D2E7     		b	.L234
 2488              	.LVL218:
 2489              	.L245:
 2490 00c4 0024     		movs	r4, #0
 2491 00c6 D0E7     		b	.L234
 2492              	.LVL219:
 2493              	.L251:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2494              		.loc 1 2620 0
 2495 00c8 0123     		movs	r3, #1
 2496 00ca D3E7     		b	.L236
 2497              	.L252:
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2498              		.loc 1 2627 0
 2499 00cc 4FF0FF32 		mov	r2, #-1
 2500 00d0 0D4B     		ldr	r3, .L254+20
 2501 00d2 1A60     		str	r2, [r3]
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2502              		.loc 1 2628 0
 2503 00d4 BCE7     		b	.L235
 2504              	.LVL220:
 2505              	.L253:
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2506              		.loc 1 2646 0
 2507 00d6 0C4A     		ldr	r2, .L254+20
 2508 00d8 1360     		str	r3, [r2]
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2509              		.loc 1 2647 0
 2510 00da B9E7     		b	.L235
 2511              	.LVL221:
 2512              	.L230:
 2513              	.LBE160:
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2514              		.loc 1 2727 0
 2515 00dc 0E4A     		ldr	r2, .L254+36
 2516 00de 1368     		ldr	r3, [r2]
 2517 00e0 0133     		adds	r3, r3, #1
 2518 00e2 1360     		str	r3, [r2]
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2519              		.loc 1 2587 0
 2520 00e4 0024     		movs	r4, #0
 2521              	.LVL222:
 2522              	.L243:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2523              		.loc 1 2740 0
 2524 00e6 0D4B     		ldr	r3, .L254+40
 2525 00e8 1B68     		ldr	r3, [r3]
 2526 00ea 03B1     		cbz	r3, .L229
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2527              		.loc 1 2742 0
 2528 00ec 0124     		movs	r4, #1
 2529              	.LVL223:
 2530              	.L229:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccuv3C2e.s 			page 141


 2531              		.loc 1 2752 0
 2532 00ee 2046     		mov	r0, r4
 2533 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2534              	.L255:
 2535 00f2 00BF     		.align	2
 2536              	.L254:
 2537 00f4 00000000 		.word	.LANCHOR16
 2538 00f8 00000000 		.word	.LANCHOR15
 2539 00fc 00000000 		.word	.LANCHOR2
 2540 0100 00000000 		.word	.LANCHOR8
 2541 0104 00000000 		.word	.LANCHOR17
 2542 0108 00000000 		.word	.LANCHOR3
 2543 010c 00000000 		.word	.LANCHOR10
 2544 0110 00000000 		.word	.LANCHOR4
 2545 0114 00000000 		.word	.LANCHOR13
 2546 0118 00000000 		.word	.LANCHOR18
 2547 011c 00000000 		.word	.LANCHOR19
 2548              		.cfi_endproc
 2549              	.LFE28:
 2551              		.section	.text.xTaskResumeAll,"ax",%progbits
 2552              		.align	1
 2553              		.global	xTaskResumeAll
 2554              		.syntax unified
 2555              		.thumb
 2556              		.thumb_func
 2557              		.fpu softvfp
 2559              	xTaskResumeAll:
 2560              	.LFB22:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2561              		.loc 1 2100 0
 2562              		.cfi_startproc
 2563              		@ args = 0, pretend = 0, frame = 0
 2564              		@ frame_needed = 0, uses_anonymous_args = 0
 2565 0000 38B5     		push	{r3, r4, r5, lr}
 2566              		.cfi_def_cfa_offset 16
 2567              		.cfi_offset 3, -16
 2568              		.cfi_offset 4, -12
 2569              		.cfi_offset 5, -8
 2570              		.cfi_offset 14, -4
 2571              	.LVL224:
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2572              		.loc 1 2106 0
 2573 0002 354B     		ldr	r3, .L274
 2574 0004 1B68     		ldr	r3, [r3]
 2575 0006 43B9     		cbnz	r3, .L257
 2576              	.LBB161:
 2577              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2578              		.loc 2 195 0
 2579              		.syntax unified
 2580              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2581 0008 4FF05003 			mov r3, #80												
 2582 000c 83F31188 		msr basepri, r3											
 2583 0010 BFF36F8F 		isb														
 2584 0014 BFF34F8F 		dsb														
 2585              	
 2586              	@ 0 "" 2
ARM GAS  /tmp/ccuv3C2e.s 			page 142


 2587              	.LVL225:
 2588              		.thumb
 2589              		.syntax unified
 2590              	.L258:
 2591 0018 FEE7     		b	.L258
 2592              	.L257:
 2593              	.LBE162:
 2594              	.LBE161:
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2595              		.loc 1 2113 0
 2596 001a FFF7FEFF 		bl	vPortEnterCritical
 2597              	.LVL226:
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2598              		.loc 1 2115 0
 2599 001e 2E4B     		ldr	r3, .L274
 2600 0020 1A68     		ldr	r2, [r3]
 2601 0022 013A     		subs	r2, r2, #1
 2602 0024 1A60     		str	r2, [r3]
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2603              		.loc 1 2117 0
 2604 0026 1B68     		ldr	r3, [r3]
 2605 0028 002B     		cmp	r3, #0
 2606 002a 50D1     		bne	.L268
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2607              		.loc 1 2119 0
 2608 002c 2B4B     		ldr	r3, .L274+4
 2609 002e 1B68     		ldr	r3, [r3]
 2610 0030 23B9     		cbnz	r3, .L269
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2611              		.loc 1 2102 0
 2612 0032 0024     		movs	r4, #0
 2613              	.LVL227:
 2614              	.L259:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2615              		.loc 1 2203 0
 2616 0034 FFF7FEFF 		bl	vPortExitCritical
 2617              	.LVL228:
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2618              		.loc 1 2206 0
 2619 0038 2046     		mov	r0, r4
 2620 003a 38BD     		pop	{r3, r4, r5, pc}
 2621              	.LVL229:
 2622              	.L269:
 2623 003c 0024     		movs	r4, #0
 2624              	.LVL230:
 2625              	.L260:
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2626              		.loc 1 2123 0
 2627 003e 284B     		ldr	r3, .L274+8
 2628 0040 1B68     		ldr	r3, [r3]
 2629 0042 1BB3     		cbz	r3, .L272
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2630              		.loc 1 2125 0
 2631 0044 264B     		ldr	r3, .L274+8
 2632 0046 DB68     		ldr	r3, [r3, #12]
 2633 0048 DC68     		ldr	r4, [r3, #12]
 2634              	.LVL231:
ARM GAS  /tmp/ccuv3C2e.s 			page 143


2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2635              		.loc 1 2126 0
 2636 004a 04F11800 		add	r0, r4, #24
 2637 004e FFF7FEFF 		bl	uxListRemove
 2638              	.LVL232:
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2639              		.loc 1 2127 0
 2640 0052 251D     		adds	r5, r4, #4
 2641 0054 2846     		mov	r0, r5
 2642 0056 FFF7FEFF 		bl	uxListRemove
 2643              	.LVL233:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2644              		.loc 1 2128 0
 2645 005a E36A     		ldr	r3, [r4, #44]
 2646 005c 214A     		ldr	r2, .L274+12
 2647 005e 1268     		ldr	r2, [r2]
 2648 0060 9342     		cmp	r3, r2
 2649 0062 01D9     		bls	.L261
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2650              		.loc 1 2128 0 is_stmt 0 discriminator 1
 2651 0064 1F4A     		ldr	r2, .L274+12
 2652 0066 1360     		str	r3, [r2]
 2653              	.L261:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2654              		.loc 1 2128 0 discriminator 3
 2655 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2656 006c 9A00     		lsls	r2, r3, #2
 2657 006e 2946     		mov	r1, r5
 2658 0070 1D48     		ldr	r0, .L274+16
 2659 0072 1044     		add	r0, r0, r2
 2660 0074 FFF7FEFF 		bl	vListInsertEnd
 2661              	.LVL234:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2662              		.loc 1 2132 0 is_stmt 1 discriminator 3
 2663 0078 E26A     		ldr	r2, [r4, #44]
 2664 007a 1C4B     		ldr	r3, .L274+20
 2665 007c 1B68     		ldr	r3, [r3]
 2666 007e DB6A     		ldr	r3, [r3, #44]
 2667 0080 9A42     		cmp	r2, r3
 2668 0082 DCD3     		bcc	.L260
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2669              		.loc 1 2134 0
 2670 0084 0122     		movs	r2, #1
 2671 0086 1A4B     		ldr	r3, .L274+24
 2672 0088 1A60     		str	r2, [r3]
 2673 008a D8E7     		b	.L260
 2674              	.L272:
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2675              		.loc 1 2142 0
 2676 008c 0CB1     		cbz	r4, .L264
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2677              		.loc 1 2150 0
 2678 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2679              	.LVL235:
 2680              	.L264:
 2681              	.LBB163:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 144


 2682              		.loc 1 2158 0
 2683 0092 184B     		ldr	r3, .L274+28
 2684 0094 1C68     		ldr	r4, [r3]
 2685              	.LVL236:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2686              		.loc 1 2160 0
 2687 0096 74B9     		cbnz	r4, .L267
 2688              	.L265:
 2689              	.LBE163:
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2690              		.loc 1 2183 0
 2691 0098 154B     		ldr	r3, .L274+24
 2692 009a 1B68     		ldr	r3, [r3]
 2693 009c CBB1     		cbz	r3, .L270
 2694              	.LVL237:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2695              		.loc 1 2190 0
 2696 009e 4FF08052 		mov	r2, #268435456
 2697 00a2 154B     		ldr	r3, .L274+32
 2698 00a4 1A60     		str	r2, [r3]
 2699              		.syntax unified
 2700              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2701 00a6 BFF34F8F 		dsb
 2702              	@ 0 "" 2
 2703              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2704 00aa BFF36F8F 		isb
 2705              	@ 0 "" 2
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2706              		.loc 1 2187 0
 2707              		.thumb
 2708              		.syntax unified
 2709 00ae 0124     		movs	r4, #1
 2710              	.LVL238:
 2711 00b0 C0E7     		b	.L259
 2712              	.LVL239:
 2713              	.L266:
 2714              	.LBB164:
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2715              		.loc 1 2173 0
 2716 00b2 013C     		subs	r4, r4, #1
 2717              	.LVL240:
 2718 00b4 07D0     		beq	.L273
 2719              	.L267:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2720              		.loc 1 2164 0
 2721 00b6 FFF7FEFF 		bl	xTaskIncrementTick
 2722              	.LVL241:
 2723 00ba 0028     		cmp	r0, #0
 2724 00bc F9D0     		beq	.L266
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2725              		.loc 1 2166 0
 2726 00be 0122     		movs	r2, #1
 2727 00c0 0B4B     		ldr	r3, .L274+24
 2728 00c2 1A60     		str	r2, [r3]
 2729 00c4 F5E7     		b	.L266
 2730              	.L273:
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccuv3C2e.s 			page 145


 2731              		.loc 1 2175 0
 2732 00c6 0022     		movs	r2, #0
 2733 00c8 0A4B     		ldr	r3, .L274+28
 2734 00ca 1A60     		str	r2, [r3]
 2735 00cc E4E7     		b	.L265
 2736              	.LVL242:
 2737              	.L268:
 2738              	.LBE164:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2739              		.loc 1 2102 0
 2740 00ce 0024     		movs	r4, #0
 2741 00d0 B0E7     		b	.L259
 2742              	.LVL243:
 2743              	.L270:
 2744 00d2 0024     		movs	r4, #0
 2745              	.LVL244:
 2746 00d4 AEE7     		b	.L259
 2747              	.L275:
 2748 00d6 00BF     		.align	2
 2749              	.L274:
 2750 00d8 00000000 		.word	.LANCHOR16
 2751 00dc 00000000 		.word	.LANCHOR9
 2752 00e0 00000000 		.word	.LANCHOR1
 2753 00e4 00000000 		.word	.LANCHOR13
 2754 00e8 00000000 		.word	.LANCHOR4
 2755 00ec 00000000 		.word	.LANCHOR10
 2756 00f0 00000000 		.word	.LANCHOR19
 2757 00f4 00000000 		.word	.LANCHOR18
 2758 00f8 04ED00E0 		.word	-536810236
 2759              		.cfi_endproc
 2760              	.LFE22:
 2762              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2763              		.align	1
 2764              		.global	vTaskDelayUntil
 2765              		.syntax unified
 2766              		.thumb
 2767              		.thumb_func
 2768              		.fpu softvfp
 2770              	vTaskDelayUntil:
 2771              	.LFB9:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2772              		.loc 1 1199 0
 2773              		.cfi_startproc
 2774              		@ args = 0, pretend = 0, frame = 0
 2775              		@ frame_needed = 0, uses_anonymous_args = 0
 2776              	.LVL245:
 2777 0000 38B5     		push	{r3, r4, r5, lr}
 2778              		.cfi_def_cfa_offset 16
 2779              		.cfi_offset 3, -16
 2780              		.cfi_offset 4, -12
 2781              		.cfi_offset 5, -8
 2782              		.cfi_offset 14, -4
 2783              	.LVL246:
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2784              		.loc 1 1203 0
 2785 0002 50B1     		cbz	r0, .L292
 2786 0004 0546     		mov	r5, r0
ARM GAS  /tmp/ccuv3C2e.s 			page 146


1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2787              		.loc 1 1204 0
 2788 0006 89B9     		cbnz	r1, .L279
 2789              	.LBB165:
 2790              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2791              		.loc 2 195 0
 2792              		.syntax unified
 2793              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2794 0008 4FF05003 			mov r3, #80												
 2795 000c 83F31188 		msr basepri, r3											
 2796 0010 BFF36F8F 		isb														
 2797 0014 BFF34F8F 		dsb														
 2798              	
 2799              	@ 0 "" 2
 2800              	.LVL247:
 2801              		.thumb
 2802              		.syntax unified
 2803              	.L280:
 2804 0018 FEE7     		b	.L280
 2805              	.L292:
 2806              	.LBE166:
 2807              	.LBE165:
 2808              	.LBB167:
 2809              	.LBB168:
 2810              		.syntax unified
 2811              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2812 001a 4FF05003 			mov r3, #80												
 2813 001e 83F31188 		msr basepri, r3											
 2814 0022 BFF36F8F 		isb														
 2815 0026 BFF34F8F 		dsb														
 2816              	
 2817              	@ 0 "" 2
 2818              	.LVL248:
 2819              		.thumb
 2820              		.syntax unified
 2821              	.L278:
 2822 002a FEE7     		b	.L278
 2823              	.L279:
 2824              	.LBE168:
 2825              	.LBE167:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2826              		.loc 1 1205 0
 2827 002c 1C4B     		ldr	r3, .L293
 2828 002e 1B68     		ldr	r3, [r3]
 2829 0030 43B1     		cbz	r3, .L281
 2830              	.LBB169:
 2831              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2832              		.loc 2 195 0
 2833              		.syntax unified
 2834              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2835 0032 4FF05003 			mov r3, #80												
 2836 0036 83F31188 		msr basepri, r3											
 2837 003a BFF36F8F 		isb														
 2838 003e BFF34F8F 		dsb														
 2839              	
ARM GAS  /tmp/ccuv3C2e.s 			page 147


 2840              	@ 0 "" 2
 2841              	.LVL249:
 2842              		.thumb
 2843              		.syntax unified
 2844              	.L282:
 2845 0042 FEE7     		b	.L282
 2846              	.L281:
 2847 0044 0C46     		mov	r4, r1
 2848              	.LBE170:
 2849              	.LBE169:
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2850              		.loc 1 1207 0
 2851 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2852              	.LVL250:
 2853              	.LBB171:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2854              		.loc 1 1211 0
 2855 004a 164B     		ldr	r3, .L293+4
 2856 004c 1868     		ldr	r0, [r3]
 2857              	.LVL251:
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2858              		.loc 1 1214 0
 2859 004e 2A68     		ldr	r2, [r5]
 2860 0050 1444     		add	r4, r4, r2
 2861              	.LVL252:
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2862              		.loc 1 1216 0
 2863 0052 9042     		cmp	r0, r2
 2864 0054 16D2     		bcs	.L283
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2865              		.loc 1 1223 0
 2866 0056 A242     		cmp	r2, r4
 2867 0058 1AD9     		bls	.L287
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2868              		.loc 1 1223 0 is_stmt 0 discriminator 1
 2869 005a A042     		cmp	r0, r4
 2870 005c 1AD3     		bcc	.L288
 2871              	.LBE171:
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2872              		.loc 1 1201 0 is_stmt 1
 2873 005e 0022     		movs	r2, #0
 2874              	.L284:
 2875              	.LVL253:
 2876              	.LBB172:
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2877              		.loc 1 1248 0
 2878 0060 2C60     		str	r4, [r5]
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2879              		.loc 1 1250 0
 2880 0062 1AB1     		cbz	r2, .L285
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2881              		.loc 1 1256 0
 2882 0064 0021     		movs	r1, #0
 2883 0066 201A     		subs	r0, r4, r0
 2884              	.LVL254:
 2885 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2886              	.LVL255:
ARM GAS  /tmp/ccuv3C2e.s 			page 148


 2887              	.L285:
 2888              	.LBE172:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2889              		.loc 1 1263 0
 2890 006c FFF7FEFF 		bl	xTaskResumeAll
 2891              	.LVL256:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2892              		.loc 1 1267 0
 2893 0070 38B9     		cbnz	r0, .L276
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2894              		.loc 1 1269 0
 2895 0072 4FF08052 		mov	r2, #268435456
 2896 0076 0C4B     		ldr	r3, .L293+8
 2897 0078 1A60     		str	r2, [r3]
 2898              		.syntax unified
 2899              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2900 007a BFF34F8F 		dsb
 2901              	@ 0 "" 2
 2902              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2903 007e BFF36F8F 		isb
 2904              	@ 0 "" 2
 2905              		.thumb
 2906              		.syntax unified
 2907              	.L276:
 2908 0082 38BD     		pop	{r3, r4, r5, pc}
 2909              	.LVL257:
 2910              	.L283:
 2911              	.LBB173:
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2912              		.loc 1 1237 0
 2913 0084 A242     		cmp	r2, r4
 2914 0086 07D8     		bhi	.L289
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2915              		.loc 1 1237 0 is_stmt 0 discriminator 1
 2916 0088 A042     		cmp	r0, r4
 2917 008a 07D3     		bcc	.L290
 2918              	.LBE173:
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2919              		.loc 1 1201 0 is_stmt 1
 2920 008c 0022     		movs	r2, #0
 2921 008e E7E7     		b	.L284
 2922              	.L287:
 2923 0090 0022     		movs	r2, #0
 2924 0092 E5E7     		b	.L284
 2925              	.L288:
 2926              	.LBB174:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2927              		.loc 1 1225 0
 2928 0094 0122     		movs	r2, #1
 2929 0096 E3E7     		b	.L284
 2930              	.L289:
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2931              		.loc 1 1239 0
 2932 0098 0122     		movs	r2, #1
 2933 009a E1E7     		b	.L284
 2934              	.L290:
 2935 009c 0122     		movs	r2, #1
ARM GAS  /tmp/ccuv3C2e.s 			page 149


 2936 009e DFE7     		b	.L284
 2937              	.L294:
 2938              		.align	2
 2939              	.L293:
 2940 00a0 00000000 		.word	.LANCHOR16
 2941 00a4 00000000 		.word	.LANCHOR15
 2942 00a8 04ED00E0 		.word	-536810236
 2943              	.LBE174:
 2944              		.cfi_endproc
 2945              	.LFE9:
 2947              		.section	.text.vTaskDelay,"ax",%progbits
 2948              		.align	1
 2949              		.global	vTaskDelay
 2950              		.syntax unified
 2951              		.thumb
 2952              		.thumb_func
 2953              		.fpu softvfp
 2955              	vTaskDelay:
 2956              	.LFB10:
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2957              		.loc 1 1283 0
 2958              		.cfi_startproc
 2959              		@ args = 0, pretend = 0, frame = 0
 2960              		@ frame_needed = 0, uses_anonymous_args = 0
 2961              	.LVL258:
 2962 0000 10B5     		push	{r4, lr}
 2963              		.cfi_def_cfa_offset 8
 2964              		.cfi_offset 4, -8
 2965              		.cfi_offset 14, -4
 2966              	.LVL259:
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2967              		.loc 1 1287 0
 2968 0002 A8B1     		cbz	r0, .L300
 2969 0004 0446     		mov	r4, r0
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2970              		.loc 1 1289 0
 2971 0006 104B     		ldr	r3, .L302
 2972 0008 1B68     		ldr	r3, [r3]
 2973 000a 43B1     		cbz	r3, .L297
 2974              	.LBB175:
 2975              	.LBB176:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2976              		.loc 2 195 0
 2977              		.syntax unified
 2978              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2979 000c 4FF05003 			mov r3, #80												
 2980 0010 83F31188 		msr basepri, r3											
 2981 0014 BFF36F8F 		isb														
 2982 0018 BFF34F8F 		dsb														
 2983              	
 2984              	@ 0 "" 2
 2985              	.LVL260:
 2986              		.thumb
 2987              		.syntax unified
 2988              	.L298:
 2989 001c FEE7     		b	.L298
 2990              	.L297:
ARM GAS  /tmp/ccuv3C2e.s 			page 150


 2991              	.LBE176:
 2992              	.LBE175:
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2993              		.loc 1 1290 0
 2994 001e FFF7FEFF 		bl	vTaskSuspendAll
 2995              	.LVL261:
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2996              		.loc 1 1301 0
 2997 0022 0021     		movs	r1, #0
 2998 0024 2046     		mov	r0, r4
 2999 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3000              	.LVL262:
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3001              		.loc 1 1303 0
 3002 002a FFF7FEFF 		bl	xTaskResumeAll
 3003              	.LVL263:
 3004 002e 00E0     		b	.L296
 3005              	.LVL264:
 3006              	.L300:
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3007              		.loc 1 1284 0
 3008 0030 0020     		movs	r0, #0
 3009              	.LVL265:
 3010              	.L296:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3011              		.loc 1 1312 0
 3012 0032 38B9     		cbnz	r0, .L295
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3013              		.loc 1 1314 0
 3014 0034 4FF08052 		mov	r2, #268435456
 3015 0038 044B     		ldr	r3, .L302+4
 3016 003a 1A60     		str	r2, [r3]
 3017              		.syntax unified
 3018              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3019 003c BFF34F8F 		dsb
 3020              	@ 0 "" 2
 3021              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3022 0040 BFF36F8F 		isb
 3023              	@ 0 "" 2
 3024              		.thumb
 3025              		.syntax unified
 3026              	.L295:
 3027 0044 10BD     		pop	{r4, pc}
 3028              	.L303:
 3029 0046 00BF     		.align	2
 3030              	.L302:
 3031 0048 00000000 		.word	.LANCHOR16
 3032 004c 04ED00E0 		.word	-536810236
 3033              		.cfi_endproc
 3034              	.LFE10:
 3036              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3037              		.align	1
 3038              		.global	vTaskSwitchContext
 3039              		.syntax unified
 3040              		.thumb
 3041              		.thumb_func
 3042              		.fpu softvfp
ARM GAS  /tmp/ccuv3C2e.s 			page 151


 3044              	vTaskSwitchContext:
 3045              	.LFB29:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3046              		.loc 1 2846 0
 3047              		.cfi_startproc
 3048              		@ args = 0, pretend = 0, frame = 0
 3049              		@ frame_needed = 0, uses_anonymous_args = 0
 3050              		@ link register save eliminated.
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3051              		.loc 1 2847 0
 3052 0000 204B     		ldr	r3, .L320
 3053 0002 1B68     		ldr	r3, [r3]
 3054 0004 6BB9     		cbnz	r3, .L316
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3055              		.loc 1 2855 0
 3056 0006 0022     		movs	r2, #0
 3057 0008 1F4B     		ldr	r3, .L320+4
 3058 000a 1A60     		str	r2, [r3]
 3059              	.LBB177:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3060              		.loc 1 2890 0
 3061 000c 1F4B     		ldr	r3, .L320+8
 3062 000e 1B68     		ldr	r3, [r3]
 3063              	.LVL266:
 3064              	.L307:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3065              		.loc 1 2890 0 is_stmt 0 discriminator 4
 3066 0010 03EB8301 		add	r1, r3, r3, lsl #2
 3067 0014 8A00     		lsls	r2, r1, #2
 3068 0016 1E49     		ldr	r1, .L320+12
 3069 0018 8A58     		ldr	r2, [r1, r2]
 3070 001a 7AB9     		cbnz	r2, .L317
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3071              		.loc 1 2890 0 discriminator 5
 3072 001c 2BB1     		cbz	r3, .L318
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3073              		.loc 1 2890 0 discriminator 3
 3074 001e 013B     		subs	r3, r3, #1
 3075              	.LVL267:
 3076 0020 F6E7     		b	.L307
 3077              	.LVL268:
 3078              	.L316:
 3079              	.LBE177:
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3080              		.loc 1 2851 0 is_stmt 1
 3081 0022 0122     		movs	r2, #1
 3082 0024 184B     		ldr	r3, .L320+4
 3083 0026 1A60     		str	r2, [r3]
 3084 0028 7047     		bx	lr
 3085              	.LVL269:
 3086              	.L318:
 3087              	.LBB182:
 3088              	.LBB178:
 3089              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3090              		.loc 2 195 0
 3091              		.syntax unified
ARM GAS  /tmp/ccuv3C2e.s 			page 152


 3092              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3093 002a 4FF05003 			mov r3, #80												
 3094 002e 83F31188 		msr basepri, r3											
 3095 0032 BFF36F8F 		isb														
 3096 0036 BFF34F8F 		dsb														
 3097              	
 3098              	@ 0 "" 2
 3099              	.LVL270:
 3100              		.thumb
 3101              		.syntax unified
 3102              	.L309:
 3103 003a FEE7     		b	.L309
 3104              	.LVL271:
 3105              	.L317:
 3106              	.LBE179:
 3107              	.LBE178:
 3108              	.LBE182:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3109              		.loc 1 2846 0 discriminator 6
 3110 003c 10B4     		push	{r4}
 3111              		.cfi_def_cfa_offset 4
 3112              		.cfi_offset 4, -4
 3113              	.LVL272:
 3114              	.LBB183:
 3115              	.LBB180:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3116              		.loc 1 2890 0 discriminator 6
 3117 003e 0846     		mov	r0, r1
 3118 0040 9A00     		lsls	r2, r3, #2
 3119 0042 D418     		adds	r4, r2, r3
 3120 0044 A100     		lsls	r1, r4, #2
 3121 0046 0144     		add	r1, r1, r0
 3122 0048 4C68     		ldr	r4, [r1, #4]
 3123 004a 6468     		ldr	r4, [r4, #4]
 3124 004c 4C60     		str	r4, [r1, #4]
 3125 004e 1A44     		add	r2, r2, r3
 3126 0050 9100     		lsls	r1, r2, #2
 3127 0052 0831     		adds	r1, r1, #8
 3128 0054 0844     		add	r0, r0, r1
 3129 0056 8442     		cmp	r4, r0
 3130 0058 0CD0     		beq	.L319
 3131              	.L311:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3132              		.loc 1 2890 0 is_stmt 0 discriminator 9
 3133 005a 03EB8302 		add	r2, r3, r3, lsl #2
 3134 005e 9100     		lsls	r1, r2, #2
 3135 0060 0B4A     		ldr	r2, .L320+12
 3136 0062 0A44     		add	r2, r2, r1
 3137 0064 5268     		ldr	r2, [r2, #4]
 3138 0066 D168     		ldr	r1, [r2, #12]
 3139 0068 0A4A     		ldr	r2, .L320+16
 3140 006a 1160     		str	r1, [r2]
 3141              	.LBE180:
 3142 006c 074A     		ldr	r2, .L320+8
 3143 006e 1360     		str	r3, [r2]
 3144              	.LBE183:
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccuv3C2e.s 			page 153


 3145              		.loc 1 2901 0 is_stmt 1 discriminator 9
 3146 0070 10BC     		pop	{r4}
 3147              		.cfi_remember_state
 3148              		.cfi_restore 4
 3149              		.cfi_def_cfa_offset 0
 3150 0072 7047     		bx	lr
 3151              	.L319:
 3152              		.cfi_restore_state
 3153              	.LBB184:
 3154              	.LBB181:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3155              		.loc 1 2890 0 discriminator 7
 3156 0074 6068     		ldr	r0, [r4, #4]
 3157 0076 03EB8302 		add	r2, r3, r3, lsl #2
 3158 007a 9100     		lsls	r1, r2, #2
 3159 007c 044A     		ldr	r2, .L320+12
 3160 007e 0A44     		add	r2, r2, r1
 3161 0080 5060     		str	r0, [r2, #4]
 3162 0082 EAE7     		b	.L311
 3163              	.L321:
 3164              		.align	2
 3165              	.L320:
 3166 0084 00000000 		.word	.LANCHOR16
 3167 0088 00000000 		.word	.LANCHOR19
 3168 008c 00000000 		.word	.LANCHOR13
 3169 0090 00000000 		.word	.LANCHOR4
 3170 0094 00000000 		.word	.LANCHOR10
 3171              	.LBE181:
 3172              	.LBE184:
 3173              		.cfi_endproc
 3174              	.LFE29:
 3176              		.section	.text.vTaskSuspend,"ax",%progbits
 3177              		.align	1
 3178              		.global	vTaskSuspend
 3179              		.syntax unified
 3180              		.thumb
 3181              		.thumb_func
 3182              		.fpu softvfp
 3184              	vTaskSuspend:
 3185              	.LFB15:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3186              		.loc 1 1625 0
 3187              		.cfi_startproc
 3188              		@ args = 0, pretend = 0, frame = 0
 3189              		@ frame_needed = 0, uses_anonymous_args = 0
 3190              	.LVL273:
 3191 0000 38B5     		push	{r3, r4, r5, lr}
 3192              		.cfi_def_cfa_offset 16
 3193              		.cfi_offset 3, -16
 3194              		.cfi_offset 4, -12
 3195              		.cfi_offset 5, -8
 3196              		.cfi_offset 14, -4
 3197 0002 0446     		mov	r4, r0
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3198              		.loc 1 1628 0
 3199 0004 FFF7FEFF 		bl	vPortEnterCritical
 3200              	.LVL274:
ARM GAS  /tmp/ccuv3C2e.s 			page 154


1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3201              		.loc 1 1632 0
 3202 0008 E4B1     		cbz	r4, .L334
 3203              	.LVL275:
 3204              	.L323:
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3205              		.loc 1 1638 0 discriminator 4
 3206 000a 251D     		adds	r5, r4, #4
 3207 000c 2846     		mov	r0, r5
 3208 000e FFF7FEFF 		bl	uxListRemove
 3209              	.LVL276:
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3210              		.loc 1 1648 0 discriminator 4
 3211 0012 A36A     		ldr	r3, [r4, #40]
 3212 0014 1BB1     		cbz	r3, .L324
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3213              		.loc 1 1650 0
 3214 0016 04F11800 		add	r0, r4, #24
 3215 001a FFF7FEFF 		bl	uxListRemove
 3216              	.LVL277:
 3217              	.L324:
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3218              		.loc 1 1657 0
 3219 001e 2946     		mov	r1, r5
 3220 0020 2248     		ldr	r0, .L338
 3221 0022 FFF7FEFF 		bl	vListInsertEnd
 3222              	.LVL278:
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3223              		.loc 1 1661 0
 3224 0026 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3225 002a DBB2     		uxtb	r3, r3
 3226 002c 012B     		cmp	r3, #1
 3227 002e 0CD0     		beq	.L335
 3228              	.L325:
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3229              		.loc 1 1670 0
 3230 0030 FFF7FEFF 		bl	vPortExitCritical
 3231              	.LVL279:
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3232              		.loc 1 1672 0
 3233 0034 1E4B     		ldr	r3, .L338+4
 3234 0036 1B68     		ldr	r3, [r3]
 3235 0038 5BB9     		cbnz	r3, .L336
 3236              	.L326:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3237              		.loc 1 1687 0
 3238 003a 1E4B     		ldr	r3, .L338+8
 3239 003c 1B68     		ldr	r3, [r3]
 3240 003e 9C42     		cmp	r4, r3
 3241 0040 0ED0     		beq	.L337
 3242              	.L322:
 3243 0042 38BD     		pop	{r3, r4, r5, pc}
 3244              	.LVL280:
 3245              	.L334:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3246              		.loc 1 1632 0 discriminator 1
 3247 0044 1B4B     		ldr	r3, .L338+8
ARM GAS  /tmp/ccuv3C2e.s 			page 155


 3248 0046 1C68     		ldr	r4, [r3]
 3249              	.LVL281:
 3250 0048 DFE7     		b	.L323
 3251              	.LVL282:
 3252              	.L335:
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3253              		.loc 1 1665 0
 3254 004a 0023     		movs	r3, #0
 3255 004c 84F85830 		strb	r3, [r4, #88]
 3256 0050 EEE7     		b	.L325
 3257              	.L336:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3258              		.loc 1 1676 0
 3259 0052 FFF7FEFF 		bl	vPortEnterCritical
 3260              	.LVL283:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3261              		.loc 1 1678 0
 3262 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3263              	.LVL284:
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3264              		.loc 1 1680 0
 3265 005a FFF7FEFF 		bl	vPortExitCritical
 3266              	.LVL285:
 3267 005e ECE7     		b	.L326
 3268              	.L337:
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3269              		.loc 1 1689 0
 3270 0060 134B     		ldr	r3, .L338+4
 3271 0062 1B68     		ldr	r3, [r3]
 3272 0064 A3B1     		cbz	r3, .L328
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3273              		.loc 1 1692 0
 3274 0066 144B     		ldr	r3, .L338+12
 3275 0068 1B68     		ldr	r3, [r3]
 3276 006a 43B1     		cbz	r3, .L329
 3277              	.LBB185:
 3278              	.LBB186:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3279              		.loc 2 195 0
 3280              		.syntax unified
 3281              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3282 006c 4FF05003 			mov r3, #80												
 3283 0070 83F31188 		msr basepri, r3											
 3284 0074 BFF36F8F 		isb														
 3285 0078 BFF34F8F 		dsb														
 3286              	
 3287              	@ 0 "" 2
 3288              	.LVL286:
 3289              		.thumb
 3290              		.syntax unified
 3291              	.L330:
 3292 007c FEE7     		b	.L330
 3293              	.L329:
 3294              	.LBE186:
 3295              	.LBE185:
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3296              		.loc 1 1693 0
ARM GAS  /tmp/ccuv3C2e.s 			page 156


 3297 007e 4FF08052 		mov	r2, #268435456
 3298 0082 0E4B     		ldr	r3, .L338+16
 3299 0084 1A60     		str	r2, [r3]
 3300              		.syntax unified
 3301              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3302 0086 BFF34F8F 		dsb
 3303              	@ 0 "" 2
 3304              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3305 008a BFF36F8F 		isb
 3306              	@ 0 "" 2
 3307              		.thumb
 3308              		.syntax unified
 3309 008e 38BD     		pop	{r3, r4, r5, pc}
 3310              	.LVL287:
 3311              	.L328:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3312              		.loc 1 1700 0
 3313 0090 064B     		ldr	r3, .L338
 3314 0092 1A68     		ldr	r2, [r3]
 3315 0094 0A4B     		ldr	r3, .L338+20
 3316 0096 1B68     		ldr	r3, [r3]
 3317 0098 9A42     		cmp	r2, r3
 3318 009a 03D1     		bne	.L331
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3319              		.loc 1 1706 0
 3320 009c 0022     		movs	r2, #0
 3321 009e 054B     		ldr	r3, .L338+8
 3322 00a0 1A60     		str	r2, [r3]
 3323 00a2 38BD     		pop	{r3, r4, r5, pc}
 3324              	.LVL288:
 3325              	.L331:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3326              		.loc 1 1710 0
 3327 00a4 FFF7FEFF 		bl	vTaskSwitchContext
 3328              	.LVL289:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3329              		.loc 1 1718 0
 3330 00a8 CBE7     		b	.L322
 3331              	.L339:
 3332 00aa 00BF     		.align	2
 3333              	.L338:
 3334 00ac 00000000 		.word	.LANCHOR0
 3335 00b0 00000000 		.word	.LANCHOR11
 3336 00b4 00000000 		.word	.LANCHOR10
 3337 00b8 00000000 		.word	.LANCHOR16
 3338 00bc 04ED00E0 		.word	-536810236
 3339 00c0 00000000 		.word	.LANCHOR9
 3340              		.cfi_endproc
 3341              	.LFE15:
 3343              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3344              		.align	1
 3345              		.global	vTaskPlaceOnEventList
 3346              		.syntax unified
 3347              		.thumb
 3348              		.thumb_func
 3349              		.fpu softvfp
 3351              	vTaskPlaceOnEventList:
ARM GAS  /tmp/ccuv3C2e.s 			page 157


 3352              	.LFB30:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3353              		.loc 1 2905 0
 3354              		.cfi_startproc
 3355              		@ args = 0, pretend = 0, frame = 0
 3356              		@ frame_needed = 0, uses_anonymous_args = 0
 3357              	.LVL290:
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3358              		.loc 1 2906 0
 3359 0000 40B9     		cbnz	r0, .L341
 3360              	.LBB187:
 3361              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3362              		.loc 2 195 0
 3363              		.syntax unified
 3364              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3365 0002 4FF05003 			mov r3, #80												
 3366 0006 83F31188 		msr basepri, r3											
 3367 000a BFF36F8F 		isb														
 3368 000e BFF34F8F 		dsb														
 3369              	
 3370              	@ 0 "" 2
 3371              	.LVL291:
 3372              		.thumb
 3373              		.syntax unified
 3374              	.L342:
 3375 0012 FEE7     		b	.L342
 3376              	.L341:
 3377              	.LBE188:
 3378              	.LBE187:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3379              		.loc 1 2905 0
 3380 0014 10B5     		push	{r4, lr}
 3381              		.cfi_def_cfa_offset 8
 3382              		.cfi_offset 4, -8
 3383              		.cfi_offset 14, -4
 3384 0016 0C46     		mov	r4, r1
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3385              		.loc 1 2915 0
 3386 0018 044B     		ldr	r3, .L345
 3387 001a 1968     		ldr	r1, [r3]
 3388              	.LVL292:
 3389 001c 1831     		adds	r1, r1, #24
 3390 001e FFF7FEFF 		bl	vListInsert
 3391              	.LVL293:
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3392              		.loc 1 2917 0
 3393 0022 0121     		movs	r1, #1
 3394 0024 2046     		mov	r0, r4
 3395 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3396              	.LVL294:
 3397 002a 10BD     		pop	{r4, pc}
 3398              	.LVL295:
 3399              	.L346:
 3400              		.align	2
 3401              	.L345:
 3402 002c 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/ccuv3C2e.s 			page 158


 3403              		.cfi_endproc
 3404              	.LFE30:
 3406              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3407              		.align	1
 3408              		.global	vTaskPlaceOnUnorderedEventList
 3409              		.syntax unified
 3410              		.thumb
 3411              		.thumb_func
 3412              		.fpu softvfp
 3414              	vTaskPlaceOnUnorderedEventList:
 3415              	.LFB31:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3416              		.loc 1 2922 0
 3417              		.cfi_startproc
 3418              		@ args = 0, pretend = 0, frame = 0
 3419              		@ frame_needed = 0, uses_anonymous_args = 0
 3420              	.LVL296:
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3421              		.loc 1 2923 0
 3422 0000 60B1     		cbz	r0, .L354
 3423 0002 0346     		mov	r3, r0
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3424              		.loc 1 2927 0
 3425 0004 1348     		ldr	r0, .L355
 3426              	.LVL297:
 3427 0006 0068     		ldr	r0, [r0]
 3428 0008 88B9     		cbnz	r0, .L350
 3429              	.LBB189:
 3430              	.LBB190:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3431              		.loc 2 195 0
 3432              		.syntax unified
 3433              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3434 000a 4FF05003 			mov r3, #80												
 3435 000e 83F31188 		msr basepri, r3											
 3436 0012 BFF36F8F 		isb														
 3437 0016 BFF34F8F 		dsb														
 3438              	
 3439              	@ 0 "" 2
 3440              	.LVL298:
 3441              		.thumb
 3442              		.syntax unified
 3443              	.L351:
 3444 001a FEE7     		b	.L351
 3445              	.LVL299:
 3446              	.L354:
 3447              	.LBE190:
 3448              	.LBE189:
 3449              	.LBB191:
 3450              	.LBB192:
 3451              		.syntax unified
 3452              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3453 001c 4FF05003 			mov r3, #80												
 3454 0020 83F31188 		msr basepri, r3											
 3455 0024 BFF36F8F 		isb														
 3456 0028 BFF34F8F 		dsb														
 3457              	
ARM GAS  /tmp/ccuv3C2e.s 			page 159


 3458              	@ 0 "" 2
 3459              	.LVL300:
 3460              		.thumb
 3461              		.syntax unified
 3462              	.L349:
 3463 002c FEE7     		b	.L349
 3464              	.LVL301:
 3465              	.L350:
 3466              	.LBE192:
 3467              	.LBE191:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3468              		.loc 1 2922 0
 3469 002e 10B5     		push	{r4, lr}
 3470              		.cfi_def_cfa_offset 8
 3471              		.cfi_offset 4, -8
 3472              		.cfi_offset 14, -4
 3473 0030 1846     		mov	r0, r3
 3474 0032 1446     		mov	r4, r2
 3475 0034 0B46     		mov	r3, r1
 3476              	.LVL302:
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3477              		.loc 1 2932 0
 3478 0036 084A     		ldr	r2, .L355+4
 3479              	.LVL303:
 3480 0038 1168     		ldr	r1, [r2]
 3481              	.LVL304:
 3482 003a 43F00043 		orr	r3, r3, #-2147483648
 3483              	.LVL305:
 3484 003e 8B61     		str	r3, [r1, #24]
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3485              		.loc 1 2939 0
 3486 0040 1168     		ldr	r1, [r2]
 3487 0042 1831     		adds	r1, r1, #24
 3488 0044 FFF7FEFF 		bl	vListInsertEnd
 3489              	.LVL306:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3490              		.loc 1 2941 0
 3491 0048 0121     		movs	r1, #1
 3492 004a 2046     		mov	r0, r4
 3493 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3494              	.LVL307:
 3495 0050 10BD     		pop	{r4, pc}
 3496              	.LVL308:
 3497              	.L356:
 3498 0052 00BF     		.align	2
 3499              	.L355:
 3500 0054 00000000 		.word	.LANCHOR16
 3501 0058 00000000 		.word	.LANCHOR10
 3502              		.cfi_endproc
 3503              	.LFE31:
 3505              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3506              		.align	1
 3507              		.global	vTaskPlaceOnEventListRestricted
 3508              		.syntax unified
 3509              		.thumb
 3510              		.thumb_func
 3511              		.fpu softvfp
ARM GAS  /tmp/ccuv3C2e.s 			page 160


 3513              	vTaskPlaceOnEventListRestricted:
 3514              	.LFB32:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3515              		.loc 1 2948 0
 3516              		.cfi_startproc
 3517              		@ args = 0, pretend = 0, frame = 0
 3518              		@ frame_needed = 0, uses_anonymous_args = 0
 3519              	.LVL309:
 3520 0000 38B5     		push	{r3, r4, r5, lr}
 3521              		.cfi_def_cfa_offset 16
 3522              		.cfi_offset 3, -16
 3523              		.cfi_offset 4, -12
 3524              		.cfi_offset 5, -8
 3525              		.cfi_offset 14, -4
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3526              		.loc 1 2949 0
 3527 0002 70B1     		cbz	r0, .L363
 3528 0004 0C46     		mov	r4, r1
 3529 0006 1546     		mov	r5, r2
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3530              		.loc 1 2961 0
 3531 0008 0A4A     		ldr	r2, .L364
 3532              	.LVL310:
 3533 000a 1168     		ldr	r1, [r2]
 3534              	.LVL311:
 3535 000c 1831     		adds	r1, r1, #24
 3536 000e FFF7FEFF 		bl	vListInsertEnd
 3537              	.LVL312:
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3538              		.loc 1 2966 0
 3539 0012 0DB1     		cbz	r5, .L360
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3540              		.loc 1 2968 0
 3541 0014 4FF0FF34 		mov	r4, #-1
 3542              	.LVL313:
 3543              	.L360:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3544              		.loc 1 2972 0
 3545 0018 2946     		mov	r1, r5
 3546 001a 2046     		mov	r0, r4
 3547 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3548              	.LVL314:
 3549 0020 38BD     		pop	{r3, r4, r5, pc}
 3550              	.LVL315:
 3551              	.L363:
 3552              	.LBB193:
 3553              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3554              		.loc 2 195 0
 3555              		.syntax unified
 3556              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3557 0022 4FF05003 			mov r3, #80												
 3558 0026 83F31188 		msr basepri, r3											
 3559 002a BFF36F8F 		isb														
 3560 002e BFF34F8F 		dsb														
 3561              	
 3562              	@ 0 "" 2
ARM GAS  /tmp/ccuv3C2e.s 			page 161


 3563              	.LVL316:
 3564              		.thumb
 3565              		.syntax unified
 3566              	.L359:
 3567 0032 FEE7     		b	.L359
 3568              	.L365:
 3569              		.align	2
 3570              	.L364:
 3571 0034 00000000 		.word	.LANCHOR10
 3572              	.LBE194:
 3573              	.LBE193:
 3574              		.cfi_endproc
 3575              	.LFE32:
 3577              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3578              		.align	1
 3579              		.global	xTaskRemoveFromEventList
 3580              		.syntax unified
 3581              		.thumb
 3582              		.thumb_func
 3583              		.fpu softvfp
 3585              	xTaskRemoveFromEventList:
 3586              	.LFB33:
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3587              		.loc 1 2979 0
 3588              		.cfi_startproc
 3589              		@ args = 0, pretend = 0, frame = 0
 3590              		@ frame_needed = 0, uses_anonymous_args = 0
 3591              	.LVL317:
 3592 0000 38B5     		push	{r3, r4, r5, lr}
 3593              		.cfi_def_cfa_offset 16
 3594              		.cfi_offset 3, -16
 3595              		.cfi_offset 4, -12
 3596              		.cfi_offset 5, -8
 3597              		.cfi_offset 14, -4
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3598              		.loc 1 2996 0
 3599 0002 C368     		ldr	r3, [r0, #12]
 3600 0004 DC68     		ldr	r4, [r3, #12]
 3601              	.LVL318:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3602              		.loc 1 2997 0
 3603 0006 24B3     		cbz	r4, .L375
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3604              		.loc 1 2998 0
 3605 0008 04F11805 		add	r5, r4, #24
 3606 000c 2846     		mov	r0, r5
 3607              	.LVL319:
 3608 000e FFF7FEFF 		bl	uxListRemove
 3609              	.LVL320:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3610              		.loc 1 3000 0
 3611 0012 184B     		ldr	r3, .L376
 3612 0014 1B68     		ldr	r3, [r3]
 3613 0016 2BBB     		cbnz	r3, .L369
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3614              		.loc 1 3002 0
 3615 0018 251D     		adds	r5, r4, #4
ARM GAS  /tmp/ccuv3C2e.s 			page 162


 3616 001a 2846     		mov	r0, r5
 3617 001c FFF7FEFF 		bl	uxListRemove
 3618              	.LVL321:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3619              		.loc 1 3003 0
 3620 0020 E36A     		ldr	r3, [r4, #44]
 3621 0022 154A     		ldr	r2, .L376+4
 3622 0024 1268     		ldr	r2, [r2]
 3623 0026 9342     		cmp	r3, r2
 3624 0028 01D9     		bls	.L370
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3625              		.loc 1 3003 0 is_stmt 0 discriminator 1
 3626 002a 134A     		ldr	r2, .L376+4
 3627 002c 1360     		str	r3, [r2]
 3628              	.L370:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3629              		.loc 1 3003 0 discriminator 3
 3630 002e 03EB8303 		add	r3, r3, r3, lsl #2
 3631 0032 9A00     		lsls	r2, r3, #2
 3632 0034 2946     		mov	r1, r5
 3633 0036 1148     		ldr	r0, .L376+8
 3634 0038 1044     		add	r0, r0, r2
 3635 003a FFF7FEFF 		bl	vListInsertEnd
 3636              	.LVL322:
 3637              	.L371:
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3638              		.loc 1 3012 0 is_stmt 1
 3639 003e E26A     		ldr	r2, [r4, #44]
 3640 0040 0F4B     		ldr	r3, .L376+12
 3641 0042 1B68     		ldr	r3, [r3]
 3642 0044 DB6A     		ldr	r3, [r3, #44]
 3643 0046 9A42     		cmp	r2, r3
 3644 0048 11D9     		bls	.L373
 3645              	.LVL323:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3646              		.loc 1 3021 0
 3647 004a 0120     		movs	r0, #1
 3648 004c 0D4B     		ldr	r3, .L376+16
 3649 004e 1860     		str	r0, [r3]
 3650 0050 38BD     		pop	{r3, r4, r5, pc}
 3651              	.LVL324:
 3652              	.L375:
 3653              	.LBB195:
 3654              	.LBB196:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3655              		.loc 2 195 0
 3656              		.syntax unified
 3657              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3658 0052 4FF05003 			mov r3, #80												
 3659 0056 83F31188 		msr basepri, r3											
 3660 005a BFF36F8F 		isb														
 3661 005e BFF34F8F 		dsb														
 3662              	
 3663              	@ 0 "" 2
 3664              	.LVL325:
 3665              		.thumb
 3666              		.syntax unified
ARM GAS  /tmp/ccuv3C2e.s 			page 163


 3667              	.L368:
 3668 0062 FEE7     		b	.L368
 3669              	.LVL326:
 3670              	.L369:
 3671              	.LBE196:
 3672              	.LBE195:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3673              		.loc 1 3009 0
 3674 0064 2946     		mov	r1, r5
 3675 0066 0848     		ldr	r0, .L376+20
 3676 0068 FFF7FEFF 		bl	vListInsertEnd
 3677              	.LVL327:
 3678 006c E7E7     		b	.L371
 3679              	.L373:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3680              		.loc 1 3025 0
 3681 006e 0020     		movs	r0, #0
 3682              	.LVL328:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3683              		.loc 1 3043 0
 3684 0070 38BD     		pop	{r3, r4, r5, pc}
 3685              	.LVL329:
 3686              	.L377:
 3687 0072 00BF     		.align	2
 3688              	.L376:
 3689 0074 00000000 		.word	.LANCHOR16
 3690 0078 00000000 		.word	.LANCHOR13
 3691 007c 00000000 		.word	.LANCHOR4
 3692 0080 00000000 		.word	.LANCHOR10
 3693 0084 00000000 		.word	.LANCHOR19
 3694 0088 00000000 		.word	.LANCHOR1
 3695              		.cfi_endproc
 3696              	.LFE33:
 3698              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3699              		.align	1
 3700              		.global	vTaskRemoveFromUnorderedEventList
 3701              		.syntax unified
 3702              		.thumb
 3703              		.thumb_func
 3704              		.fpu softvfp
 3706              	vTaskRemoveFromUnorderedEventList:
 3707              	.LFB34:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3708              		.loc 1 3047 0
 3709              		.cfi_startproc
 3710              		@ args = 0, pretend = 0, frame = 0
 3711              		@ frame_needed = 0, uses_anonymous_args = 0
 3712              	.LVL330:
 3713 0000 38B5     		push	{r3, r4, r5, lr}
 3714              		.cfi_def_cfa_offset 16
 3715              		.cfi_offset 3, -16
 3716              		.cfi_offset 4, -12
 3717              		.cfi_offset 5, -8
 3718              		.cfi_offset 14, -4
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3719              		.loc 1 3052 0
 3720 0002 1C4B     		ldr	r3, .L387
ARM GAS  /tmp/ccuv3C2e.s 			page 164


 3721 0004 1B68     		ldr	r3, [r3]
 3722 0006 43B9     		cbnz	r3, .L379
 3723              	.LBB197:
 3724              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3725              		.loc 2 195 0
 3726              		.syntax unified
 3727              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3728 0008 4FF05003 			mov r3, #80												
 3729 000c 83F31188 		msr basepri, r3											
 3730 0010 BFF36F8F 		isb														
 3731 0014 BFF34F8F 		dsb														
 3732              	
 3733              	@ 0 "" 2
 3734              	.LVL331:
 3735              		.thumb
 3736              		.syntax unified
 3737              	.L380:
 3738 0018 FEE7     		b	.L380
 3739              	.L379:
 3740              	.LBE198:
 3741              	.LBE197:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3742              		.loc 1 3055 0
 3743 001a 41F00041 		orr	r1, r1, #-2147483648
 3744              	.LVL332:
 3745 001e 0160     		str	r1, [r0]
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3746              		.loc 1 3059 0
 3747 0020 C468     		ldr	r4, [r0, #12]
 3748              	.LVL333:
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3749              		.loc 1 3060 0
 3750 0022 F4B1     		cbz	r4, .L386
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3751              		.loc 1 3061 0
 3752 0024 FFF7FEFF 		bl	uxListRemove
 3753              	.LVL334:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3754              		.loc 1 3066 0
 3755 0028 251D     		adds	r5, r4, #4
 3756 002a 2846     		mov	r0, r5
 3757 002c FFF7FEFF 		bl	uxListRemove
 3758              	.LVL335:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3759              		.loc 1 3067 0
 3760 0030 E36A     		ldr	r3, [r4, #44]
 3761 0032 114A     		ldr	r2, .L387+4
 3762 0034 1268     		ldr	r2, [r2]
 3763 0036 9342     		cmp	r3, r2
 3764 0038 01D9     		bls	.L383
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3765              		.loc 1 3067 0 is_stmt 0 discriminator 1
 3766 003a 0F4A     		ldr	r2, .L387+4
 3767 003c 1360     		str	r3, [r2]
 3768              	.L383:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 165


 3769              		.loc 1 3067 0 discriminator 3
 3770 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3771 0042 9A00     		lsls	r2, r3, #2
 3772 0044 2946     		mov	r1, r5
 3773 0046 0D48     		ldr	r0, .L387+8
 3774 0048 1044     		add	r0, r0, r2
 3775 004a FFF7FEFF 		bl	vListInsertEnd
 3776              	.LVL336:
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3777              		.loc 1 3069 0 is_stmt 1 discriminator 3
 3778 004e E26A     		ldr	r2, [r4, #44]
 3779 0050 0B4B     		ldr	r3, .L387+12
 3780 0052 1B68     		ldr	r3, [r3]
 3781 0054 DB6A     		ldr	r3, [r3, #44]
 3782 0056 9A42     		cmp	r2, r3
 3783 0058 02D9     		bls	.L378
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3784              		.loc 1 3075 0
 3785 005a 0122     		movs	r2, #1
 3786 005c 094B     		ldr	r3, .L387+16
 3787 005e 1A60     		str	r2, [r3]
 3788              	.L378:
 3789 0060 38BD     		pop	{r3, r4, r5, pc}
 3790              	.LVL337:
 3791              	.L386:
 3792              	.LBB199:
 3793              	.LBB200:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3794              		.loc 2 195 0
 3795              		.syntax unified
 3796              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3797 0062 4FF05003 			mov r3, #80												
 3798 0066 83F31188 		msr basepri, r3											
 3799 006a BFF36F8F 		isb														
 3800 006e BFF34F8F 		dsb														
 3801              	
 3802              	@ 0 "" 2
 3803              	.LVL338:
 3804              		.thumb
 3805              		.syntax unified
 3806              	.L382:
 3807 0072 FEE7     		b	.L382
 3808              	.L388:
 3809              		.align	2
 3810              	.L387:
 3811 0074 00000000 		.word	.LANCHOR16
 3812 0078 00000000 		.word	.LANCHOR13
 3813 007c 00000000 		.word	.LANCHOR4
 3814 0080 00000000 		.word	.LANCHOR10
 3815 0084 00000000 		.word	.LANCHOR19
 3816              	.LBE200:
 3817              	.LBE199:
 3818              		.cfi_endproc
 3819              	.LFE34:
 3821              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3822              		.align	1
 3823              		.global	vTaskSetTimeOutState
ARM GAS  /tmp/ccuv3C2e.s 			page 166


 3824              		.syntax unified
 3825              		.thumb
 3826              		.thumb_func
 3827              		.fpu softvfp
 3829              	vTaskSetTimeOutState:
 3830              	.LFB35:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3831              		.loc 1 3081 0
 3832              		.cfi_startproc
 3833              		@ args = 0, pretend = 0, frame = 0
 3834              		@ frame_needed = 0, uses_anonymous_args = 0
 3835              	.LVL339:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3836              		.loc 1 3082 0
 3837 0000 40B9     		cbnz	r0, .L390
 3838              	.LBB201:
 3839              	.LBB202:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3840              		.loc 2 195 0
 3841              		.syntax unified
 3842              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3843 0002 4FF05003 			mov r3, #80												
 3844 0006 83F31188 		msr basepri, r3											
 3845 000a BFF36F8F 		isb														
 3846 000e BFF34F8F 		dsb														
 3847              	
 3848              	@ 0 "" 2
 3849              	.LVL340:
 3850              		.thumb
 3851              		.syntax unified
 3852              	.L391:
 3853 0012 FEE7     		b	.L391
 3854              	.L390:
 3855              	.LBE202:
 3856              	.LBE201:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3857              		.loc 1 3081 0
 3858 0014 10B5     		push	{r4, lr}
 3859              		.cfi_def_cfa_offset 8
 3860              		.cfi_offset 4, -8
 3861              		.cfi_offset 14, -4
 3862 0016 0446     		mov	r4, r0
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3863              		.loc 1 3083 0
 3864 0018 FFF7FEFF 		bl	vPortEnterCritical
 3865              	.LVL341:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3866              		.loc 1 3085 0
 3867 001c 044B     		ldr	r3, .L394
 3868 001e 1B68     		ldr	r3, [r3]
 3869 0020 2360     		str	r3, [r4]
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3870              		.loc 1 3086 0
 3871 0022 044B     		ldr	r3, .L394+4
 3872 0024 1B68     		ldr	r3, [r3]
 3873 0026 6360     		str	r3, [r4, #4]
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccuv3C2e.s 			page 167


 3874              		.loc 1 3088 0
 3875 0028 FFF7FEFF 		bl	vPortExitCritical
 3876              	.LVL342:
 3877 002c 10BD     		pop	{r4, pc}
 3878              	.LVL343:
 3879              	.L395:
 3880 002e 00BF     		.align	2
 3881              	.L394:
 3882 0030 00000000 		.word	.LANCHOR17
 3883 0034 00000000 		.word	.LANCHOR15
 3884              		.cfi_endproc
 3885              	.LFE35:
 3887              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3888              		.align	1
 3889              		.global	vTaskInternalSetTimeOutState
 3890              		.syntax unified
 3891              		.thumb
 3892              		.thumb_func
 3893              		.fpu softvfp
 3895              	vTaskInternalSetTimeOutState:
 3896              	.LFB36:
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3897              		.loc 1 3093 0
 3898              		.cfi_startproc
 3899              		@ args = 0, pretend = 0, frame = 0
 3900              		@ frame_needed = 0, uses_anonymous_args = 0
 3901              		@ link register save eliminated.
 3902              	.LVL344:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3903              		.loc 1 3095 0
 3904 0000 034B     		ldr	r3, .L397
 3905 0002 1B68     		ldr	r3, [r3]
 3906 0004 0360     		str	r3, [r0]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3907              		.loc 1 3096 0
 3908 0006 034B     		ldr	r3, .L397+4
 3909 0008 1B68     		ldr	r3, [r3]
 3910 000a 4360     		str	r3, [r0, #4]
 3911 000c 7047     		bx	lr
 3912              	.L398:
 3913 000e 00BF     		.align	2
 3914              	.L397:
 3915 0010 00000000 		.word	.LANCHOR17
 3916 0014 00000000 		.word	.LANCHOR15
 3917              		.cfi_endproc
 3918              	.LFE36:
 3920              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3921              		.align	1
 3922              		.global	xTaskCheckForTimeOut
 3923              		.syntax unified
 3924              		.thumb
 3925              		.thumb_func
 3926              		.fpu softvfp
 3928              	xTaskCheckForTimeOut:
 3929              	.LFB37:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3930              		.loc 1 3101 0
ARM GAS  /tmp/ccuv3C2e.s 			page 168


 3931              		.cfi_startproc
 3932              		@ args = 0, pretend = 0, frame = 0
 3933              		@ frame_needed = 0, uses_anonymous_args = 0
 3934              	.LVL345:
 3935 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3936              		.cfi_def_cfa_offset 24
 3937              		.cfi_offset 3, -24
 3938              		.cfi_offset 4, -20
 3939              		.cfi_offset 5, -16
 3940              		.cfi_offset 6, -12
 3941              		.cfi_offset 7, -8
 3942              		.cfi_offset 14, -4
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3943              		.loc 1 3104 0
 3944 0002 E0B1     		cbz	r0, .L410
 3945 0004 0546     		mov	r5, r0
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3946              		.loc 1 3105 0
 3947 0006 19B3     		cbz	r1, .L411
 3948 0008 0C46     		mov	r4, r1
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3949              		.loc 1 3107 0
 3950 000a FFF7FEFF 		bl	vPortEnterCritical
 3951              	.LVL346:
 3952              	.LBB203:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3953              		.loc 1 3110 0
 3954 000e 1A4B     		ldr	r3, .L413
 3955 0010 1868     		ldr	r0, [r3]
 3956              	.LVL347:
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3957              		.loc 1 3111 0
 3958 0012 6968     		ldr	r1, [r5, #4]
 3959 0014 421A     		subs	r2, r0, r1
 3960              	.LVL348:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3961              		.loc 1 3125 0
 3962 0016 2368     		ldr	r3, [r4]
 3963 0018 B3F1FF3F 		cmp	r3, #-1
 3964 001c 28D0     		beq	.L407
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3965              		.loc 1 3135 0
 3966 001e 2F68     		ldr	r7, [r5]
 3967 0020 164E     		ldr	r6, .L413+4
 3968 0022 3668     		ldr	r6, [r6]
 3969 0024 B742     		cmp	r7, r6
 3970 0026 01D0     		beq	.L405
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3971              		.loc 1 3135 0 is_stmt 0 discriminator 1
 3972 0028 8842     		cmp	r0, r1
 3973 002a 23D2     		bcs	.L408
 3974              	.L405:
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3975              		.loc 1 3144 0 is_stmt 1
 3976 002c 9A42     		cmp	r2, r3
 3977 002e 18D3     		bcc	.L412
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
ARM GAS  /tmp/ccuv3C2e.s 			page 169


 3978              		.loc 1 3153 0
 3979 0030 0023     		movs	r3, #0
 3980 0032 2360     		str	r3, [r4]
 3981              	.LVL349:
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3982              		.loc 1 3154 0
 3983 0034 0124     		movs	r4, #1
 3984              	.LVL350:
 3985              	.L404:
 3986              	.LBE203:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3987              		.loc 1 3157 0
 3988 0036 FFF7FEFF 		bl	vPortExitCritical
 3989              	.LVL351:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3990              		.loc 1 3160 0
 3991 003a 2046     		mov	r0, r4
 3992 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3993              	.LVL352:
 3994              	.L410:
 3995              	.LBB204:
 3996              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3997              		.loc 2 195 0
 3998              		.syntax unified
 3999              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4000 003e 4FF05003 			mov r3, #80												
 4001 0042 83F31188 		msr basepri, r3											
 4002 0046 BFF36F8F 		isb														
 4003 004a BFF34F8F 		dsb														
 4004              	
 4005              	@ 0 "" 2
 4006              	.LVL353:
 4007              		.thumb
 4008              		.syntax unified
 4009              	.L401:
 4010 004e FEE7     		b	.L401
 4011              	.L411:
 4012              	.LBE205:
 4013              	.LBE204:
 4014              	.LBB206:
 4015              	.LBB207:
 4016              		.syntax unified
 4017              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4018 0050 4FF05003 			mov r3, #80												
 4019 0054 83F31188 		msr basepri, r3											
 4020 0058 BFF36F8F 		isb														
 4021 005c BFF34F8F 		dsb														
 4022              	
 4023              	@ 0 "" 2
 4024              	.LVL354:
 4025              		.thumb
 4026              		.syntax unified
 4027              	.L403:
 4028 0060 FEE7     		b	.L403
 4029              	.LVL355:
 4030              	.L412:
ARM GAS  /tmp/ccuv3C2e.s 			page 170


 4031              	.LBE207:
 4032              	.LBE206:
 4033              	.LBB208:
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4034              		.loc 1 3147 0
 4035 0062 9B1A     		subs	r3, r3, r2
 4036 0064 2360     		str	r3, [r4]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4037              		.loc 1 3148 0
 4038 0066 2846     		mov	r0, r5
 4039              	.LVL356:
 4040 0068 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4041              	.LVL357:
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4042              		.loc 1 3149 0
 4043 006c 0024     		movs	r4, #0
 4044              	.LVL358:
 4045 006e E2E7     		b	.L404
 4046              	.LVL359:
 4047              	.L407:
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4048              		.loc 1 3130 0
 4049 0070 0024     		movs	r4, #0
 4050              	.LVL360:
 4051 0072 E0E7     		b	.L404
 4052              	.LVL361:
 4053              	.L408:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4054              		.loc 1 3142 0
 4055 0074 0124     		movs	r4, #1
 4056              	.LVL362:
 4057 0076 DEE7     		b	.L404
 4058              	.L414:
 4059              		.align	2
 4060              	.L413:
 4061 0078 00000000 		.word	.LANCHOR15
 4062 007c 00000000 		.word	.LANCHOR17
 4063              	.LBE208:
 4064              		.cfi_endproc
 4065              	.LFE37:
 4067              		.section	.text.vTaskMissedYield,"ax",%progbits
 4068              		.align	1
 4069              		.global	vTaskMissedYield
 4070              		.syntax unified
 4071              		.thumb
 4072              		.thumb_func
 4073              		.fpu softvfp
 4075              	vTaskMissedYield:
 4076              	.LFB38:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4077              		.loc 1 3164 0
 4078              		.cfi_startproc
 4079              		@ args = 0, pretend = 0, frame = 0
 4080              		@ frame_needed = 0, uses_anonymous_args = 0
 4081              		@ link register save eliminated.
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4082              		.loc 1 3165 0
ARM GAS  /tmp/ccuv3C2e.s 			page 171


 4083 0000 0122     		movs	r2, #1
 4084 0002 014B     		ldr	r3, .L416
 4085 0004 1A60     		str	r2, [r3]
 4086 0006 7047     		bx	lr
 4087              	.L417:
 4088              		.align	2
 4089              	.L416:
 4090 0008 00000000 		.word	.LANCHOR19
 4091              		.cfi_endproc
 4092              	.LFE38:
 4094              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4095              		.align	1
 4096              		.global	uxTaskGetTaskNumber
 4097              		.syntax unified
 4098              		.thumb
 4099              		.thumb_func
 4100              		.fpu softvfp
 4102              	uxTaskGetTaskNumber:
 4103              	.LFB39:
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4104              		.loc 1 3172 0
 4105              		.cfi_startproc
 4106              		@ args = 0, pretend = 0, frame = 0
 4107              		@ frame_needed = 0, uses_anonymous_args = 0
 4108              		@ link register save eliminated.
 4109              	.LVL363:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4110              		.loc 1 3176 0
 4111 0000 08B1     		cbz	r0, .L420
 4112              	.LVL364:
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4113              		.loc 1 3179 0
 4114 0002 806C     		ldr	r0, [r0, #72]
 4115              	.LVL365:
 4116 0004 7047     		bx	lr
 4117              	.LVL366:
 4118              	.L420:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4119              		.loc 1 3183 0
 4120 0006 0020     		movs	r0, #0
 4121              	.LVL367:
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4122              		.loc 1 3187 0
 4123 0008 7047     		bx	lr
 4124              		.cfi_endproc
 4125              	.LFE39:
 4127              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4128              		.align	1
 4129              		.global	vTaskSetTaskNumber
 4130              		.syntax unified
 4131              		.thumb
 4132              		.thumb_func
 4133              		.fpu softvfp
 4135              	vTaskSetTaskNumber:
 4136              	.LFB40:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4137              		.loc 1 3195 0
ARM GAS  /tmp/ccuv3C2e.s 			page 172


 4138              		.cfi_startproc
 4139              		@ args = 0, pretend = 0, frame = 0
 4140              		@ frame_needed = 0, uses_anonymous_args = 0
 4141              		@ link register save eliminated.
 4142              	.LVL368:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4143              		.loc 1 3198 0
 4144 0000 00B1     		cbz	r0, .L421
 4145              	.LVL369:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4146              		.loc 1 3201 0
 4147 0002 8164     		str	r1, [r0, #72]
 4148              	.LVL370:
 4149              	.L421:
 4150 0004 7047     		bx	lr
 4151              		.cfi_endproc
 4152              	.LFE40:
 4154              		.section	.text.vTaskGetInfo,"ax",%progbits
 4155              		.align	1
 4156              		.global	vTaskGetInfo
 4157              		.syntax unified
 4158              		.thumb
 4159              		.thumb_func
 4160              		.fpu softvfp
 4162              	vTaskGetInfo:
 4163              	.LFB44:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4164              		.loc 1 3494 0
 4165              		.cfi_startproc
 4166              		@ args = 0, pretend = 0, frame = 0
 4167              		@ frame_needed = 0, uses_anonymous_args = 0
 4168              	.LVL371:
 4169 0000 70B5     		push	{r4, r5, r6, lr}
 4170              		.cfi_def_cfa_offset 16
 4171              		.cfi_offset 4, -16
 4172              		.cfi_offset 5, -12
 4173              		.cfi_offset 6, -8
 4174              		.cfi_offset 14, -4
 4175 0002 0D46     		mov	r5, r1
 4176 0004 1646     		mov	r6, r2
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4177              		.loc 1 3498 0
 4178 0006 0446     		mov	r4, r0
 4179 0008 D0B1     		cbz	r0, .L433
 4180              	.LVL372:
 4181              	.L424:
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4182              		.loc 1 3500 0 discriminator 4
 4183 000a 2C60     		str	r4, [r5]
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4184              		.loc 1 3501 0 discriminator 4
 4185 000c 04F13402 		add	r2, r4, #52
 4186 0010 6A60     		str	r2, [r5, #4]
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4187              		.loc 1 3502 0 discriminator 4
 4188 0012 E26A     		ldr	r2, [r4, #44]
 4189 0014 2A61     		str	r2, [r5, #16]
ARM GAS  /tmp/ccuv3C2e.s 			page 173


3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4190              		.loc 1 3503 0 discriminator 4
 4191 0016 226B     		ldr	r2, [r4, #48]
 4192 0018 EA61     		str	r2, [r5, #28]
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4193              		.loc 1 3504 0 discriminator 4
 4194 001a 626C     		ldr	r2, [r4, #68]
 4195 001c AA60     		str	r2, [r5, #8]
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4196              		.loc 1 3508 0 discriminator 4
 4197 001e E26C     		ldr	r2, [r4, #76]
 4198 0020 6A61     		str	r2, [r5, #20]
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4199              		.loc 1 3522 0 discriminator 4
 4200 0022 0022     		movs	r2, #0
 4201 0024 AA61     		str	r2, [r5, #24]
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4202              		.loc 1 3529 0 discriminator 4
 4203 0026 052B     		cmp	r3, #5
 4204 0028 19D0     		beq	.L425
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4205              		.loc 1 3531 0
 4206 002a 124A     		ldr	r2, .L437
 4207 002c 1268     		ldr	r2, [r2]
 4208 002e 9442     		cmp	r4, r2
 4209 0030 09D0     		beq	.L434
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4210              		.loc 1 3537 0
 4211 0032 2B73     		strb	r3, [r5, #12]
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4212              		.loc 1 3544 0
 4213 0034 032B     		cmp	r3, #3
 4214 0036 09D0     		beq	.L435
 4215              	.LVL373:
 4216              	.L427:
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4217              		.loc 1 3566 0
 4218 0038 B6B9     		cbnz	r6, .L436
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4219              		.loc 1 3580 0
 4220 003a 0023     		movs	r3, #0
 4221 003c 2B84     		strh	r3, [r5, #32]	@ movhi
 4222 003e 70BD     		pop	{r4, r5, r6, pc}
 4223              	.LVL374:
 4224              	.L433:
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4225              		.loc 1 3498 0 discriminator 1
 4226 0040 0C4A     		ldr	r2, .L437
 4227              	.LVL375:
 4228 0042 1468     		ldr	r4, [r2]
 4229 0044 E1E7     		b	.L424
 4230              	.LVL376:
 4231              	.L434:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4232              		.loc 1 3533 0
 4233 0046 0023     		movs	r3, #0
 4234              	.LVL377:
ARM GAS  /tmp/ccuv3C2e.s 			page 174


 4235 0048 2B73     		strb	r3, [r5, #12]
 4236 004a F5E7     		b	.L427
 4237              	.LVL378:
 4238              	.L435:
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4239              		.loc 1 3546 0
 4240 004c FFF7FEFF 		bl	vTaskSuspendAll
 4241              	.LVL379:
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4242              		.loc 1 3548 0
 4243 0050 A36A     		ldr	r3, [r4, #40]
 4244 0052 0BB1     		cbz	r3, .L428
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4245              		.loc 1 3550 0
 4246 0054 0223     		movs	r3, #2
 4247 0056 2B73     		strb	r3, [r5, #12]
 4248              	.L428:
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4249              		.loc 1 3553 0
 4250 0058 FFF7FEFF 		bl	xTaskResumeAll
 4251              	.LVL380:
 4252 005c ECE7     		b	.L427
 4253              	.LVL381:
 4254              	.L425:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4255              		.loc 1 3561 0
 4256 005e 2046     		mov	r0, r4
 4257              	.LVL382:
 4258 0060 FFF7FEFF 		bl	eTaskGetState
 4259              	.LVL383:
 4260 0064 2873     		strb	r0, [r5, #12]
 4261 0066 E7E7     		b	.L427
 4262              	.L436:
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4263              		.loc 1 3574 0
 4264 0068 206B     		ldr	r0, [r4, #48]
 4265 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4266              	.LVL384:
 4267 006e 2884     		strh	r0, [r5, #32]	@ movhi
 4268 0070 70BD     		pop	{r4, r5, r6, pc}
 4269              	.LVL385:
 4270              	.L438:
 4271 0072 00BF     		.align	2
 4272              	.L437:
 4273 0074 00000000 		.word	.LANCHOR10
 4274              		.cfi_endproc
 4275              	.LFE44:
 4277              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4278              		.align	1
 4279              		.syntax unified
 4280              		.thumb
 4281              		.thumb_func
 4282              		.fpu softvfp
 4284              	prvListTasksWithinSingleList:
 4285              	.LFB45:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4286              		.loc 1 3590 0
ARM GAS  /tmp/ccuv3C2e.s 			page 175


 4287              		.cfi_startproc
 4288              		@ args = 0, pretend = 0, frame = 0
 4289              		@ frame_needed = 0, uses_anonymous_args = 0
 4290              	.LVL386:
 4291 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4292              		.cfi_def_cfa_offset 32
 4293              		.cfi_offset 4, -32
 4294              		.cfi_offset 5, -28
 4295              		.cfi_offset 6, -24
 4296              		.cfi_offset 7, -20
 4297              		.cfi_offset 8, -16
 4298              		.cfi_offset 9, -12
 4299              		.cfi_offset 10, -8
 4300              		.cfi_offset 14, -4
 4301              	.LVL387:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4302              		.loc 1 3594 0
 4303 0004 0B68     		ldr	r3, [r1]
 4304 0006 3BB3     		cbz	r3, .L444
 4305              	.LVL388:
 4306              	.LBB209:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4307              		.loc 1 3596 0
 4308 0008 4B68     		ldr	r3, [r1, #4]
 4309 000a 5B68     		ldr	r3, [r3, #4]
 4310 000c 4B60     		str	r3, [r1, #4]
 4311 000e 01F10809 		add	r9, r1, #8
 4312 0012 4B45     		cmp	r3, r9
 4313 0014 07D0     		beq	.L446
 4314              	.L441:
 4315 0016 9046     		mov	r8, r2
 4316 0018 0D46     		mov	r5, r1
 4317 001a 0746     		mov	r7, r0
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4318              		.loc 1 3596 0 is_stmt 0 discriminator 3
 4319 001c 4B68     		ldr	r3, [r1, #4]
 4320 001e D3F80CA0 		ldr	r10, [r3, #12]
 4321              	.LVL389:
 4322              	.LBE209:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4323              		.loc 1 3592 0 is_stmt 1 discriminator 3
 4324 0022 0024     		movs	r4, #0
 4325 0024 10E0     		b	.L443
 4326              	.LVL390:
 4327              	.L446:
 4328              	.LBB210:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4329              		.loc 1 3596 0 discriminator 1
 4330 0026 5B68     		ldr	r3, [r3, #4]
 4331 0028 4B60     		str	r3, [r1, #4]
 4332 002a F4E7     		b	.L441
 4333              	.LVL391:
 4334              	.L442:
 4335              	.LBE210:
 4336              	.LBB211:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4337              		.loc 1 3604 0 discriminator 3
ARM GAS  /tmp/ccuv3C2e.s 			page 176


 4338 002c 6B68     		ldr	r3, [r5, #4]
 4339 002e DE68     		ldr	r6, [r3, #12]
 4340              	.LVL392:
 4341              	.LBE211:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4342              		.loc 1 3605 0 discriminator 3
 4343 0030 04EBC403 		add	r3, r4, r4, lsl #3
 4344 0034 9900     		lsls	r1, r3, #2
 4345 0036 4346     		mov	r3, r8
 4346 0038 0122     		movs	r2, #1
 4347 003a 3944     		add	r1, r1, r7
 4348 003c 3046     		mov	r0, r6
 4349 003e FFF7FEFF 		bl	vTaskGetInfo
 4350              	.LVL393:
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4351              		.loc 1 3606 0 discriminator 3
 4352 0042 0134     		adds	r4, r4, #1
 4353              	.LVL394:
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4354              		.loc 1 3607 0 discriminator 3
 4355 0044 B245     		cmp	r10, r6
 4356 0046 08D0     		beq	.L439
 4357              	.LVL395:
 4358              	.L443:
 4359              	.LBB212:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4360              		.loc 1 3604 0
 4361 0048 6B68     		ldr	r3, [r5, #4]
 4362 004a 5B68     		ldr	r3, [r3, #4]
 4363 004c 6B60     		str	r3, [r5, #4]
 4364 004e 9945     		cmp	r9, r3
 4365 0050 ECD1     		bne	.L442
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4366              		.loc 1 3604 0 is_stmt 0 discriminator 1
 4367 0052 5B68     		ldr	r3, [r3, #4]
 4368 0054 6B60     		str	r3, [r5, #4]
 4369 0056 E9E7     		b	.L442
 4370              	.LVL396:
 4371              	.L444:
 4372              	.LBE212:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4373              		.loc 1 3592 0 is_stmt 1
 4374 0058 0024     		movs	r4, #0
 4375              	.LVL397:
 4376              	.L439:
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4377              		.loc 1 3615 0
 4378 005a 2046     		mov	r0, r4
 4379 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4380              		.cfi_endproc
 4381              	.LFE45:
 4383              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4384              		.align	1
 4385              		.global	uxTaskGetSystemState
 4386              		.syntax unified
 4387              		.thumb
 4388              		.thumb_func
ARM GAS  /tmp/ccuv3C2e.s 			page 177


 4389              		.fpu softvfp
 4391              	uxTaskGetSystemState:
 4392              	.LFB27:
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4393              		.loc 1 2404 0
 4394              		.cfi_startproc
 4395              		@ args = 0, pretend = 0, frame = 0
 4396              		@ frame_needed = 0, uses_anonymous_args = 0
 4397              	.LVL398:
 4398 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4399              		.cfi_def_cfa_offset 24
 4400              		.cfi_offset 3, -24
 4401              		.cfi_offset 4, -20
 4402              		.cfi_offset 5, -16
 4403              		.cfi_offset 6, -12
 4404              		.cfi_offset 7, -8
 4405              		.cfi_offset 14, -4
 4406 0002 0746     		mov	r7, r0
 4407 0004 0C46     		mov	r4, r1
 4408 0006 1646     		mov	r6, r2
 4409              	.LVL399:
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4410              		.loc 1 2407 0
 4411 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4412              	.LVL400:
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4413              		.loc 1 2410 0
 4414 000c 224B     		ldr	r3, .L452
 4415 000e 1B68     		ldr	r3, [r3]
 4416 0010 A342     		cmp	r3, r4
 4417 0012 3ED8     		bhi	.L450
 4418 0014 3824     		movs	r4, #56
 4419              	.LVL401:
 4420 0016 0025     		movs	r5, #0
 4421              	.LVL402:
 4422              	.L449:
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4423              		.loc 1 2416 0 discriminator 1
 4424 0018 013C     		subs	r4, r4, #1
 4425              	.LVL403:
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4426              		.loc 1 2417 0 discriminator 1
 4427 001a 05EBC503 		add	r3, r5, r5, lsl #3
 4428 001e 9800     		lsls	r0, r3, #2
 4429 0020 04EB8402 		add	r2, r4, r4, lsl #2
 4430 0024 9300     		lsls	r3, r2, #2
 4431 0026 0122     		movs	r2, #1
 4432 0028 1C49     		ldr	r1, .L452+4
 4433 002a 1944     		add	r1, r1, r3
 4434 002c 3844     		add	r0, r0, r7
 4435 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4436              	.LVL404:
 4437 0032 0544     		add	r5, r5, r0
 4438              	.LVL405:
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4439              		.loc 1 2419 0 discriminator 1
 4440 0034 002C     		cmp	r4, #0
ARM GAS  /tmp/ccuv3C2e.s 			page 178


 4441 0036 EFD1     		bne	.L449
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4442              		.loc 1 2423 0
 4443 0038 05EBC503 		add	r3, r5, r5, lsl #3
 4444 003c 9800     		lsls	r0, r3, #2
 4445 003e 184B     		ldr	r3, .L452+8
 4446 0040 1968     		ldr	r1, [r3]
 4447 0042 0222     		movs	r2, #2
 4448 0044 3844     		add	r0, r0, r7
 4449 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4450              	.LVL406:
 4451 004a 2C18     		adds	r4, r5, r0
 4452              	.LVL407:
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4453              		.loc 1 2424 0
 4454 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4455 0050 9800     		lsls	r0, r3, #2
 4456 0052 144B     		ldr	r3, .L452+12
 4457 0054 1968     		ldr	r1, [r3]
 4458 0056 0222     		movs	r2, #2
 4459 0058 3844     		add	r0, r0, r7
 4460 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4461              	.LVL408:
 4462 005e 0444     		add	r4, r4, r0
 4463              	.LVL409:
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4464              		.loc 1 2430 0
 4465 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4466 0064 9800     		lsls	r0, r3, #2
 4467 0066 0422     		movs	r2, #4
 4468 0068 0F49     		ldr	r1, .L452+16
 4469 006a 3844     		add	r0, r0, r7
 4470 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4471              	.LVL410:
 4472 0070 0444     		add	r4, r4, r0
 4473              	.LVL411:
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4474              		.loc 1 2438 0
 4475 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4476 0076 9800     		lsls	r0, r3, #2
 4477 0078 0322     		movs	r2, #3
 4478 007a 0C49     		ldr	r1, .L452+20
 4479 007c 3844     		add	r0, r0, r7
 4480 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4481              	.LVL412:
 4482 0082 0444     		add	r4, r4, r0
 4483              	.LVL413:
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4484              		.loc 1 2455 0
 4485 0084 0EB1     		cbz	r6, .L448
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4486              		.loc 1 2457 0
 4487 0086 0023     		movs	r3, #0
 4488 0088 3360     		str	r3, [r6]
 4489              	.LVL414:
 4490              	.L448:
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 179


 4491              		.loc 1 2467 0
 4492 008a FFF7FEFF 		bl	xTaskResumeAll
 4493              	.LVL415:
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4494              		.loc 1 2470 0
 4495 008e 2046     		mov	r0, r4
 4496 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4497              	.LVL416:
 4498              	.L450:
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4499              		.loc 1 2405 0
 4500 0092 0024     		movs	r4, #0
 4501              	.LVL417:
 4502 0094 F9E7     		b	.L448
 4503              	.L453:
 4504 0096 00BF     		.align	2
 4505              	.L452:
 4506 0098 00000000 		.word	.LANCHOR9
 4507 009c 00000000 		.word	.LANCHOR4
 4508 00a0 00000000 		.word	.LANCHOR2
 4509 00a4 00000000 		.word	.LANCHOR8
 4510 00a8 00000000 		.word	.LANCHOR7
 4511 00ac 00000000 		.word	.LANCHOR0
 4512              		.cfi_endproc
 4513              	.LFE27:
 4515              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4516              		.align	1
 4517              		.global	uxTaskGetStackHighWaterMark
 4518              		.syntax unified
 4519              		.thumb
 4520              		.thumb_func
 4521              		.fpu softvfp
 4523              	uxTaskGetStackHighWaterMark:
 4524              	.LFB47:
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4525              		.loc 1 3643 0
 4526              		.cfi_startproc
 4527              		@ args = 0, pretend = 0, frame = 0
 4528              		@ frame_needed = 0, uses_anonymous_args = 0
 4529              	.LVL418:
 4530 0000 08B5     		push	{r3, lr}
 4531              		.cfi_def_cfa_offset 8
 4532              		.cfi_offset 3, -8
 4533              		.cfi_offset 14, -4
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4534              		.loc 1 3648 0
 4535 0002 0346     		mov	r3, r0
 4536 0004 18B1     		cbz	r0, .L458
 4537              	.L455:
 4538              	.LVL419:
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4539              		.loc 1 3660 0 discriminator 4
 4540 0006 186B     		ldr	r0, [r3, #48]
 4541              	.LVL420:
 4542 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4543              	.LVL421:
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 180


 4544              		.loc 1 3663 0 discriminator 4
 4545 000c 08BD     		pop	{r3, pc}
 4546              	.LVL422:
 4547              	.L458:
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4548              		.loc 1 3648 0 discriminator 1
 4549 000e 014B     		ldr	r3, .L459
 4550 0010 1B68     		ldr	r3, [r3]
 4551 0012 F8E7     		b	.L455
 4552              	.L460:
 4553              		.align	2
 4554              	.L459:
 4555 0014 00000000 		.word	.LANCHOR10
 4556              		.cfi_endproc
 4557              	.LFE47:
 4559              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4560              		.align	1
 4561              		.global	xTaskGetCurrentTaskHandle
 4562              		.syntax unified
 4563              		.thumb
 4564              		.thumb_func
 4565              		.fpu softvfp
 4567              	xTaskGetCurrentTaskHandle:
 4568              	.LFB50:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4569              		.loc 1 3751 0
 4570              		.cfi_startproc
 4571              		@ args = 0, pretend = 0, frame = 0
 4572              		@ frame_needed = 0, uses_anonymous_args = 0
 4573              		@ link register save eliminated.
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4574              		.loc 1 3757 0
 4575 0000 014B     		ldr	r3, .L462
 4576 0002 1868     		ldr	r0, [r3]
 4577              	.LVL423:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4578              		.loc 1 3760 0
 4579 0004 7047     		bx	lr
 4580              	.L463:
 4581 0006 00BF     		.align	2
 4582              	.L462:
 4583 0008 00000000 		.word	.LANCHOR10
 4584              		.cfi_endproc
 4585              	.LFE50:
 4587              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4588              		.align	1
 4589              		.global	xTaskGetSchedulerState
 4590              		.syntax unified
 4591              		.thumb
 4592              		.thumb_func
 4593              		.fpu softvfp
 4595              	xTaskGetSchedulerState:
 4596              	.LFB51:
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4597              		.loc 1 3768 0
 4598              		.cfi_startproc
 4599              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccuv3C2e.s 			page 181


 4600              		@ frame_needed = 0, uses_anonymous_args = 0
 4601              		@ link register save eliminated.
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4602              		.loc 1 3771 0
 4603 0000 054B     		ldr	r3, .L468
 4604 0002 1B68     		ldr	r3, [r3]
 4605 0004 23B1     		cbz	r3, .L466
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4606              		.loc 1 3777 0
 4607 0006 054B     		ldr	r3, .L468+4
 4608 0008 1B68     		ldr	r3, [r3]
 4609 000a 1BB9     		cbnz	r3, .L467
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4610              		.loc 1 3779 0
 4611 000c 0220     		movs	r0, #2
 4612 000e 7047     		bx	lr
 4613              	.L466:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4614              		.loc 1 3773 0
 4615 0010 0120     		movs	r0, #1
 4616 0012 7047     		bx	lr
 4617              	.L467:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4618              		.loc 1 3783 0
 4619 0014 0020     		movs	r0, #0
 4620              	.LVL424:
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4621              		.loc 1 3788 0
 4622 0016 7047     		bx	lr
 4623              	.L469:
 4624              		.align	2
 4625              	.L468:
 4626 0018 00000000 		.word	.LANCHOR11
 4627 001c 00000000 		.word	.LANCHOR16
 4628              		.cfi_endproc
 4629              	.LFE51:
 4631              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4632              		.align	1
 4633              		.global	xTaskPriorityInherit
 4634              		.syntax unified
 4635              		.thumb
 4636              		.thumb_func
 4637              		.fpu softvfp
 4639              	xTaskPriorityInherit:
 4640              	.LFB52:
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4641              		.loc 1 3796 0
 4642              		.cfi_startproc
 4643              		@ args = 0, pretend = 0, frame = 0
 4644              		@ frame_needed = 0, uses_anonymous_args = 0
 4645              	.LVL425:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4646              		.loc 1 3803 0
 4647 0000 0028     		cmp	r0, #0
 4648 0002 44D0     		beq	.L477
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4649              		.loc 1 3796 0
ARM GAS  /tmp/ccuv3C2e.s 			page 182


 4650 0004 38B5     		push	{r3, r4, r5, lr}
 4651              		.cfi_def_cfa_offset 16
 4652              		.cfi_offset 3, -16
 4653              		.cfi_offset 4, -12
 4654              		.cfi_offset 5, -8
 4655              		.cfi_offset 14, -4
 4656 0006 0546     		mov	r5, r0
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4657              		.loc 1 3808 0
 4658 0008 C26A     		ldr	r2, [r0, #44]
 4659 000a 2249     		ldr	r1, .L487
 4660 000c 0968     		ldr	r1, [r1]
 4661 000e C96A     		ldr	r1, [r1, #44]
 4662 0010 8A42     		cmp	r2, r1
 4663 0012 32D2     		bcs	.L472
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4664              		.loc 1 3813 0
 4665 0014 8169     		ldr	r1, [r0, #24]
 4666 0016 0029     		cmp	r1, #0
 4667 0018 05DB     		blt	.L473
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4668              		.loc 1 3815 0
 4669 001a 1E49     		ldr	r1, .L487
 4670 001c 0968     		ldr	r1, [r1]
 4671 001e C96A     		ldr	r1, [r1, #44]
 4672 0020 C1F13801 		rsb	r1, r1, #56
 4673 0024 8161     		str	r1, [r0, #24]
 4674              	.L473:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4675              		.loc 1 3824 0
 4676 0026 6869     		ldr	r0, [r5, #20]
 4677              	.LVL426:
 4678 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4679 002c 9100     		lsls	r1, r2, #2
 4680 002e 1A4A     		ldr	r2, .L487+4
 4681 0030 0A44     		add	r2, r2, r1
 4682 0032 9042     		cmp	r0, r2
 4683 0034 07D0     		beq	.L484
 4684 0036 0022     		movs	r2, #0
 4685              	.L474:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4686              		.loc 1 3824 0 is_stmt 0 discriminator 4
 4687 0038 3AB9     		cbnz	r2, .L485
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4688              		.loc 1 3842 0 is_stmt 1
 4689 003a 164A     		ldr	r2, .L487
 4690 003c 1268     		ldr	r2, [r2]
 4691 003e D26A     		ldr	r2, [r2, #44]
 4692 0040 EA62     		str	r2, [r5, #44]
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4693              		.loc 1 3848 0
 4694 0042 0120     		movs	r0, #1
 4695 0044 38BD     		pop	{r3, r4, r5, pc}
 4696              	.LVL427:
 4697              	.L484:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4698              		.loc 1 3824 0
ARM GAS  /tmp/ccuv3C2e.s 			page 183


 4699 0046 0122     		movs	r2, #1
 4700 0048 F6E7     		b	.L474
 4701              	.L485:
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4702              		.loc 1 3826 0
 4703 004a 2C1D     		adds	r4, r5, #4
 4704 004c 2046     		mov	r0, r4
 4705 004e FFF7FEFF 		bl	uxListRemove
 4706              	.LVL428:
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4707              		.loc 1 3836 0
 4708 0052 104B     		ldr	r3, .L487
 4709 0054 1B68     		ldr	r3, [r3]
 4710 0056 DB6A     		ldr	r3, [r3, #44]
 4711 0058 EB62     		str	r3, [r5, #44]
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4712              		.loc 1 3837 0
 4713 005a 104A     		ldr	r2, .L487+8
 4714 005c 1268     		ldr	r2, [r2]
 4715 005e 9342     		cmp	r3, r2
 4716 0060 01D9     		bls	.L476
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4717              		.loc 1 3837 0 is_stmt 0 discriminator 1
 4718 0062 0E4A     		ldr	r2, .L487+8
 4719 0064 1360     		str	r3, [r2]
 4720              	.L476:
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4721              		.loc 1 3837 0 discriminator 3
 4722 0066 03EB8303 		add	r3, r3, r3, lsl #2
 4723 006a 9A00     		lsls	r2, r3, #2
 4724 006c 2146     		mov	r1, r4
 4725 006e 0A48     		ldr	r0, .L487+4
 4726 0070 1044     		add	r0, r0, r2
 4727 0072 FFF7FEFF 		bl	vListInsertEnd
 4728              	.LVL429:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4729              		.loc 1 3848 0 is_stmt 1 discriminator 3
 4730 0076 0120     		movs	r0, #1
 4731 0078 38BD     		pop	{r3, r4, r5, pc}
 4732              	.LVL430:
 4733              	.L472:
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4734              		.loc 1 3852 0
 4735 007a C26C     		ldr	r2, [r0, #76]
 4736 007c 054B     		ldr	r3, .L487
 4737 007e 1B68     		ldr	r3, [r3]
 4738 0080 DB6A     		ldr	r3, [r3, #44]
 4739 0082 9A42     		cmp	r2, r3
 4740 0084 01D2     		bcs	.L486
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4741              		.loc 1 3861 0
 4742 0086 0120     		movs	r0, #1
 4743              	.LVL431:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4744              		.loc 1 3875 0
 4745 0088 38BD     		pop	{r3, r4, r5, pc}
 4746              	.LVL432:
ARM GAS  /tmp/ccuv3C2e.s 			page 184


 4747              	.L486:
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4748              		.loc 1 3798 0
 4749 008a 0020     		movs	r0, #0
 4750              	.LVL433:
 4751 008c 38BD     		pop	{r3, r4, r5, pc}
 4752              	.LVL434:
 4753              	.L477:
 4754              		.cfi_def_cfa_offset 0
 4755              		.cfi_restore 3
 4756              		.cfi_restore 4
 4757              		.cfi_restore 5
 4758              		.cfi_restore 14
 4759 008e 0020     		movs	r0, #0
 4760              	.LVL435:
 4761 0090 7047     		bx	lr
 4762              	.L488:
 4763 0092 00BF     		.align	2
 4764              	.L487:
 4765 0094 00000000 		.word	.LANCHOR10
 4766 0098 00000000 		.word	.LANCHOR4
 4767 009c 00000000 		.word	.LANCHOR13
 4768              		.cfi_endproc
 4769              	.LFE52:
 4771              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4772              		.align	1
 4773              		.global	xTaskPriorityDisinherit
 4774              		.syntax unified
 4775              		.thumb
 4776              		.thumb_func
 4777              		.fpu softvfp
 4779              	xTaskPriorityDisinherit:
 4780              	.LFB53:
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4781              		.loc 1 3883 0
 4782              		.cfi_startproc
 4783              		@ args = 0, pretend = 0, frame = 0
 4784              		@ frame_needed = 0, uses_anonymous_args = 0
 4785              	.LVL436:
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4786              		.loc 1 3887 0
 4787 0000 0028     		cmp	r0, #0
 4788 0002 39D0     		beq	.L496
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4789              		.loc 1 3883 0
 4790 0004 38B5     		push	{r3, r4, r5, lr}
 4791              		.cfi_def_cfa_offset 16
 4792              		.cfi_offset 3, -16
 4793              		.cfi_offset 4, -12
 4794              		.cfi_offset 5, -8
 4795              		.cfi_offset 14, -4
 4796 0006 0446     		mov	r4, r0
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4797              		.loc 1 3893 0
 4798 0008 1E4A     		ldr	r2, .L503
 4799 000a 1268     		ldr	r2, [r2]
 4800 000c 9042     		cmp	r0, r2
ARM GAS  /tmp/ccuv3C2e.s 			page 185


 4801 000e 08D0     		beq	.L491
 4802              	.LBB213:
 4803              	.LBB214:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4804              		.loc 2 195 0
 4805              		.syntax unified
 4806              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4807 0010 4FF05003 			mov r3, #80												
 4808 0014 83F31188 		msr basepri, r3											
 4809 0018 BFF36F8F 		isb														
 4810 001c BFF34F8F 		dsb														
 4811              	
 4812              	@ 0 "" 2
 4813              	.LVL437:
 4814              		.thumb
 4815              		.syntax unified
 4816              	.L492:
 4817 0020 FEE7     		b	.L492
 4818              	.L491:
 4819              	.LBE214:
 4820              	.LBE213:
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4821              		.loc 1 3894 0
 4822 0022 026D     		ldr	r2, [r0, #80]
 4823 0024 42B9     		cbnz	r2, .L493
 4824              	.LBB215:
 4825              	.LBB216:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4826              		.loc 2 195 0
 4827              		.syntax unified
 4828              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4829 0026 4FF05003 			mov r3, #80												
 4830 002a 83F31188 		msr basepri, r3											
 4831 002e BFF36F8F 		isb														
 4832 0032 BFF34F8F 		dsb														
 4833              	
 4834              	@ 0 "" 2
 4835              	.LVL438:
 4836              		.thumb
 4837              		.syntax unified
 4838              	.L494:
 4839 0036 FEE7     		b	.L494
 4840              	.L493:
 4841              	.LBE216:
 4842              	.LBE215:
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4843              		.loc 1 3895 0
 4844 0038 013A     		subs	r2, r2, #1
 4845 003a 0265     		str	r2, [r0, #80]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4846              		.loc 1 3899 0
 4847 003c C06A     		ldr	r0, [r0, #44]
 4848              	.LVL439:
 4849 003e E16C     		ldr	r1, [r4, #76]
 4850 0040 8842     		cmp	r0, r1
 4851 0042 1BD0     		beq	.L497
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccuv3C2e.s 			page 186


 4852              		.loc 1 3902 0
 4853 0044 E2B9     		cbnz	r2, .L498
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4854              		.loc 1 3909 0
 4855 0046 251D     		adds	r5, r4, #4
 4856 0048 2846     		mov	r0, r5
 4857 004a FFF7FEFF 		bl	uxListRemove
 4858              	.LVL440:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4859              		.loc 1 3921 0
 4860 004e E36C     		ldr	r3, [r4, #76]
 4861 0050 E362     		str	r3, [r4, #44]
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4862              		.loc 1 3926 0
 4863 0052 C3F13802 		rsb	r2, r3, #56
 4864 0056 A261     		str	r2, [r4, #24]
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4865              		.loc 1 3927 0
 4866 0058 0B4A     		ldr	r2, .L503+4
 4867 005a 1268     		ldr	r2, [r2]
 4868 005c 9342     		cmp	r3, r2
 4869 005e 01D9     		bls	.L495
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4870              		.loc 1 3927 0 is_stmt 0 discriminator 1
 4871 0060 094A     		ldr	r2, .L503+4
 4872 0062 1360     		str	r3, [r2]
 4873              	.L495:
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4874              		.loc 1 3927 0 discriminator 3
 4875 0064 03EB8303 		add	r3, r3, r3, lsl #2
 4876 0068 9A00     		lsls	r2, r3, #2
 4877 006a 2946     		mov	r1, r5
 4878 006c 0748     		ldr	r0, .L503+8
 4879 006e 1044     		add	r0, r0, r2
 4880 0070 FFF7FEFF 		bl	vListInsertEnd
 4881              	.LVL441:
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4882              		.loc 1 3937 0 is_stmt 1 discriminator 3
 4883 0074 0120     		movs	r0, #1
 4884 0076 38BD     		pop	{r3, r4, r5, pc}
 4885              	.LVL442:
 4886              	.L496:
 4887              		.cfi_def_cfa_offset 0
 4888              		.cfi_restore 3
 4889              		.cfi_restore 4
 4890              		.cfi_restore 5
 4891              		.cfi_restore 14
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4892              		.loc 1 3885 0
 4893 0078 0020     		movs	r0, #0
 4894              	.LVL443:
 4895 007a 7047     		bx	lr
 4896              	.LVL444:
 4897              	.L497:
 4898              		.cfi_def_cfa_offset 16
 4899              		.cfi_offset 3, -16
 4900              		.cfi_offset 4, -12
ARM GAS  /tmp/ccuv3C2e.s 			page 187


 4901              		.cfi_offset 5, -8
 4902              		.cfi_offset 14, -4
 4903 007c 0020     		movs	r0, #0
 4904 007e 38BD     		pop	{r3, r4, r5, pc}
 4905              	.LVL445:
 4906              	.L498:
 4907 0080 0020     		movs	r0, #0
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4908              		.loc 1 3955 0
 4909 0082 38BD     		pop	{r3, r4, r5, pc}
 4910              	.LVL446:
 4911              	.L504:
 4912              		.align	2
 4913              	.L503:
 4914 0084 00000000 		.word	.LANCHOR10
 4915 0088 00000000 		.word	.LANCHOR13
 4916 008c 00000000 		.word	.LANCHOR4
 4917              		.cfi_endproc
 4918              	.LFE53:
 4920              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4921              		.align	1
 4922              		.global	vTaskPriorityDisinheritAfterTimeout
 4923              		.syntax unified
 4924              		.thumb
 4925              		.thumb_func
 4926              		.fpu softvfp
 4928              	vTaskPriorityDisinheritAfterTimeout:
 4929              	.LFB54:
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4930              		.loc 1 3963 0
 4931              		.cfi_startproc
 4932              		@ args = 0, pretend = 0, frame = 0
 4933              		@ frame_needed = 0, uses_anonymous_args = 0
 4934              	.LVL447:
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4935              		.loc 1 3968 0
 4936 0000 0028     		cmp	r0, #0
 4937 0002 4BD0     		beq	.L517
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4938              		.loc 1 3963 0
 4939 0004 38B5     		push	{r3, r4, r5, lr}
 4940              		.cfi_def_cfa_offset 16
 4941              		.cfi_offset 3, -16
 4942              		.cfi_offset 4, -12
 4943              		.cfi_offset 5, -8
 4944              		.cfi_offset 14, -4
 4945 0006 0446     		mov	r4, r0
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4946              		.loc 1 3972 0
 4947 0008 006D     		ldr	r0, [r0, #80]
 4948              	.LVL448:
 4949 000a 40B9     		cbnz	r0, .L507
 4950              	.LBB217:
 4951              	.LBB218:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4952              		.loc 2 195 0
 4953              		.syntax unified
ARM GAS  /tmp/ccuv3C2e.s 			page 188


 4954              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4955 000c 4FF05003 			mov r3, #80												
 4956 0010 83F31188 		msr basepri, r3											
 4957 0014 BFF36F8F 		isb														
 4958 0018 BFF34F8F 		dsb														
 4959              	
 4960              	@ 0 "" 2
 4961              	.LVL449:
 4962              		.thumb
 4963              		.syntax unified
 4964              	.L508:
 4965 001c FEE7     		b	.L508
 4966              	.L507:
 4967              	.LBE218:
 4968              	.LBE217:
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4969              		.loc 1 3978 0
 4970 001e E26C     		ldr	r2, [r4, #76]
 4971 0020 8A42     		cmp	r2, r1
 4972 0022 00D2     		bcs	.L509
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4973              		.loc 1 3980 0
 4974 0024 0A46     		mov	r2, r1
 4975              	.L509:
 4976              	.LVL450:
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4977              		.loc 1 3988 0
 4978 0026 E16A     		ldr	r1, [r4, #44]
 4979              	.LVL451:
 4980 0028 8A42     		cmp	r2, r1
 4981 002a 01D0     		beq	.L505
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4982              		.loc 1 3994 0
 4983 002c 0128     		cmp	r0, #1
 4984 002e 00D0     		beq	.L520
 4985              	.LVL452:
 4986              	.L505:
 4987 0030 38BD     		pop	{r3, r4, r5, pc}
 4988              	.LVL453:
 4989              	.L520:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4990              		.loc 1 3999 0
 4991 0032 1B48     		ldr	r0, .L521
 4992 0034 0068     		ldr	r0, [r0]
 4993 0036 8442     		cmp	r4, r0
 4994 0038 08D1     		bne	.L510
 4995              	.LBB219:
 4996              	.LBB220:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4997              		.loc 2 195 0
 4998              		.syntax unified
 4999              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5000 003a 4FF05003 			mov r3, #80												
 5001 003e 83F31188 		msr basepri, r3											
 5002 0042 BFF36F8F 		isb														
 5003 0046 BFF34F8F 		dsb														
 5004              	
ARM GAS  /tmp/ccuv3C2e.s 			page 189


 5005              	@ 0 "" 2
 5006              	.LVL454:
 5007              		.thumb
 5008              		.syntax unified
 5009              	.L511:
 5010 004a FEE7     		b	.L511
 5011              	.L510:
 5012              	.LVL455:
 5013              	.LBE220:
 5014              	.LBE219:
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5015              		.loc 1 4006 0
 5016 004c E262     		str	r2, [r4, #44]
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5017              		.loc 1 4010 0
 5018 004e A069     		ldr	r0, [r4, #24]
 5019 0050 0028     		cmp	r0, #0
 5020 0052 02DB     		blt	.L512
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5021              		.loc 1 4012 0
 5022 0054 C2F13802 		rsb	r2, r2, #56
 5023              	.LVL456:
 5024 0058 A261     		str	r2, [r4, #24]
 5025              	.L512:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5026              		.loc 1 4025 0
 5027 005a 6369     		ldr	r3, [r4, #20]
 5028 005c 01EB8101 		add	r1, r1, r1, lsl #2
 5029              	.LVL457:
 5030 0060 8800     		lsls	r0, r1, #2
 5031 0062 104A     		ldr	r2, .L521+4
 5032 0064 0244     		add	r2, r2, r0
 5033 0066 9342     		cmp	r3, r2
 5034 0068 16D1     		bne	.L515
 5035 006a 0122     		movs	r2, #1
 5036              	.L513:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5037              		.loc 1 4025 0 is_stmt 0 discriminator 4
 5038 006c 002A     		cmp	r2, #0
 5039 006e DFD0     		beq	.L505
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 5040              		.loc 1 4027 0 is_stmt 1
 5041 0070 251D     		adds	r5, r4, #4
 5042 0072 2846     		mov	r0, r5
 5043 0074 FFF7FEFF 		bl	uxListRemove
 5044              	.LVL458:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5045              		.loc 1 4036 0
 5046 0078 E36A     		ldr	r3, [r4, #44]
 5047 007a 0B4A     		ldr	r2, .L521+8
 5048 007c 1268     		ldr	r2, [r2]
 5049 007e 9342     		cmp	r3, r2
 5050 0080 01D9     		bls	.L514
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5051              		.loc 1 4036 0 is_stmt 0 discriminator 1
 5052 0082 094A     		ldr	r2, .L521+8
 5053 0084 1360     		str	r3, [r2]
ARM GAS  /tmp/ccuv3C2e.s 			page 190


 5054              	.L514:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5055              		.loc 1 4036 0 discriminator 3
 5056 0086 03EB8303 		add	r3, r3, r3, lsl #2
 5057 008a 9A00     		lsls	r2, r3, #2
 5058 008c 2946     		mov	r1, r5
 5059 008e 0548     		ldr	r0, .L521+4
 5060 0090 1044     		add	r0, r0, r2
 5061 0092 FFF7FEFF 		bl	vListInsertEnd
 5062              	.LVL459:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5063              		.loc 1 4057 0 is_stmt 1 discriminator 3
 5064 0096 CBE7     		b	.L505
 5065              	.LVL460:
 5066              	.L515:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5067              		.loc 1 4025 0
 5068 0098 0022     		movs	r2, #0
 5069 009a E7E7     		b	.L513
 5070              	.LVL461:
 5071              	.L517:
 5072              		.cfi_def_cfa_offset 0
 5073              		.cfi_restore 3
 5074              		.cfi_restore 4
 5075              		.cfi_restore 5
 5076              		.cfi_restore 14
 5077 009c 7047     		bx	lr
 5078              	.L522:
 5079 009e 00BF     		.align	2
 5080              	.L521:
 5081 00a0 00000000 		.word	.LANCHOR10
 5082 00a4 00000000 		.word	.LANCHOR4
 5083 00a8 00000000 		.word	.LANCHOR13
 5084              		.cfi_endproc
 5085              	.LFE54:
 5087              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5088              		.align	1
 5089              		.global	uxTaskResetEventItemValue
 5090              		.syntax unified
 5091              		.thumb
 5092              		.thumb_func
 5093              		.fpu softvfp
 5095              	uxTaskResetEventItemValue:
 5096              	.LFB55:
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5097              		.loc 1 4377 0
 5098              		.cfi_startproc
 5099              		@ args = 0, pretend = 0, frame = 0
 5100              		@ frame_needed = 0, uses_anonymous_args = 0
 5101              		@ link register save eliminated.
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5102              		.loc 1 4380 0
 5103 0000 044B     		ldr	r3, .L524
 5104 0002 1A68     		ldr	r2, [r3]
 5105 0004 9069     		ldr	r0, [r2, #24]
 5106              	.LVL462:
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccuv3C2e.s 			page 191


 5107              		.loc 1 4384 0
 5108 0006 1A68     		ldr	r2, [r3]
 5109 0008 1B68     		ldr	r3, [r3]
 5110 000a DB6A     		ldr	r3, [r3, #44]
 5111 000c C3F13803 		rsb	r3, r3, #56
 5112 0010 9361     		str	r3, [r2, #24]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5113              		.loc 1 4387 0
 5114 0012 7047     		bx	lr
 5115              	.L525:
 5116              		.align	2
 5117              	.L524:
 5118 0014 00000000 		.word	.LANCHOR10
 5119              		.cfi_endproc
 5120              	.LFE55:
 5122              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5123              		.align	1
 5124              		.global	pvTaskIncrementMutexHeldCount
 5125              		.syntax unified
 5126              		.thumb
 5127              		.thumb_func
 5128              		.fpu softvfp
 5130              	pvTaskIncrementMutexHeldCount:
 5131              	.LFB56:
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5132              		.loc 1 4393 0
 5133              		.cfi_startproc
 5134              		@ args = 0, pretend = 0, frame = 0
 5135              		@ frame_needed = 0, uses_anonymous_args = 0
 5136              		@ link register save eliminated.
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5137              		.loc 1 4396 0
 5138 0000 054B     		ldr	r3, .L528
 5139 0002 1B68     		ldr	r3, [r3]
 5140 0004 23B1     		cbz	r3, .L527
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5141              		.loc 1 4398 0
 5142 0006 044B     		ldr	r3, .L528
 5143 0008 1A68     		ldr	r2, [r3]
 5144 000a 136D     		ldr	r3, [r2, #80]
 5145 000c 0133     		adds	r3, r3, #1
 5146 000e 1365     		str	r3, [r2, #80]
 5147              	.L527:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5148              		.loc 1 4401 0
 5149 0010 014B     		ldr	r3, .L528
 5150 0012 1868     		ldr	r0, [r3]
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5151              		.loc 1 4402 0
 5152 0014 7047     		bx	lr
 5153              	.L529:
 5154 0016 00BF     		.align	2
 5155              	.L528:
 5156 0018 00000000 		.word	.LANCHOR10
 5157              		.cfi_endproc
 5158              	.LFE56:
 5160              		.section	.text.ulTaskNotifyTake,"ax",%progbits
ARM GAS  /tmp/ccuv3C2e.s 			page 192


 5161              		.align	1
 5162              		.global	ulTaskNotifyTake
 5163              		.syntax unified
 5164              		.thumb
 5165              		.thumb_func
 5166              		.fpu softvfp
 5168              	ulTaskNotifyTake:
 5169              	.LFB57:
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5170              		.loc 1 4410 0
 5171              		.cfi_startproc
 5172              		@ args = 0, pretend = 0, frame = 0
 5173              		@ frame_needed = 0, uses_anonymous_args = 0
 5174              	.LVL463:
 5175 0000 38B5     		push	{r3, r4, r5, lr}
 5176              		.cfi_def_cfa_offset 16
 5177              		.cfi_offset 3, -16
 5178              		.cfi_offset 4, -12
 5179              		.cfi_offset 5, -8
 5180              		.cfi_offset 14, -4
 5181 0002 0546     		mov	r5, r0
 5182 0004 0C46     		mov	r4, r1
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5183              		.loc 1 4413 0
 5184 0006 FFF7FEFF 		bl	vPortEnterCritical
 5185              	.LVL464:
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5186              		.loc 1 4416 0
 5187 000a 194B     		ldr	r3, .L537
 5188 000c 1B68     		ldr	r3, [r3]
 5189 000e 5B6D     		ldr	r3, [r3, #84]
 5190 0010 2BB9     		cbnz	r3, .L531
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5191              		.loc 1 4419 0
 5192 0012 174B     		ldr	r3, .L537
 5193 0014 1B68     		ldr	r3, [r3]
 5194 0016 0122     		movs	r2, #1
 5195 0018 83F85820 		strb	r2, [r3, #88]
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5196              		.loc 1 4421 0
 5197 001c ACB9     		cbnz	r4, .L535
 5198              	.L531:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5199              		.loc 1 4442 0
 5200 001e FFF7FEFF 		bl	vPortExitCritical
 5201              	.LVL465:
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5202              		.loc 1 4444 0
 5203 0022 FFF7FEFF 		bl	vPortEnterCritical
 5204              	.LVL466:
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5205              		.loc 1 4447 0
 5206 0026 124B     		ldr	r3, .L537
 5207 0028 1B68     		ldr	r3, [r3]
 5208 002a 5C6D     		ldr	r4, [r3, #84]
 5209              	.LVL467:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccuv3C2e.s 			page 193


 5210              		.loc 1 4449 0
 5211 002c 24B1     		cbz	r4, .L532
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5212              		.loc 1 4451 0
 5213 002e CDB9     		cbnz	r5, .L536
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5214              		.loc 1 4457 0
 5215 0030 0F4B     		ldr	r3, .L537
 5216 0032 1B68     		ldr	r3, [r3]
 5217 0034 621E     		subs	r2, r4, #1
 5218 0036 5A65     		str	r2, [r3, #84]
 5219              	.L532:
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5220              		.loc 1 4465 0
 5221 0038 0D4B     		ldr	r3, .L537
 5222 003a 1B68     		ldr	r3, [r3]
 5223 003c 0022     		movs	r2, #0
 5224 003e 83F85820 		strb	r2, [r3, #88]
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5225              		.loc 1 4467 0
 5226 0042 FFF7FEFF 		bl	vPortExitCritical
 5227              	.LVL468:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5228              		.loc 1 4470 0
 5229 0046 2046     		mov	r0, r4
 5230 0048 38BD     		pop	{r3, r4, r5, pc}
 5231              	.LVL469:
 5232              	.L535:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5233              		.loc 1 4423 0
 5234 004a 1146     		mov	r1, r2
 5235 004c 2046     		mov	r0, r4
 5236 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5237              	.LVL470:
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5238              		.loc 1 4430 0
 5239 0052 4FF08052 		mov	r2, #268435456
 5240 0056 074B     		ldr	r3, .L537+4
 5241 0058 1A60     		str	r2, [r3]
 5242              		.syntax unified
 5243              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5244 005a BFF34F8F 		dsb
 5245              	@ 0 "" 2
 5246              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5247 005e BFF36F8F 		isb
 5248              	@ 0 "" 2
 5249              		.thumb
 5250              		.syntax unified
 5251 0062 DCE7     		b	.L531
 5252              	.LVL471:
 5253              	.L536:
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5254              		.loc 1 4453 0
 5255 0064 024B     		ldr	r3, .L537
 5256 0066 1B68     		ldr	r3, [r3]
 5257 0068 0022     		movs	r2, #0
 5258 006a 5A65     		str	r2, [r3, #84]
ARM GAS  /tmp/ccuv3C2e.s 			page 194


 5259 006c E4E7     		b	.L532
 5260              	.L538:
 5261 006e 00BF     		.align	2
 5262              	.L537:
 5263 0070 00000000 		.word	.LANCHOR10
 5264 0074 04ED00E0 		.word	-536810236
 5265              		.cfi_endproc
 5266              	.LFE57:
 5268              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5269              		.align	1
 5270              		.global	xTaskNotifyWait
 5271              		.syntax unified
 5272              		.thumb
 5273              		.thumb_func
 5274              		.fpu softvfp
 5276              	xTaskNotifyWait:
 5277              	.LFB58:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5278              		.loc 1 4478 0
 5279              		.cfi_startproc
 5280              		@ args = 0, pretend = 0, frame = 0
 5281              		@ frame_needed = 0, uses_anonymous_args = 0
 5282              	.LVL472:
 5283 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5284              		.cfi_def_cfa_offset 24
 5285              		.cfi_offset 3, -24
 5286              		.cfi_offset 4, -20
 5287              		.cfi_offset 5, -16
 5288              		.cfi_offset 6, -12
 5289              		.cfi_offset 7, -8
 5290              		.cfi_offset 14, -4
 5291 0002 0746     		mov	r7, r0
 5292 0004 0D46     		mov	r5, r1
 5293 0006 1446     		mov	r4, r2
 5294 0008 1E46     		mov	r6, r3
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5295              		.loc 1 4481 0
 5296 000a FFF7FEFF 		bl	vPortEnterCritical
 5297              	.LVL473:
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5298              		.loc 1 4484 0
 5299 000e 204B     		ldr	r3, .L547
 5300 0010 1B68     		ldr	r3, [r3]
 5301 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5302 0016 DBB2     		uxtb	r3, r3
 5303 0018 022B     		cmp	r3, #2
 5304 001a 0AD0     		beq	.L540
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5305              		.loc 1 4489 0
 5306 001c 1C4B     		ldr	r3, .L547
 5307 001e 1A68     		ldr	r2, [r3]
 5308 0020 506D     		ldr	r0, [r2, #84]
 5309 0022 20EA0700 		bic	r0, r0, r7
 5310 0026 5065     		str	r0, [r2, #84]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5311              		.loc 1 4492 0
 5312 0028 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccuv3C2e.s 			page 195


 5313 002a 0122     		movs	r2, #1
 5314 002c 83F85820 		strb	r2, [r3, #88]
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5315              		.loc 1 4494 0
 5316 0030 CEB9     		cbnz	r6, .L545
 5317              	.L540:
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5318              		.loc 1 4515 0
 5319 0032 FFF7FEFF 		bl	vPortExitCritical
 5320              	.LVL474:
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5321              		.loc 1 4517 0
 5322 0036 FFF7FEFF 		bl	vPortEnterCritical
 5323              	.LVL475:
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5324              		.loc 1 4521 0
 5325 003a 1CB1     		cbz	r4, .L541
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5326              		.loc 1 4525 0
 5327 003c 144B     		ldr	r3, .L547
 5328 003e 1B68     		ldr	r3, [r3]
 5329 0040 5B6D     		ldr	r3, [r3, #84]
 5330 0042 2360     		str	r3, [r4]
 5331              	.L541:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5332              		.loc 1 4532 0
 5333 0044 124B     		ldr	r3, .L547
 5334 0046 1B68     		ldr	r3, [r3]
 5335 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5336 004c DBB2     		uxtb	r3, r3
 5337 004e 022B     		cmp	r3, #2
 5338 0050 16D0     		beq	.L546
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5339              		.loc 1 4535 0
 5340 0052 0024     		movs	r4, #0
 5341              	.LVL476:
 5342              	.L542:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5343              		.loc 1 4545 0
 5344 0054 0E4B     		ldr	r3, .L547
 5345 0056 1B68     		ldr	r3, [r3]
 5346 0058 0022     		movs	r2, #0
 5347 005a 83F85820 		strb	r2, [r3, #88]
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5348              		.loc 1 4547 0
 5349 005e FFF7FEFF 		bl	vPortExitCritical
 5350              	.LVL477:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5351              		.loc 1 4550 0
 5352 0062 2046     		mov	r0, r4
 5353 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5354              	.LVL478:
 5355              	.L545:
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5356              		.loc 1 4496 0
 5357 0066 1146     		mov	r1, r2
 5358 0068 3046     		mov	r0, r6
ARM GAS  /tmp/ccuv3C2e.s 			page 196


 5359 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5360              	.LVL479:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5361              		.loc 1 4503 0
 5362 006e 4FF08052 		mov	r2, #268435456
 5363 0072 084B     		ldr	r3, .L547+4
 5364 0074 1A60     		str	r2, [r3]
 5365              		.syntax unified
 5366              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5367 0076 BFF34F8F 		dsb
 5368              	@ 0 "" 2
 5369              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5370 007a BFF36F8F 		isb
 5371              	@ 0 "" 2
 5372              		.thumb
 5373              		.syntax unified
 5374 007e D8E7     		b	.L540
 5375              	.L546:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5376              		.loc 1 4541 0
 5377 0080 034B     		ldr	r3, .L547
 5378 0082 1A68     		ldr	r2, [r3]
 5379 0084 536D     		ldr	r3, [r2, #84]
 5380 0086 23EA0505 		bic	r5, r3, r5
 5381              	.LVL480:
 5382 008a 5565     		str	r5, [r2, #84]
 5383              	.LVL481:
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5384              		.loc 1 4542 0
 5385 008c 0124     		movs	r4, #1
 5386              	.LVL482:
 5387 008e E1E7     		b	.L542
 5388              	.L548:
 5389              		.align	2
 5390              	.L547:
 5391 0090 00000000 		.word	.LANCHOR10
 5392 0094 04ED00E0 		.word	-536810236
 5393              		.cfi_endproc
 5394              	.LFE58:
 5396              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5397              		.align	1
 5398              		.global	xTaskGenericNotify
 5399              		.syntax unified
 5400              		.thumb
 5401              		.thumb_func
 5402              		.fpu softvfp
 5404              	xTaskGenericNotify:
 5405              	.LFB59:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5406              		.loc 1 4558 0
 5407              		.cfi_startproc
 5408              		@ args = 0, pretend = 0, frame = 0
 5409              		@ frame_needed = 0, uses_anonymous_args = 0
 5410              	.LVL483:
 5411 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5412              		.cfi_def_cfa_offset 24
 5413              		.cfi_offset 3, -24
ARM GAS  /tmp/ccuv3C2e.s 			page 197


 5414              		.cfi_offset 4, -20
 5415              		.cfi_offset 5, -16
 5416              		.cfi_offset 6, -12
 5417              		.cfi_offset 7, -8
 5418              		.cfi_offset 14, -4
 5419              	.LVL484:
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5420              		.loc 1 4563 0
 5421 0002 A8B1     		cbz	r0, .L566
 5422 0004 0446     		mov	r4, r0
 5423 0006 1F46     		mov	r7, r3
 5424 0008 1546     		mov	r5, r2
 5425 000a 0E46     		mov	r6, r1
 5426              	.LVL485:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5427              		.loc 1 4566 0
 5428 000c FFF7FEFF 		bl	vPortEnterCritical
 5429              	.LVL486:
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5430              		.loc 1 4568 0
 5431 0010 0FB1     		cbz	r7, .L552
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5432              		.loc 1 4570 0
 5433 0012 636D     		ldr	r3, [r4, #84]
 5434 0014 3B60     		str	r3, [r7]
 5435              	.L552:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5436              		.loc 1 4573 0
 5437 0016 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5438 001a DBB2     		uxtb	r3, r3
 5439              	.LVL487:
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5440              		.loc 1 4575 0
 5441 001c 0222     		movs	r2, #2
 5442 001e 84F85820 		strb	r2, [r4, #88]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5443              		.loc 1 4577 0
 5444 0022 6A1E     		subs	r2, r5, #1
 5445 0024 032A     		cmp	r2, #3
 5446 0026 3DD8     		bhi	.L563
 5447 0028 DFE802F0 		tbb	[pc, r2]
 5448              	.L555:
 5449 002c 0B       		.byte	(.L554-.L555)/2
 5450 002d 2F       		.byte	(.L556-.L555)/2
 5451 002e 34       		.byte	(.L557-.L555)/2
 5452 002f 37       		.byte	(.L558-.L555)/2
 5453              	.LVL488:
 5454              		.p2align 1
 5455              	.L566:
 5456              	.LBB221:
 5457              	.LBB222:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5458              		.loc 2 195 0
 5459              		.syntax unified
 5460              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5461 0030 4FF05003 			mov r3, #80												
 5462 0034 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccuv3C2e.s 			page 198


 5463 0038 BFF36F8F 		isb														
 5464 003c BFF34F8F 		dsb														
 5465              	
 5466              	@ 0 "" 2
 5467              	.LVL489:
 5468              		.thumb
 5469              		.syntax unified
 5470              	.L551:
 5471 0040 FEE7     		b	.L551
 5472              	.LVL490:
 5473              	.L554:
 5474              	.LBE222:
 5475              	.LBE221:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5476              		.loc 1 4580 0
 5477 0042 626D     		ldr	r2, [r4, #84]
 5478 0044 1643     		orrs	r6, r6, r2
 5479              	.LVL491:
 5480 0046 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5481              		.loc 1 4560 0
 5482 0048 0125     		movs	r5, #1
 5483              	.L553:
 5484              	.LVL492:
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5485              		.loc 1 4613 0
 5486 004a 012B     		cmp	r3, #1
 5487 004c 3CD1     		bne	.L559
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5488              		.loc 1 4615 0
 5489 004e 261D     		adds	r6, r4, #4
 5490 0050 3046     		mov	r0, r6
 5491 0052 FFF7FEFF 		bl	uxListRemove
 5492              	.LVL493:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5493              		.loc 1 4616 0
 5494 0056 E36A     		ldr	r3, [r4, #44]
 5495 0058 1D4A     		ldr	r2, .L567
 5496 005a 1268     		ldr	r2, [r2]
 5497 005c 9342     		cmp	r3, r2
 5498 005e 01D9     		bls	.L560
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5499              		.loc 1 4616 0 is_stmt 0 discriminator 1
 5500 0060 1B4A     		ldr	r2, .L567
 5501 0062 1360     		str	r3, [r2]
 5502              	.L560:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5503              		.loc 1 4616 0 discriminator 3
 5504 0064 03EB8303 		add	r3, r3, r3, lsl #2
 5505 0068 9A00     		lsls	r2, r3, #2
 5506 006a 3146     		mov	r1, r6
 5507 006c 1948     		ldr	r0, .L567+4
 5508 006e 1044     		add	r0, r0, r2
 5509 0070 FFF7FEFF 		bl	vListInsertEnd
 5510              	.LVL494:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5511              		.loc 1 4619 0 is_stmt 1 discriminator 3
ARM GAS  /tmp/ccuv3C2e.s 			page 199


 5512 0074 A36A     		ldr	r3, [r4, #40]
 5513 0076 CBB1     		cbz	r3, .L561
 5514              	.LBB223:
 5515              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5516              		.loc 2 195 0
 5517              		.syntax unified
 5518              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5519 0078 4FF05003 			mov r3, #80												
 5520 007c 83F31188 		msr basepri, r3											
 5521 0080 BFF36F8F 		isb														
 5522 0084 BFF34F8F 		dsb														
 5523              	
 5524              	@ 0 "" 2
 5525              	.LVL495:
 5526              		.thumb
 5527              		.syntax unified
 5528              	.L562:
 5529 0088 FEE7     		b	.L562
 5530              	.LVL496:
 5531              	.L556:
 5532              	.LBE224:
 5533              	.LBE223:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5534              		.loc 1 4584 0
 5535 008a 626D     		ldr	r2, [r4, #84]
 5536 008c 0132     		adds	r2, r2, #1
 5537 008e 6265     		str	r2, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5538              		.loc 1 4560 0
 5539 0090 0125     		movs	r5, #1
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5540              		.loc 1 4585 0
 5541 0092 DAE7     		b	.L553
 5542              	.L557:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5543              		.loc 1 4588 0
 5544 0094 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5545              		.loc 1 4560 0
 5546 0096 0125     		movs	r5, #1
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5547              		.loc 1 4589 0
 5548 0098 D7E7     		b	.L553
 5549              	.L558:
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5550              		.loc 1 4592 0
 5551 009a 022B     		cmp	r3, #2
 5552 009c 04D0     		beq	.L564
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5553              		.loc 1 4594 0
 5554 009e 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5555              		.loc 1 4560 0
 5556 00a0 0125     		movs	r5, #1
 5557 00a2 D2E7     		b	.L553
 5558              	.L563:
ARM GAS  /tmp/ccuv3C2e.s 			page 200


 5559 00a4 0125     		movs	r5, #1
 5560 00a6 D0E7     		b	.L553
 5561              	.L564:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5562              		.loc 1 4599 0
 5563 00a8 0025     		movs	r5, #0
 5564 00aa CEE7     		b	.L553
 5565              	.LVL497:
 5566              	.L561:
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5567              		.loc 1 4637 0
 5568 00ac E26A     		ldr	r2, [r4, #44]
 5569 00ae 0A4B     		ldr	r3, .L567+8
 5570 00b0 1B68     		ldr	r3, [r3]
 5571 00b2 DB6A     		ldr	r3, [r3, #44]
 5572 00b4 9A42     		cmp	r2, r3
 5573 00b6 07D9     		bls	.L559
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5574              		.loc 1 4641 0
 5575 00b8 4FF08052 		mov	r2, #268435456
 5576 00bc 074B     		ldr	r3, .L567+12
 5577 00be 1A60     		str	r2, [r3]
 5578              		.syntax unified
 5579              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5580 00c0 BFF34F8F 		dsb
 5581              	@ 0 "" 2
 5582              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5583 00c4 BFF36F8F 		isb
 5584              	@ 0 "" 2
 5585              		.thumb
 5586              		.syntax unified
 5587              	.L559:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5588              		.loc 1 4653 0
 5589 00c8 FFF7FEFF 		bl	vPortExitCritical
 5590              	.LVL498:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5591              		.loc 1 4656 0
 5592 00cc 2846     		mov	r0, r5
 5593 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5594              	.LVL499:
 5595              	.L568:
 5596              		.align	2
 5597              	.L567:
 5598 00d0 00000000 		.word	.LANCHOR13
 5599 00d4 00000000 		.word	.LANCHOR4
 5600 00d8 00000000 		.word	.LANCHOR10
 5601 00dc 04ED00E0 		.word	-536810236
 5602              		.cfi_endproc
 5603              	.LFE59:
 5605              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5606              		.align	1
 5607              		.global	xTaskGenericNotifyFromISR
 5608              		.syntax unified
 5609              		.thumb
 5610              		.thumb_func
 5611              		.fpu softvfp
ARM GAS  /tmp/ccuv3C2e.s 			page 201


 5613              	xTaskGenericNotifyFromISR:
 5614              	.LFB60:
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5615              		.loc 1 4664 0
 5616              		.cfi_startproc
 5617              		@ args = 4, pretend = 0, frame = 0
 5618              		@ frame_needed = 0, uses_anonymous_args = 0
 5619              	.LVL500:
 5620 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5621              		.cfi_def_cfa_offset 32
 5622              		.cfi_offset 3, -32
 5623              		.cfi_offset 4, -28
 5624              		.cfi_offset 5, -24
 5625              		.cfi_offset 6, -20
 5626              		.cfi_offset 7, -16
 5627              		.cfi_offset 8, -12
 5628              		.cfi_offset 9, -8
 5629              		.cfi_offset 14, -4
 5630 0004 089E     		ldr	r6, [sp, #32]
 5631              	.LVL501:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5632              		.loc 1 4670 0
 5633 0006 10B3     		cbz	r0, .L589
 5634 0008 0446     		mov	r4, r0
 5635 000a 9946     		mov	r9, r3
 5636 000c 1546     		mov	r5, r2
 5637 000e 8846     		mov	r8, r1
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5638              		.loc 1 4688 0
 5639 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5640              	.LVL502:
 5641              	.LBB225:
 5642              	.LBB226:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5643              		.loc 2 211 0
 5644              		.syntax unified
 5645              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5646 0014 EFF31187 			mrs r7, basepri											
 5647 0018 4FF05003 		mov r3, #80												
 5648 001c 83F31188 		msr basepri, r3											
 5649 0020 BFF36F8F 		isb														
 5650 0024 BFF34F8F 		dsb														
 5651              	
 5652              	@ 0 "" 2
 5653              		.thumb
 5654              		.syntax unified
 5655              	.LBE226:
 5656              	.LBE225:
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5657              		.loc 1 4694 0
 5658 0028 B9F1000F 		cmp	r9, #0
 5659 002c 02D0     		beq	.L572
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5660              		.loc 1 4696 0
 5661 002e 636D     		ldr	r3, [r4, #84]
 5662 0030 C9F80030 		str	r3, [r9]
 5663              	.L572:
ARM GAS  /tmp/ccuv3C2e.s 			page 202


4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5664              		.loc 1 4699 0
 5665 0034 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5666 0038 DBB2     		uxtb	r3, r3
 5667              	.LVL503:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5668              		.loc 1 4700 0
 5669 003a 0222     		movs	r2, #2
 5670 003c 84F85820 		strb	r2, [r4, #88]
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5671              		.loc 1 4702 0
 5672 0040 6A1E     		subs	r2, r5, #1
 5673 0042 032A     		cmp	r2, #3
 5674 0044 2DD8     		bhi	.L586
 5675 0046 DFE802F0 		tbb	[pc, r2]
 5676              	.L575:
 5677 004a 0B       		.byte	(.L574-.L575)/2
 5678 004b 1D       		.byte	(.L576-.L575)/2
 5679 004c 22       		.byte	(.L577-.L575)/2
 5680 004d 26       		.byte	(.L578-.L575)/2
 5681              	.LVL504:
 5682              		.p2align 1
 5683              	.L589:
 5684              	.LBB227:
 5685              	.LBB228:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5686              		.loc 2 195 0
 5687              		.syntax unified
 5688              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5689 004e 4FF05003 			mov r3, #80												
 5690 0052 83F31188 		msr basepri, r3											
 5691 0056 BFF36F8F 		isb														
 5692 005a BFF34F8F 		dsb														
 5693              	
 5694              	@ 0 "" 2
 5695              	.LVL505:
 5696              		.thumb
 5697              		.syntax unified
 5698              	.L571:
 5699 005e FEE7     		b	.L571
 5700              	.LVL506:
 5701              	.L574:
 5702              	.LBE228:
 5703              	.LBE227:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5704              		.loc 1 4705 0
 5705 0060 626D     		ldr	r2, [r4, #84]
 5706 0062 42EA0802 		orr	r2, r2, r8
 5707 0066 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5708              		.loc 1 4667 0
 5709 0068 0125     		movs	r5, #1
 5710              	.L573:
 5711              	.LVL507:
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5712              		.loc 1 4738 0
 5713 006a 012B     		cmp	r3, #1
ARM GAS  /tmp/ccuv3C2e.s 			page 203


 5714 006c 3DD1     		bne	.L579
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5715              		.loc 1 4741 0
 5716 006e A36A     		ldr	r3, [r4, #40]
 5717              	.LVL508:
 5718 0070 DBB1     		cbz	r3, .L580
 5719              	.LBB229:
 5720              	.LBB230:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5721              		.loc 2 195 0
 5722              		.syntax unified
 5723              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5724 0072 4FF05003 			mov r3, #80												
 5725 0076 83F31188 		msr basepri, r3											
 5726 007a BFF36F8F 		isb														
 5727 007e BFF34F8F 		dsb														
 5728              	
 5729              	@ 0 "" 2
 5730              	.LVL509:
 5731              		.thumb
 5732              		.syntax unified
 5733              	.L581:
 5734 0082 FEE7     		b	.L581
 5735              	.LVL510:
 5736              	.L576:
 5737              	.LBE230:
 5738              	.LBE229:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5739              		.loc 1 4709 0
 5740 0084 626D     		ldr	r2, [r4, #84]
 5741 0086 0132     		adds	r2, r2, #1
 5742 0088 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5743              		.loc 1 4667 0
 5744 008a 0125     		movs	r5, #1
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5745              		.loc 1 4710 0
 5746 008c EDE7     		b	.L573
 5747              	.L577:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5748              		.loc 1 4713 0
 5749 008e C4F85480 		str	r8, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5750              		.loc 1 4667 0
 5751 0092 0125     		movs	r5, #1
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5752              		.loc 1 4714 0
 5753 0094 E9E7     		b	.L573
 5754              	.L578:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5755              		.loc 1 4717 0
 5756 0096 022B     		cmp	r3, #2
 5757 0098 05D0     		beq	.L587
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5758              		.loc 1 4719 0
 5759 009a C4F85480 		str	r8, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/ccuv3C2e.s 			page 204


 5760              		.loc 1 4667 0
 5761 009e 0125     		movs	r5, #1
 5762 00a0 E3E7     		b	.L573
 5763              	.L586:
 5764 00a2 0125     		movs	r5, #1
 5765 00a4 E1E7     		b	.L573
 5766              	.L587:
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5767              		.loc 1 4724 0
 5768 00a6 0025     		movs	r5, #0
 5769 00a8 DFE7     		b	.L573
 5770              	.LVL511:
 5771              	.L580:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5772              		.loc 1 4743 0
 5773 00aa 174B     		ldr	r3, .L590
 5774 00ac 1B68     		ldr	r3, [r3]
 5775 00ae 0BBB     		cbnz	r3, .L582
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5776              		.loc 1 4745 0
 5777 00b0 04F10408 		add	r8, r4, #4
 5778              	.LVL512:
 5779 00b4 4046     		mov	r0, r8
 5780 00b6 FFF7FEFF 		bl	uxListRemove
 5781              	.LVL513:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5782              		.loc 1 4746 0
 5783 00ba E36A     		ldr	r3, [r4, #44]
 5784 00bc 134A     		ldr	r2, .L590+4
 5785 00be 1268     		ldr	r2, [r2]
 5786 00c0 9342     		cmp	r3, r2
 5787 00c2 01D9     		bls	.L583
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5788              		.loc 1 4746 0 is_stmt 0 discriminator 1
 5789 00c4 114A     		ldr	r2, .L590+4
 5790 00c6 1360     		str	r3, [r2]
 5791              	.L583:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5792              		.loc 1 4746 0 discriminator 3
 5793 00c8 03EB8303 		add	r3, r3, r3, lsl #2
 5794 00cc 9A00     		lsls	r2, r3, #2
 5795 00ce 4146     		mov	r1, r8
 5796 00d0 0F48     		ldr	r0, .L590+8
 5797 00d2 1044     		add	r0, r0, r2
 5798 00d4 FFF7FEFF 		bl	vListInsertEnd
 5799              	.LVL514:
 5800              	.L584:
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5801              		.loc 1 4755 0 is_stmt 1
 5802 00d8 E26A     		ldr	r2, [r4, #44]
 5803 00da 0E4B     		ldr	r3, .L590+12
 5804 00dc 1B68     		ldr	r3, [r3]
 5805 00de DB6A     		ldr	r3, [r3, #44]
 5806 00e0 9A42     		cmp	r2, r3
 5807 00e2 02D9     		bls	.L579
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5808              		.loc 1 4759 0
ARM GAS  /tmp/ccuv3C2e.s 			page 205


 5809 00e4 66B1     		cbz	r6, .L585
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5810              		.loc 1 4761 0
 5811 00e6 0123     		movs	r3, #1
 5812 00e8 3360     		str	r3, [r6]
 5813              	.L579:
 5814              	.LVL515:
 5815              	.LBB231:
 5816              	.LBB232:
 5817              		.loc 2 229 0
 5818              		.syntax unified
 5819              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5820 00ea 87F31188 			msr basepri, r7	
 5821              	@ 0 "" 2
 5822              	.LVL516:
 5823              		.thumb
 5824              		.syntax unified
 5825              	.LBE232:
 5826              	.LBE231:
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5827              		.loc 1 4780 0
 5828 00ee 2846     		mov	r0, r5
 5829 00f0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5830              	.LVL517:
 5831              	.L582:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5832              		.loc 1 4752 0
 5833 00f4 04F11801 		add	r1, r4, #24
 5834 00f8 0748     		ldr	r0, .L590+16
 5835 00fa FFF7FEFF 		bl	vListInsertEnd
 5836              	.LVL518:
 5837 00fe EBE7     		b	.L584
 5838              	.LVL519:
 5839              	.L585:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5840              		.loc 1 4768 0
 5841 0100 0122     		movs	r2, #1
 5842 0102 064B     		ldr	r3, .L590+20
 5843 0104 1A60     		str	r2, [r3]
 5844 0106 F0E7     		b	.L579
 5845              	.L591:
 5846              		.align	2
 5847              	.L590:
 5848 0108 00000000 		.word	.LANCHOR16
 5849 010c 00000000 		.word	.LANCHOR13
 5850 0110 00000000 		.word	.LANCHOR4
 5851 0114 00000000 		.word	.LANCHOR10
 5852 0118 00000000 		.word	.LANCHOR1
 5853 011c 00000000 		.word	.LANCHOR19
 5854              		.cfi_endproc
 5855              	.LFE60:
 5857              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5858              		.align	1
 5859              		.global	vTaskNotifyGiveFromISR
 5860              		.syntax unified
 5861              		.thumb
 5862              		.thumb_func
ARM GAS  /tmp/ccuv3C2e.s 			page 206


 5863              		.fpu softvfp
 5865              	vTaskNotifyGiveFromISR:
 5866              	.LFB61:
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5867              		.loc 1 4788 0
 5868              		.cfi_startproc
 5869              		@ args = 0, pretend = 0, frame = 0
 5870              		@ frame_needed = 0, uses_anonymous_args = 0
 5871              	.LVL520:
 5872 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5873              		.cfi_def_cfa_offset 24
 5874              		.cfi_offset 3, -24
 5875              		.cfi_offset 4, -20
 5876              		.cfi_offset 5, -16
 5877              		.cfi_offset 6, -12
 5878              		.cfi_offset 7, -8
 5879              		.cfi_offset 14, -4
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5880              		.loc 1 4793 0
 5881 0002 18B3     		cbz	r0, .L603
 5882 0004 0446     		mov	r4, r0
 5883 0006 0D46     		mov	r5, r1
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5884              		.loc 1 4811 0
 5885 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5886              	.LVL521:
 5887              	.LBB233:
 5888              	.LBB234:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5889              		.loc 2 211 0
 5890              		.syntax unified
 5891              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5892 000c EFF31186 			mrs r6, basepri											
 5893 0010 4FF05003 		mov r3, #80												
 5894 0014 83F31188 		msr basepri, r3											
 5895 0018 BFF36F8F 		isb														
 5896 001c BFF34F8F 		dsb														
 5897              	
 5898              	@ 0 "" 2
 5899              		.thumb
 5900              		.syntax unified
 5901              	.LBE234:
 5902              	.LBE233:
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5903              		.loc 1 4817 0
 5904 0020 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5905 0024 DBB2     		uxtb	r3, r3
 5906              	.LVL522:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5907              		.loc 1 4818 0
 5908 0026 0222     		movs	r2, #2
 5909 0028 84F85820 		strb	r2, [r4, #88]
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5910              		.loc 1 4822 0
 5911 002c 626D     		ldr	r2, [r4, #84]
 5912 002e 0132     		adds	r2, r2, #1
 5913 0030 6265     		str	r2, [r4, #84]
ARM GAS  /tmp/ccuv3C2e.s 			page 207


4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5914              		.loc 1 4828 0
 5915 0032 012B     		cmp	r3, #1
 5916 0034 32D1     		bne	.L595
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5917              		.loc 1 4831 0
 5918 0036 A36A     		ldr	r3, [r4, #40]
 5919              	.LVL523:
 5920 0038 8BB1     		cbz	r3, .L596
 5921              	.LBB235:
 5922              	.LBB236:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5923              		.loc 2 195 0
 5924              		.syntax unified
 5925              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5926 003a 4FF05003 			mov r3, #80												
 5927 003e 83F31188 		msr basepri, r3											
 5928 0042 BFF36F8F 		isb														
 5929 0046 BFF34F8F 		dsb														
 5930              	
 5931              	@ 0 "" 2
 5932              	.LVL524:
 5933              		.thumb
 5934              		.syntax unified
 5935              	.L597:
 5936 004a FEE7     		b	.L597
 5937              	.LVL525:
 5938              	.L603:
 5939              	.LBE236:
 5940              	.LBE235:
 5941              	.LBB237:
 5942              	.LBB238:
 5943              		.syntax unified
 5944              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5945 004c 4FF05003 			mov r3, #80												
 5946 0050 83F31188 		msr basepri, r3											
 5947 0054 BFF36F8F 		isb														
 5948 0058 BFF34F8F 		dsb														
 5949              	
 5950              	@ 0 "" 2
 5951              	.LVL526:
 5952              		.thumb
 5953              		.syntax unified
 5954              	.L594:
 5955 005c FEE7     		b	.L594
 5956              	.LVL527:
 5957              	.L596:
 5958              	.LBE238:
 5959              	.LBE237:
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5960              		.loc 1 4833 0
 5961 005e 164B     		ldr	r3, .L604
 5962 0060 1B68     		ldr	r3, [r3]
 5963 0062 F3B9     		cbnz	r3, .L598
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5964              		.loc 1 4835 0
 5965 0064 271D     		adds	r7, r4, #4
ARM GAS  /tmp/ccuv3C2e.s 			page 208


 5966 0066 3846     		mov	r0, r7
 5967 0068 FFF7FEFF 		bl	uxListRemove
 5968              	.LVL528:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5969              		.loc 1 4836 0
 5970 006c E36A     		ldr	r3, [r4, #44]
 5971 006e 134A     		ldr	r2, .L604+4
 5972 0070 1268     		ldr	r2, [r2]
 5973 0072 9342     		cmp	r3, r2
 5974 0074 01D9     		bls	.L599
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5975              		.loc 1 4836 0 is_stmt 0 discriminator 1
 5976 0076 114A     		ldr	r2, .L604+4
 5977 0078 1360     		str	r3, [r2]
 5978              	.L599:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5979              		.loc 1 4836 0 discriminator 3
 5980 007a 03EB8303 		add	r3, r3, r3, lsl #2
 5981 007e 9A00     		lsls	r2, r3, #2
 5982 0080 3946     		mov	r1, r7
 5983 0082 0F48     		ldr	r0, .L604+8
 5984 0084 1044     		add	r0, r0, r2
 5985 0086 FFF7FEFF 		bl	vListInsertEnd
 5986              	.LVL529:
 5987              	.L600:
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5988              		.loc 1 4845 0 is_stmt 1
 5989 008a E26A     		ldr	r2, [r4, #44]
 5990 008c 0D4B     		ldr	r3, .L604+12
 5991 008e 1B68     		ldr	r3, [r3]
 5992 0090 DB6A     		ldr	r3, [r3, #44]
 5993 0092 9A42     		cmp	r2, r3
 5994 0094 02D9     		bls	.L595
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5995              		.loc 1 4849 0
 5996 0096 55B1     		cbz	r5, .L601
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5997              		.loc 1 4851 0
 5998 0098 0123     		movs	r3, #1
 5999 009a 2B60     		str	r3, [r5]
 6000              	.L595:
 6001              	.LVL530:
 6002              	.LBB239:
 6003              	.LBB240:
 6004              		.loc 2 229 0
 6005              		.syntax unified
 6006              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6007 009c 86F31188 			msr basepri, r6	
 6008              	@ 0 "" 2
 6009              	.LVL531:
 6010              		.thumb
 6011              		.syntax unified
 6012 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6013              	.LVL532:
 6014              	.L598:
 6015              	.LBE240:
 6016              	.LBE239:
ARM GAS  /tmp/ccuv3C2e.s 			page 209


4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6017              		.loc 1 4842 0
 6018 00a2 04F11801 		add	r1, r4, #24
 6019 00a6 0848     		ldr	r0, .L604+16
 6020 00a8 FFF7FEFF 		bl	vListInsertEnd
 6021              	.LVL533:
 6022 00ac EDE7     		b	.L600
 6023              	.L601:
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6024              		.loc 1 4858 0
 6025 00ae 0122     		movs	r2, #1
 6026 00b0 064B     		ldr	r3, .L604+20
 6027 00b2 1A60     		str	r2, [r3]
 6028 00b4 F2E7     		b	.L595
 6029              	.L605:
 6030 00b6 00BF     		.align	2
 6031              	.L604:
 6032 00b8 00000000 		.word	.LANCHOR16
 6033 00bc 00000000 		.word	.LANCHOR13
 6034 00c0 00000000 		.word	.LANCHOR4
 6035 00c4 00000000 		.word	.LANCHOR10
 6036 00c8 00000000 		.word	.LANCHOR1
 6037 00cc 00000000 		.word	.LANCHOR19
 6038              		.cfi_endproc
 6039              	.LFE61:
 6041              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6042              		.align	1
 6043              		.global	xTaskNotifyStateClear
 6044              		.syntax unified
 6045              		.thumb
 6046              		.thumb_func
 6047              		.fpu softvfp
 6049              	xTaskNotifyStateClear:
 6050              	.LFB62:
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6051              		.loc 1 4877 0
 6052              		.cfi_startproc
 6053              		@ args = 0, pretend = 0, frame = 0
 6054              		@ frame_needed = 0, uses_anonymous_args = 0
 6055              	.LVL534:
 6056 0000 10B5     		push	{r4, lr}
 6057              		.cfi_def_cfa_offset 8
 6058              		.cfi_offset 4, -8
 6059              		.cfi_offset 14, -4
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6060              		.loc 1 4883 0
 6061 0002 0446     		mov	r4, r0
 6062 0004 58B1     		cbz	r0, .L612
 6063              	.L607:
 6064              	.LVL535:
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6065              		.loc 1 4885 0 discriminator 4
 6066 0006 FFF7FEFF 		bl	vPortEnterCritical
 6067              	.LVL536:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6068              		.loc 1 4887 0 discriminator 4
 6069 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
ARM GAS  /tmp/ccuv3C2e.s 			page 210


 6070 000e DBB2     		uxtb	r3, r3
 6071 0010 022B     		cmp	r3, #2
 6072 0012 07D0     		beq	.L613
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6073              		.loc 1 4894 0
 6074 0014 0024     		movs	r4, #0
 6075              	.LVL537:
 6076              	.L608:
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6077              		.loc 1 4897 0
 6078 0016 FFF7FEFF 		bl	vPortExitCritical
 6079              	.LVL538:
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6080              		.loc 1 4900 0
 6081 001a 2046     		mov	r0, r4
 6082 001c 10BD     		pop	{r4, pc}
 6083              	.LVL539:
 6084              	.L612:
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6085              		.loc 1 4883 0 discriminator 1
 6086 001e 044B     		ldr	r3, .L614
 6087 0020 1C68     		ldr	r4, [r3]
 6088 0022 F0E7     		b	.L607
 6089              	.LVL540:
 6090              	.L613:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6091              		.loc 1 4889 0
 6092 0024 0023     		movs	r3, #0
 6093 0026 84F85830 		strb	r3, [r4, #88]
 6094              	.LVL541:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6095              		.loc 1 4890 0
 6096 002a 0124     		movs	r4, #1
 6097              	.LVL542:
 6098 002c F3E7     		b	.L608
 6099              	.L615:
 6100 002e 00BF     		.align	2
 6101              	.L614:
 6102 0030 00000000 		.word	.LANCHOR10
 6103              		.cfi_endproc
 6104              	.LFE62:
 6106              		.global	pxCurrentTCB
 6107              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6108              		.align	2
 6109              		.set	.LANCHOR10,. + 0
 6112              	pxCurrentTCB:
 6113 0000 00000000 		.space	4
 6114              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6115              		.align	2
 6116              		.set	.LANCHOR2,. + 0
 6119              	pxDelayedTaskList:
 6120 0000 00000000 		.space	4
 6121              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6122              		.align	2
 6123              		.set	.LANCHOR8,. + 0
 6126              	pxOverflowDelayedTaskList:
 6127 0000 00000000 		.space	4
ARM GAS  /tmp/ccuv3C2e.s 			page 211


 6128              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6129              		.align	2
 6130              		.set	.LANCHOR4,. + 0
 6133              	pxReadyTasksLists:
 6134 0000 00000000 		.space	1120
 6134      00000000 
 6134      00000000 
 6134      00000000 
 6134      00000000 
 6135              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6136              		.align	2
 6137              		.set	.LANCHOR9,. + 0
 6140              	uxCurrentNumberOfTasks:
 6141 0000 00000000 		.space	4
 6142              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6143              		.align	2
 6144              		.set	.LANCHOR14,. + 0
 6147              	uxDeletedTasksWaitingCleanUp:
 6148 0000 00000000 		.space	4
 6149              		.section	.bss.uxPendedTicks,"aw",%nobits
 6150              		.align	2
 6151              		.set	.LANCHOR18,. + 0
 6154              	uxPendedTicks:
 6155 0000 00000000 		.space	4
 6156              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6157              		.align	2
 6158              		.set	.LANCHOR16,. + 0
 6161              	uxSchedulerSuspended:
 6162 0000 00000000 		.space	4
 6163              		.section	.bss.uxTaskNumber,"aw",%nobits
 6164              		.align	2
 6165              		.set	.LANCHOR12,. + 0
 6168              	uxTaskNumber:
 6169 0000 00000000 		.space	4
 6170              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6171              		.align	2
 6172              		.set	.LANCHOR13,. + 0
 6175              	uxTopReadyPriority:
 6176 0000 00000000 		.space	4
 6177              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6178              		.align	2
 6179              		.set	.LANCHOR5,. + 0
 6182              	xDelayedTaskList1:
 6183 0000 00000000 		.space	20
 6183      00000000 
 6183      00000000 
 6183      00000000 
 6183      00000000 
 6184              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6185              		.align	2
 6186              		.set	.LANCHOR6,. + 0
 6189              	xDelayedTaskList2:
 6190 0000 00000000 		.space	20
 6190      00000000 
 6190      00000000 
 6190      00000000 
 6190      00000000 
ARM GAS  /tmp/ccuv3C2e.s 			page 212


 6191              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6192              		.align	2
 6193              		.set	.LANCHOR3,. + 0
 6196              	xNextTaskUnblockTime:
 6197 0000 00000000 		.space	4
 6198              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6199              		.align	2
 6200              		.set	.LANCHOR17,. + 0
 6203              	xNumOfOverflows:
 6204 0000 00000000 		.space	4
 6205              		.section	.bss.xPendingReadyList,"aw",%nobits
 6206              		.align	2
 6207              		.set	.LANCHOR1,. + 0
 6210              	xPendingReadyList:
 6211 0000 00000000 		.space	20
 6211      00000000 
 6211      00000000 
 6211      00000000 
 6211      00000000 
 6212              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6213              		.align	2
 6214              		.set	.LANCHOR11,. + 0
 6217              	xSchedulerRunning:
 6218 0000 00000000 		.space	4
 6219              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6220              		.align	2
 6221              		.set	.LANCHOR0,. + 0
 6224              	xSuspendedTaskList:
 6225 0000 00000000 		.space	20
 6225      00000000 
 6225      00000000 
 6225      00000000 
 6225      00000000 
 6226              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6227              		.align	2
 6228              		.set	.LANCHOR7,. + 0
 6231              	xTasksWaitingTermination:
 6232 0000 00000000 		.space	20
 6232      00000000 
 6232      00000000 
 6232      00000000 
 6232      00000000 
 6233              		.section	.bss.xTickCount,"aw",%nobits
 6234              		.align	2
 6235              		.set	.LANCHOR15,. + 0
 6238              	xTickCount:
 6239 0000 00000000 		.space	4
 6240              		.section	.bss.xYieldPending,"aw",%nobits
 6241              		.align	2
 6242              		.set	.LANCHOR19,. + 0
 6245              	xYieldPending:
 6246 0000 00000000 		.space	4
 6247              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6248              		.align	2
 6249              	.LC0:
 6250 0000 49444C45 		.ascii	"IDLE\000"
 6250      00
ARM GAS  /tmp/ccuv3C2e.s 			page 213


 6251              		.text
 6252              	.Letext0:
 6253              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 6254              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 6255              		.file 5 "/usr/include/newlib/sys/lock.h"
 6256              		.file 6 "/usr/include/newlib/sys/_types.h"
 6257              		.file 7 "/usr/include/newlib/sys/reent.h"
 6258              		.file 8 "/usr/include/newlib/stdlib.h"
 6259              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 6260              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 6261              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6262              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6263              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6264              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6265              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6266              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 6267              		.file 17 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccuv3C2e.s 			page 214


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccuv3C2e.s:16     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccuv3C2e.s:22     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccuv3C2e.s:102    .text.prvTaskIsTaskSuspended:0000000000000044 $d
     /tmp/ccuv3C2e.s:108    .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccuv3C2e.s:114    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccuv3C2e.s:148    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccuv3C2e.s:154    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccuv3C2e.s:195    .text.prvResetNextTaskUnblockTime:000000000000002c $d
     /tmp/ccuv3C2e.s:201    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccuv3C2e.s:207    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccuv3C2e.s:325    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccuv3C2e.s:331    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccuv3C2e.s:396    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccuv3C2e.s:408    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccuv3C2e.s:414    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccuv3C2e.s:524    .text.prvAddNewTaskToReadyList:0000000000000090 $d
     /tmp/ccuv3C2e.s:535    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccuv3C2e.s:541    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccuv3C2e.s:604    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccuv3C2e.s:610    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccuv3C2e.s:675    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/ccuv3C2e.s:682    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccuv3C2e.s:688    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccuv3C2e.s:727    .text.prvIdleTask:0000000000000020 $d
     /tmp/ccuv3C2e.s:733    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccuv3C2e.s:739    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccuv3C2e.s:825    .text.prvAddCurrentTaskToDelayedList:0000000000000064 $d
     /tmp/ccuv3C2e.s:835    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccuv3C2e.s:842    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccuv3C2e.s:959    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccuv3C2e.s:966    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccuv3C2e.s:1069   .text.vTaskDelete:0000000000000000 $t
     /tmp/ccuv3C2e.s:1076   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccuv3C2e.s:1209   .text.vTaskDelete:0000000000000098 $d
     /tmp/ccuv3C2e.s:1221   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccuv3C2e.s:1228   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccuv3C2e.s:1346   .text.eTaskGetState:000000000000006c $d
     /tmp/ccuv3C2e.s:1355   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccuv3C2e.s:1362   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccuv3C2e.s:1400   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccuv3C2e.s:1405   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccuv3C2e.s:1412   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccuv3C2e.s:1474   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccuv3C2e.s:1479   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccuv3C2e.s:1486   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccuv3C2e.s:1666   .text.vTaskPrioritySet:00000000000000c8 $d
     /tmp/ccuv3C2e.s:1674   .text.vTaskResume:0000000000000000 $t
     /tmp/ccuv3C2e.s:1681   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccuv3C2e.s:1786   .text.vTaskResume:0000000000000078 $d
     /tmp/ccuv3C2e.s:1794   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccuv3C2e.s:1801   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccuv3C2e.s:1940   .text.xTaskResumeFromISR:0000000000000094 $d
     /tmp/ccuv3C2e.s:1949   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccuv3C2e.s:1956   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccuv3C2e.s:2083   .text.vTaskStartScheduler:0000000000000088 $d
ARM GAS  /tmp/ccuv3C2e.s 			page 215


     /tmp/ccuv3C2e.s:2094   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccuv3C2e.s:2101   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccuv3C2e.s:2137   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccuv3C2e.s:2142   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccuv3C2e.s:2149   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccuv3C2e.s:2165   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccuv3C2e.s:2170   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccuv3C2e.s:2177   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccuv3C2e.s:2193   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccuv3C2e.s:2198   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccuv3C2e.s:2205   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccuv3C2e.s:2227   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccuv3C2e.s:2232   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccuv3C2e.s:2239   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccuv3C2e.s:2254   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccuv3C2e.s:2259   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccuv3C2e.s:2266   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccuv3C2e.s:2312   .text.pcTaskGetName:0000000000000020 $d
     /tmp/ccuv3C2e.s:2319   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccuv3C2e.s:2326   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccuv3C2e.s:2537   .text.xTaskIncrementTick:00000000000000f4 $d
     /tmp/ccuv3C2e.s:2552   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccuv3C2e.s:2559   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccuv3C2e.s:2750   .text.xTaskResumeAll:00000000000000d8 $d
     /tmp/ccuv3C2e.s:2763   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccuv3C2e.s:2770   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccuv3C2e.s:2940   .text.vTaskDelayUntil:00000000000000a0 $d
     /tmp/ccuv3C2e.s:2948   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccuv3C2e.s:2955   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccuv3C2e.s:3031   .text.vTaskDelay:0000000000000048 $d
     /tmp/ccuv3C2e.s:3037   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccuv3C2e.s:3044   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccuv3C2e.s:3166   .text.vTaskSwitchContext:0000000000000084 $d
     /tmp/ccuv3C2e.s:3177   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccuv3C2e.s:3184   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccuv3C2e.s:3334   .text.vTaskSuspend:00000000000000ac $d
     /tmp/ccuv3C2e.s:3344   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccuv3C2e.s:3351   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccuv3C2e.s:3402   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccuv3C2e.s:3407   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccuv3C2e.s:3414   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccuv3C2e.s:3500   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/ccuv3C2e.s:3506   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccuv3C2e.s:3513   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccuv3C2e.s:3571   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
     /tmp/ccuv3C2e.s:3578   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccuv3C2e.s:3585   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccuv3C2e.s:3689   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/ccuv3C2e.s:3699   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccuv3C2e.s:3706   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccuv3C2e.s:3811   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/ccuv3C2e.s:3822   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccuv3C2e.s:3829   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccuv3C2e.s:3882   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/ccuv3C2e.s:3888   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccuv3C2e.s:3895   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccuv3C2e.s:3915   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
ARM GAS  /tmp/ccuv3C2e.s 			page 216


     /tmp/ccuv3C2e.s:3921   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccuv3C2e.s:3928   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccuv3C2e.s:4061   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/ccuv3C2e.s:4068   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccuv3C2e.s:4075   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccuv3C2e.s:4090   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccuv3C2e.s:4095   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccuv3C2e.s:4102   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccuv3C2e.s:4128   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccuv3C2e.s:4135   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccuv3C2e.s:4155   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccuv3C2e.s:4162   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccuv3C2e.s:4273   .text.vTaskGetInfo:0000000000000074 $d
     /tmp/ccuv3C2e.s:4278   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccuv3C2e.s:4284   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccuv3C2e.s:4384   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccuv3C2e.s:4391   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccuv3C2e.s:4506   .text.uxTaskGetSystemState:0000000000000098 $d
     /tmp/ccuv3C2e.s:4516   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccuv3C2e.s:4523   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccuv3C2e.s:4555   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/ccuv3C2e.s:4560   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccuv3C2e.s:4567   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccuv3C2e.s:4583   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccuv3C2e.s:4588   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccuv3C2e.s:4595   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccuv3C2e.s:4626   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccuv3C2e.s:4632   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccuv3C2e.s:4639   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccuv3C2e.s:4765   .text.xTaskPriorityInherit:0000000000000094 $d
     /tmp/ccuv3C2e.s:4772   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccuv3C2e.s:4779   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccuv3C2e.s:4914   .text.xTaskPriorityDisinherit:0000000000000084 $d
     /tmp/ccuv3C2e.s:4921   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccuv3C2e.s:4928   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccuv3C2e.s:5081   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000a0 $d
     /tmp/ccuv3C2e.s:5088   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccuv3C2e.s:5095   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccuv3C2e.s:5118   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccuv3C2e.s:5123   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccuv3C2e.s:5130   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccuv3C2e.s:5156   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccuv3C2e.s:5161   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccuv3C2e.s:5168   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccuv3C2e.s:5263   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/ccuv3C2e.s:5269   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccuv3C2e.s:5276   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccuv3C2e.s:5391   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccuv3C2e.s:5397   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccuv3C2e.s:5404   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccuv3C2e.s:5449   .text.xTaskGenericNotify:000000000000002c $d
     /tmp/ccuv3C2e.s:5454   .text.xTaskGenericNotify:0000000000000030 $t
     /tmp/ccuv3C2e.s:5598   .text.xTaskGenericNotify:00000000000000d0 $d
     /tmp/ccuv3C2e.s:5606   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccuv3C2e.s:5613   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccuv3C2e.s:5677   .text.xTaskGenericNotifyFromISR:000000000000004a $d
     /tmp/ccuv3C2e.s:5682   .text.xTaskGenericNotifyFromISR:000000000000004e $t
ARM GAS  /tmp/ccuv3C2e.s 			page 217


     /tmp/ccuv3C2e.s:5848   .text.xTaskGenericNotifyFromISR:0000000000000108 $d
     /tmp/ccuv3C2e.s:5858   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccuv3C2e.s:5865   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccuv3C2e.s:6032   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
     /tmp/ccuv3C2e.s:6042   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccuv3C2e.s:6049   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccuv3C2e.s:6102   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/ccuv3C2e.s:6112   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccuv3C2e.s:6108   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccuv3C2e.s:6115   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccuv3C2e.s:6119   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccuv3C2e.s:6122   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccuv3C2e.s:6126   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccuv3C2e.s:6129   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccuv3C2e.s:6133   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccuv3C2e.s:6136   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccuv3C2e.s:6140   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccuv3C2e.s:6143   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccuv3C2e.s:6147   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccuv3C2e.s:6150   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccuv3C2e.s:6154   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccuv3C2e.s:6157   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccuv3C2e.s:6161   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccuv3C2e.s:6164   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccuv3C2e.s:6168   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccuv3C2e.s:6171   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccuv3C2e.s:6175   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccuv3C2e.s:6178   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccuv3C2e.s:6182   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccuv3C2e.s:6185   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccuv3C2e.s:6189   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccuv3C2e.s:6192   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccuv3C2e.s:6196   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccuv3C2e.s:6199   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccuv3C2e.s:6203   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccuv3C2e.s:6206   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccuv3C2e.s:6210   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccuv3C2e.s:6213   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccuv3C2e.s:6217   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccuv3C2e.s:6220   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccuv3C2e.s:6224   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccuv3C2e.s:6227   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccuv3C2e.s:6231   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccuv3C2e.s:6234   .bss.xTickCount:0000000000000000 $d
     /tmp/ccuv3C2e.s:6238   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccuv3C2e.s:6241   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccuv3C2e.s:6245   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccuv3C2e.s:6248   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
ARM GAS  /tmp/ccuv3C2e.s 			page 218


vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
