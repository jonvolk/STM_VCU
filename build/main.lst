ARM GAS  /tmp/ccayrfCi.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB86:
  24              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.</center></h2>
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****  * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****  * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****  *                             www.st.com/SLA0044
  16:Core/Src/main.c ****  *
  17:Core/Src/main.c ****  ******************************************************************************
  18:Core/Src/main.c ****  */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** #include "print_uart.h"
  28:Core/Src/main.c **** #include "can_setup.h"
  29:Core/Src/main.c **** #include "FreeRTOS.h"
  30:Core/Src/main.c **** #include "task.h" //needed for delayuntil
  31:Core/Src/main.c **** #include "gauges.h"
  32:Core/Src/main.c **** #include "vcu.h"
  33:Core/Src/main.c **** #include "test.h"
  34:Core/Src/main.c **** #include "water_pump.h"
ARM GAS  /tmp/ccayrfCi.s 			page 2


  35:Core/Src/main.c **** #include "dcdc.h"
  36:Core/Src/main.c **** /* USER CODE END Includes */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PTD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PD */
  45:Core/Src/main.c **** /* USER CODE END PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  53:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  54:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  57:Core/Src/main.c **** CAN_HandleTypeDef hcan2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** IWDG_HandleTypeDef hiwdg;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  62:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  63:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  64:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  65:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_ch1;
  66:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch1;
  67:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch2;
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** UART_HandleTypeDef huart4;
  70:Core/Src/main.c **** UART_HandleTypeDef huart1;
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* Definitions for TaskLoop */
  73:Core/Src/main.c **** osThreadId_t TaskLoopHandle;
  74:Core/Src/main.c **** const osThreadAttr_t TaskLoop_attributes = {
  75:Core/Src/main.c ****     .name = "TaskLoop",
  76:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  77:Core/Src/main.c ****     .stack_size = 128 * 4};
  78:Core/Src/main.c **** /* Definitions for Task10ms */
  79:Core/Src/main.c **** osThreadId_t Task10msHandle;
  80:Core/Src/main.c **** const osThreadAttr_t Task10ms_attributes = {
  81:Core/Src/main.c ****     .name = "Task10ms",
  82:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  83:Core/Src/main.c ****     .stack_size = 128 * 4};
  84:Core/Src/main.c **** /* Definitions for Task100ms */
  85:Core/Src/main.c **** osThreadId_t Task100msHandle;
  86:Core/Src/main.c **** const osThreadAttr_t Task100ms_attributes = {
  87:Core/Src/main.c ****     .name = "Task100ms",
  88:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  89:Core/Src/main.c ****     .stack_size = 128 * 4};
  90:Core/Src/main.c **** /* Definitions for Task250ms */
  91:Core/Src/main.c **** osThreadId_t Task250msHandle;
ARM GAS  /tmp/ccayrfCi.s 			page 3


  92:Core/Src/main.c **** const osThreadAttr_t Task250ms_attributes = {
  93:Core/Src/main.c ****     .name = "Task250ms",
  94:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  95:Core/Src/main.c ****     .stack_size = 128 * 4};
  96:Core/Src/main.c **** /* USER CODE BEGIN PV */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /* USER CODE END PV */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 101:Core/Src/main.c **** void SystemClock_Config(void);
 102:Core/Src/main.c **** static void MX_GPIO_Init(void);
 103:Core/Src/main.c **** static void MX_DMA_Init(void);
 104:Core/Src/main.c **** static void MX_CAN2_Init(void);
 105:Core/Src/main.c **** static void MX_ADC1_Init(void);
 106:Core/Src/main.c **** static void MX_CAN1_Init(void);
 107:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void);
 108:Core/Src/main.c **** static void MX_UART4_Init(void);
 109:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 110:Core/Src/main.c **** static void MX_TIM3_Init(void);
 111:Core/Src/main.c **** static void MX_TIM1_Init(void);
 112:Core/Src/main.c **** static void MX_TIM5_Init(void);
 113:Core/Src/main.c **** static void MX_TIM2_Init(void);
 114:Core/Src/main.c **** static void MX_IWDG_Init(void);
 115:Core/Src/main.c **** void StartTaskLoop(void *argument);
 116:Core/Src/main.c **** void StartTask10ms(void *argument);
 117:Core/Src/main.c **** void StartTask100ms(void *argument);
 118:Core/Src/main.c **** void StartTask250ms(void *argument);
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /* USER CODE END PFP */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 125:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /* USER CODE END 0 */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /**
 130:Core/Src/main.c ****  * @brief  The application entry point.
 131:Core/Src/main.c ****  * @retval int
 132:Core/Src/main.c ****  */
 133:Core/Src/main.c **** int main(void)
 134:Core/Src/main.c **** {
 135:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****   /* USER CODE END 1 */
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 142:Core/Src/main.c ****   HAL_Init();
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   /* USER CODE END Init */
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* Configure the system clock */
ARM GAS  /tmp/ccayrfCi.s 			page 4


 149:Core/Src/main.c ****   SystemClock_Config();
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* USER CODE END SysInit */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /* Initialize all configured peripherals */
 156:Core/Src/main.c ****   MX_GPIO_Init();
 157:Core/Src/main.c ****   MX_DMA_Init();
 158:Core/Src/main.c ****   MX_CAN2_Init();
 159:Core/Src/main.c ****   MX_ADC1_Init();
 160:Core/Src/main.c ****   MX_CAN1_Init();
 161:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 162:Core/Src/main.c ****   MX_UART4_Init();
 163:Core/Src/main.c ****   MX_USART1_UART_Init();
 164:Core/Src/main.c ****   MX_TIM3_Init();
 165:Core/Src/main.c ****   MX_TIM1_Init();
 166:Core/Src/main.c ****   MX_TIM5_Init();
 167:Core/Src/main.c ****   MX_TIM2_Init();
 168:Core/Src/main.c ****   MX_IWDG_Init();
 169:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 170:Core/Src/main.c ****   canSettings();
 171:Core/Src/main.c ****   gaugeInit();
 172:Core/Src/main.c ****   dcdcInit();
 173:Core/Src/main.c ****   vcuInit();
 174:Core/Src/main.c ****   wpInit();
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 177:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); // water pump pw
 178:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim5);
 181:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 182:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 183:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 184:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Tach pwm start
 187:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, ADC_data, 3);
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END 2 */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* Init scheduler */
 194:Core/Src/main.c ****   osKernelInitialize();
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 197:Core/Src/main.c ****   /* add mutexes, ... */
 198:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 201:Core/Src/main.c ****   /* add semaphores, ... */
 202:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 205:Core/Src/main.c ****   /* start timers, add new ones, ... */
ARM GAS  /tmp/ccayrfCi.s 			page 5


 206:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 209:Core/Src/main.c ****   /* add queues, ... */
 210:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Create the thread(s) */
 213:Core/Src/main.c ****   /* creation of TaskLoop */
 214:Core/Src/main.c ****   TaskLoopHandle = osThreadNew(StartTaskLoop, NULL, &TaskLoop_attributes);
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /* creation of Task10ms */
 217:Core/Src/main.c ****   Task10msHandle = osThreadNew(StartTask10ms, NULL, &Task10ms_attributes);
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* creation of Task100ms */
 220:Core/Src/main.c ****   Task100msHandle = osThreadNew(StartTask100ms, NULL, &Task100ms_attributes);
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /* creation of Task250ms */
 223:Core/Src/main.c ****   Task250msHandle = osThreadNew(StartTask250ms, NULL, &Task250ms_attributes);
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 226:Core/Src/main.c ****   /* add threads, ... */
 227:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 230:Core/Src/main.c ****   /* add events, ... */
 231:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* Start scheduler */
 234:Core/Src/main.c ****   osKernelStart();
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 237:Core/Src/main.c ****   /* Infinite loop */
 238:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 239:Core/Src/main.c ****   while (1)
 240:Core/Src/main.c ****   {
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****     /* USER CODE END WHILE */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 245:Core/Src/main.c ****   }
 246:Core/Src/main.c ****   /* USER CODE END 3 */
 247:Core/Src/main.c **** }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** /**
 250:Core/Src/main.c ****  * @brief System Clock Configuration
 251:Core/Src/main.c ****  * @retval None
 252:Core/Src/main.c ****  */
 253:Core/Src/main.c **** void SystemClock_Config(void)
 254:Core/Src/main.c **** {
 255:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 256:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 257:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 260:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 261:Core/Src/main.c ****    */
 262:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
ARM GAS  /tmp/ccayrfCi.s 			page 6


 263:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 265:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 266:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 267:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 272:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 277:Core/Src/main.c ****    */
 278:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 279:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 280:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 282:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 285:Core/Src/main.c ****   {
 286:Core/Src/main.c ****     Error_Handler();
 287:Core/Src/main.c ****   }
 288:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 289:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 290:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****     Error_Handler();
 293:Core/Src/main.c ****   }
 294:Core/Src/main.c ****   /** Configure the Systick interrupt time
 295:Core/Src/main.c ****    */
 296:Core/Src/main.c ****   __HAL_RCC_PLLI2S_ENABLE();
 297:Core/Src/main.c **** }
 298:Core/Src/main.c **** 
 299:Core/Src/main.c **** /**
 300:Core/Src/main.c ****  * @brief ADC1 Initialization Function
 301:Core/Src/main.c ****  * @param None
 302:Core/Src/main.c ****  * @retval None
 303:Core/Src/main.c ****  */
 304:Core/Src/main.c **** static void MX_ADC1_Init(void)
 305:Core/Src/main.c **** {
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 316:Core/Src/main.c ****   /** Common config
 317:Core/Src/main.c ****    */
 318:Core/Src/main.c ****   hadc1.Instance = ADC1;
 319:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
ARM GAS  /tmp/ccayrfCi.s 			page 7


 320:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 321:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 322:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 323:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 324:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 325:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 326:Core/Src/main.c ****   {
 327:Core/Src/main.c ****     Error_Handler();
 328:Core/Src/main.c ****   }
 329:Core/Src/main.c ****   /** Configure Regular Channel
 330:Core/Src/main.c ****    */
 331:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_11;
 332:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 333:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 334:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 335:Core/Src/main.c ****   {
 336:Core/Src/main.c ****     Error_Handler();
 337:Core/Src/main.c ****   }
 338:Core/Src/main.c ****   /** Configure Regular Channel
 339:Core/Src/main.c ****    */
 340:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 341:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 342:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 343:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 344:Core/Src/main.c ****   {
 345:Core/Src/main.c ****     Error_Handler();
 346:Core/Src/main.c ****   }
 347:Core/Src/main.c ****   /** Configure Regular Channel
 348:Core/Src/main.c ****    */
 349:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 350:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 351:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 358:Core/Src/main.c **** }
 359:Core/Src/main.c **** 
 360:Core/Src/main.c **** /**
 361:Core/Src/main.c ****  * @brief CAN1 Initialization Function
 362:Core/Src/main.c ****  * @param None
 363:Core/Src/main.c ****  * @retval None
 364:Core/Src/main.c ****  */
 365:Core/Src/main.c **** static void MX_CAN1_Init(void)
 366:Core/Src/main.c **** {
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 373:Core/Src/main.c **** 
 374:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 375:Core/Src/main.c ****   hcan1.Instance = CAN1;
 376:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
ARM GAS  /tmp/ccayrfCi.s 			page 8


 377:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 378:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 379:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 380:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 381:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 382:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 383:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 384:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 385:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 386:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 387:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 388:Core/Src/main.c ****   {
 389:Core/Src/main.c ****     Error_Handler();
 390:Core/Src/main.c ****   }
 391:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 392:Core/Src/main.c **** 
 393:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 394:Core/Src/main.c **** }
 395:Core/Src/main.c **** 
 396:Core/Src/main.c **** /**
 397:Core/Src/main.c ****  * @brief CAN2 Initialization Function
 398:Core/Src/main.c ****  * @param None
 399:Core/Src/main.c ****  * @retval None
 400:Core/Src/main.c ****  */
 401:Core/Src/main.c **** static void MX_CAN2_Init(void)
 402:Core/Src/main.c **** {
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 0 */
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /* USER CODE END CAN2_Init 0 */
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 1 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* USER CODE END CAN2_Init 1 */
 411:Core/Src/main.c ****   hcan2.Instance = CAN2;
 412:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 413:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 414:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 415:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 416:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 417:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 418:Core/Src/main.c ****   hcan2.Init.AutoBusOff = ENABLE;
 419:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 420:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 421:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 422:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 423:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 424:Core/Src/main.c ****   {
 425:Core/Src/main.c ****     Error_Handler();
 426:Core/Src/main.c ****   }
 427:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 2 */
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /* USER CODE END CAN2_Init 2 */
 430:Core/Src/main.c **** }
 431:Core/Src/main.c **** 
 432:Core/Src/main.c **** /**
 433:Core/Src/main.c ****  * @brief I2C1 Initialization Function
ARM GAS  /tmp/ccayrfCi.s 			page 9


 434:Core/Src/main.c ****  * @param None
 435:Core/Src/main.c ****  * @retval None
 436:Core/Src/main.c ****  */
 437:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void)
 438:Core/Src/main.c **** {
 439:Core/Src/main.c **** 
 440:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 443:Core/Src/main.c **** 
 444:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 445:Core/Src/main.c **** 
 446:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 447:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 450:Core/Src/main.c **** }
 451:Core/Src/main.c **** 
 452:Core/Src/main.c **** /**
 453:Core/Src/main.c ****  * @brief IWDG Initialization Function
 454:Core/Src/main.c ****  * @param None
 455:Core/Src/main.c ****  * @retval None
 456:Core/Src/main.c ****  */
 457:Core/Src/main.c **** static void MX_IWDG_Init(void)
 458:Core/Src/main.c **** {
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 0 */
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****   /* USER CODE END IWDG_Init 0 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 1 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE END IWDG_Init 1 */
 467:Core/Src/main.c ****   hiwdg.Instance = IWDG;
 468:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 469:Core/Src/main.c ****   hiwdg.Init.Reload = 1000; //439
 470:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 471:Core/Src/main.c ****   {
 472:Core/Src/main.c ****     Error_Handler();
 473:Core/Src/main.c ****   }
 474:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 2 */
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /* USER CODE END IWDG_Init 2 */
 477:Core/Src/main.c **** }
 478:Core/Src/main.c **** 
 479:Core/Src/main.c **** /**
 480:Core/Src/main.c ****  * @brief TIM1 Initialization Function
 481:Core/Src/main.c ****  * @param None
 482:Core/Src/main.c ****  * @retval None
 483:Core/Src/main.c ****  */
 484:Core/Src/main.c **** static void MX_TIM1_Init(void)
 485:Core/Src/main.c **** {
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 488:Core/Src/main.c **** 
 489:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 490:Core/Src/main.c **** 
ARM GAS  /tmp/ccayrfCi.s 			page 10


 491:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 492:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 493:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 494:Core/Src/main.c **** 
 495:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 498:Core/Src/main.c ****   htim1.Instance = TIM1;
 499:Core/Src/main.c ****   htim1.Init.Prescaler = 240;
 500:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 501:Core/Src/main.c ****   htim1.Init.Period = 65535;
 502:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 503:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 504:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 505:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 506:Core/Src/main.c ****   {
 507:Core/Src/main.c ****     Error_Handler();
 508:Core/Src/main.c ****   }
 509:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 510:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 511:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 512:Core/Src/main.c ****   {
 513:Core/Src/main.c ****     Error_Handler();
 514:Core/Src/main.c ****   }
 515:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 516:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 517:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 518:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 519:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 520:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 521:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 522:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 523:Core/Src/main.c ****   {
 524:Core/Src/main.c ****     Error_Handler();
 525:Core/Src/main.c ****   }
 526:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 527:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 528:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 529:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 530:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 531:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 532:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 533:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 534:Core/Src/main.c ****   {
 535:Core/Src/main.c ****     Error_Handler();
 536:Core/Src/main.c ****   }
 537:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 540:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 541:Core/Src/main.c **** }
 542:Core/Src/main.c **** 
 543:Core/Src/main.c **** /**
 544:Core/Src/main.c ****  * @brief TIM2 Initialization Function
 545:Core/Src/main.c ****  * @param None
 546:Core/Src/main.c ****  * @retval None
 547:Core/Src/main.c ****  */
ARM GAS  /tmp/ccayrfCi.s 			page 11


 548:Core/Src/main.c **** static void MX_TIM2_Init(void)
 549:Core/Src/main.c **** {
 550:Core/Src/main.c **** 
 551:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 552:Core/Src/main.c **** 
 553:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 554:Core/Src/main.c **** 
 555:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 556:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 557:Core/Src/main.c **** 
 558:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 559:Core/Src/main.c ****   // Water pump pwm emulation
 560:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 561:Core/Src/main.c ****   htim2.Instance = TIM2;
 562:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 563:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 564:Core/Src/main.c ****   htim2.Init.Period = 600;
 565:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 566:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 567:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 568:Core/Src/main.c ****   {
 569:Core/Src/main.c ****     Error_Handler();
 570:Core/Src/main.c ****   }
 571:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 572:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 573:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 574:Core/Src/main.c ****   {
 575:Core/Src/main.c ****     Error_Handler();
 576:Core/Src/main.c ****   }
 577:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 578:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 579:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 580:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 581:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 582:Core/Src/main.c ****   {
 583:Core/Src/main.c ****     Error_Handler();
 584:Core/Src/main.c ****   }
 585:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 586:Core/Src/main.c **** 
 587:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 588:Core/Src/main.c **** }
 589:Core/Src/main.c **** 
 590:Core/Src/main.c **** /**
 591:Core/Src/main.c ****  * @brief TIM3 Initialization Function
 592:Core/Src/main.c ****  * @param None
 593:Core/Src/main.c ****  * @retval None
 594:Core/Src/main.c ****  */
 595:Core/Src/main.c **** static void MX_TIM3_Init(void)
 596:Core/Src/main.c **** {
 597:Core/Src/main.c **** 
 598:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 599:Core/Src/main.c **** 
 600:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 601:Core/Src/main.c **** 
 602:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 603:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 604:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
ARM GAS  /tmp/ccayrfCi.s 			page 12


 605:Core/Src/main.c **** 
 606:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 607:Core/Src/main.c **** 
 608:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 609:Core/Src/main.c ****   htim3.Instance = TIM3;
 610:Core/Src/main.c ****   htim3.Init.Prescaler = 120;
 611:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 612:Core/Src/main.c ****   htim3.Init.Period = 600;
 613:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 614:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 615:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 616:Core/Src/main.c ****   {
 617:Core/Src/main.c ****     Error_Handler();
 618:Core/Src/main.c ****   }
 619:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 620:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 621:Core/Src/main.c ****   {
 622:Core/Src/main.c ****     Error_Handler();
 623:Core/Src/main.c ****   }
 624:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 625:Core/Src/main.c ****   {
 626:Core/Src/main.c ****     Error_Handler();
 627:Core/Src/main.c ****   }
 628:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 629:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 630:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 631:Core/Src/main.c ****   {
 632:Core/Src/main.c ****     Error_Handler();
 633:Core/Src/main.c ****   }
 634:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 635:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 636:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 637:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 638:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 639:Core/Src/main.c ****   {
 640:Core/Src/main.c ****     Error_Handler();
 641:Core/Src/main.c ****   }
 642:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 643:Core/Src/main.c **** 
 644:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 645:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 646:Core/Src/main.c **** }
 647:Core/Src/main.c **** 
 648:Core/Src/main.c **** /**
 649:Core/Src/main.c ****  * @brief TIM5 Initialization Function
 650:Core/Src/main.c ****  * @param None
 651:Core/Src/main.c ****  * @retval None
 652:Core/Src/main.c ****  */
 653:Core/Src/main.c **** static void MX_TIM5_Init(void)
 654:Core/Src/main.c **** {
 655:Core/Src/main.c **** 
 656:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
 657:Core/Src/main.c **** 
 658:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
 659:Core/Src/main.c **** 
 660:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 661:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
ARM GAS  /tmp/ccayrfCi.s 			page 13


 662:Core/Src/main.c **** 
 663:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
 664:Core/Src/main.c **** 
 665:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
 666:Core/Src/main.c ****   htim5.Instance = TIM5;
 667:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 668:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 669:Core/Src/main.c ****   htim5.Init.Period = 10;
 670:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 671:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 672:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 673:Core/Src/main.c ****   {
 674:Core/Src/main.c ****     Error_Handler();
 675:Core/Src/main.c ****   }
 676:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 677:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 678:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 679:Core/Src/main.c ****   {
 680:Core/Src/main.c ****     Error_Handler();
 681:Core/Src/main.c ****   }
 682:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 683:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 684:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 685:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 686:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 687:Core/Src/main.c ****   {
 688:Core/Src/main.c ****     Error_Handler();
 689:Core/Src/main.c ****   }
 690:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 691:Core/Src/main.c ****   {
 692:Core/Src/main.c ****     Error_Handler();
 693:Core/Src/main.c ****   }
 694:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
 695:Core/Src/main.c **** 
 696:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
 697:Core/Src/main.c **** }
 698:Core/Src/main.c **** 
 699:Core/Src/main.c **** /**
 700:Core/Src/main.c ****  * @brief UART4 Initialization Function
 701:Core/Src/main.c ****  * @param None
 702:Core/Src/main.c ****  * @retval None
 703:Core/Src/main.c ****  */
 704:Core/Src/main.c **** static void MX_UART4_Init(void)
 705:Core/Src/main.c **** {
 706:Core/Src/main.c **** 
 707:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 0 */
 708:Core/Src/main.c **** 
 709:Core/Src/main.c ****   /* USER CODE END UART4_Init 0 */
 710:Core/Src/main.c **** 
 711:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 1 */
 712:Core/Src/main.c **** 
 713:Core/Src/main.c ****   /* USER CODE END UART4_Init 1 */
 714:Core/Src/main.c ****   huart4.Instance = UART4;
 715:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 716:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 717:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 718:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/ccayrfCi.s 			page 14


 719:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 720:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 721:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 722:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 723:Core/Src/main.c ****   {
 724:Core/Src/main.c ****     Error_Handler();
 725:Core/Src/main.c ****   }
 726:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 2 */
 727:Core/Src/main.c **** 
 728:Core/Src/main.c ****   /* USER CODE END UART4_Init 2 */
 729:Core/Src/main.c **** }
 730:Core/Src/main.c **** 
 731:Core/Src/main.c **** /**
 732:Core/Src/main.c ****  * @brief USART1 Initialization Function
 733:Core/Src/main.c ****  * @param None
 734:Core/Src/main.c ****  * @retval None
 735:Core/Src/main.c ****  */
 736:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 737:Core/Src/main.c **** {
 738:Core/Src/main.c **** 
 739:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 740:Core/Src/main.c **** 
 741:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 742:Core/Src/main.c **** 
 743:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 744:Core/Src/main.c **** 
 745:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 746:Core/Src/main.c ****   huart1.Instance = USART1;
 747:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 748:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 749:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 750:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 751:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 752:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 753:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 754:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 755:Core/Src/main.c ****   {
 756:Core/Src/main.c ****     Error_Handler();
 757:Core/Src/main.c ****   }
 758:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 759:Core/Src/main.c **** 
 760:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 761:Core/Src/main.c **** }
 762:Core/Src/main.c **** 
 763:Core/Src/main.c **** /**
 764:Core/Src/main.c ****  * Enable DMA controller clock
 765:Core/Src/main.c ****  */
 766:Core/Src/main.c **** static void MX_DMA_Init(void)
 767:Core/Src/main.c **** {
 768:Core/Src/main.c **** 
 769:Core/Src/main.c ****   /* DMA controller clock enable */
 770:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 771:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 772:Core/Src/main.c **** 
 773:Core/Src/main.c ****   /* DMA interrupt init */
 774:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 775:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
ARM GAS  /tmp/ccayrfCi.s 			page 15


 776:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 777:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 778:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 779:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 780:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 781:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 782:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 783:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 784:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 785:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 786:Core/Src/main.c **** }
 787:Core/Src/main.c **** 
 788:Core/Src/main.c **** /**
 789:Core/Src/main.c ****  * @brief GPIO Initialization Function
 790:Core/Src/main.c ****  * @param None
 791:Core/Src/main.c ****  * @retval None
 792:Core/Src/main.c ****  */
 793:Core/Src/main.c **** static void MX_GPIO_Init(void)
 794:Core/Src/main.c **** {
  25              		.loc 1 794 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 795:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 795 0
  42 0006 0024     		movs	r4, #0
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB4:
 796:Core/Src/main.c **** 
 797:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 798:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 798 0
  49 0010 304B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F01002 		orr	r2, r2, #16
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F01002 		and	r2, r2, #16
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE4:
  58              	.LBB5:
ARM GAS  /tmp/ccayrfCi.s 			page 16


 799:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  59              		.loc 1 799 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F02002 		orr	r2, r2, #32
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9A69     		ldr	r2, [r3, #24]
  64 002e 02F02002 		and	r2, r2, #32
  65 0032 0192     		str	r2, [sp, #4]
  66 0034 019A     		ldr	r2, [sp, #4]
  67              	.LBE5:
  68              	.LBB6:
 800:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 800 0
  70 0036 9A69     		ldr	r2, [r3, #24]
  71 0038 42F00402 		orr	r2, r2, #4
  72 003c 9A61     		str	r2, [r3, #24]
  73 003e 9A69     		ldr	r2, [r3, #24]
  74 0040 02F00402 		and	r2, r2, #4
  75 0044 0292     		str	r2, [sp, #8]
  76 0046 029A     		ldr	r2, [sp, #8]
  77              	.LBE6:
  78              	.LBB7:
 801:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  79              		.loc 1 801 0
  80 0048 9A69     		ldr	r2, [r3, #24]
  81 004a 42F00802 		orr	r2, r2, #8
  82 004e 9A61     		str	r2, [r3, #24]
  83 0050 9B69     		ldr	r3, [r3, #24]
  84 0052 03F00803 		and	r3, r3, #8
  85 0056 0393     		str	r3, [sp, #12]
  86 0058 039B     		ldr	r3, [sp, #12]
  87              	.LBE7:
 802:Core/Src/main.c **** 
 803:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 804:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, LED_Pin | WP_Pin | TEMP_Pin | SOC_Pin, GPIO_PIN_RESET);
  88              		.loc 1 804 0
  89 005a 1F4E     		ldr	r6, .L3+4
  90 005c 2246     		mov	r2, r4
  91 005e 4FF40B51 		mov	r1, #8896
  92 0062 3046     		mov	r0, r6
  93 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL0:
 805:Core/Src/main.c **** 
 806:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 807:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, PS_INIT_Pin | HEAT_OUT_Pin, GPIO_PIN_RESET);
  95              		.loc 1 807 0
  96 0068 1C4D     		ldr	r5, .L3+8
  97 006a 2246     		mov	r2, r4
  98 006c 4FF44041 		mov	r1, #49152
  99 0070 2846     		mov	r0, r5
 100 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL1:
 808:Core/Src/main.c **** 
 809:Core/Src/main.c ****   /*Configure GPIO pins : LED_Pin WP_Pin */
 810:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin | WP_Pin;
 102              		.loc 1 810 0
 103 0076 4FF40153 		mov	r3, #8256
ARM GAS  /tmp/ccayrfCi.s 			page 17


 104 007a 0493     		str	r3, [sp, #16]
 811:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 105              		.loc 1 811 0
 106 007c 0127     		movs	r7, #1
 107 007e 0597     		str	r7, [sp, #20]
 812:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 108              		.loc 1 812 0
 109 0080 0694     		str	r4, [sp, #24]
 813:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 110              		.loc 1 813 0
 111 0082 4FF00208 		mov	r8, #2
 112 0086 CDF81C80 		str	r8, [sp, #28]
 814:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 113              		.loc 1 814 0
 114 008a 04A9     		add	r1, sp, #16
 115 008c 3046     		mov	r0, r6
 116 008e FFF7FEFF 		bl	HAL_GPIO_Init
 117              	.LVL2:
 815:Core/Src/main.c **** 
 816:Core/Src/main.c ****   /*Configure GPIO pins : PS_INIT_Pin HEAT_OUT_Pin */
 817:Core/Src/main.c ****   GPIO_InitStruct.Pin = PS_INIT_Pin | HEAT_OUT_Pin;
 118              		.loc 1 817 0
 119 0092 4FF44043 		mov	r3, #49152
 120 0096 0493     		str	r3, [sp, #16]
 818:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 121              		.loc 1 818 0
 122 0098 0597     		str	r7, [sp, #20]
 819:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 123              		.loc 1 819 0
 124 009a 0694     		str	r4, [sp, #24]
 820:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 820 0
 126 009c CDF81C80 		str	r8, [sp, #28]
 821:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 127              		.loc 1 821 0
 128 00a0 04A9     		add	r1, sp, #16
 129 00a2 2846     		mov	r0, r5
 130 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL3:
 822:Core/Src/main.c **** 
 823:Core/Src/main.c ****   /*Configure GPIO pins : TEMP_Pin SOC_Pin */
 824:Core/Src/main.c ****   GPIO_InitStruct.Pin = TEMP_Pin | SOC_Pin;
 132              		.loc 1 824 0
 133 00a8 4FF42073 		mov	r3, #640
 134 00ac 0493     		str	r3, [sp, #16]
 825:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 135              		.loc 1 825 0
 136 00ae 0597     		str	r7, [sp, #20]
 826:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 137              		.loc 1 826 0
 138 00b0 0694     		str	r4, [sp, #24]
 827:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 139              		.loc 1 827 0
 140 00b2 0323     		movs	r3, #3
 141 00b4 0793     		str	r3, [sp, #28]
 828:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 142              		.loc 1 828 0
ARM GAS  /tmp/ccayrfCi.s 			page 18


 143 00b6 04A9     		add	r1, sp, #16
 144 00b8 3046     		mov	r0, r6
 145 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL4:
 829:Core/Src/main.c **** 
 830:Core/Src/main.c ****   /*Configure GPIO pins : SW12_Pin HEAT_REQ_Pin */
 831:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW12_Pin | HEAT_REQ_Pin;
 147              		.loc 1 831 0
 148 00be 3023     		movs	r3, #48
 149 00c0 0493     		str	r3, [sp, #16]
 832:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 150              		.loc 1 832 0
 151 00c2 0594     		str	r4, [sp, #20]
 833:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 833 0
 153 00c4 0694     		str	r4, [sp, #24]
 834:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 154              		.loc 1 834 0
 155 00c6 04A9     		add	r1, sp, #16
 156 00c8 2846     		mov	r0, r5
 157 00ca FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL5:
 835:Core/Src/main.c **** }
 159              		.loc 1 835 0
 160 00ce 08B0     		add	sp, sp, #32
 161              	.LCFI2:
 162              		.cfi_def_cfa_offset 24
 163              		@ sp needed
 164 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 165              	.L4:
 166              		.align	2
 167              	.L3:
 168 00d4 00100240 		.word	1073876992
 169 00d8 00100140 		.word	1073811456
 170 00dc 000C0140 		.word	1073810432
 171              		.cfi_endproc
 172              	.LFE86:
 174              		.section	.text.MX_DMA_Init,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	MX_DMA_Init:
 182              	.LFB85:
 767:Core/Src/main.c **** 
 183              		.loc 1 767 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 8
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187 0000 00B5     		push	{lr}
 188              	.LCFI3:
 189              		.cfi_def_cfa_offset 4
 190              		.cfi_offset 14, -4
 191 0002 83B0     		sub	sp, sp, #12
 192              	.LCFI4:
 193              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccayrfCi.s 			page 19


 194              	.LBB8:
 770:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 195              		.loc 1 770 0
 196 0004 1A4B     		ldr	r3, .L7
 197 0006 5A69     		ldr	r2, [r3, #20]
 198 0008 42F00202 		orr	r2, r2, #2
 199 000c 5A61     		str	r2, [r3, #20]
 200 000e 5A69     		ldr	r2, [r3, #20]
 201 0010 02F00202 		and	r2, r2, #2
 202 0014 0092     		str	r2, [sp]
 203 0016 009A     		ldr	r2, [sp]
 204              	.LBE8:
 205              	.LBB9:
 771:Core/Src/main.c **** 
 206              		.loc 1 771 0
 207 0018 5A69     		ldr	r2, [r3, #20]
 208 001a 42F00102 		orr	r2, r2, #1
 209 001e 5A61     		str	r2, [r3, #20]
 210 0020 5B69     		ldr	r3, [r3, #20]
 211 0022 03F00103 		and	r3, r3, #1
 212 0026 0193     		str	r3, [sp, #4]
 213 0028 019B     		ldr	r3, [sp, #4]
 214              	.LBE9:
 775:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 215              		.loc 1 775 0
 216 002a 0022     		movs	r2, #0
 217 002c 0521     		movs	r1, #5
 218 002e 0B20     		movs	r0, #11
 219 0030 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 220              	.LVL6:
 776:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 221              		.loc 1 776 0
 222 0034 0B20     		movs	r0, #11
 223 0036 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 224              	.LVL7:
 778:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 225              		.loc 1 778 0
 226 003a 0022     		movs	r2, #0
 227 003c 0521     		movs	r1, #5
 228 003e 0F20     		movs	r0, #15
 229 0040 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 230              	.LVL8:
 779:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 231              		.loc 1 779 0
 232 0044 0F20     		movs	r0, #15
 233 0046 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 234              	.LVL9:
 781:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 235              		.loc 1 781 0
 236 004a 0022     		movs	r2, #0
 237 004c 0521     		movs	r1, #5
 238 004e 3B20     		movs	r0, #59
 239 0050 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 240              	.LVL10:
 782:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 241              		.loc 1 782 0
 242 0054 3B20     		movs	r0, #59
ARM GAS  /tmp/ccayrfCi.s 			page 20


 243 0056 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 244              	.LVL11:
 784:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 245              		.loc 1 784 0
 246 005a 0022     		movs	r2, #0
 247 005c 0521     		movs	r1, #5
 248 005e 3C20     		movs	r0, #60
 249 0060 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 250              	.LVL12:
 785:Core/Src/main.c **** }
 251              		.loc 1 785 0
 252 0064 3C20     		movs	r0, #60
 253 0066 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 254              	.LVL13:
 786:Core/Src/main.c **** 
 255              		.loc 1 786 0
 256 006a 03B0     		add	sp, sp, #12
 257              	.LCFI5:
 258              		.cfi_def_cfa_offset 4
 259              		@ sp needed
 260 006c 5DF804FB 		ldr	pc, [sp], #4
 261              	.L8:
 262              		.align	2
 263              	.L7:
 264 0070 00100240 		.word	1073876992
 265              		.cfi_endproc
 266              	.LFE85:
 268              		.section	.text.StartTaskLoop,"ax",%progbits
 269              		.align	1
 270              		.global	StartTaskLoop
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu softvfp
 276              	StartTaskLoop:
 277              	.LFB87:
 836:Core/Src/main.c **** 
 837:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 838:Core/Src/main.c **** // Callback: timer has rolled over
 839:Core/Src/main.c **** 
 840:Core/Src/main.c **** /* USER CODE END 4 */
 841:Core/Src/main.c **** 
 842:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTaskLoop */
 843:Core/Src/main.c **** /**
 844:Core/Src/main.c ****  * @brief  Function implementing the TaskLoop thread.
 845:Core/Src/main.c ****  * @param  argument: Not used
 846:Core/Src/main.c ****  * @retval None
 847:Core/Src/main.c ****  */
 848:Core/Src/main.c **** /* USER CODE END Header_StartTaskLoop */
 849:Core/Src/main.c **** void StartTaskLoop(void *argument)
 850:Core/Src/main.c **** {
 278              		.loc 1 850 0
 279              		.cfi_startproc
 280              		@ Volatile: function does not return.
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL14:
ARM GAS  /tmp/ccayrfCi.s 			page 21


 284 0000 08B5     		push	{r3, lr}
 285              	.LCFI6:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 289              	.LVL15:
 290              	.L10:
 851:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 852:Core/Src/main.c ****   /* Infinite loop */
 853:Core/Src/main.c ****   for (;;)
 854:Core/Src/main.c ****   {
 855:Core/Src/main.c ****     wpHandler();
 291              		.loc 1 855 0 discriminator 1
 292 0002 FFF7FEFF 		bl	wpHandler
 293              	.LVL16:
 856:Core/Src/main.c ****     vcuState();
 294              		.loc 1 856 0 discriminator 1
 295 0006 FFF7FEFF 		bl	vcuState
 296              	.LVL17:
 857:Core/Src/main.c ****     ioHandler();
 297              		.loc 1 857 0 discriminator 1
 298 000a FFF7FEFF 		bl	ioHandler
 299              	.LVL18:
 858:Core/Src/main.c **** 
 859:Core/Src/main.c ****     osDelay(1);
 300              		.loc 1 859 0 discriminator 1
 301 000e 0120     		movs	r0, #1
 302 0010 FFF7FEFF 		bl	osDelay
 303              	.LVL19:
 304 0014 F5E7     		b	.L10
 305              		.cfi_endproc
 306              	.LFE87:
 308              		.section	.text.StartTask10ms,"ax",%progbits
 309              		.align	1
 310              		.global	StartTask10ms
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu softvfp
 316              	StartTask10ms:
 317              	.LFB88:
 860:Core/Src/main.c ****   }
 861:Core/Src/main.c ****   /* USER CODE END 5 */
 862:Core/Src/main.c **** }
 863:Core/Src/main.c **** 
 864:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask10ms */
 865:Core/Src/main.c **** /**
 866:Core/Src/main.c ****  * @brief Function implementing the Task10ms thread.
 867:Core/Src/main.c ****  * @param argument: Not used
 868:Core/Src/main.c ****  * @retval None
 869:Core/Src/main.c ****  */
 870:Core/Src/main.c **** /* USER CODE END Header_StartTask10ms */
 871:Core/Src/main.c **** void StartTask10ms(void *argument)
 872:Core/Src/main.c **** {
 318              		.loc 1 872 0
 319              		.cfi_startproc
 320              		@ Volatile: function does not return.
ARM GAS  /tmp/ccayrfCi.s 			page 22


 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              	.LVL20:
 324 0000 08B5     		push	{r3, lr}
 325              	.LCFI7:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 3, -8
 328              		.cfi_offset 14, -4
 329              	.LVL21:
 330              	.L13:
 873:Core/Src/main.c ****   /* USER CODE BEGIN StartTask10ms */
 874:Core/Src/main.c ****   // TickType_t lastWakeTime;
 875:Core/Src/main.c ****   // const TickType_t frequency = 20;
 876:Core/Src/main.c ****   // lastWakeTime = xTaskGetTickCount();
 877:Core/Src/main.c ****   /* Infinite loop */
 878:Core/Src/main.c ****   for (;;)
 879:Core/Src/main.c ****   {
 880:Core/Src/main.c ****     // vTaskDelayUntil(&lastWakeTime, frequency);
 881:Core/Src/main.c ****     throttleHandler();
 331              		.loc 1 881 0 discriminator 1
 332 0002 FFF7FEFF 		bl	throttleHandler
 333              	.LVL22:
 882:Core/Src/main.c ****     canIOsend();
 334              		.loc 1 882 0 discriminator 1
 335 0006 FFF7FEFF 		bl	canIOsend
 336              	.LVL23:
 883:Core/Src/main.c ****     regenHandler();
 337              		.loc 1 883 0 discriminator 1
 338 000a FFF7FEFF 		bl	regenHandler
 339              	.LVL24:
 884:Core/Src/main.c ****     brakeHandler();
 340              		.loc 1 884 0 discriminator 1
 341 000e FFF7FEFF 		bl	brakeHandler
 342              	.LVL25:
 885:Core/Src/main.c ****     dcdcHandler(vcu.state);
 343              		.loc 1 885 0 discriminator 1
 344 0012 044B     		ldr	r3, .L15
 345 0014 1879     		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 346 0016 FFF7FEFF 		bl	dcdcHandler
 347              	.LVL26:
 886:Core/Src/main.c **** 
 887:Core/Src/main.c ****     osDelay(20);
 348              		.loc 1 887 0 discriminator 1
 349 001a 1420     		movs	r0, #20
 350 001c FFF7FEFF 		bl	osDelay
 351              	.LVL27:
 352 0020 EFE7     		b	.L13
 353              	.L16:
 354 0022 00BF     		.align	2
 355              	.L15:
 356 0024 00000000 		.word	vcu
 357              		.cfi_endproc
 358              	.LFE88:
 360              		.section	.text.StartTask100ms,"ax",%progbits
 361              		.align	1
 362              		.global	StartTask100ms
 363              		.syntax unified
ARM GAS  /tmp/ccayrfCi.s 			page 23


 364              		.thumb
 365              		.thumb_func
 366              		.fpu softvfp
 368              	StartTask100ms:
 369              	.LFB89:
 888:Core/Src/main.c ****   }
 889:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 890:Core/Src/main.c ****   osThreadTerminate(NULL);
 891:Core/Src/main.c ****   /* USER CODE END StartTask10ms */
 892:Core/Src/main.c **** }
 893:Core/Src/main.c **** 
 894:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask100ms */
 895:Core/Src/main.c **** /**
 896:Core/Src/main.c ****  * @brief Function implementing the Task100ms thread.
 897:Core/Src/main.c ****  * @param argument: Not used
 898:Core/Src/main.c ****  * @retval None
 899:Core/Src/main.c ****  */
 900:Core/Src/main.c **** /* USER CODE END Header_StartTask100ms */
 901:Core/Src/main.c **** void StartTask100ms(void *argument)
 902:Core/Src/main.c **** {
 370              		.loc 1 902 0
 371              		.cfi_startproc
 372              		@ Volatile: function does not return.
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              	.LVL28:
 376 0000 08B5     		push	{r3, lr}
 377              	.LCFI8:
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 3, -8
 380              		.cfi_offset 14, -4
 381              	.LVL29:
 382              	.L18:
 903:Core/Src/main.c ****   /* USER CODE BEGIN StartTask100ms */
 904:Core/Src/main.c ****   // TickType_t lastWakeTime;
 905:Core/Src/main.c ****   // const TickType_t frequency = 100;
 906:Core/Src/main.c ****   // lastWakeTime = xTaskGetTickCount();
 907:Core/Src/main.c **** 
 908:Core/Src/main.c ****   /* Infinite loop */
 909:Core/Src/main.c **** 
 910:Core/Src/main.c ****   for (;;)
 911:Core/Src/main.c ****   {
 912:Core/Src/main.c ****     // vTaskDelayUntil(&lastWakeTime, frequency);
 913:Core/Src/main.c **** 
 914:Core/Src/main.c ****     updateSpeed(ldu.rpm);
 383              		.loc 1 914 0 discriminator 1
 384 0002 084C     		ldr	r4, .L20
 385 0004 2088     		ldrh	r0, [r4]
 386 0006 80B2     		uxth	r0, r0
 387 0008 FFF7FEFF 		bl	updateSpeed
 388              	.LVL30:
 915:Core/Src/main.c ****     updateTach(ldu.amps);
 389              		.loc 1 915 0 discriminator 1
 390 000c 6089     		ldrh	r0, [r4, #10]
 391 000e 80B2     		uxth	r0, r0
 392 0010 FFF7FEFF 		bl	updateTach
 393              	.LVL31:
ARM GAS  /tmp/ccayrfCi.s 			page 24


 916:Core/Src/main.c ****     HAL_IWDG_Refresh(&hiwdg);
 394              		.loc 1 916 0 discriminator 1
 395 0014 0448     		ldr	r0, .L20+4
 396 0016 FFF7FEFF 		bl	HAL_IWDG_Refresh
 397              	.LVL32:
 917:Core/Src/main.c ****     // testVal();
 918:Core/Src/main.c **** 
 919:Core/Src/main.c ****     osDelay(100);
 398              		.loc 1 919 0 discriminator 1
 399 001a 6420     		movs	r0, #100
 400 001c FFF7FEFF 		bl	osDelay
 401              	.LVL33:
 402 0020 EFE7     		b	.L18
 403              	.L21:
 404 0022 00BF     		.align	2
 405              	.L20:
 406 0024 00000000 		.word	ldu
 407 0028 00000000 		.word	hiwdg
 408              		.cfi_endproc
 409              	.LFE89:
 411              		.section	.text.StartTask250ms,"ax",%progbits
 412              		.align	1
 413              		.global	StartTask250ms
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
 417              		.fpu softvfp
 419              	StartTask250ms:
 420              	.LFB90:
 920:Core/Src/main.c ****   }
 921:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 922:Core/Src/main.c ****   osThreadTerminate(NULL);
 923:Core/Src/main.c ****   /* USER CODE END StartTask100ms */
 924:Core/Src/main.c **** }
 925:Core/Src/main.c **** 
 926:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask250ms */
 927:Core/Src/main.c **** /**
 928:Core/Src/main.c ****  * @brief Function implementing the Task250ms thread.
 929:Core/Src/main.c ****  * @param argument: Not used
 930:Core/Src/main.c ****  * @retval None
 931:Core/Src/main.c ****  */
 932:Core/Src/main.c **** /* USER CODE END Header_StartTask250ms */
 933:Core/Src/main.c **** void StartTask250ms(void *argument)
 934:Core/Src/main.c **** {
 421              		.loc 1 934 0
 422              		.cfi_startproc
 423              		@ Volatile: function does not return.
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              	.LVL34:
 427 0000 08B5     		push	{r3, lr}
 428              	.LCFI9:
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 3, -8
 431              		.cfi_offset 14, -4
 432              	.LVL35:
 433              	.L23:
ARM GAS  /tmp/ccayrfCi.s 			page 25


 935:Core/Src/main.c ****   /* USER CODE BEGIN StartTask250ms */
 936:Core/Src/main.c ****   // TickType_t lastWakeTime;
 937:Core/Src/main.c ****   // const TickType_t frequency = 250;
 938:Core/Src/main.c ****   // lastWakeTime = xTaskGetTickCount();
 939:Core/Src/main.c ****   /* Infinite loop */
 940:Core/Src/main.c **** 
 941:Core/Src/main.c ****   for (;;)
 942:Core/Src/main.c **** 
 943:Core/Src/main.c ****   {
 944:Core/Src/main.c ****     // vTaskDelayUntil(&lastWakeTime, frequency);
 945:Core/Src/main.c ****     HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 434              		.loc 1 945 0 discriminator 1
 435 0002 4FF40051 		mov	r1, #8192
 436 0006 0A48     		ldr	r0, .L25
 437 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 438              	.LVL36:
 946:Core/Src/main.c **** 
 947:Core/Src/main.c ****     updateTemp(ldu.hsTemp);
 439              		.loc 1 947 0 discriminator 1
 440 000c 094B     		ldr	r3, .L25+4
 441 000e 9888     		ldrh	r0, [r3, #4]
 442 0010 80B2     		uxth	r0, r0
 443 0012 FFF7FEFF 		bl	updateTemp
 444              	.LVL37:
 948:Core/Src/main.c ****     updateSOC(BMS[0].chargeState);
 445              		.loc 1 948 0 discriminator 1
 446 0016 084B     		ldr	r3, .L25+8
 447 0018 187A     		ldrb	r0, [r3, #8]	@ zero_extendqisi2
 448 001a FFF7FEFF 		bl	updateSOC
 449              	.LVL38:
 949:Core/Src/main.c ****     vehicleComms();
 450              		.loc 1 949 0 discriminator 1
 451 001e FFF7FEFF 		bl	vehicleComms
 452              	.LVL39:
 950:Core/Src/main.c ****     encoderHandler();
 453              		.loc 1 950 0 discriminator 1
 454 0022 FFF7FEFF 		bl	encoderHandler
 455              	.LVL40:
 951:Core/Src/main.c **** 
 952:Core/Src/main.c ****     osDelay(250);
 456              		.loc 1 952 0 discriminator 1
 457 0026 FA20     		movs	r0, #250
 458 0028 FFF7FEFF 		bl	osDelay
 459              	.LVL41:
 460 002c E9E7     		b	.L23
 461              	.L26:
 462 002e 00BF     		.align	2
 463              	.L25:
 464 0030 00100140 		.word	1073811456
 465 0034 00000000 		.word	ldu
 466 0038 00000000 		.word	BMS
 467              		.cfi_endproc
 468              	.LFE90:
 470              		.section	.text.__io_putchar,"ax",%progbits
 471              		.align	1
 472              		.global	__io_putchar
 473              		.syntax unified
ARM GAS  /tmp/ccayrfCi.s 			page 26


 474              		.thumb
 475              		.thumb_func
 476              		.fpu softvfp
 478              	__io_putchar:
 479              	.LFB70:
 480              		.file 2 "Core/Inc/print_uart.h"
   1:Core/Inc/print_uart.h **** #ifndef __PRINT_UART_H
   2:Core/Inc/print_uart.h **** #define __PRINT_UART_H
   3:Core/Inc/print_uart.h **** 
   4:Core/Inc/print_uart.h **** 
   5:Core/Inc/print_uart.h **** #include <stdio.h>
   6:Core/Inc/print_uart.h **** #include "stm32f1xx_hal.h"
   7:Core/Inc/print_uart.h **** 
   8:Core/Inc/print_uart.h **** UART_HandleTypeDef huart1;
   9:Core/Inc/print_uart.h **** 
  10:Core/Inc/print_uart.h **** //////////////////////////// Begin UART Magic ////////////////////////
  11:Core/Inc/print_uart.h **** int __io_putchar(int ch)
  12:Core/Inc/print_uart.h **** {
 481              		.loc 2 12 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 8
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485              	.LVL42:
 486 0000 10B5     		push	{r4, lr}
 487              	.LCFI10:
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 4, -8
 490              		.cfi_offset 14, -4
 491 0002 82B0     		sub	sp, sp, #8
 492              	.LCFI11:
 493              		.cfi_def_cfa_offset 16
 494 0004 0446     		mov	r4, r0
  13:Core/Inc/print_uart.h ****  uint8_t c[1];
  14:Core/Inc/print_uart.h ****  c[0] = ch & 0x00FF;
 495              		.loc 2 14 0
 496 0006 02A9     		add	r1, sp, #8
 497 0008 01F8040D 		strb	r0, [r1, #-4]!
  15:Core/Inc/print_uart.h ****  HAL_UART_Transmit(&huart1, &*c, 1, 10);
 498              		.loc 2 15 0
 499 000c 0A23     		movs	r3, #10
 500 000e 0122     		movs	r2, #1
 501 0010 0248     		ldr	r0, .L29
 502              	.LVL43:
 503 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 504              	.LVL44:
  16:Core/Inc/print_uart.h ****  return ch;
  17:Core/Inc/print_uart.h **** }
 505              		.loc 2 17 0
 506 0016 2046     		mov	r0, r4
 507 0018 02B0     		add	sp, sp, #8
 508              	.LCFI12:
 509              		.cfi_def_cfa_offset 8
 510              		@ sp needed
 511 001a 10BD     		pop	{r4, pc}
 512              	.LVL45:
 513              	.L30:
 514              		.align	2
ARM GAS  /tmp/ccayrfCi.s 			page 27


 515              	.L29:
 516 001c 00000000 		.word	huart1
 517              		.cfi_endproc
 518              	.LFE70:
 520              		.section	.text._write,"ax",%progbits
 521              		.align	1
 522              		.global	_write
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu softvfp
 528              	_write:
 529              	.LFB71:
  18:Core/Inc/print_uart.h **** 
  19:Core/Inc/print_uart.h **** int _write(int file,char *ptr, int len)
  20:Core/Inc/print_uart.h **** {
 530              		.loc 2 20 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              	.LVL46:
 535 0000 70B5     		push	{r4, r5, r6, lr}
 536              	.LCFI13:
 537              		.cfi_def_cfa_offset 16
 538              		.cfi_offset 4, -16
 539              		.cfi_offset 5, -12
 540              		.cfi_offset 6, -8
 541              		.cfi_offset 14, -4
 542 0002 1646     		mov	r6, r2
 543              	.LVL47:
  21:Core/Inc/print_uart.h ****  int DataIdx;
  22:Core/Inc/print_uart.h ****  for(DataIdx= 0; DataIdx< len; DataIdx++)
 544              		.loc 2 22 0
 545 0004 0024     		movs	r4, #0
 546 0006 05E0     		b	.L32
 547              	.LVL48:
 548              	.L33:
  23:Core/Inc/print_uart.h ****  {
  24:Core/Inc/print_uart.h ****  __io_putchar(*ptr++);
 549              		.loc 2 24 0 discriminator 3
 550 0008 4D1C     		adds	r5, r1, #1
 551              	.LVL49:
 552 000a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 553 000c FFF7FEFF 		bl	__io_putchar
 554              	.LVL50:
  22:Core/Inc/print_uart.h ****  {
 555              		.loc 2 22 0 discriminator 3
 556 0010 0134     		adds	r4, r4, #1
 557              	.LVL51:
 558              		.loc 2 24 0 discriminator 3
 559 0012 2946     		mov	r1, r5
 560              	.LVL52:
 561              	.L32:
  22:Core/Inc/print_uart.h ****  {
 562              		.loc 2 22 0 discriminator 1
 563 0014 B442     		cmp	r4, r6
 564 0016 F7DB     		blt	.L33
ARM GAS  /tmp/ccayrfCi.s 			page 28


  25:Core/Inc/print_uart.h ****  }
  26:Core/Inc/print_uart.h **** return len;
  27:Core/Inc/print_uart.h **** }
 565              		.loc 2 27 0
 566 0018 3046     		mov	r0, r6
 567 001a 70BD     		pop	{r4, r5, r6, pc}
 568              		.cfi_endproc
 569              	.LFE71:
 571              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 572              		.align	1
 573              		.global	HAL_TIM_PeriodElapsedCallback
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu softvfp
 579              	HAL_TIM_PeriodElapsedCallback:
 580              	.LFB91:
 953:Core/Src/main.c ****     // testVal();
 954:Core/Src/main.c ****   }
 955:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 956:Core/Src/main.c ****   osThreadTerminate(NULL);
 957:Core/Src/main.c ****   /* USER CODE END StartTask250ms */
 958:Core/Src/main.c **** }
 959:Core/Src/main.c **** 
 960:Core/Src/main.c **** /**
 961:Core/Src/main.c ****  * @brief  Period elapsed callback in non blocking mode
 962:Core/Src/main.c ****  * @note   This function is called  when TIM7 interrupt took place, inside
 963:Core/Src/main.c ****  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 964:Core/Src/main.c ****  * a global variable "uwTick" used as application time base.
 965:Core/Src/main.c ****  * @param  htim : TIM handle
 966:Core/Src/main.c ****  * @retval None
 967:Core/Src/main.c ****  */
 968:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 969:Core/Src/main.c **** {
 581              		.loc 1 969 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              	.LVL53:
 586 0000 08B5     		push	{r3, lr}
 587              	.LCFI14:
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 3, -8
 590              		.cfi_offset 14, -4
 970:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 971:Core/Src/main.c **** 
 972:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 973:Core/Src/main.c ****   if (htim->Instance == TIM7)
 591              		.loc 1 973 0
 592 0002 0268     		ldr	r2, [r0]
 593 0004 034B     		ldr	r3, .L39
 594 0006 9A42     		cmp	r2, r3
 595 0008 00D0     		beq	.L38
 596              	.LVL54:
 597              	.L35:
 598 000a 08BD     		pop	{r3, pc}
 599              	.LVL55:
ARM GAS  /tmp/ccayrfCi.s 			page 29


 600              	.L38:
 974:Core/Src/main.c ****   {
 975:Core/Src/main.c ****     HAL_IncTick();
 601              		.loc 1 975 0
 602 000c FFF7FEFF 		bl	HAL_IncTick
 603              	.LVL56:
 976:Core/Src/main.c ****   }
 977:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 978:Core/Src/main.c **** 
 979:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 980:Core/Src/main.c **** }
 604              		.loc 1 980 0
 605 0010 FBE7     		b	.L35
 606              	.L40:
 607 0012 00BF     		.align	2
 608              	.L39:
 609 0014 00140040 		.word	1073746944
 610              		.cfi_endproc
 611              	.LFE91:
 613              		.section	.text.Error_Handler,"ax",%progbits
 614              		.align	1
 615              		.global	Error_Handler
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu softvfp
 621              	Error_Handler:
 622              	.LFB92:
 981:Core/Src/main.c **** 
 982:Core/Src/main.c **** /**
 983:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 984:Core/Src/main.c ****  * @retval None
 985:Core/Src/main.c ****  */
 986:Core/Src/main.c **** void Error_Handler(void)
 987:Core/Src/main.c **** {
 623              		.loc 1 987 0
 624              		.cfi_startproc
 625              		@ Volatile: function does not return.
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 629              	.LBB10:
 630              	.LBB11:
 631              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
ARM GAS  /tmp/ccayrfCi.s 			page 30


  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
ARM GAS  /tmp/ccayrfCi.s 			page 31


  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  /tmp/ccayrfCi.s 			page 32


 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 632              		.loc 3 142 0
 633              		.syntax unified
 634              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 635 0000 72B6     		cpsid i
 636              	@ 0 "" 2
 637              		.thumb
 638              		.syntax unified
 639              	.L42:
 640 0002 FEE7     		b	.L42
 641              	.LBE11:
 642              	.LBE10:
 643              		.cfi_endproc
 644              	.LFE92:
 646              		.section	.text.MX_CAN2_Init,"ax",%progbits
 647              		.align	1
 648              		.syntax unified
 649              		.thumb
 650              		.thumb_func
 651              		.fpu softvfp
 653              	MX_CAN2_Init:
 654              	.LFB76:
 402:Core/Src/main.c **** 
 655              		.loc 1 402 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659 0000 08B5     		push	{r3, lr}
 660              	.LCFI15:
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
 411:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 664              		.loc 1 411 0
 665 0002 0D48     		ldr	r0, .L47
 666 0004 0D4B     		ldr	r3, .L47+4
 667 0006 0360     		str	r3, [r0]
 412:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 668              		.loc 1 412 0
 669 0008 0C23     		movs	r3, #12
 670 000a 4360     		str	r3, [r0, #4]
 413:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 671              		.loc 1 413 0
ARM GAS  /tmp/ccayrfCi.s 			page 33


 672 000c 0023     		movs	r3, #0
 673 000e 8360     		str	r3, [r0, #8]
 414:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 674              		.loc 1 414 0
 675 0010 C360     		str	r3, [r0, #12]
 415:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 676              		.loc 1 415 0
 677 0012 4FF48032 		mov	r2, #65536
 678 0016 0261     		str	r2, [r0, #16]
 416:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 679              		.loc 1 416 0
 680 0018 4FF40012 		mov	r2, #2097152
 681 001c 4261     		str	r2, [r0, #20]
 417:Core/Src/main.c ****   hcan2.Init.AutoBusOff = ENABLE;
 682              		.loc 1 417 0
 683 001e 0376     		strb	r3, [r0, #24]
 418:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 684              		.loc 1 418 0
 685 0020 0122     		movs	r2, #1
 686 0022 4276     		strb	r2, [r0, #25]
 419:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 687              		.loc 1 419 0
 688 0024 8376     		strb	r3, [r0, #26]
 420:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 689              		.loc 1 420 0
 690 0026 C376     		strb	r3, [r0, #27]
 421:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 691              		.loc 1 421 0
 692 0028 0377     		strb	r3, [r0, #28]
 422:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 693              		.loc 1 422 0
 694 002a 4377     		strb	r3, [r0, #29]
 423:Core/Src/main.c ****   {
 695              		.loc 1 423 0
 696 002c FFF7FEFF 		bl	HAL_CAN_Init
 697              	.LVL57:
 698 0030 00B9     		cbnz	r0, .L46
 699 0032 08BD     		pop	{r3, pc}
 700              	.L46:
 425:Core/Src/main.c ****   }
 701              		.loc 1 425 0
 702 0034 FFF7FEFF 		bl	Error_Handler
 703              	.LVL58:
 704              	.L48:
 705              		.align	2
 706              	.L47:
 707 0038 00000000 		.word	hcan2
 708 003c 00680040 		.word	1073768448
 709              		.cfi_endproc
 710              	.LFE76:
 712              		.section	.text.MX_ADC1_Init,"ax",%progbits
 713              		.align	1
 714              		.syntax unified
 715              		.thumb
 716              		.thumb_func
 717              		.fpu softvfp
 719              	MX_ADC1_Init:
ARM GAS  /tmp/ccayrfCi.s 			page 34


 720              	.LFB74:
 305:Core/Src/main.c **** 
 721              		.loc 1 305 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 16
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725 0000 00B5     		push	{lr}
 726              	.LCFI16:
 727              		.cfi_def_cfa_offset 4
 728              		.cfi_offset 14, -4
 729 0002 85B0     		sub	sp, sp, #20
 730              	.LCFI17:
 731              		.cfi_def_cfa_offset 24
 311:Core/Src/main.c **** 
 732              		.loc 1 311 0
 733 0004 0023     		movs	r3, #0
 734 0006 0193     		str	r3, [sp, #4]
 735 0008 0293     		str	r3, [sp, #8]
 736 000a 0393     		str	r3, [sp, #12]
 318:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 737              		.loc 1 318 0
 738 000c 1E48     		ldr	r0, .L59
 739 000e 1F4A     		ldr	r2, .L59+4
 740 0010 0260     		str	r2, [r0]
 319:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 741              		.loc 1 319 0
 742 0012 4FF48072 		mov	r2, #256
 743 0016 8260     		str	r2, [r0, #8]
 320:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 744              		.loc 1 320 0
 745 0018 0122     		movs	r2, #1
 746 001a 0273     		strb	r2, [r0, #12]
 321:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 747              		.loc 1 321 0
 748 001c 0375     		strb	r3, [r0, #20]
 322:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 749              		.loc 1 322 0
 750 001e 4FF46022 		mov	r2, #917504
 751 0022 C261     		str	r2, [r0, #28]
 323:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 752              		.loc 1 323 0
 753 0024 4360     		str	r3, [r0, #4]
 324:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 754              		.loc 1 324 0
 755 0026 0323     		movs	r3, #3
 756 0028 0361     		str	r3, [r0, #16]
 325:Core/Src/main.c ****   {
 757              		.loc 1 325 0
 758 002a FFF7FEFF 		bl	HAL_ADC_Init
 759              	.LVL59:
 760 002e 10BB     		cbnz	r0, .L55
 331:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 761              		.loc 1 331 0
 762 0030 0B23     		movs	r3, #11
 763 0032 0193     		str	r3, [sp, #4]
 332:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 764              		.loc 1 332 0
ARM GAS  /tmp/ccayrfCi.s 			page 35


 765 0034 0123     		movs	r3, #1
 766 0036 0293     		str	r3, [sp, #8]
 333:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 767              		.loc 1 333 0
 768 0038 0723     		movs	r3, #7
 769 003a 0393     		str	r3, [sp, #12]
 334:Core/Src/main.c ****   {
 770              		.loc 1 334 0
 771 003c 01A9     		add	r1, sp, #4
 772 003e 1248     		ldr	r0, .L59
 773 0040 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 774              	.LVL60:
 775 0044 C8B9     		cbnz	r0, .L56
 340:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 776              		.loc 1 340 0
 777 0046 0523     		movs	r3, #5
 778 0048 0193     		str	r3, [sp, #4]
 341:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 779              		.loc 1 341 0
 780 004a 0223     		movs	r3, #2
 781 004c 0293     		str	r3, [sp, #8]
 342:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 782              		.loc 1 342 0
 783 004e 0423     		movs	r3, #4
 784 0050 0393     		str	r3, [sp, #12]
 343:Core/Src/main.c ****   {
 785              		.loc 1 343 0
 786 0052 0DEB0301 		add	r1, sp, r3
 787 0056 0C48     		ldr	r0, .L59
 788 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 789              	.LVL61:
 790 005c 78B9     		cbnz	r0, .L57
 349:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 791              		.loc 1 349 0
 792 005e 0623     		movs	r3, #6
 793 0060 0193     		str	r3, [sp, #4]
 350:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 794              		.loc 1 350 0
 795 0062 0323     		movs	r3, #3
 796 0064 0293     		str	r3, [sp, #8]
 351:Core/Src/main.c ****   {
 797              		.loc 1 351 0
 798 0066 01A9     		add	r1, sp, #4
 799 0068 0748     		ldr	r0, .L59
 800 006a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 801              	.LVL62:
 802 006e 40B9     		cbnz	r0, .L58
 358:Core/Src/main.c **** 
 803              		.loc 1 358 0
 804 0070 05B0     		add	sp, sp, #20
 805              	.LCFI18:
 806              		.cfi_remember_state
 807              		.cfi_def_cfa_offset 4
 808              		@ sp needed
 809 0072 5DF804FB 		ldr	pc, [sp], #4
 810              	.L55:
 811              	.LCFI19:
ARM GAS  /tmp/ccayrfCi.s 			page 36


 812              		.cfi_restore_state
 327:Core/Src/main.c ****   }
 813              		.loc 1 327 0
 814 0076 FFF7FEFF 		bl	Error_Handler
 815              	.LVL63:
 816              	.L56:
 336:Core/Src/main.c ****   }
 817              		.loc 1 336 0
 818 007a FFF7FEFF 		bl	Error_Handler
 819              	.LVL64:
 820              	.L57:
 345:Core/Src/main.c ****   }
 821              		.loc 1 345 0
 822 007e FFF7FEFF 		bl	Error_Handler
 823              	.LVL65:
 824              	.L58:
 353:Core/Src/main.c ****   }
 825              		.loc 1 353 0
 826 0082 FFF7FEFF 		bl	Error_Handler
 827              	.LVL66:
 828              	.L60:
 829 0086 00BF     		.align	2
 830              	.L59:
 831 0088 00000000 		.word	hadc1
 832 008c 00240140 		.word	1073816576
 833              		.cfi_endproc
 834              	.LFE74:
 836              		.section	.text.MX_CAN1_Init,"ax",%progbits
 837              		.align	1
 838              		.syntax unified
 839              		.thumb
 840              		.thumb_func
 841              		.fpu softvfp
 843              	MX_CAN1_Init:
 844              	.LFB75:
 366:Core/Src/main.c **** 
 845              		.loc 1 366 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849 0000 08B5     		push	{r3, lr}
 850              	.LCFI20:
 851              		.cfi_def_cfa_offset 8
 852              		.cfi_offset 3, -8
 853              		.cfi_offset 14, -4
 375:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 854              		.loc 1 375 0
 855 0002 0D48     		ldr	r0, .L65
 856 0004 0D4B     		ldr	r3, .L65+4
 857 0006 0360     		str	r3, [r0]
 376:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 858              		.loc 1 376 0
 859 0008 0C23     		movs	r3, #12
 860 000a 4360     		str	r3, [r0, #4]
 377:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 861              		.loc 1 377 0
 862 000c 0023     		movs	r3, #0
ARM GAS  /tmp/ccayrfCi.s 			page 37


 863 000e 8360     		str	r3, [r0, #8]
 378:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 864              		.loc 1 378 0
 865 0010 C360     		str	r3, [r0, #12]
 379:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 866              		.loc 1 379 0
 867 0012 4FF48032 		mov	r2, #65536
 868 0016 0261     		str	r2, [r0, #16]
 380:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 869              		.loc 1 380 0
 870 0018 4FF40012 		mov	r2, #2097152
 871 001c 4261     		str	r2, [r0, #20]
 381:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 872              		.loc 1 381 0
 873 001e 0376     		strb	r3, [r0, #24]
 382:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 874              		.loc 1 382 0
 875 0020 0122     		movs	r2, #1
 876 0022 4276     		strb	r2, [r0, #25]
 383:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 877              		.loc 1 383 0
 878 0024 8376     		strb	r3, [r0, #26]
 384:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 879              		.loc 1 384 0
 880 0026 C376     		strb	r3, [r0, #27]
 385:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 881              		.loc 1 385 0
 882 0028 0377     		strb	r3, [r0, #28]
 386:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 883              		.loc 1 386 0
 884 002a 4377     		strb	r3, [r0, #29]
 387:Core/Src/main.c ****   {
 885              		.loc 1 387 0
 886 002c FFF7FEFF 		bl	HAL_CAN_Init
 887              	.LVL67:
 888 0030 00B9     		cbnz	r0, .L64
 889 0032 08BD     		pop	{r3, pc}
 890              	.L64:
 389:Core/Src/main.c ****   }
 891              		.loc 1 389 0
 892 0034 FFF7FEFF 		bl	Error_Handler
 893              	.LVL68:
 894              	.L66:
 895              		.align	2
 896              	.L65:
 897 0038 00000000 		.word	hcan1
 898 003c 00640040 		.word	1073767424
 899              		.cfi_endproc
 900              	.LFE75:
 902              		.section	.text.MX_UART4_Init,"ax",%progbits
 903              		.align	1
 904              		.syntax unified
 905              		.thumb
 906              		.thumb_func
 907              		.fpu softvfp
 909              	MX_UART4_Init:
 910              	.LFB83:
ARM GAS  /tmp/ccayrfCi.s 			page 38


 705:Core/Src/main.c **** 
 911              		.loc 1 705 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915 0000 08B5     		push	{r3, lr}
 916              	.LCFI21:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 3, -8
 919              		.cfi_offset 14, -4
 714:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 920              		.loc 1 714 0
 921 0002 0A48     		ldr	r0, .L71
 922 0004 0A4B     		ldr	r3, .L71+4
 923 0006 0360     		str	r3, [r0]
 715:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 924              		.loc 1 715 0
 925 0008 4FF4E133 		mov	r3, #115200
 926 000c 4360     		str	r3, [r0, #4]
 716:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 927              		.loc 1 716 0
 928 000e 0023     		movs	r3, #0
 929 0010 8360     		str	r3, [r0, #8]
 717:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 930              		.loc 1 717 0
 931 0012 C360     		str	r3, [r0, #12]
 718:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 932              		.loc 1 718 0
 933 0014 0361     		str	r3, [r0, #16]
 719:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 934              		.loc 1 719 0
 935 0016 0C22     		movs	r2, #12
 936 0018 4261     		str	r2, [r0, #20]
 720:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 937              		.loc 1 720 0
 938 001a 8361     		str	r3, [r0, #24]
 721:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 939              		.loc 1 721 0
 940 001c C361     		str	r3, [r0, #28]
 722:Core/Src/main.c ****   {
 941              		.loc 1 722 0
 942 001e FFF7FEFF 		bl	HAL_UART_Init
 943              	.LVL69:
 944 0022 00B9     		cbnz	r0, .L70
 945 0024 08BD     		pop	{r3, pc}
 946              	.L70:
 724:Core/Src/main.c ****   }
 947              		.loc 1 724 0
 948 0026 FFF7FEFF 		bl	Error_Handler
 949              	.LVL70:
 950              	.L72:
 951 002a 00BF     		.align	2
 952              	.L71:
 953 002c 00000000 		.word	huart4
 954 0030 004C0040 		.word	1073761280
 955              		.cfi_endproc
 956              	.LFE83:
ARM GAS  /tmp/ccayrfCi.s 			page 39


 958              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 959              		.align	1
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu softvfp
 965              	MX_USART1_UART_Init:
 966              	.LFB84:
 737:Core/Src/main.c **** 
 967              		.loc 1 737 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971 0000 08B5     		push	{r3, lr}
 972              	.LCFI22:
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 3, -8
 975              		.cfi_offset 14, -4
 746:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 976              		.loc 1 746 0
 977 0002 0A48     		ldr	r0, .L77
 978 0004 0A4B     		ldr	r3, .L77+4
 979 0006 0360     		str	r3, [r0]
 747:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 980              		.loc 1 747 0
 981 0008 4FF4E133 		mov	r3, #115200
 982 000c 4360     		str	r3, [r0, #4]
 748:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 983              		.loc 1 748 0
 984 000e 0023     		movs	r3, #0
 985 0010 8360     		str	r3, [r0, #8]
 749:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 986              		.loc 1 749 0
 987 0012 C360     		str	r3, [r0, #12]
 750:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 988              		.loc 1 750 0
 989 0014 0361     		str	r3, [r0, #16]
 751:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 990              		.loc 1 751 0
 991 0016 0C22     		movs	r2, #12
 992 0018 4261     		str	r2, [r0, #20]
 752:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 993              		.loc 1 752 0
 994 001a 8361     		str	r3, [r0, #24]
 753:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 995              		.loc 1 753 0
 996 001c C361     		str	r3, [r0, #28]
 754:Core/Src/main.c ****   {
 997              		.loc 1 754 0
 998 001e FFF7FEFF 		bl	HAL_UART_Init
 999              	.LVL71:
 1000 0022 00B9     		cbnz	r0, .L76
 1001 0024 08BD     		pop	{r3, pc}
 1002              	.L76:
 756:Core/Src/main.c ****   }
 1003              		.loc 1 756 0
 1004 0026 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccayrfCi.s 			page 40


 1005              	.LVL72:
 1006              	.L78:
 1007 002a 00BF     		.align	2
 1008              	.L77:
 1009 002c 00000000 		.word	huart1
 1010 0030 00380140 		.word	1073821696
 1011              		.cfi_endproc
 1012              	.LFE84:
 1014              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1015              		.align	1
 1016              		.syntax unified
 1017              		.thumb
 1018              		.thumb_func
 1019              		.fpu softvfp
 1021              	MX_TIM3_Init:
 1022              	.LFB81:
 596:Core/Src/main.c **** 
 1023              		.loc 1 596 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 56
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 1027 0000 00B5     		push	{lr}
 1028              	.LCFI23:
 1029              		.cfi_def_cfa_offset 4
 1030              		.cfi_offset 14, -4
 1031 0002 8FB0     		sub	sp, sp, #60
 1032              	.LCFI24:
 1033              		.cfi_def_cfa_offset 64
 602:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1034              		.loc 1 602 0
 1035 0004 0023     		movs	r3, #0
 1036 0006 0A93     		str	r3, [sp, #40]
 1037 0008 0B93     		str	r3, [sp, #44]
 1038 000a 0C93     		str	r3, [sp, #48]
 1039 000c 0D93     		str	r3, [sp, #52]
 603:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1040              		.loc 1 603 0
 1041 000e 0893     		str	r3, [sp, #32]
 1042 0010 0993     		str	r3, [sp, #36]
 604:Core/Src/main.c **** 
 1043              		.loc 1 604 0
 1044 0012 0193     		str	r3, [sp, #4]
 1045 0014 0293     		str	r3, [sp, #8]
 1046 0016 0393     		str	r3, [sp, #12]
 1047 0018 0493     		str	r3, [sp, #16]
 1048 001a 0593     		str	r3, [sp, #20]
 1049 001c 0693     		str	r3, [sp, #24]
 1050 001e 0793     		str	r3, [sp, #28]
 609:Core/Src/main.c ****   htim3.Init.Prescaler = 120;
 1051              		.loc 1 609 0
 1052 0020 1F48     		ldr	r0, .L91
 1053 0022 204A     		ldr	r2, .L91+4
 1054 0024 0260     		str	r2, [r0]
 610:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1055              		.loc 1 610 0
 1056 0026 7822     		movs	r2, #120
 1057 0028 4260     		str	r2, [r0, #4]
ARM GAS  /tmp/ccayrfCi.s 			page 41


 611:Core/Src/main.c ****   htim3.Init.Period = 600;
 1058              		.loc 1 611 0
 1059 002a 8360     		str	r3, [r0, #8]
 612:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1060              		.loc 1 612 0
 1061 002c 4FF41672 		mov	r2, #600
 1062 0030 C260     		str	r2, [r0, #12]
 613:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1063              		.loc 1 613 0
 1064 0032 0361     		str	r3, [r0, #16]
 614:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1065              		.loc 1 614 0
 1066 0034 8361     		str	r3, [r0, #24]
 615:Core/Src/main.c ****   {
 1067              		.loc 1 615 0
 1068 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1069              	.LVL73:
 1070 003a 30BB     		cbnz	r0, .L86
 619:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1071              		.loc 1 619 0
 1072 003c 0EA9     		add	r1, sp, #56
 1073 003e 4FF48053 		mov	r3, #4096
 1074 0042 41F8103D 		str	r3, [r1, #-16]!
 620:Core/Src/main.c ****   {
 1075              		.loc 1 620 0
 1076 0046 1648     		ldr	r0, .L91
 1077 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1078              	.LVL74:
 1079 004c F8B9     		cbnz	r0, .L87
 624:Core/Src/main.c ****   {
 1080              		.loc 1 624 0
 1081 004e 1448     		ldr	r0, .L91
 1082 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1083              	.LVL75:
 1084 0054 E8B9     		cbnz	r0, .L88
 628:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1085              		.loc 1 628 0
 1086 0056 0023     		movs	r3, #0
 1087 0058 0893     		str	r3, [sp, #32]
 629:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1088              		.loc 1 629 0
 1089 005a 0993     		str	r3, [sp, #36]
 630:Core/Src/main.c ****   {
 1090              		.loc 1 630 0
 1091 005c 08A9     		add	r1, sp, #32
 1092 005e 1048     		ldr	r0, .L91
 1093 0060 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1094              	.LVL76:
 1095 0064 B8B9     		cbnz	r0, .L89
 634:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1096              		.loc 1 634 0
 1097 0066 6023     		movs	r3, #96
 1098 0068 0193     		str	r3, [sp, #4]
 635:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1099              		.loc 1 635 0
 1100 006a 0023     		movs	r3, #0
 1101 006c 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccayrfCi.s 			page 42


 636:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1102              		.loc 1 636 0
 1103 006e 0393     		str	r3, [sp, #12]
 637:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1104              		.loc 1 637 0
 1105 0070 0593     		str	r3, [sp, #20]
 638:Core/Src/main.c ****   {
 1106              		.loc 1 638 0
 1107 0072 0822     		movs	r2, #8
 1108 0074 01A9     		add	r1, sp, #4
 1109 0076 0A48     		ldr	r0, .L91
 1110 0078 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1111              	.LVL77:
 1112 007c 68B9     		cbnz	r0, .L90
 645:Core/Src/main.c **** }
 1113              		.loc 1 645 0
 1114 007e 0848     		ldr	r0, .L91
 1115 0080 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1116              	.LVL78:
 646:Core/Src/main.c **** 
 1117              		.loc 1 646 0
 1118 0084 0FB0     		add	sp, sp, #60
 1119              	.LCFI25:
 1120              		.cfi_remember_state
 1121              		.cfi_def_cfa_offset 4
 1122              		@ sp needed
 1123 0086 5DF804FB 		ldr	pc, [sp], #4
 1124              	.L86:
 1125              	.LCFI26:
 1126              		.cfi_restore_state
 617:Core/Src/main.c ****   }
 1127              		.loc 1 617 0
 1128 008a FFF7FEFF 		bl	Error_Handler
 1129              	.LVL79:
 1130              	.L87:
 622:Core/Src/main.c ****   }
 1131              		.loc 1 622 0
 1132 008e FFF7FEFF 		bl	Error_Handler
 1133              	.LVL80:
 1134              	.L88:
 626:Core/Src/main.c ****   }
 1135              		.loc 1 626 0
 1136 0092 FFF7FEFF 		bl	Error_Handler
 1137              	.LVL81:
 1138              	.L89:
 632:Core/Src/main.c ****   }
 1139              		.loc 1 632 0
 1140 0096 FFF7FEFF 		bl	Error_Handler
 1141              	.LVL82:
 1142              	.L90:
 640:Core/Src/main.c ****   }
 1143              		.loc 1 640 0
 1144 009a FFF7FEFF 		bl	Error_Handler
 1145              	.LVL83:
 1146              	.L92:
 1147 009e 00BF     		.align	2
 1148              	.L91:
ARM GAS  /tmp/ccayrfCi.s 			page 43


 1149 00a0 00000000 		.word	htim3
 1150 00a4 00040040 		.word	1073742848
 1151              		.cfi_endproc
 1152              	.LFE81:
 1154              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1155              		.align	1
 1156              		.syntax unified
 1157              		.thumb
 1158              		.thumb_func
 1159              		.fpu softvfp
 1161              	MX_TIM1_Init:
 1162              	.LFB79:
 485:Core/Src/main.c **** 
 1163              		.loc 1 485 0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 72
 1166              		@ frame_needed = 0, uses_anonymous_args = 0
 1167 0000 10B5     		push	{r4, lr}
 1168              	.LCFI27:
 1169              		.cfi_def_cfa_offset 8
 1170              		.cfi_offset 4, -8
 1171              		.cfi_offset 14, -4
 1172 0002 92B0     		sub	sp, sp, #72
 1173              	.LCFI28:
 1174              		.cfi_def_cfa_offset 80
 491:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1175              		.loc 1 491 0
 1176 0004 0024     		movs	r4, #0
 1177 0006 1094     		str	r4, [sp, #64]
 1178 0008 1194     		str	r4, [sp, #68]
 492:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1179              		.loc 1 492 0
 1180 000a 0994     		str	r4, [sp, #36]
 1181 000c 0A94     		str	r4, [sp, #40]
 1182 000e 0B94     		str	r4, [sp, #44]
 1183 0010 0C94     		str	r4, [sp, #48]
 1184 0012 0D94     		str	r4, [sp, #52]
 1185 0014 0E94     		str	r4, [sp, #56]
 1186 0016 0F94     		str	r4, [sp, #60]
 493:Core/Src/main.c **** 
 1187              		.loc 1 493 0
 1188 0018 2022     		movs	r2, #32
 1189 001a 2146     		mov	r1, r4
 1190 001c 01A8     		add	r0, sp, #4
 1191 001e FFF7FEFF 		bl	memset
 1192              	.LVL84:
 498:Core/Src/main.c ****   htim1.Init.Prescaler = 240;
 1193              		.loc 1 498 0
 1194 0022 2148     		ldr	r0, .L103
 1195 0024 214B     		ldr	r3, .L103+4
 1196 0026 0360     		str	r3, [r0]
 499:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1197              		.loc 1 499 0
 1198 0028 F023     		movs	r3, #240
 1199 002a 4360     		str	r3, [r0, #4]
 500:Core/Src/main.c ****   htim1.Init.Period = 65535;
 1200              		.loc 1 500 0
ARM GAS  /tmp/ccayrfCi.s 			page 44


 1201 002c 8460     		str	r4, [r0, #8]
 501:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1202              		.loc 1 501 0
 1203 002e 4FF6FF73 		movw	r3, #65535
 1204 0032 C360     		str	r3, [r0, #12]
 502:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1205              		.loc 1 502 0
 1206 0034 0461     		str	r4, [r0, #16]
 503:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1207              		.loc 1 503 0
 1208 0036 4461     		str	r4, [r0, #20]
 504:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1209              		.loc 1 504 0
 1210 0038 8461     		str	r4, [r0, #24]
 505:Core/Src/main.c ****   {
 1211              		.loc 1 505 0
 1212 003a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1213              	.LVL85:
 1214 003e 0028     		cmp	r0, #0
 1215 0040 29D1     		bne	.L99
 509:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1216              		.loc 1 509 0
 1217 0042 0023     		movs	r3, #0
 1218 0044 1093     		str	r3, [sp, #64]
 510:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1219              		.loc 1 510 0
 1220 0046 1193     		str	r3, [sp, #68]
 511:Core/Src/main.c ****   {
 1221              		.loc 1 511 0
 1222 0048 10A9     		add	r1, sp, #64
 1223 004a 1748     		ldr	r0, .L103
 1224 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1225              	.LVL86:
 1226 0050 18BB     		cbnz	r0, .L100
 515:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1227              		.loc 1 515 0
 1228 0052 6023     		movs	r3, #96
 1229 0054 0993     		str	r3, [sp, #36]
 516:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1230              		.loc 1 516 0
 1231 0056 0022     		movs	r2, #0
 1232 0058 0A92     		str	r2, [sp, #40]
 517:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1233              		.loc 1 517 0
 1234 005a 0B92     		str	r2, [sp, #44]
 518:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1235              		.loc 1 518 0
 1236 005c 0C92     		str	r2, [sp, #48]
 519:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1237              		.loc 1 519 0
 1238 005e 0D92     		str	r2, [sp, #52]
 520:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1239              		.loc 1 520 0
 1240 0060 0E92     		str	r2, [sp, #56]
 521:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1241              		.loc 1 521 0
 1242 0062 0F92     		str	r2, [sp, #60]
ARM GAS  /tmp/ccayrfCi.s 			page 45


 522:Core/Src/main.c ****   {
 1243              		.loc 1 522 0
 1244 0064 09A9     		add	r1, sp, #36
 1245 0066 1048     		ldr	r0, .L103
 1246 0068 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1247              	.LVL87:
 1248 006c B8B9     		cbnz	r0, .L101
 526:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1249              		.loc 1 526 0
 1250 006e 0023     		movs	r3, #0
 1251 0070 0193     		str	r3, [sp, #4]
 527:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1252              		.loc 1 527 0
 1253 0072 0293     		str	r3, [sp, #8]
 528:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1254              		.loc 1 528 0
 1255 0074 0393     		str	r3, [sp, #12]
 529:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1256              		.loc 1 529 0
 1257 0076 0493     		str	r3, [sp, #16]
 530:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1258              		.loc 1 530 0
 1259 0078 0593     		str	r3, [sp, #20]
 531:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1260              		.loc 1 531 0
 1261 007a 4FF40052 		mov	r2, #8192
 1262 007e 0692     		str	r2, [sp, #24]
 532:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1263              		.loc 1 532 0
 1264 0080 0893     		str	r3, [sp, #32]
 533:Core/Src/main.c ****   {
 1265              		.loc 1 533 0
 1266 0082 01A9     		add	r1, sp, #4
 1267 0084 0848     		ldr	r0, .L103
 1268 0086 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1269              	.LVL88:
 1270 008a 50B9     		cbnz	r0, .L102
 540:Core/Src/main.c **** }
 1271              		.loc 1 540 0
 1272 008c 0648     		ldr	r0, .L103
 1273 008e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1274              	.LVL89:
 541:Core/Src/main.c **** 
 1275              		.loc 1 541 0
 1276 0092 12B0     		add	sp, sp, #72
 1277              	.LCFI29:
 1278              		.cfi_remember_state
 1279              		.cfi_def_cfa_offset 8
 1280              		@ sp needed
 1281 0094 10BD     		pop	{r4, pc}
 1282              	.L99:
 1283              	.LCFI30:
 1284              		.cfi_restore_state
 507:Core/Src/main.c ****   }
 1285              		.loc 1 507 0
 1286 0096 FFF7FEFF 		bl	Error_Handler
 1287              	.LVL90:
ARM GAS  /tmp/ccayrfCi.s 			page 46


 1288              	.L100:
 513:Core/Src/main.c ****   }
 1289              		.loc 1 513 0
 1290 009a FFF7FEFF 		bl	Error_Handler
 1291              	.LVL91:
 1292              	.L101:
 524:Core/Src/main.c ****   }
 1293              		.loc 1 524 0
 1294 009e FFF7FEFF 		bl	Error_Handler
 1295              	.LVL92:
 1296              	.L102:
 535:Core/Src/main.c ****   }
 1297              		.loc 1 535 0
 1298 00a2 FFF7FEFF 		bl	Error_Handler
 1299              	.LVL93:
 1300              	.L104:
 1301 00a6 00BF     		.align	2
 1302              	.L103:
 1303 00a8 00000000 		.word	htim1
 1304 00ac 002C0140 		.word	1073818624
 1305              		.cfi_endproc
 1306              	.LFE79:
 1308              		.section	.text.MX_TIM5_Init,"ax",%progbits
 1309              		.align	1
 1310              		.syntax unified
 1311              		.thumb
 1312              		.thumb_func
 1313              		.fpu softvfp
 1315              	MX_TIM5_Init:
 1316              	.LFB82:
 654:Core/Src/main.c **** 
 1317              		.loc 1 654 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 40
 1320              		@ frame_needed = 0, uses_anonymous_args = 0
 1321 0000 00B5     		push	{lr}
 1322              	.LCFI31:
 1323              		.cfi_def_cfa_offset 4
 1324              		.cfi_offset 14, -4
 1325 0002 8BB0     		sub	sp, sp, #44
 1326              	.LCFI32:
 1327              		.cfi_def_cfa_offset 48
 660:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1328              		.loc 1 660 0
 1329 0004 0023     		movs	r3, #0
 1330 0006 0893     		str	r3, [sp, #32]
 1331 0008 0993     		str	r3, [sp, #36]
 661:Core/Src/main.c **** 
 1332              		.loc 1 661 0
 1333 000a 0193     		str	r3, [sp, #4]
 1334 000c 0293     		str	r3, [sp, #8]
 1335 000e 0393     		str	r3, [sp, #12]
 1336 0010 0493     		str	r3, [sp, #16]
 1337 0012 0593     		str	r3, [sp, #20]
 1338 0014 0693     		str	r3, [sp, #24]
 1339 0016 0793     		str	r3, [sp, #28]
 666:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
ARM GAS  /tmp/ccayrfCi.s 			page 47


 1340              		.loc 1 666 0
 1341 0018 1848     		ldr	r0, .L115
 1342 001a 194A     		ldr	r2, .L115+4
 1343 001c 0260     		str	r2, [r0]
 667:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1344              		.loc 1 667 0
 1345 001e 6422     		movs	r2, #100
 1346 0020 4260     		str	r2, [r0, #4]
 668:Core/Src/main.c ****   htim5.Init.Period = 10;
 1347              		.loc 1 668 0
 1348 0022 8360     		str	r3, [r0, #8]
 669:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1349              		.loc 1 669 0
 1350 0024 0A22     		movs	r2, #10
 1351 0026 C260     		str	r2, [r0, #12]
 670:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1352              		.loc 1 670 0
 1353 0028 0361     		str	r3, [r0, #16]
 671:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 1354              		.loc 1 671 0
 1355 002a 8361     		str	r3, [r0, #24]
 672:Core/Src/main.c ****   {
 1356              		.loc 1 672 0
 1357 002c FFF7FEFF 		bl	HAL_TIM_OC_Init
 1358              	.LVL94:
 1359 0030 D8B9     		cbnz	r0, .L111
 676:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1360              		.loc 1 676 0
 1361 0032 0023     		movs	r3, #0
 1362 0034 0893     		str	r3, [sp, #32]
 677:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1363              		.loc 1 677 0
 1364 0036 0993     		str	r3, [sp, #36]
 678:Core/Src/main.c ****   {
 1365              		.loc 1 678 0
 1366 0038 08A9     		add	r1, sp, #32
 1367 003a 1048     		ldr	r0, .L115
 1368 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1369              	.LVL95:
 1370 0040 A8B9     		cbnz	r0, .L112
 682:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1371              		.loc 1 682 0
 1372 0042 0022     		movs	r2, #0
 1373 0044 0192     		str	r2, [sp, #4]
 683:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1374              		.loc 1 683 0
 1375 0046 0292     		str	r2, [sp, #8]
 684:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1376              		.loc 1 684 0
 1377 0048 0392     		str	r2, [sp, #12]
 685:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1378              		.loc 1 685 0
 1379 004a 0592     		str	r2, [sp, #20]
 686:Core/Src/main.c ****   {
 1380              		.loc 1 686 0
 1381 004c 01A9     		add	r1, sp, #4
 1382 004e 0B48     		ldr	r0, .L115
ARM GAS  /tmp/ccayrfCi.s 			page 48


 1383 0050 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1384              	.LVL96:
 1385 0054 68B9     		cbnz	r0, .L113
 690:Core/Src/main.c ****   {
 1386              		.loc 1 690 0
 1387 0056 0422     		movs	r2, #4
 1388 0058 0DEB0201 		add	r1, sp, r2
 1389 005c 0748     		ldr	r0, .L115
 1390 005e FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1391              	.LVL97:
 1392 0062 40B9     		cbnz	r0, .L114
 697:Core/Src/main.c **** 
 1393              		.loc 1 697 0
 1394 0064 0BB0     		add	sp, sp, #44
 1395              	.LCFI33:
 1396              		.cfi_remember_state
 1397              		.cfi_def_cfa_offset 4
 1398              		@ sp needed
 1399 0066 5DF804FB 		ldr	pc, [sp], #4
 1400              	.L111:
 1401              	.LCFI34:
 1402              		.cfi_restore_state
 674:Core/Src/main.c ****   }
 1403              		.loc 1 674 0
 1404 006a FFF7FEFF 		bl	Error_Handler
 1405              	.LVL98:
 1406              	.L112:
 680:Core/Src/main.c ****   }
 1407              		.loc 1 680 0
 1408 006e FFF7FEFF 		bl	Error_Handler
 1409              	.LVL99:
 1410              	.L113:
 688:Core/Src/main.c ****   }
 1411              		.loc 1 688 0
 1412 0072 FFF7FEFF 		bl	Error_Handler
 1413              	.LVL100:
 1414              	.L114:
 692:Core/Src/main.c ****   }
 1415              		.loc 1 692 0
 1416 0076 FFF7FEFF 		bl	Error_Handler
 1417              	.LVL101:
 1418              	.L116:
 1419 007a 00BF     		.align	2
 1420              	.L115:
 1421 007c 00000000 		.word	htim5
 1422 0080 000C0040 		.word	1073744896
 1423              		.cfi_endproc
 1424              	.LFE82:
 1426              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1427              		.align	1
 1428              		.syntax unified
 1429              		.thumb
 1430              		.thumb_func
 1431              		.fpu softvfp
 1433              	MX_TIM2_Init:
 1434              	.LFB80:
 549:Core/Src/main.c **** 
ARM GAS  /tmp/ccayrfCi.s 			page 49


 1435              		.loc 1 549 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 40
 1438              		@ frame_needed = 0, uses_anonymous_args = 0
 1439 0000 00B5     		push	{lr}
 1440              	.LCFI35:
 1441              		.cfi_def_cfa_offset 4
 1442              		.cfi_offset 14, -4
 1443 0002 8BB0     		sub	sp, sp, #44
 1444              	.LCFI36:
 1445              		.cfi_def_cfa_offset 48
 555:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1446              		.loc 1 555 0
 1447 0004 0023     		movs	r3, #0
 1448 0006 0893     		str	r3, [sp, #32]
 1449 0008 0993     		str	r3, [sp, #36]
 556:Core/Src/main.c **** 
 1450              		.loc 1 556 0
 1451 000a 0193     		str	r3, [sp, #4]
 1452 000c 0293     		str	r3, [sp, #8]
 1453 000e 0393     		str	r3, [sp, #12]
 1454 0010 0493     		str	r3, [sp, #16]
 1455 0012 0593     		str	r3, [sp, #20]
 1456 0014 0693     		str	r3, [sp, #24]
 1457 0016 0793     		str	r3, [sp, #28]
 561:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 1458              		.loc 1 561 0
 1459 0018 1448     		ldr	r0, .L125
 1460 001a 4FF08042 		mov	r2, #1073741824
 1461 001e 0260     		str	r2, [r0]
 562:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1462              		.loc 1 562 0
 1463 0020 0A22     		movs	r2, #10
 1464 0022 4260     		str	r2, [r0, #4]
 563:Core/Src/main.c ****   htim2.Init.Period = 600;
 1465              		.loc 1 563 0
 1466 0024 8360     		str	r3, [r0, #8]
 564:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1467              		.loc 1 564 0
 1468 0026 4FF41672 		mov	r2, #600
 1469 002a C260     		str	r2, [r0, #12]
 565:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1470              		.loc 1 565 0
 1471 002c 0361     		str	r3, [r0, #16]
 566:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 1472              		.loc 1 566 0
 1473 002e 8361     		str	r3, [r0, #24]
 567:Core/Src/main.c ****   {
 1474              		.loc 1 567 0
 1475 0030 FFF7FEFF 		bl	HAL_TIM_OC_Init
 1476              	.LVL102:
 1477 0034 A0B9     		cbnz	r0, .L122
 571:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1478              		.loc 1 571 0
 1479 0036 0023     		movs	r3, #0
 1480 0038 0893     		str	r3, [sp, #32]
 572:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
ARM GAS  /tmp/ccayrfCi.s 			page 50


 1481              		.loc 1 572 0
 1482 003a 0993     		str	r3, [sp, #36]
 573:Core/Src/main.c ****   {
 1483              		.loc 1 573 0
 1484 003c 08A9     		add	r1, sp, #32
 1485 003e 0B48     		ldr	r0, .L125
 1486 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1487              	.LVL103:
 1488 0044 70B9     		cbnz	r0, .L123
 577:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1489              		.loc 1 577 0
 1490 0046 0022     		movs	r2, #0
 1491 0048 0192     		str	r2, [sp, #4]
 578:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1492              		.loc 1 578 0
 1493 004a 0292     		str	r2, [sp, #8]
 579:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1494              		.loc 1 579 0
 1495 004c 0392     		str	r2, [sp, #12]
 580:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1496              		.loc 1 580 0
 1497 004e 0592     		str	r2, [sp, #20]
 581:Core/Src/main.c ****   {
 1498              		.loc 1 581 0
 1499 0050 01A9     		add	r1, sp, #4
 1500 0052 0648     		ldr	r0, .L125
 1501 0054 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1502              	.LVL104:
 1503 0058 30B9     		cbnz	r0, .L124
 588:Core/Src/main.c **** 
 1504              		.loc 1 588 0
 1505 005a 0BB0     		add	sp, sp, #44
 1506              	.LCFI37:
 1507              		.cfi_remember_state
 1508              		.cfi_def_cfa_offset 4
 1509              		@ sp needed
 1510 005c 5DF804FB 		ldr	pc, [sp], #4
 1511              	.L122:
 1512              	.LCFI38:
 1513              		.cfi_restore_state
 569:Core/Src/main.c ****   }
 1514              		.loc 1 569 0
 1515 0060 FFF7FEFF 		bl	Error_Handler
 1516              	.LVL105:
 1517              	.L123:
 575:Core/Src/main.c ****   }
 1518              		.loc 1 575 0
 1519 0064 FFF7FEFF 		bl	Error_Handler
 1520              	.LVL106:
 1521              	.L124:
 583:Core/Src/main.c ****   }
 1522              		.loc 1 583 0
 1523 0068 FFF7FEFF 		bl	Error_Handler
 1524              	.LVL107:
 1525              	.L126:
 1526              		.align	2
 1527              	.L125:
ARM GAS  /tmp/ccayrfCi.s 			page 51


 1528 006c 00000000 		.word	htim2
 1529              		.cfi_endproc
 1530              	.LFE80:
 1532              		.section	.text.MX_IWDG_Init,"ax",%progbits
 1533              		.align	1
 1534              		.syntax unified
 1535              		.thumb
 1536              		.thumb_func
 1537              		.fpu softvfp
 1539              	MX_IWDG_Init:
 1540              	.LFB78:
 458:Core/Src/main.c **** 
 1541              		.loc 1 458 0
 1542              		.cfi_startproc
 1543              		@ args = 0, pretend = 0, frame = 0
 1544              		@ frame_needed = 0, uses_anonymous_args = 0
 1545 0000 08B5     		push	{r3, lr}
 1546              	.LCFI39:
 1547              		.cfi_def_cfa_offset 8
 1548              		.cfi_offset 3, -8
 1549              		.cfi_offset 14, -4
 467:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 1550              		.loc 1 467 0
 1551 0002 0748     		ldr	r0, .L131
 1552 0004 074B     		ldr	r3, .L131+4
 1553 0006 0360     		str	r3, [r0]
 468:Core/Src/main.c ****   hiwdg.Init.Reload = 1000; //439
 1554              		.loc 1 468 0
 1555 0008 0123     		movs	r3, #1
 1556 000a 4360     		str	r3, [r0, #4]
 469:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 1557              		.loc 1 469 0
 1558 000c 4FF47A73 		mov	r3, #1000
 1559 0010 8360     		str	r3, [r0, #8]
 470:Core/Src/main.c ****   {
 1560              		.loc 1 470 0
 1561 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 1562              	.LVL108:
 1563 0016 00B9     		cbnz	r0, .L130
 1564 0018 08BD     		pop	{r3, pc}
 1565              	.L130:
 472:Core/Src/main.c ****   }
 1566              		.loc 1 472 0
 1567 001a FFF7FEFF 		bl	Error_Handler
 1568              	.LVL109:
 1569              	.L132:
 1570 001e 00BF     		.align	2
 1571              	.L131:
 1572 0020 00000000 		.word	hiwdg
 1573 0024 00300040 		.word	1073754112
 1574              		.cfi_endproc
 1575              	.LFE78:
 1577              		.section	.text.SystemClock_Config,"ax",%progbits
 1578              		.align	1
 1579              		.global	SystemClock_Config
 1580              		.syntax unified
 1581              		.thumb
ARM GAS  /tmp/ccayrfCi.s 			page 52


 1582              		.thumb_func
 1583              		.fpu softvfp
 1585              	SystemClock_Config:
 1586              	.LFB73:
 254:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1587              		.loc 1 254 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 112
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 1591 0000 00B5     		push	{lr}
 1592              	.LCFI40:
 1593              		.cfi_def_cfa_offset 4
 1594              		.cfi_offset 14, -4
 1595 0002 9DB0     		sub	sp, sp, #116
 1596              	.LCFI41:
 1597              		.cfi_def_cfa_offset 120
 255:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1598              		.loc 1 255 0
 1599 0004 3822     		movs	r2, #56
 1600 0006 0021     		movs	r1, #0
 1601 0008 0DEB0200 		add	r0, sp, r2
 1602 000c FFF7FEFF 		bl	memset
 1603              	.LVL110:
 256:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1604              		.loc 1 256 0
 1605 0010 0021     		movs	r1, #0
 1606 0012 0991     		str	r1, [sp, #36]
 1607 0014 0A91     		str	r1, [sp, #40]
 1608 0016 0B91     		str	r1, [sp, #44]
 1609 0018 0C91     		str	r1, [sp, #48]
 1610 001a 0D91     		str	r1, [sp, #52]
 257:Core/Src/main.c **** 
 1611              		.loc 1 257 0
 1612 001c 2022     		movs	r2, #32
 1613 001e 01A8     		add	r0, sp, #4
 1614 0020 FFF7FEFF 		bl	memset
 1615              	.LVL111:
 262:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1616              		.loc 1 262 0
 1617 0024 0923     		movs	r3, #9
 1618 0026 0E93     		str	r3, [sp, #56]
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1619              		.loc 1 263 0
 1620 0028 4FF48033 		mov	r3, #65536
 1621 002c 1093     		str	r3, [sp, #64]
 265:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 1622              		.loc 1 265 0
 1623 002e 0122     		movs	r2, #1
 1624 0030 1392     		str	r2, [sp, #76]
 266:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 1625              		.loc 1 266 0
 1626 0032 1592     		str	r2, [sp, #84]
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1627              		.loc 1 268 0
 1628 0034 0222     		movs	r2, #2
 1629 0036 1692     		str	r2, [sp, #88]
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
ARM GAS  /tmp/ccayrfCi.s 			page 53


 1630              		.loc 1 269 0
 1631 0038 1793     		str	r3, [sp, #92]
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 1632              		.loc 1 270 0
 1633 003a 4FF4E013 		mov	r3, #1835008
 1634 003e 1893     		str	r3, [sp, #96]
 272:Core/Src/main.c ****   {
 1635              		.loc 1 272 0
 1636 0040 0EA8     		add	r0, sp, #56
 1637 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1638              	.LVL112:
 1639 0046 E0B9     		cbnz	r0, .L138
 278:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1640              		.loc 1 278 0
 1641 0048 0F23     		movs	r3, #15
 1642 004a 0993     		str	r3, [sp, #36]
 279:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1643              		.loc 1 279 0
 1644 004c 0221     		movs	r1, #2
 1645 004e 0A91     		str	r1, [sp, #40]
 280:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1646              		.loc 1 280 0
 1647 0050 0023     		movs	r3, #0
 1648 0052 0B93     		str	r3, [sp, #44]
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1649              		.loc 1 281 0
 1650 0054 4FF48062 		mov	r2, #1024
 1651 0058 0C92     		str	r2, [sp, #48]
 282:Core/Src/main.c **** 
 1652              		.loc 1 282 0
 1653 005a 0D93     		str	r3, [sp, #52]
 284:Core/Src/main.c ****   {
 1654              		.loc 1 284 0
 1655 005c 09A8     		add	r0, sp, #36
 1656 005e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1657              	.LVL113:
 1658 0062 80B9     		cbnz	r0, .L139
 288:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1659              		.loc 1 288 0
 1660 0064 0223     		movs	r3, #2
 1661 0066 0193     		str	r3, [sp, #4]
 289:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1662              		.loc 1 289 0
 1663 0068 4FF40043 		mov	r3, #32768
 1664 006c 0393     		str	r3, [sp, #12]
 290:Core/Src/main.c ****   {
 1665              		.loc 1 290 0
 1666 006e 01A8     		add	r0, sp, #4
 1667 0070 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1668              	.LVL114:
 1669 0074 48B9     		cbnz	r0, .L140
 296:Core/Src/main.c **** }
 1670              		.loc 1 296 0
 1671 0076 0122     		movs	r2, #1
 1672 0078 054B     		ldr	r3, .L141
 1673 007a 1A60     		str	r2, [r3]
 297:Core/Src/main.c **** 
ARM GAS  /tmp/ccayrfCi.s 			page 54


 1674              		.loc 1 297 0
 1675 007c 1DB0     		add	sp, sp, #116
 1676              	.LCFI42:
 1677              		.cfi_remember_state
 1678              		.cfi_def_cfa_offset 4
 1679              		@ sp needed
 1680 007e 5DF804FB 		ldr	pc, [sp], #4
 1681              	.L138:
 1682              	.LCFI43:
 1683              		.cfi_restore_state
 274:Core/Src/main.c ****   }
 1684              		.loc 1 274 0
 1685 0082 FFF7FEFF 		bl	Error_Handler
 1686              	.LVL115:
 1687              	.L139:
 286:Core/Src/main.c ****   }
 1688              		.loc 1 286 0
 1689 0086 FFF7FEFF 		bl	Error_Handler
 1690              	.LVL116:
 1691              	.L140:
 292:Core/Src/main.c ****   }
 1692              		.loc 1 292 0
 1693 008a FFF7FEFF 		bl	Error_Handler
 1694              	.LVL117:
 1695              	.L142:
 1696 008e 00BF     		.align	2
 1697              	.L141:
 1698 0090 70004242 		.word	1111621744
 1699              		.cfi_endproc
 1700              	.LFE73:
 1702              		.section	.text.main,"ax",%progbits
 1703              		.align	1
 1704              		.global	main
 1705              		.syntax unified
 1706              		.thumb
 1707              		.thumb_func
 1708              		.fpu softvfp
 1710              	main:
 1711              	.LFB72:
 134:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1712              		.loc 1 134 0
 1713              		.cfi_startproc
 1714              		@ Volatile: function does not return.
 1715              		@ args = 0, pretend = 0, frame = 0
 1716              		@ frame_needed = 0, uses_anonymous_args = 0
 1717 0000 08B5     		push	{r3, lr}
 1718              	.LCFI44:
 1719              		.cfi_def_cfa_offset 8
 1720              		.cfi_offset 3, -8
 1721              		.cfi_offset 14, -4
 142:Core/Src/main.c **** 
 1722              		.loc 1 142 0
 1723 0002 FFF7FEFF 		bl	HAL_Init
 1724              	.LVL118:
 149:Core/Src/main.c **** 
 1725              		.loc 1 149 0
 1726 0006 FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /tmp/ccayrfCi.s 			page 55


 1727              	.LVL119:
 156:Core/Src/main.c ****   MX_DMA_Init();
 1728              		.loc 1 156 0
 1729 000a FFF7FEFF 		bl	MX_GPIO_Init
 1730              	.LVL120:
 157:Core/Src/main.c ****   MX_CAN2_Init();
 1731              		.loc 1 157 0
 1732 000e FFF7FEFF 		bl	MX_DMA_Init
 1733              	.LVL121:
 158:Core/Src/main.c ****   MX_ADC1_Init();
 1734              		.loc 1 158 0
 1735 0012 FFF7FEFF 		bl	MX_CAN2_Init
 1736              	.LVL122:
 159:Core/Src/main.c ****   MX_CAN1_Init();
 1737              		.loc 1 159 0
 1738 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1739              	.LVL123:
 160:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 1740              		.loc 1 160 0
 1741 001a FFF7FEFF 		bl	MX_CAN1_Init
 1742              	.LVL124:
 162:Core/Src/main.c ****   MX_USART1_UART_Init();
 1743              		.loc 1 162 0
 1744 001e FFF7FEFF 		bl	MX_UART4_Init
 1745              	.LVL125:
 163:Core/Src/main.c ****   MX_TIM3_Init();
 1746              		.loc 1 163 0
 1747 0022 FFF7FEFF 		bl	MX_USART1_UART_Init
 1748              	.LVL126:
 164:Core/Src/main.c ****   MX_TIM1_Init();
 1749              		.loc 1 164 0
 1750 0026 FFF7FEFF 		bl	MX_TIM3_Init
 1751              	.LVL127:
 165:Core/Src/main.c ****   MX_TIM5_Init();
 1752              		.loc 1 165 0
 1753 002a FFF7FEFF 		bl	MX_TIM1_Init
 1754              	.LVL128:
 166:Core/Src/main.c ****   MX_TIM2_Init();
 1755              		.loc 1 166 0
 1756 002e FFF7FEFF 		bl	MX_TIM5_Init
 1757              	.LVL129:
 167:Core/Src/main.c ****   MX_IWDG_Init();
 1758              		.loc 1 167 0
 1759 0032 FFF7FEFF 		bl	MX_TIM2_Init
 1760              	.LVL130:
 168:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1761              		.loc 1 168 0
 1762 0036 FFF7FEFF 		bl	MX_IWDG_Init
 1763              	.LVL131:
 170:Core/Src/main.c ****   gaugeInit();
 1764              		.loc 1 170 0
 1765 003a FFF7FEFF 		bl	canSettings
 1766              	.LVL132:
 171:Core/Src/main.c ****   dcdcInit();
 1767              		.loc 1 171 0
 1768 003e FFF7FEFF 		bl	gaugeInit
 1769              	.LVL133:
ARM GAS  /tmp/ccayrfCi.s 			page 56


 172:Core/Src/main.c ****   vcuInit();
 1770              		.loc 1 172 0
 1771 0042 FFF7FEFF 		bl	dcdcInit
 1772              	.LVL134:
 173:Core/Src/main.c ****   wpInit();
 1773              		.loc 1 173 0
 1774 0046 FFF7FEFF 		bl	vcuInit
 1775              	.LVL135:
 174:Core/Src/main.c **** 
 1776              		.loc 1 174 0
 1777 004a FFF7FEFF 		bl	wpInit
 1778              	.LVL136:
 176:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); // water pump pw
 1779              		.loc 1 176 0
 1780 004e 2C4C     		ldr	r4, .L146
 1781 0050 2046     		mov	r0, r4
 1782 0052 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1783              	.LVL137:
 177:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1784              		.loc 1 177 0
 1785 0056 2B4D     		ldr	r5, .L146+4
 1786 0058 6423     		movs	r3, #100
 1787 005a 2A46     		mov	r2, r5
 1788 005c 2A49     		ldr	r1, .L146+8
 1789 005e 2B48     		ldr	r0, .L146+12
 1790 0060 FFF7FEFF 		bl	HAL_DMA_Start
 1791              	.LVL138:
 178:Core/Src/main.c **** 
 1792              		.loc 1 178 0
 1793 0064 2268     		ldr	r2, [r4]
 1794 0066 D368     		ldr	r3, [r2, #12]
 1795 0068 43F40073 		orr	r3, r3, #512
 1796 006c D360     		str	r3, [r2, #12]
 180:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 1797              		.loc 1 180 0
 1798 006e 284C     		ldr	r4, .L146+16
 1799 0070 2046     		mov	r0, r4
 1800 0072 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1801              	.LVL139:
 181:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 1802              		.loc 1 181 0
 1803 0076 6423     		movs	r3, #100
 1804 0078 2A46     		mov	r2, r5
 1805 007a 2649     		ldr	r1, .L146+20
 1806 007c 2648     		ldr	r0, .L146+24
 1807 007e FFF7FEFF 		bl	HAL_DMA_Start
 1808              	.LVL140:
 182:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 1809              		.loc 1 182 0
 1810 0082 2268     		ldr	r2, [r4]
 1811 0084 D368     		ldr	r3, [r2, #12]
 1812 0086 43F40073 		orr	r3, r3, #512
 1813 008a D360     		str	r3, [r2, #12]
 183:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 1814              		.loc 1 183 0
 1815 008c 4FF47A73 		mov	r3, #1000
 1816 0090 2A46     		mov	r2, r5
ARM GAS  /tmp/ccayrfCi.s 			page 57


 1817 0092 2249     		ldr	r1, .L146+28
 1818 0094 2248     		ldr	r0, .L146+32
 1819 0096 FFF7FEFF 		bl	HAL_DMA_Start
 1820              	.LVL141:
 184:Core/Src/main.c **** 
 1821              		.loc 1 184 0
 1822 009a 2268     		ldr	r2, [r4]
 1823 009c D368     		ldr	r3, [r2, #12]
 1824 009e 43F48063 		orr	r3, r3, #1024
 1825 00a2 D360     		str	r3, [r2, #12]
 186:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 1826              		.loc 1 186 0
 1827 00a4 0021     		movs	r1, #0
 1828 00a6 1F48     		ldr	r0, .L146+36
 1829 00a8 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1830              	.LVL142:
 187:Core/Src/main.c **** 
 1831              		.loc 1 187 0
 1832 00ac 0821     		movs	r1, #8
 1833 00ae 1E48     		ldr	r0, .L146+40
 1834 00b0 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1835              	.LVL143:
 189:Core/Src/main.c **** 
 1836              		.loc 1 189 0
 1837 00b4 0322     		movs	r2, #3
 1838 00b6 1D49     		ldr	r1, .L146+44
 1839 00b8 1D48     		ldr	r0, .L146+48
 1840 00ba FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1841              	.LVL144:
 194:Core/Src/main.c **** 
 1842              		.loc 1 194 0
 1843 00be FFF7FEFF 		bl	osKernelInitialize
 1844              	.LVL145:
 214:Core/Src/main.c **** 
 1845              		.loc 1 214 0
 1846 00c2 1C4A     		ldr	r2, .L146+52
 1847 00c4 0021     		movs	r1, #0
 1848 00c6 1C48     		ldr	r0, .L146+56
 1849 00c8 FFF7FEFF 		bl	osThreadNew
 1850              	.LVL146:
 1851 00cc 1B4B     		ldr	r3, .L146+60
 1852 00ce 1860     		str	r0, [r3]
 217:Core/Src/main.c **** 
 1853              		.loc 1 217 0
 1854 00d0 1B4A     		ldr	r2, .L146+64
 1855 00d2 0021     		movs	r1, #0
 1856 00d4 1B48     		ldr	r0, .L146+68
 1857 00d6 FFF7FEFF 		bl	osThreadNew
 1858              	.LVL147:
 1859 00da 1B4B     		ldr	r3, .L146+72
 1860 00dc 1860     		str	r0, [r3]
 220:Core/Src/main.c **** 
 1861              		.loc 1 220 0
 1862 00de 1B4A     		ldr	r2, .L146+76
 1863 00e0 0021     		movs	r1, #0
 1864 00e2 1B48     		ldr	r0, .L146+80
 1865 00e4 FFF7FEFF 		bl	osThreadNew
ARM GAS  /tmp/ccayrfCi.s 			page 58


 1866              	.LVL148:
 1867 00e8 1A4B     		ldr	r3, .L146+84
 1868 00ea 1860     		str	r0, [r3]
 223:Core/Src/main.c **** 
 1869              		.loc 1 223 0
 1870 00ec 1A4A     		ldr	r2, .L146+88
 1871 00ee 0021     		movs	r1, #0
 1872 00f0 1A48     		ldr	r0, .L146+92
 1873 00f2 FFF7FEFF 		bl	osThreadNew
 1874              	.LVL149:
 1875 00f6 1A4B     		ldr	r3, .L146+96
 1876 00f8 1860     		str	r0, [r3]
 234:Core/Src/main.c **** 
 1877              		.loc 1 234 0
 1878 00fa FFF7FEFF 		bl	osKernelStart
 1879              	.LVL150:
 1880              	.L144:
 1881 00fe FEE7     		b	.L144
 1882              	.L147:
 1883              		.align	2
 1884              	.L146:
 1885 0100 00000000 		.word	htim2
 1886 0104 10100140 		.word	1073811472
 1887 0108 00000000 		.word	waterPWM
 1888 010c 00000000 		.word	hdma_tim2_ch1
 1889 0110 00000000 		.word	htim5
 1890 0114 00000000 		.word	tempPWM
 1891 0118 00000000 		.word	hdma_tim5_ch1
 1892 011c 00000000 		.word	socPWM
 1893 0120 00000000 		.word	hdma_tim5_ch2
 1894 0124 00000000 		.word	htim1
 1895 0128 00000000 		.word	htim3
 1896 012c 00000000 		.word	ADC_data
 1897 0130 00000000 		.word	hadc1
 1898 0134 00000000 		.word	.LANCHOR0
 1899 0138 00000000 		.word	StartTaskLoop
 1900 013c 00000000 		.word	TaskLoopHandle
 1901 0140 00000000 		.word	.LANCHOR1
 1902 0144 00000000 		.word	StartTask10ms
 1903 0148 00000000 		.word	Task10msHandle
 1904 014c 00000000 		.word	.LANCHOR2
 1905 0150 00000000 		.word	StartTask100ms
 1906 0154 00000000 		.word	Task100msHandle
 1907 0158 00000000 		.word	.LANCHOR3
 1908 015c 00000000 		.word	StartTask250ms
 1909 0160 00000000 		.word	Task250msHandle
 1910              		.cfi_endproc
 1911              	.LFE72:
 1913              		.global	Task250ms_attributes
 1914              		.comm	Task250msHandle,4,4
 1915              		.global	Task100ms_attributes
 1916              		.comm	Task100msHandle,4,4
 1917              		.global	Task10ms_attributes
 1918              		.comm	Task10msHandle,4,4
 1919              		.global	TaskLoop_attributes
 1920              		.comm	TaskLoopHandle,4,4
 1921              		.comm	huart4,64,4
ARM GAS  /tmp/ccayrfCi.s 			page 59


 1922              		.comm	hdma_tim5_ch2,68,4
 1923              		.comm	hdma_tim5_ch1,68,4
 1924              		.comm	hdma_tim2_ch1,68,4
 1925              		.comm	htim5,72,4
 1926              		.comm	htim3,72,4
 1927              		.comm	htim2,72,4
 1928              		.comm	htim1,72,4
 1929              		.comm	hiwdg,12,4
 1930              		.comm	hdma_adc1,68,4
 1931              		.comm	hadc1,48,4
 1932              		.comm	waterPWM,400,4
 1933              		.comm	socPWM,4000,4
 1934              		.comm	tempPWM,400,4
 1935              		.comm	canDebug,4,4
 1936              		.comm	txCycle2,4,4
 1937              		.comm	txCycle,4,4
 1938              		.comm	canTx2,8,4
 1939              		.comm	canTx,8,4
 1940              		.comm	canMailbox2,4,4
 1941              		.comm	canMailbox,4,4
 1942              		.comm	canRx2,8,4
 1943              		.comm	canRx,8,4
 1944              		.comm	txMsgExt2,24,4
 1945              		.comm	txMsg2,24,4
 1946              		.comm	rxMsg2,28,4
 1947              		.comm	txMsgExt,24,4
 1948              		.comm	txMsg,24,4
 1949              		.comm	rxMsg,28,4
 1950              		.comm	sf5,40,4
 1951              		.comm	sf4,40,4
 1952              		.comm	sf3,40,4
 1953              		.comm	sf2,40,4
 1954              		.comm	sf,40,4
 1955              		.comm	hcan2,40,4
 1956              		.comm	hcan1,40,4
 1957              		.comm	LIDAR,8,4
 1958              		.comm	te,12,4
 1959              		.comm	BMS,20,4
 1960              		.comm	charger,3,4
 1961              		.comm	vcu,7,4
 1962              		.comm	iboost,2,4
 1963              		.comm	ldu,18,4
 1964              		.comm	tempdata,4,4
 1965              		.comm	ADC_data,12,4
 1966              		.comm	tenderActive,1,1
 1967              		.comm	time_now,4,4
 1968              		.comm	period,4,4
 1969              		.comm	DCDC,4,4
 1970              		.comm	huart1,64,4
 1971              		.section	.rodata.Task100ms_attributes,"a",%progbits
 1972              		.align	2
 1973              		.set	.LANCHOR2,. + 0
 1976              	Task100ms_attributes:
 1977 0000 0C000000 		.word	.LC1
 1978 0004 00000000 		.space	16
 1978      00000000 
 1978      00000000 
ARM GAS  /tmp/ccayrfCi.s 			page 60


 1978      00000000 
 1979 0014 00020000 		.word	512
 1980 0018 18000000 		.word	24
 1981 001c 00000000 		.space	8
 1981      00000000 
 1982              		.section	.rodata.Task10ms_attributes,"a",%progbits
 1983              		.align	2
 1984              		.set	.LANCHOR1,. + 0
 1987              	Task10ms_attributes:
 1988 0000 18000000 		.word	.LC2
 1989 0004 00000000 		.space	16
 1989      00000000 
 1989      00000000 
 1989      00000000 
 1990 0014 00020000 		.word	512
 1991 0018 18000000 		.word	24
 1992 001c 00000000 		.space	8
 1992      00000000 
 1993              		.section	.rodata.Task250ms_attributes,"a",%progbits
 1994              		.align	2
 1995              		.set	.LANCHOR3,. + 0
 1998              	Task250ms_attributes:
 1999 0000 00000000 		.word	.LC0
 2000 0004 00000000 		.space	16
 2000      00000000 
 2000      00000000 
 2000      00000000 
 2001 0014 00020000 		.word	512
 2002 0018 18000000 		.word	24
 2003 001c 00000000 		.space	8
 2003      00000000 
 2004              		.section	.rodata.TaskLoop_attributes,"a",%progbits
 2005              		.align	2
 2006              		.set	.LANCHOR0,. + 0
 2009              	TaskLoop_attributes:
 2010 0000 24000000 		.word	.LC3
 2011 0004 00000000 		.space	16
 2011      00000000 
 2011      00000000 
 2011      00000000 
 2012 0014 00020000 		.word	512
 2013 0018 18000000 		.word	24
 2014 001c 00000000 		.space	8
 2014      00000000 
 2015              		.section	.rodata.str1.4,"aMS",%progbits,1
 2016              		.align	2
 2017              	.LC0:
 2018 0000 5461736B 		.ascii	"Task250ms\000"
 2018      3235306D 
 2018      7300
 2019 000a 0000     		.space	2
 2020              	.LC1:
 2021 000c 5461736B 		.ascii	"Task100ms\000"
 2021      3130306D 
 2021      7300
 2022 0016 0000     		.space	2
 2023              	.LC2:
ARM GAS  /tmp/ccayrfCi.s 			page 61


 2024 0018 5461736B 		.ascii	"Task10ms\000"
 2024      31306D73 
 2024      00
 2025 0021 000000   		.space	3
 2026              	.LC3:
 2027 0024 5461736B 		.ascii	"TaskLoop\000"
 2027      4C6F6F70 
 2027      00
 2028              		.text
 2029              	.Letext0:
 2030              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 2031              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 2032              		.file 6 "Drivers/CMSIS/Include/core_cm3.h"
 2033              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2034              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 2035              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2036              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2037              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2038              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2039              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2040              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2041              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 2042              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 2043              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 2044              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2045              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 2046              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2047              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 2048              		.file 22 "/usr/include/newlib/sys/lock.h"
 2049              		.file 23 "/usr/include/newlib/sys/_types.h"
 2050              		.file 24 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2051              		.file 25 "/usr/include/newlib/sys/reent.h"
 2052              		.file 26 "Core/Inc/dcdc.h"
 2053              		.file 27 "Core/Inc/vcu.h"
 2054              		.file 28 "Core/Inc/encoder.h"
 2055              		.file 29 "Core/Inc/lidar.h"
 2056              		.file 30 "Core/Inc/can_setup.h"
 2057              		.file 31 "Core/Inc/gauges.h"
 2058              		.file 32 "Core/Inc/water_pump.h"
 2059              		.file 33 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 2060              		.file 34 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2061              		.file 35 "Core/Inc/main.h"
ARM GAS  /tmp/ccayrfCi.s 			page 62


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccayrfCi.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccayrfCi.s:168    .text.MX_GPIO_Init:00000000000000d4 $d
     /tmp/ccayrfCi.s:175    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:181    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccayrfCi.s:264    .text.MX_DMA_Init:0000000000000070 $d
     /tmp/ccayrfCi.s:269    .text.StartTaskLoop:0000000000000000 $t
     /tmp/ccayrfCi.s:276    .text.StartTaskLoop:0000000000000000 StartTaskLoop
     /tmp/ccayrfCi.s:309    .text.StartTask10ms:0000000000000000 $t
     /tmp/ccayrfCi.s:316    .text.StartTask10ms:0000000000000000 StartTask10ms
     /tmp/ccayrfCi.s:356    .text.StartTask10ms:0000000000000024 $d
                            *COM*:0000000000000007 vcu
     /tmp/ccayrfCi.s:361    .text.StartTask100ms:0000000000000000 $t
     /tmp/ccayrfCi.s:368    .text.StartTask100ms:0000000000000000 StartTask100ms
     /tmp/ccayrfCi.s:406    .text.StartTask100ms:0000000000000024 $d
                            *COM*:0000000000000012 ldu
                            *COM*:000000000000000c hiwdg
     /tmp/ccayrfCi.s:412    .text.StartTask250ms:0000000000000000 $t
     /tmp/ccayrfCi.s:419    .text.StartTask250ms:0000000000000000 StartTask250ms
     /tmp/ccayrfCi.s:464    .text.StartTask250ms:0000000000000030 $d
                            *COM*:0000000000000014 BMS
     /tmp/ccayrfCi.s:471    .text.__io_putchar:0000000000000000 $t
     /tmp/ccayrfCi.s:478    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/ccayrfCi.s:516    .text.__io_putchar:000000000000001c $d
                            *COM*:0000000000000040 huart1
     /tmp/ccayrfCi.s:521    .text._write:0000000000000000 $t
     /tmp/ccayrfCi.s:528    .text._write:0000000000000000 _write
     /tmp/ccayrfCi.s:572    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccayrfCi.s:579    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccayrfCi.s:609    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccayrfCi.s:614    .text.Error_Handler:0000000000000000 $t
     /tmp/ccayrfCi.s:621    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccayrfCi.s:647    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:653    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/ccayrfCi.s:707    .text.MX_CAN2_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan2
     /tmp/ccayrfCi.s:713    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:719    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccayrfCi.s:831    .text.MX_ADC1_Init:0000000000000088 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccayrfCi.s:837    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:843    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccayrfCi.s:897    .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccayrfCi.s:903    .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:909    .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccayrfCi.s:953    .text.MX_UART4_Init:000000000000002c $d
                            *COM*:0000000000000040 huart4
     /tmp/ccayrfCi.s:959    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:965    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccayrfCi.s:1009   .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccayrfCi.s:1015   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:1021   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccayrfCi.s:1149   .text.MX_TIM3_Init:00000000000000a0 $d
                            *COM*:0000000000000048 htim3
ARM GAS  /tmp/ccayrfCi.s 			page 63


     /tmp/ccayrfCi.s:1155   .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:1161   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccayrfCi.s:1303   .text.MX_TIM1_Init:00000000000000a8 $d
                            *COM*:0000000000000048 htim1
     /tmp/ccayrfCi.s:1309   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:1315   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccayrfCi.s:1421   .text.MX_TIM5_Init:000000000000007c $d
                            *COM*:0000000000000048 htim5
     /tmp/ccayrfCi.s:1427   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:1433   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccayrfCi.s:1528   .text.MX_TIM2_Init:000000000000006c $d
                            *COM*:0000000000000048 htim2
     /tmp/ccayrfCi.s:1533   .text.MX_IWDG_Init:0000000000000000 $t
     /tmp/ccayrfCi.s:1539   .text.MX_IWDG_Init:0000000000000000 MX_IWDG_Init
     /tmp/ccayrfCi.s:1572   .text.MX_IWDG_Init:0000000000000020 $d
     /tmp/ccayrfCi.s:1578   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccayrfCi.s:1585   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccayrfCi.s:1698   .text.SystemClock_Config:0000000000000090 $d
     /tmp/ccayrfCi.s:1703   .text.main:0000000000000000 $t
     /tmp/ccayrfCi.s:1710   .text.main:0000000000000000 main
     /tmp/ccayrfCi.s:1885   .text.main:0000000000000100 $d
                            *COM*:0000000000000190 waterPWM
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000190 tempPWM
                            *COM*:0000000000000044 hdma_tim5_ch1
                            *COM*:0000000000000fa0 socPWM
                            *COM*:0000000000000044 hdma_tim5_ch2
                            *COM*:000000000000000c ADC_data
                            *COM*:0000000000000004 TaskLoopHandle
                            *COM*:0000000000000004 Task10msHandle
                            *COM*:0000000000000004 Task100msHandle
                            *COM*:0000000000000004 Task250msHandle
     /tmp/ccayrfCi.s:1998   .rodata.Task250ms_attributes:0000000000000000 Task250ms_attributes
     /tmp/ccayrfCi.s:1976   .rodata.Task100ms_attributes:0000000000000000 Task100ms_attributes
     /tmp/ccayrfCi.s:1987   .rodata.Task10ms_attributes:0000000000000000 Task10ms_attributes
     /tmp/ccayrfCi.s:2009   .rodata.TaskLoop_attributes:0000000000000000 TaskLoop_attributes
                            *COM*:0000000000000044 hdma_adc1
                            *COM*:0000000000000004 canDebug
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000008 canTx2
                            *COM*:0000000000000008 canTx
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
ARM GAS  /tmp/ccayrfCi.s 			page 64


                            *COM*:0000000000000008 LIDAR
                            *COM*:000000000000000c te
                            *COM*:0000000000000003 charger
                            *COM*:0000000000000002 iboost
                            *COM*:0000000000000004 tempdata
                            *COM*:0000000000000001 tenderActive
                            *COM*:0000000000000004 time_now
                            *COM*:0000000000000004 period
                            *COM*:0000000000000004 DCDC
     /tmp/ccayrfCi.s:1972   .rodata.Task100ms_attributes:0000000000000000 $d
     /tmp/ccayrfCi.s:1983   .rodata.Task10ms_attributes:0000000000000000 $d
     /tmp/ccayrfCi.s:1994   .rodata.Task250ms_attributes:0000000000000000 $d
     /tmp/ccayrfCi.s:2005   .rodata.TaskLoop_attributes:0000000000000000 $d
     /tmp/ccayrfCi.s:2016   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
wpHandler
vcuState
ioHandler
osDelay
throttleHandler
canIOsend
regenHandler
brakeHandler
dcdcHandler
updateSpeed
updateTach
HAL_IWDG_Refresh
HAL_GPIO_TogglePin
updateTemp
updateSOC
vehicleComms
encoderHandler
HAL_UART_Transmit
HAL_IncTick
HAL_CAN_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
memset
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_OC_Init
HAL_TIM_OC_ConfigChannel
HAL_IWDG_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /tmp/ccayrfCi.s 			page 65


HAL_RCCEx_PeriphCLKConfig
HAL_Init
canSettings
gaugeInit
dcdcInit
vcuInit
wpInit
HAL_TIM_Base_Start
HAL_DMA_Start
HAL_TIM_PWM_Start
HAL_ADC_Start_DMA
osKernelInitialize
osThreadNew
osKernelStart
