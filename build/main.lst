ARM GAS  /tmp/ccycL6v5.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB85:
  24              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** #include "print_uart.h"
  28:Core/Src/main.c **** #include "can_setup.h"
  29:Core/Src/main.c **** #include "FreeRTOS.h"
  30:Core/Src/main.c **** #include "task.h" //needed for delayuntil
  31:Core/Src/main.c **** #include "gauges.h"
  32:Core/Src/main.c **** #include "vcu.h"
  33:Core/Src/main.c **** #include "test.h"
  34:Core/Src/main.c **** #include "water_pump.h"
ARM GAS  /tmp/ccycL6v5.s 			page 2


  35:Core/Src/main.c **** #include "dcdc.h"
  36:Core/Src/main.c **** /* USER CODE END Includes */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PTD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PD */
  45:Core/Src/main.c **** /* USER CODE END PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  53:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  54:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  57:Core/Src/main.c **** CAN_HandleTypeDef hcan2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  60:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  61:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  62:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  63:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_ch1;
  64:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch1;
  65:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch2;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** UART_HandleTypeDef huart4;
  68:Core/Src/main.c **** UART_HandleTypeDef huart1;
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Definitions for TaskLoop */
  71:Core/Src/main.c **** osThreadId_t TaskLoopHandle;
  72:Core/Src/main.c **** const osThreadAttr_t TaskLoop_attributes = {
  73:Core/Src/main.c ****   .name = "TaskLoop",
  74:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  75:Core/Src/main.c ****   .stack_size = 128 * 4
  76:Core/Src/main.c **** };
  77:Core/Src/main.c **** /* Definitions for Task10ms */
  78:Core/Src/main.c **** osThreadId_t Task10msHandle;
  79:Core/Src/main.c **** const osThreadAttr_t Task10ms_attributes = {
  80:Core/Src/main.c ****   .name = "Task10ms",
  81:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityRealtime7,
  82:Core/Src/main.c ****   .stack_size = 128 * 4
  83:Core/Src/main.c **** };
  84:Core/Src/main.c **** /* Definitions for Task100ms */
  85:Core/Src/main.c **** osThreadId_t Task100msHandle;
  86:Core/Src/main.c **** const osThreadAttr_t Task100ms_attributes = {
  87:Core/Src/main.c ****   .name = "Task100ms",
  88:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityRealtime,
  89:Core/Src/main.c ****   .stack_size = 128 * 4
  90:Core/Src/main.c **** };
  91:Core/Src/main.c **** /* Definitions for Task250ms */
ARM GAS  /tmp/ccycL6v5.s 			page 3


  92:Core/Src/main.c **** osThreadId_t Task250msHandle;
  93:Core/Src/main.c **** const osThreadAttr_t Task250ms_attributes = {
  94:Core/Src/main.c ****   .name = "Task250ms",
  95:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityHigh,
  96:Core/Src/main.c ****   .stack_size = 128 * 4
  97:Core/Src/main.c **** };
  98:Core/Src/main.c **** /* USER CODE BEGIN PV */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /* USER CODE END PV */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 103:Core/Src/main.c **** void SystemClock_Config(void);
 104:Core/Src/main.c **** static void MX_GPIO_Init(void);
 105:Core/Src/main.c **** static void MX_DMA_Init(void);
 106:Core/Src/main.c **** static void MX_CAN2_Init(void);
 107:Core/Src/main.c **** static void MX_ADC1_Init(void);
 108:Core/Src/main.c **** static void MX_CAN1_Init(void);
 109:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void);
 110:Core/Src/main.c **** static void MX_UART4_Init(void);
 111:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 112:Core/Src/main.c **** static void MX_TIM3_Init(void);
 113:Core/Src/main.c **** static void MX_TIM1_Init(void);
 114:Core/Src/main.c **** static void MX_TIM5_Init(void);
 115:Core/Src/main.c **** static void MX_TIM2_Init(void);
 116:Core/Src/main.c **** void StartTaskLoop(void *argument);
 117:Core/Src/main.c **** void StartTask10ms(void *argument);
 118:Core/Src/main.c **** void StartTask100ms(void *argument);
 119:Core/Src/main.c **** void StartTask250ms(void *argument);
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c **** /* USER CODE END PFP */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 126:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** /* USER CODE END 0 */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** /**
 131:Core/Src/main.c ****   * @brief  The application entry point.
 132:Core/Src/main.c ****   * @retval int
 133:Core/Src/main.c ****   */
 134:Core/Src/main.c **** int main(void)
 135:Core/Src/main.c **** {
 136:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* USER CODE END 1 */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 143:Core/Src/main.c ****   HAL_Init();
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* USER CODE END Init */
 148:Core/Src/main.c **** 
ARM GAS  /tmp/ccycL6v5.s 			page 4


 149:Core/Src/main.c ****   /* Configure the system clock */
 150:Core/Src/main.c ****   SystemClock_Config();
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* USER CODE END SysInit */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* Initialize all configured peripherals */
 157:Core/Src/main.c ****   MX_GPIO_Init();
 158:Core/Src/main.c ****   MX_DMA_Init();
 159:Core/Src/main.c ****   MX_CAN2_Init();
 160:Core/Src/main.c ****   MX_ADC1_Init();
 161:Core/Src/main.c ****   MX_CAN1_Init();
 162:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 163:Core/Src/main.c ****   MX_UART4_Init();
 164:Core/Src/main.c ****   MX_USART1_UART_Init();
 165:Core/Src/main.c ****   MX_TIM3_Init();
 166:Core/Src/main.c ****   MX_TIM1_Init();
 167:Core/Src/main.c ****   MX_TIM5_Init();
 168:Core/Src/main.c ****   MX_TIM2_Init();
 169:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 170:Core/Src/main.c ****   canSettings();
 171:Core/Src/main.c ****   gaugeInit();
 172:Core/Src/main.c ****   dcdcInit();
 173:Core/Src/main.c ****   vcuInit();
 174:Core/Src/main.c ****   wpInit();
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 177:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); //water pump pwm
 178:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim5);
 181:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 182:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 183:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 184:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Tach pwm start
 187:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, ADC_data, 3);
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END 2 */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* Init scheduler */
 194:Core/Src/main.c ****   osKernelInitialize();
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 197:Core/Src/main.c ****   /* add mutexes, ... */
 198:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 201:Core/Src/main.c ****   /* add semaphores, ... */
 202:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 205:Core/Src/main.c ****   /* start timers, add new ones, ... */
ARM GAS  /tmp/ccycL6v5.s 			page 5


 206:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 209:Core/Src/main.c ****   /* add queues, ... */
 210:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Create the thread(s) */
 213:Core/Src/main.c ****   /* creation of TaskLoop */
 214:Core/Src/main.c ****   TaskLoopHandle = osThreadNew(StartTaskLoop, NULL, &TaskLoop_attributes);
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /* creation of Task10ms */
 217:Core/Src/main.c ****   Task10msHandle = osThreadNew(StartTask10ms, NULL, &Task10ms_attributes);
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* creation of Task100ms */
 220:Core/Src/main.c ****   Task100msHandle = osThreadNew(StartTask100ms, NULL, &Task100ms_attributes);
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /* creation of Task250ms */
 223:Core/Src/main.c ****   Task250msHandle = osThreadNew(StartTask250ms, NULL, &Task250ms_attributes);
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 226:Core/Src/main.c ****   /* add threads, ... */
 227:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 230:Core/Src/main.c ****   /* add events, ... */
 231:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* Start scheduler */
 234:Core/Src/main.c ****   osKernelStart();
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 237:Core/Src/main.c ****   /* Infinite loop */
 238:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 239:Core/Src/main.c ****   while (1)
 240:Core/Src/main.c ****   {
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****     /* USER CODE END WHILE */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 245:Core/Src/main.c ****   }
 246:Core/Src/main.c ****   /* USER CODE END 3 */
 247:Core/Src/main.c **** }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** /**
 250:Core/Src/main.c ****   * @brief System Clock Configuration
 251:Core/Src/main.c ****   * @retval None
 252:Core/Src/main.c ****   */
 253:Core/Src/main.c **** void SystemClock_Config(void)
 254:Core/Src/main.c **** {
 255:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 256:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 257:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 260:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 261:Core/Src/main.c ****   */
 262:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
ARM GAS  /tmp/ccycL6v5.s 			page 6


 263:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 265:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 266:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 271:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 272:Core/Src/main.c ****   {
 273:Core/Src/main.c ****     Error_Handler();
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 276:Core/Src/main.c ****   */
 277:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 278:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 279:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 280:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 282:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 285:Core/Src/main.c ****   {
 286:Core/Src/main.c ****     Error_Handler();
 287:Core/Src/main.c ****   }
 288:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 289:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 290:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****     Error_Handler();
 293:Core/Src/main.c ****   }
 294:Core/Src/main.c ****   /** Configure the Systick interrupt time
 295:Core/Src/main.c ****   */
 296:Core/Src/main.c ****   __HAL_RCC_PLLI2S_ENABLE();
 297:Core/Src/main.c **** }
 298:Core/Src/main.c **** 
 299:Core/Src/main.c **** /**
 300:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 301:Core/Src/main.c ****   * @param None
 302:Core/Src/main.c ****   * @retval None
 303:Core/Src/main.c ****   */
 304:Core/Src/main.c **** static void MX_ADC1_Init(void)
 305:Core/Src/main.c **** {
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 316:Core/Src/main.c ****   /** Common config
 317:Core/Src/main.c ****   */
 318:Core/Src/main.c ****   hadc1.Instance = ADC1;
 319:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
ARM GAS  /tmp/ccycL6v5.s 			page 7


 320:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 321:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 322:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 323:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 324:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 325:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 326:Core/Src/main.c ****   {
 327:Core/Src/main.c ****     Error_Handler();
 328:Core/Src/main.c ****   }
 329:Core/Src/main.c ****   /** Configure Regular Channel
 330:Core/Src/main.c ****   */
 331:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_11;
 332:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 333:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 334:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 335:Core/Src/main.c ****   {
 336:Core/Src/main.c ****     Error_Handler();
 337:Core/Src/main.c ****   }
 338:Core/Src/main.c ****   /** Configure Regular Channel
 339:Core/Src/main.c ****   */
 340:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 341:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 342:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 343:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 344:Core/Src/main.c ****   {
 345:Core/Src/main.c ****     Error_Handler();
 346:Core/Src/main.c ****   }
 347:Core/Src/main.c ****   /** Configure Regular Channel
 348:Core/Src/main.c ****   */
 349:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 350:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 351:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 358:Core/Src/main.c **** 
 359:Core/Src/main.c **** }
 360:Core/Src/main.c **** 
 361:Core/Src/main.c **** /**
 362:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 363:Core/Src/main.c ****   * @param None
 364:Core/Src/main.c ****   * @retval None
 365:Core/Src/main.c ****   */
 366:Core/Src/main.c **** static void MX_CAN1_Init(void)
 367:Core/Src/main.c **** {
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 376:Core/Src/main.c ****   hcan1.Instance = CAN1;
ARM GAS  /tmp/ccycL6v5.s 			page 8


 377:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 378:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 379:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 380:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 381:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 382:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 383:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 384:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 385:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 386:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 387:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 388:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 389:Core/Src/main.c ****   {
 390:Core/Src/main.c ****     Error_Handler();
 391:Core/Src/main.c ****   }
 392:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c **** }
 397:Core/Src/main.c **** 
 398:Core/Src/main.c **** /**
 399:Core/Src/main.c ****   * @brief CAN2 Initialization Function
 400:Core/Src/main.c ****   * @param None
 401:Core/Src/main.c ****   * @retval None
 402:Core/Src/main.c ****   */
 403:Core/Src/main.c **** static void MX_CAN2_Init(void)
 404:Core/Src/main.c **** {
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 0 */
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* USER CODE END CAN2_Init 0 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 1 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE END CAN2_Init 1 */
 413:Core/Src/main.c ****   hcan2.Instance = CAN2;
 414:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 415:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 416:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 417:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 418:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 419:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 420:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 421:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 422:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 423:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 424:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 425:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 426:Core/Src/main.c ****   {
 427:Core/Src/main.c ****     Error_Handler();
 428:Core/Src/main.c ****   }
 429:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 2 */
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   /* USER CODE END CAN2_Init 2 */
 432:Core/Src/main.c **** 
 433:Core/Src/main.c **** }
ARM GAS  /tmp/ccycL6v5.s 			page 9


 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** /**
 436:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 437:Core/Src/main.c ****   * @param None
 438:Core/Src/main.c ****   * @retval None
 439:Core/Src/main.c ****   */
 440:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void)
 441:Core/Src/main.c **** {
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 450:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 453:Core/Src/main.c **** 
 454:Core/Src/main.c **** }
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** /**
 457:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 458:Core/Src/main.c ****   * @param None
 459:Core/Src/main.c ****   * @retval None
 460:Core/Src/main.c ****   */
 461:Core/Src/main.c **** static void MX_TIM1_Init(void)
 462:Core/Src/main.c **** {
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 469:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 470:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 475:Core/Src/main.c ****   htim1.Instance = TIM1;
 476:Core/Src/main.c ****   htim1.Init.Prescaler = 1050;
 477:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 478:Core/Src/main.c ****   htim1.Init.Period = 65535;
 479:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 480:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 481:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 482:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 483:Core/Src/main.c ****   {
 484:Core/Src/main.c ****     Error_Handler();
 485:Core/Src/main.c ****   }
 486:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 487:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 488:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 489:Core/Src/main.c ****   {
 490:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccycL6v5.s 			page 10


 491:Core/Src/main.c ****   }
 492:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 493:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 494:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 495:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 496:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 497:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 498:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 499:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 500:Core/Src/main.c ****   {
 501:Core/Src/main.c ****     Error_Handler();
 502:Core/Src/main.c ****   }
 503:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 504:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 505:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 506:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 507:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 508:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 509:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 510:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 511:Core/Src/main.c ****   {
 512:Core/Src/main.c ****     Error_Handler();
 513:Core/Src/main.c ****   }
 514:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 517:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** }
 520:Core/Src/main.c **** 
 521:Core/Src/main.c **** /**
 522:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 523:Core/Src/main.c ****   * @param None
 524:Core/Src/main.c ****   * @retval None
 525:Core/Src/main.c ****   */
 526:Core/Src/main.c **** static void MX_TIM2_Init(void)
 527:Core/Src/main.c **** {
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 530:Core/Src/main.c **** 
 531:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 532:Core/Src/main.c **** 
 533:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 534:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 535:Core/Src/main.c **** 
 536:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 537:Core/Src/main.c ****   // Water pump pwm emulation
 538:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 539:Core/Src/main.c ****   htim2.Instance = TIM2;
 540:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 541:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 542:Core/Src/main.c ****   htim2.Init.Period = 600;
 543:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 544:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 545:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 546:Core/Src/main.c ****   {
 547:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccycL6v5.s 			page 11


 548:Core/Src/main.c ****   }
 549:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 550:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 551:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 552:Core/Src/main.c ****   {
 553:Core/Src/main.c ****     Error_Handler();
 554:Core/Src/main.c ****   }
 555:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 556:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 557:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 558:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 559:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 560:Core/Src/main.c ****   {
 561:Core/Src/main.c ****     Error_Handler();
 562:Core/Src/main.c ****   }
 563:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 566:Core/Src/main.c **** 
 567:Core/Src/main.c **** }
 568:Core/Src/main.c **** 
 569:Core/Src/main.c **** /**
 570:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 571:Core/Src/main.c ****   * @param None
 572:Core/Src/main.c ****   * @retval None
 573:Core/Src/main.c ****   */
 574:Core/Src/main.c **** static void MX_TIM3_Init(void)
 575:Core/Src/main.c **** {
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 578:Core/Src/main.c **** 
 579:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 580:Core/Src/main.c **** 
 581:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 582:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 583:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 584:Core/Src/main.c **** 
 585:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 586:Core/Src/main.c **** 
 587:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 588:Core/Src/main.c ****   htim3.Instance = TIM3;
 589:Core/Src/main.c ****   htim3.Init.Prescaler = 5000;
 590:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 591:Core/Src/main.c ****   htim3.Init.Period = 600;
 592:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 593:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 594:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 595:Core/Src/main.c ****   {
 596:Core/Src/main.c ****     Error_Handler();
 597:Core/Src/main.c ****   }
 598:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 599:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 600:Core/Src/main.c ****   {
 601:Core/Src/main.c ****     Error_Handler();
 602:Core/Src/main.c ****   }
 603:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 604:Core/Src/main.c ****   {
ARM GAS  /tmp/ccycL6v5.s 			page 12


 605:Core/Src/main.c ****     Error_Handler();
 606:Core/Src/main.c ****   }
 607:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 608:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 609:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 610:Core/Src/main.c ****   {
 611:Core/Src/main.c ****     Error_Handler();
 612:Core/Src/main.c ****   }
 613:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 614:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 615:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 616:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 617:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 618:Core/Src/main.c ****   {
 619:Core/Src/main.c ****     Error_Handler();
 620:Core/Src/main.c ****   }
 621:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 622:Core/Src/main.c **** 
 623:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 624:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 625:Core/Src/main.c **** 
 626:Core/Src/main.c **** }
 627:Core/Src/main.c **** 
 628:Core/Src/main.c **** /**
 629:Core/Src/main.c ****   * @brief TIM5 Initialization Function
 630:Core/Src/main.c ****   * @param None
 631:Core/Src/main.c ****   * @retval None
 632:Core/Src/main.c ****   */
 633:Core/Src/main.c **** static void MX_TIM5_Init(void)
 634:Core/Src/main.c **** {
 635:Core/Src/main.c **** 
 636:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
 637:Core/Src/main.c **** 
 638:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
 639:Core/Src/main.c **** 
 640:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 641:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 642:Core/Src/main.c **** 
 643:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
 644:Core/Src/main.c **** 
 645:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
 646:Core/Src/main.c ****   htim5.Instance = TIM5;
 647:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 648:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 649:Core/Src/main.c ****   htim5.Init.Period = 10;
 650:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 651:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 652:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 653:Core/Src/main.c ****   {
 654:Core/Src/main.c ****     Error_Handler();
 655:Core/Src/main.c ****   }
 656:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 657:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 658:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 659:Core/Src/main.c ****   {
 660:Core/Src/main.c ****     Error_Handler();
 661:Core/Src/main.c ****   }
ARM GAS  /tmp/ccycL6v5.s 			page 13


 662:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 663:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 664:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 665:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 666:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 667:Core/Src/main.c ****   {
 668:Core/Src/main.c ****     Error_Handler();
 669:Core/Src/main.c ****   }
 670:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 671:Core/Src/main.c ****   {
 672:Core/Src/main.c ****     Error_Handler();
 673:Core/Src/main.c ****   }
 674:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
 675:Core/Src/main.c **** 
 676:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
 677:Core/Src/main.c **** 
 678:Core/Src/main.c **** }
 679:Core/Src/main.c **** 
 680:Core/Src/main.c **** /**
 681:Core/Src/main.c ****   * @brief UART4 Initialization Function
 682:Core/Src/main.c ****   * @param None
 683:Core/Src/main.c ****   * @retval None
 684:Core/Src/main.c ****   */
 685:Core/Src/main.c **** static void MX_UART4_Init(void)
 686:Core/Src/main.c **** {
 687:Core/Src/main.c **** 
 688:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 0 */
 689:Core/Src/main.c **** 
 690:Core/Src/main.c ****   /* USER CODE END UART4_Init 0 */
 691:Core/Src/main.c **** 
 692:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 1 */
 693:Core/Src/main.c **** 
 694:Core/Src/main.c ****   /* USER CODE END UART4_Init 1 */
 695:Core/Src/main.c ****   huart4.Instance = UART4;
 696:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 697:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 698:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 699:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 700:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 701:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 702:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 703:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 704:Core/Src/main.c ****   {
 705:Core/Src/main.c ****     Error_Handler();
 706:Core/Src/main.c ****   }
 707:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 2 */
 708:Core/Src/main.c **** 
 709:Core/Src/main.c ****   /* USER CODE END UART4_Init 2 */
 710:Core/Src/main.c **** 
 711:Core/Src/main.c **** }
 712:Core/Src/main.c **** 
 713:Core/Src/main.c **** /**
 714:Core/Src/main.c ****   * @brief USART1 Initialization Function
 715:Core/Src/main.c ****   * @param None
 716:Core/Src/main.c ****   * @retval None
 717:Core/Src/main.c ****   */
 718:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
ARM GAS  /tmp/ccycL6v5.s 			page 14


 719:Core/Src/main.c **** {
 720:Core/Src/main.c **** 
 721:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 722:Core/Src/main.c **** 
 723:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 724:Core/Src/main.c **** 
 725:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 726:Core/Src/main.c **** 
 727:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 728:Core/Src/main.c ****   huart1.Instance = USART1;
 729:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 730:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 731:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 732:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 733:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 734:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 735:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 736:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 737:Core/Src/main.c ****   {
 738:Core/Src/main.c ****     Error_Handler();
 739:Core/Src/main.c ****   }
 740:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 741:Core/Src/main.c **** 
 742:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 743:Core/Src/main.c **** 
 744:Core/Src/main.c **** }
 745:Core/Src/main.c **** 
 746:Core/Src/main.c **** /**
 747:Core/Src/main.c ****   * Enable DMA controller clock
 748:Core/Src/main.c ****   */
 749:Core/Src/main.c **** static void MX_DMA_Init(void)
 750:Core/Src/main.c **** {
 751:Core/Src/main.c **** 
 752:Core/Src/main.c ****   /* DMA controller clock enable */
 753:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 754:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 755:Core/Src/main.c **** 
 756:Core/Src/main.c ****   /* DMA interrupt init */
 757:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 758:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 759:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 760:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 761:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 762:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 763:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 764:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 765:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 766:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 767:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 768:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 769:Core/Src/main.c **** 
 770:Core/Src/main.c **** }
 771:Core/Src/main.c **** 
 772:Core/Src/main.c **** /**
 773:Core/Src/main.c ****   * @brief GPIO Initialization Function
 774:Core/Src/main.c ****   * @param None
 775:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccycL6v5.s 			page 15


 776:Core/Src/main.c ****   */
 777:Core/Src/main.c **** static void MX_GPIO_Init(void)
 778:Core/Src/main.c **** {
  25              		.loc 1 778 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 779:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 779 0
  42 0006 0024     		movs	r4, #0
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB4:
 780:Core/Src/main.c **** 
 781:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 782:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 782 0
  49 0010 304B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F01002 		orr	r2, r2, #16
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F01002 		and	r2, r2, #16
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE4:
  58              	.LBB5:
 783:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  59              		.loc 1 783 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F02002 		orr	r2, r2, #32
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9A69     		ldr	r2, [r3, #24]
  64 002e 02F02002 		and	r2, r2, #32
  65 0032 0192     		str	r2, [sp, #4]
  66 0034 019A     		ldr	r2, [sp, #4]
  67              	.LBE5:
  68              	.LBB6:
 784:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 784 0
  70 0036 9A69     		ldr	r2, [r3, #24]
  71 0038 42F00402 		orr	r2, r2, #4
  72 003c 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/ccycL6v5.s 			page 16


  73 003e 9A69     		ldr	r2, [r3, #24]
  74 0040 02F00402 		and	r2, r2, #4
  75 0044 0292     		str	r2, [sp, #8]
  76 0046 029A     		ldr	r2, [sp, #8]
  77              	.LBE6:
  78              	.LBB7:
 785:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  79              		.loc 1 785 0
  80 0048 9A69     		ldr	r2, [r3, #24]
  81 004a 42F00802 		orr	r2, r2, #8
  82 004e 9A61     		str	r2, [r3, #24]
  83 0050 9B69     		ldr	r3, [r3, #24]
  84 0052 03F00803 		and	r3, r3, #8
  85 0056 0393     		str	r3, [sp, #12]
  86 0058 039B     		ldr	r3, [sp, #12]
  87              	.LBE7:
 786:Core/Src/main.c **** 
 787:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 788:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, LED_Pin|WP_Pin|TEMP_Pin|SOC_Pin, GPIO_PIN_RESET);
  88              		.loc 1 788 0
  89 005a 1F4E     		ldr	r6, .L3+4
  90 005c 2246     		mov	r2, r4
  91 005e 4FF40B51 		mov	r1, #8896
  92 0062 3046     		mov	r0, r6
  93 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL0:
 789:Core/Src/main.c **** 
 790:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 791:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, PS_INIT_Pin|HEAT_OUT_Pin, GPIO_PIN_RESET);
  95              		.loc 1 791 0
  96 0068 1C4D     		ldr	r5, .L3+8
  97 006a 2246     		mov	r2, r4
  98 006c 4FF44041 		mov	r1, #49152
  99 0070 2846     		mov	r0, r5
 100 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL1:
 792:Core/Src/main.c **** 
 793:Core/Src/main.c ****   /*Configure GPIO pins : LED_Pin WP_Pin */
 794:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin|WP_Pin;
 102              		.loc 1 794 0
 103 0076 4FF40153 		mov	r3, #8256
 104 007a 0493     		str	r3, [sp, #16]
 795:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 105              		.loc 1 795 0
 106 007c 0127     		movs	r7, #1
 107 007e 0597     		str	r7, [sp, #20]
 796:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 108              		.loc 1 796 0
 109 0080 0694     		str	r4, [sp, #24]
 797:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 110              		.loc 1 797 0
 111 0082 4FF00208 		mov	r8, #2
 112 0086 CDF81C80 		str	r8, [sp, #28]
 798:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 113              		.loc 1 798 0
 114 008a 04A9     		add	r1, sp, #16
 115 008c 3046     		mov	r0, r6
ARM GAS  /tmp/ccycL6v5.s 			page 17


 116 008e FFF7FEFF 		bl	HAL_GPIO_Init
 117              	.LVL2:
 799:Core/Src/main.c **** 
 800:Core/Src/main.c ****   /*Configure GPIO pins : PS_INIT_Pin HEAT_OUT_Pin */
 801:Core/Src/main.c ****   GPIO_InitStruct.Pin = PS_INIT_Pin|HEAT_OUT_Pin;
 118              		.loc 1 801 0
 119 0092 4FF44043 		mov	r3, #49152
 120 0096 0493     		str	r3, [sp, #16]
 802:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 121              		.loc 1 802 0
 122 0098 0597     		str	r7, [sp, #20]
 803:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 123              		.loc 1 803 0
 124 009a 0694     		str	r4, [sp, #24]
 804:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 804 0
 126 009c CDF81C80 		str	r8, [sp, #28]
 805:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 127              		.loc 1 805 0
 128 00a0 04A9     		add	r1, sp, #16
 129 00a2 2846     		mov	r0, r5
 130 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL3:
 806:Core/Src/main.c **** 
 807:Core/Src/main.c ****   /*Configure GPIO pins : TEMP_Pin SOC_Pin */
 808:Core/Src/main.c ****   GPIO_InitStruct.Pin = TEMP_Pin|SOC_Pin;
 132              		.loc 1 808 0
 133 00a8 4FF42073 		mov	r3, #640
 134 00ac 0493     		str	r3, [sp, #16]
 809:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 135              		.loc 1 809 0
 136 00ae 0597     		str	r7, [sp, #20]
 810:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 137              		.loc 1 810 0
 138 00b0 0694     		str	r4, [sp, #24]
 811:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 139              		.loc 1 811 0
 140 00b2 0323     		movs	r3, #3
 141 00b4 0793     		str	r3, [sp, #28]
 812:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 142              		.loc 1 812 0
 143 00b6 04A9     		add	r1, sp, #16
 144 00b8 3046     		mov	r0, r6
 145 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL4:
 813:Core/Src/main.c **** 
 814:Core/Src/main.c ****   /*Configure GPIO pins : SW12_Pin HEAT_REQ_Pin */
 815:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW12_Pin|HEAT_REQ_Pin;
 147              		.loc 1 815 0
 148 00be 3023     		movs	r3, #48
 149 00c0 0493     		str	r3, [sp, #16]
 816:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 150              		.loc 1 816 0
 151 00c2 0594     		str	r4, [sp, #20]
 817:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 817 0
 153 00c4 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccycL6v5.s 			page 18


 818:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 154              		.loc 1 818 0
 155 00c6 04A9     		add	r1, sp, #16
 156 00c8 2846     		mov	r0, r5
 157 00ca FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL5:
 819:Core/Src/main.c **** 
 820:Core/Src/main.c **** }
 159              		.loc 1 820 0
 160 00ce 08B0     		add	sp, sp, #32
 161              	.LCFI2:
 162              		.cfi_def_cfa_offset 24
 163              		@ sp needed
 164 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 165              	.L4:
 166              		.align	2
 167              	.L3:
 168 00d4 00100240 		.word	1073876992
 169 00d8 00100140 		.word	1073811456
 170 00dc 000C0140 		.word	1073810432
 171              		.cfi_endproc
 172              	.LFE85:
 174              		.section	.text.MX_DMA_Init,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	MX_DMA_Init:
 182              	.LFB84:
 750:Core/Src/main.c **** 
 183              		.loc 1 750 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 8
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187 0000 00B5     		push	{lr}
 188              	.LCFI3:
 189              		.cfi_def_cfa_offset 4
 190              		.cfi_offset 14, -4
 191 0002 83B0     		sub	sp, sp, #12
 192              	.LCFI4:
 193              		.cfi_def_cfa_offset 16
 194              	.LBB8:
 753:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 195              		.loc 1 753 0
 196 0004 1A4B     		ldr	r3, .L7
 197 0006 5A69     		ldr	r2, [r3, #20]
 198 0008 42F00202 		orr	r2, r2, #2
 199 000c 5A61     		str	r2, [r3, #20]
 200 000e 5A69     		ldr	r2, [r3, #20]
 201 0010 02F00202 		and	r2, r2, #2
 202 0014 0092     		str	r2, [sp]
 203 0016 009A     		ldr	r2, [sp]
 204              	.LBE8:
 205              	.LBB9:
 754:Core/Src/main.c **** 
 206              		.loc 1 754 0
ARM GAS  /tmp/ccycL6v5.s 			page 19


 207 0018 5A69     		ldr	r2, [r3, #20]
 208 001a 42F00102 		orr	r2, r2, #1
 209 001e 5A61     		str	r2, [r3, #20]
 210 0020 5B69     		ldr	r3, [r3, #20]
 211 0022 03F00103 		and	r3, r3, #1
 212 0026 0193     		str	r3, [sp, #4]
 213 0028 019B     		ldr	r3, [sp, #4]
 214              	.LBE9:
 758:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 215              		.loc 1 758 0
 216 002a 0022     		movs	r2, #0
 217 002c 0521     		movs	r1, #5
 218 002e 0B20     		movs	r0, #11
 219 0030 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 220              	.LVL6:
 759:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 221              		.loc 1 759 0
 222 0034 0B20     		movs	r0, #11
 223 0036 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 224              	.LVL7:
 761:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 225              		.loc 1 761 0
 226 003a 0022     		movs	r2, #0
 227 003c 0521     		movs	r1, #5
 228 003e 0F20     		movs	r0, #15
 229 0040 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 230              	.LVL8:
 762:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 231              		.loc 1 762 0
 232 0044 0F20     		movs	r0, #15
 233 0046 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 234              	.LVL9:
 764:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 235              		.loc 1 764 0
 236 004a 0022     		movs	r2, #0
 237 004c 0521     		movs	r1, #5
 238 004e 3B20     		movs	r0, #59
 239 0050 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 240              	.LVL10:
 765:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 241              		.loc 1 765 0
 242 0054 3B20     		movs	r0, #59
 243 0056 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 244              	.LVL11:
 767:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 245              		.loc 1 767 0
 246 005a 0022     		movs	r2, #0
 247 005c 0521     		movs	r1, #5
 248 005e 3C20     		movs	r0, #60
 249 0060 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 250              	.LVL12:
 768:Core/Src/main.c **** 
 251              		.loc 1 768 0
 252 0064 3C20     		movs	r0, #60
 253 0066 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 254              	.LVL13:
 770:Core/Src/main.c **** 
ARM GAS  /tmp/ccycL6v5.s 			page 20


 255              		.loc 1 770 0
 256 006a 03B0     		add	sp, sp, #12
 257              	.LCFI5:
 258              		.cfi_def_cfa_offset 4
 259              		@ sp needed
 260 006c 5DF804FB 		ldr	pc, [sp], #4
 261              	.L8:
 262              		.align	2
 263              	.L7:
 264 0070 00100240 		.word	1073876992
 265              		.cfi_endproc
 266              	.LFE84:
 268              		.section	.text.StartTaskLoop,"ax",%progbits
 269              		.align	1
 270              		.global	StartTaskLoop
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu softvfp
 276              	StartTaskLoop:
 277              	.LFB86:
 821:Core/Src/main.c **** 
 822:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 823:Core/Src/main.c **** 
 824:Core/Src/main.c **** /* USER CODE END 4 */
 825:Core/Src/main.c **** 
 826:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTaskLoop */
 827:Core/Src/main.c **** /**
 828:Core/Src/main.c ****   * @brief  Function implementing the TaskLoop thread.
 829:Core/Src/main.c ****   * @param  argument: Not used
 830:Core/Src/main.c ****   * @retval None
 831:Core/Src/main.c ****   */
 832:Core/Src/main.c **** /* USER CODE END Header_StartTaskLoop */
 833:Core/Src/main.c **** void StartTaskLoop(void *argument)
 834:Core/Src/main.c **** {
 278              		.loc 1 834 0
 279              		.cfi_startproc
 280              		@ Volatile: function does not return.
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL14:
 284 0000 08B5     		push	{r3, lr}
 285              	.LCFI6:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 289              	.LVL15:
 290              	.L10:
 835:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 836:Core/Src/main.c ****   /* Infinite loop */
 837:Core/Src/main.c ****   for (;;)
 838:Core/Src/main.c ****   {
 839:Core/Src/main.c ****     wpHandler();
 291              		.loc 1 839 0 discriminator 1
 292 0002 FFF7FEFF 		bl	wpHandler
 293              	.LVL16:
 840:Core/Src/main.c ****     vcuState();
ARM GAS  /tmp/ccycL6v5.s 			page 21


 294              		.loc 1 840 0 discriminator 1
 295 0006 FFF7FEFF 		bl	vcuState
 296              	.LVL17:
 841:Core/Src/main.c ****     ioHandler();
 297              		.loc 1 841 0 discriminator 1
 298 000a FFF7FEFF 		bl	ioHandler
 299              	.LVL18:
 842:Core/Src/main.c ****     osDelay(1);
 300              		.loc 1 842 0 discriminator 1
 301 000e 0120     		movs	r0, #1
 302 0010 FFF7FEFF 		bl	osDelay
 303              	.LVL19:
 304 0014 F5E7     		b	.L10
 305              		.cfi_endproc
 306              	.LFE86:
 308              		.section	.text.StartTask10ms,"ax",%progbits
 309              		.align	1
 310              		.global	StartTask10ms
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu softvfp
 316              	StartTask10ms:
 317              	.LFB87:
 843:Core/Src/main.c ****   }
 844:Core/Src/main.c ****   /* USER CODE END 5 */
 845:Core/Src/main.c **** }
 846:Core/Src/main.c **** 
 847:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask10ms */
 848:Core/Src/main.c **** /**
 849:Core/Src/main.c **** * @brief Function implementing the Task10ms thread.
 850:Core/Src/main.c **** * @param argument: Not used
 851:Core/Src/main.c **** * @retval None
 852:Core/Src/main.c **** */
 853:Core/Src/main.c **** /* USER CODE END Header_StartTask10ms */
 854:Core/Src/main.c **** void StartTask10ms(void *argument)
 855:Core/Src/main.c **** {
 318              		.loc 1 855 0
 319              		.cfi_startproc
 320              		@ Volatile: function does not return.
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              	.LVL20:
 324 0000 08B5     		push	{r3, lr}
 325              	.LCFI7:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 3, -8
 328              		.cfi_offset 14, -4
 329              	.LVL21:
 330              	.L13:
 856:Core/Src/main.c ****   /* USER CODE BEGIN StartTask10ms */
 857:Core/Src/main.c ****   //TickType_t lastWakeTime;
 858:Core/Src/main.c ****   //const TickType_t frequency = 20; 
 859:Core/Src/main.c ****   //lastWakeTime = xTaskGetTickCount();
 860:Core/Src/main.c ****   /* Infinite loop */
 861:Core/Src/main.c ****   for (;;)
 862:Core/Src/main.c ****   {
ARM GAS  /tmp/ccycL6v5.s 			page 22


 863:Core/Src/main.c ****     //vTaskDelayUntil(&lastWakeTime, frequency);
 864:Core/Src/main.c ****     throttleHandler();
 331              		.loc 1 864 0 discriminator 1
 332 0002 FFF7FEFF 		bl	throttleHandler
 333              	.LVL22:
 865:Core/Src/main.c ****     canIOsend();
 334              		.loc 1 865 0 discriminator 1
 335 0006 FFF7FEFF 		bl	canIOsend
 336              	.LVL23:
 866:Core/Src/main.c ****     regenHandler();
 337              		.loc 1 866 0 discriminator 1
 338 000a FFF7FEFF 		bl	regenHandler
 339              	.LVL24:
 867:Core/Src/main.c ****     dcdcHandler(vcu.state);
 340              		.loc 1 867 0 discriminator 1
 341 000e 044B     		ldr	r3, .L15
 342 0010 187B     		ldrb	r0, [r3, #12]	@ zero_extendqisi2
 343 0012 FFF7FEFF 		bl	dcdcHandler
 344              	.LVL25:
 868:Core/Src/main.c ****     osDelay(20);
 345              		.loc 1 868 0 discriminator 1
 346 0016 1420     		movs	r0, #20
 347 0018 FFF7FEFF 		bl	osDelay
 348              	.LVL26:
 349 001c F1E7     		b	.L13
 350              	.L16:
 351 001e 00BF     		.align	2
 352              	.L15:
 353 0020 00000000 		.word	vcu
 354              		.cfi_endproc
 355              	.LFE87:
 357              		.section	.text.StartTask100ms,"ax",%progbits
 358              		.align	1
 359              		.global	StartTask100ms
 360              		.syntax unified
 361              		.thumb
 362              		.thumb_func
 363              		.fpu softvfp
 365              	StartTask100ms:
 366              	.LFB88:
 869:Core/Src/main.c ****   }
 870:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 871:Core/Src/main.c ****   osThreadTerminate(NULL);
 872:Core/Src/main.c ****   /* USER CODE END StartTask10ms */
 873:Core/Src/main.c **** }
 874:Core/Src/main.c **** 
 875:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask100ms */
 876:Core/Src/main.c **** /**
 877:Core/Src/main.c **** * @brief Function implementing the Task100ms thread.
 878:Core/Src/main.c **** * @param argument: Not used
 879:Core/Src/main.c **** * @retval None
 880:Core/Src/main.c **** */
 881:Core/Src/main.c **** /* USER CODE END Header_StartTask100ms */
 882:Core/Src/main.c **** void StartTask100ms(void *argument)
 883:Core/Src/main.c **** {
 367              		.loc 1 883 0
 368              		.cfi_startproc
ARM GAS  /tmp/ccycL6v5.s 			page 23


 369              		@ Volatile: function does not return.
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              	.LVL27:
 373 0000 08B5     		push	{r3, lr}
 374              	.LCFI8:
 375              		.cfi_def_cfa_offset 8
 376              		.cfi_offset 3, -8
 377              		.cfi_offset 14, -4
 378              	.LVL28:
 379              	.L18:
 884:Core/Src/main.c ****   /* USER CODE BEGIN StartTask100ms */
 885:Core/Src/main.c ****   //TickType_t lastWakeTime;
 886:Core/Src/main.c ****   //const TickType_t frequency = 100;
 887:Core/Src/main.c ****   //lastWakeTime = xTaskGetTickCount();
 888:Core/Src/main.c **** 
 889:Core/Src/main.c ****   /* Infinite loop */
 890:Core/Src/main.c **** 
 891:Core/Src/main.c ****   for (;;)
 892:Core/Src/main.c ****   {
 893:Core/Src/main.c ****     //vTaskDelayUntil(&lastWakeTime, frequency);
 894:Core/Src/main.c **** 
 895:Core/Src/main.c ****     updateSpeed(ldu.rpm);
 380              		.loc 1 895 0 discriminator 1
 381 0002 064C     		ldr	r4, .L20
 382 0004 2088     		ldrh	r0, [r4]
 383 0006 80B2     		uxth	r0, r0
 384 0008 FFF7FEFF 		bl	updateSpeed
 385              	.LVL29:
 896:Core/Src/main.c ****     updateTach(ldu.amps);
 386              		.loc 1 896 0 discriminator 1
 387 000c 6089     		ldrh	r0, [r4, #10]
 388 000e 80B2     		uxth	r0, r0
 389 0010 FFF7FEFF 		bl	updateTach
 390              	.LVL30:
 897:Core/Src/main.c ****     osDelay(100);
 391              		.loc 1 897 0 discriminator 1
 392 0014 6420     		movs	r0, #100
 393 0016 FFF7FEFF 		bl	osDelay
 394              	.LVL31:
 395 001a F2E7     		b	.L18
 396              	.L21:
 397              		.align	2
 398              	.L20:
 399 001c 00000000 		.word	ldu
 400              		.cfi_endproc
 401              	.LFE88:
 403              		.section	.text.StartTask250ms,"ax",%progbits
 404              		.align	1
 405              		.global	StartTask250ms
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu softvfp
 411              	StartTask250ms:
 412              	.LFB89:
 898:Core/Src/main.c ****   }
ARM GAS  /tmp/ccycL6v5.s 			page 24


 899:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 900:Core/Src/main.c ****   osThreadTerminate(NULL);
 901:Core/Src/main.c ****   /* USER CODE END StartTask100ms */
 902:Core/Src/main.c **** }
 903:Core/Src/main.c **** 
 904:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask250ms */
 905:Core/Src/main.c **** /**
 906:Core/Src/main.c **** * @brief Function implementing the Task250ms thread.
 907:Core/Src/main.c **** * @param argument: Not used
 908:Core/Src/main.c **** * @retval None
 909:Core/Src/main.c **** */
 910:Core/Src/main.c **** /* USER CODE END Header_StartTask250ms */
 911:Core/Src/main.c **** void StartTask250ms(void *argument)
 912:Core/Src/main.c **** {
 413              		.loc 1 912 0
 414              		.cfi_startproc
 415              		@ Volatile: function does not return.
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              	.LVL32:
 419 0000 08B5     		push	{r3, lr}
 420              	.LCFI9:
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 3, -8
 423              		.cfi_offset 14, -4
 424              	.LVL33:
 425              	.L23:
 913:Core/Src/main.c ****   /* USER CODE BEGIN StartTask250ms */
 914:Core/Src/main.c ****   //TickType_t lastWakeTime;
 915:Core/Src/main.c ****   //const TickType_t frequency = 250;
 916:Core/Src/main.c ****   //lastWakeTime = xTaskGetTickCount();
 917:Core/Src/main.c ****   /* Infinite loop */
 918:Core/Src/main.c **** 
 919:Core/Src/main.c ****   for (;;)
 920:Core/Src/main.c **** 
 921:Core/Src/main.c ****   {
 922:Core/Src/main.c ****     //vTaskDelayUntil(&lastWakeTime, frequency);
 923:Core/Src/main.c ****     HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 426              		.loc 1 923 0 discriminator 1
 427 0002 4FF40051 		mov	r1, #8192
 428 0006 0948     		ldr	r0, .L25
 429 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 430              	.LVL34:
 924:Core/Src/main.c **** 
 925:Core/Src/main.c ****     updateTemp(ldu.hsTemp);
 431              		.loc 1 925 0 discriminator 1
 432 000c 084B     		ldr	r3, .L25+4
 433 000e 9888     		ldrh	r0, [r3, #4]
 434 0010 80B2     		uxth	r0, r0
 435 0012 FFF7FEFF 		bl	updateTemp
 436              	.LVL35:
 926:Core/Src/main.c ****     updateSOC(BMS[0].chargeState);
 437              		.loc 1 926 0 discriminator 1
 438 0016 074B     		ldr	r3, .L25+8
 439 0018 187A     		ldrb	r0, [r3, #8]	@ zero_extendqisi2
 440 001a FFF7FEFF 		bl	updateSOC
 441              	.LVL36:
ARM GAS  /tmp/ccycL6v5.s 			page 25


 927:Core/Src/main.c ****     encoderHandler();
 442              		.loc 1 927 0 discriminator 1
 443 001e FFF7FEFF 		bl	encoderHandler
 444              	.LVL37:
 928:Core/Src/main.c ****     osDelay(250);
 445              		.loc 1 928 0 discriminator 1
 446 0022 FA20     		movs	r0, #250
 447 0024 FFF7FEFF 		bl	osDelay
 448              	.LVL38:
 449 0028 EBE7     		b	.L23
 450              	.L26:
 451 002a 00BF     		.align	2
 452              	.L25:
 453 002c 00100140 		.word	1073811456
 454 0030 00000000 		.word	ldu
 455 0034 00000000 		.word	BMS
 456              		.cfi_endproc
 457              	.LFE89:
 459              		.section	.text.__io_putchar,"ax",%progbits
 460              		.align	1
 461              		.global	__io_putchar
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 465              		.fpu softvfp
 467              	__io_putchar:
 468              	.LFB70:
 469              		.file 2 "Core/Inc/print_uart.h"
   1:Core/Inc/print_uart.h **** #ifndef __PRINT_UART_H
   2:Core/Inc/print_uart.h **** #define __PRINT_UART_H
   3:Core/Inc/print_uart.h **** 
   4:Core/Inc/print_uart.h **** 
   5:Core/Inc/print_uart.h **** #include <stdio.h>
   6:Core/Inc/print_uart.h **** #include "stm32f1xx_hal.h"
   7:Core/Inc/print_uart.h **** 
   8:Core/Inc/print_uart.h **** UART_HandleTypeDef huart1;
   9:Core/Inc/print_uart.h **** 
  10:Core/Inc/print_uart.h **** //////////////////////////// Begin UART Magic ////////////////////////
  11:Core/Inc/print_uart.h **** int __io_putchar(int ch)
  12:Core/Inc/print_uart.h **** {
 470              		.loc 2 12 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 8
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              	.LVL39:
 475 0000 10B5     		push	{r4, lr}
 476              	.LCFI10:
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 4, -8
 479              		.cfi_offset 14, -4
 480 0002 82B0     		sub	sp, sp, #8
 481              	.LCFI11:
 482              		.cfi_def_cfa_offset 16
 483 0004 0446     		mov	r4, r0
  13:Core/Inc/print_uart.h ****  uint8_t c[1];
  14:Core/Inc/print_uart.h ****  c[0] = ch & 0x00FF;
 484              		.loc 2 14 0
ARM GAS  /tmp/ccycL6v5.s 			page 26


 485 0006 02A9     		add	r1, sp, #8
 486 0008 01F8040D 		strb	r0, [r1, #-4]!
  15:Core/Inc/print_uart.h ****  HAL_UART_Transmit(&huart1, &*c, 1, 10);
 487              		.loc 2 15 0
 488 000c 0A23     		movs	r3, #10
 489 000e 0122     		movs	r2, #1
 490 0010 0248     		ldr	r0, .L29
 491              	.LVL40:
 492 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 493              	.LVL41:
  16:Core/Inc/print_uart.h ****  return ch;
  17:Core/Inc/print_uart.h **** }
 494              		.loc 2 17 0
 495 0016 2046     		mov	r0, r4
 496 0018 02B0     		add	sp, sp, #8
 497              	.LCFI12:
 498              		.cfi_def_cfa_offset 8
 499              		@ sp needed
 500 001a 10BD     		pop	{r4, pc}
 501              	.LVL42:
 502              	.L30:
 503              		.align	2
 504              	.L29:
 505 001c 00000000 		.word	huart1
 506              		.cfi_endproc
 507              	.LFE70:
 509              		.section	.text._write,"ax",%progbits
 510              		.align	1
 511              		.global	_write
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 515              		.fpu softvfp
 517              	_write:
 518              	.LFB71:
  18:Core/Inc/print_uart.h **** 
  19:Core/Inc/print_uart.h **** int _write(int file,char *ptr, int len)
  20:Core/Inc/print_uart.h **** {
 519              		.loc 2 20 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              	.LVL43:
 524 0000 70B5     		push	{r4, r5, r6, lr}
 525              	.LCFI13:
 526              		.cfi_def_cfa_offset 16
 527              		.cfi_offset 4, -16
 528              		.cfi_offset 5, -12
 529              		.cfi_offset 6, -8
 530              		.cfi_offset 14, -4
 531 0002 1646     		mov	r6, r2
 532              	.LVL44:
  21:Core/Inc/print_uart.h ****  int DataIdx;
  22:Core/Inc/print_uart.h ****  for(DataIdx= 0; DataIdx< len; DataIdx++)
 533              		.loc 2 22 0
 534 0004 0024     		movs	r4, #0
 535 0006 05E0     		b	.L32
ARM GAS  /tmp/ccycL6v5.s 			page 27


 536              	.LVL45:
 537              	.L33:
  23:Core/Inc/print_uart.h ****  {
  24:Core/Inc/print_uart.h ****  __io_putchar(*ptr++);
 538              		.loc 2 24 0 discriminator 3
 539 0008 4D1C     		adds	r5, r1, #1
 540              	.LVL46:
 541 000a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 542 000c FFF7FEFF 		bl	__io_putchar
 543              	.LVL47:
  22:Core/Inc/print_uart.h ****  {
 544              		.loc 2 22 0 discriminator 3
 545 0010 0134     		adds	r4, r4, #1
 546              	.LVL48:
 547              		.loc 2 24 0 discriminator 3
 548 0012 2946     		mov	r1, r5
 549              	.LVL49:
 550              	.L32:
  22:Core/Inc/print_uart.h ****  {
 551              		.loc 2 22 0 discriminator 1
 552 0014 B442     		cmp	r4, r6
 553 0016 F7DB     		blt	.L33
  25:Core/Inc/print_uart.h ****  }
  26:Core/Inc/print_uart.h **** return len;
  27:Core/Inc/print_uart.h **** }
 554              		.loc 2 27 0
 555 0018 3046     		mov	r0, r6
 556 001a 70BD     		pop	{r4, r5, r6, pc}
 557              		.cfi_endproc
 558              	.LFE71:
 560              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 561              		.align	1
 562              		.global	HAL_TIM_PeriodElapsedCallback
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu softvfp
 568              	HAL_TIM_PeriodElapsedCallback:
 569              	.LFB90:
 929:Core/Src/main.c ****     //testVal();
 930:Core/Src/main.c ****   }
 931:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 932:Core/Src/main.c ****   osThreadTerminate(NULL);
 933:Core/Src/main.c ****   /* USER CODE END StartTask250ms */
 934:Core/Src/main.c **** }
 935:Core/Src/main.c **** 
 936:Core/Src/main.c ****  /**
 937:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 938:Core/Src/main.c ****   * @note   This function is called  when TIM7 interrupt took place, inside
 939:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 940:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 941:Core/Src/main.c ****   * @param  htim : TIM handle
 942:Core/Src/main.c ****   * @retval None
 943:Core/Src/main.c ****   */
 944:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 945:Core/Src/main.c **** {
 570              		.loc 1 945 0
ARM GAS  /tmp/ccycL6v5.s 			page 28


 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              	.LVL50:
 575 0000 08B5     		push	{r3, lr}
 576              	.LCFI14:
 577              		.cfi_def_cfa_offset 8
 578              		.cfi_offset 3, -8
 579              		.cfi_offset 14, -4
 946:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 947:Core/Src/main.c **** 
 948:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 949:Core/Src/main.c ****   if (htim->Instance == TIM7) {
 580              		.loc 1 949 0
 581 0002 0268     		ldr	r2, [r0]
 582 0004 034B     		ldr	r3, .L39
 583 0006 9A42     		cmp	r2, r3
 584 0008 00D0     		beq	.L38
 585              	.LVL51:
 586              	.L35:
 587 000a 08BD     		pop	{r3, pc}
 588              	.LVL52:
 589              	.L38:
 950:Core/Src/main.c ****     HAL_IncTick();
 590              		.loc 1 950 0
 591 000c FFF7FEFF 		bl	HAL_IncTick
 592              	.LVL53:
 951:Core/Src/main.c ****   }
 952:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 953:Core/Src/main.c **** 
 954:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 955:Core/Src/main.c **** }
 593              		.loc 1 955 0
 594 0010 FBE7     		b	.L35
 595              	.L40:
 596 0012 00BF     		.align	2
 597              	.L39:
 598 0014 00140040 		.word	1073746944
 599              		.cfi_endproc
 600              	.LFE90:
 602              		.section	.text.Error_Handler,"ax",%progbits
 603              		.align	1
 604              		.global	Error_Handler
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 608              		.fpu softvfp
 610              	Error_Handler:
 611              	.LFB91:
 956:Core/Src/main.c **** 
 957:Core/Src/main.c **** /**
 958:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 959:Core/Src/main.c ****   * @retval None
 960:Core/Src/main.c ****   */
 961:Core/Src/main.c **** void Error_Handler(void)
 962:Core/Src/main.c **** {
 612              		.loc 1 962 0
ARM GAS  /tmp/ccycL6v5.s 			page 29


 613              		.cfi_startproc
 614              		@ Volatile: function does not return.
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              		@ link register save eliminated.
 618              	.LBB10:
 619              	.LBB11:
 620              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
ARM GAS  /tmp/ccycL6v5.s 			page 30


  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
ARM GAS  /tmp/ccycL6v5.s 			page 31


 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 621              		.loc 3 142 0
 622              		.syntax unified
 623              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 624 0000 72B6     		cpsid i
 625              	@ 0 "" 2
 626              		.thumb
 627              		.syntax unified
 628              	.L42:
 629 0002 FEE7     		b	.L42
 630              	.LBE11:
 631              	.LBE10:
 632              		.cfi_endproc
 633              	.LFE91:
 635              		.section	.text.MX_CAN2_Init,"ax",%progbits
 636              		.align	1
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 640              		.fpu softvfp
 642              	MX_CAN2_Init:
 643              	.LFB76:
ARM GAS  /tmp/ccycL6v5.s 			page 32


 404:Core/Src/main.c **** 
 644              		.loc 1 404 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648 0000 08B5     		push	{r3, lr}
 649              	.LCFI15:
 650              		.cfi_def_cfa_offset 8
 651              		.cfi_offset 3, -8
 652              		.cfi_offset 14, -4
 413:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 653              		.loc 1 413 0
 654 0002 0D48     		ldr	r0, .L47
 655 0004 0D4B     		ldr	r3, .L47+4
 656 0006 0360     		str	r3, [r0]
 414:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 657              		.loc 1 414 0
 658 0008 0C23     		movs	r3, #12
 659 000a 4360     		str	r3, [r0, #4]
 415:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 660              		.loc 1 415 0
 661 000c 0023     		movs	r3, #0
 662 000e 8360     		str	r3, [r0, #8]
 416:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 663              		.loc 1 416 0
 664 0010 C360     		str	r3, [r0, #12]
 417:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 665              		.loc 1 417 0
 666 0012 4FF48032 		mov	r2, #65536
 667 0016 0261     		str	r2, [r0, #16]
 418:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 668              		.loc 1 418 0
 669 0018 4FF40012 		mov	r2, #2097152
 670 001c 4261     		str	r2, [r0, #20]
 419:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 671              		.loc 1 419 0
 672 001e 0376     		strb	r3, [r0, #24]
 420:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 673              		.loc 1 420 0
 674 0020 4376     		strb	r3, [r0, #25]
 421:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 675              		.loc 1 421 0
 676 0022 8376     		strb	r3, [r0, #26]
 422:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 677              		.loc 1 422 0
 678 0024 C376     		strb	r3, [r0, #27]
 423:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 679              		.loc 1 423 0
 680 0026 0377     		strb	r3, [r0, #28]
 424:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 681              		.loc 1 424 0
 682 0028 4377     		strb	r3, [r0, #29]
 425:Core/Src/main.c ****   {
 683              		.loc 1 425 0
 684 002a FFF7FEFF 		bl	HAL_CAN_Init
 685              	.LVL54:
 686 002e 00B9     		cbnz	r0, .L46
ARM GAS  /tmp/ccycL6v5.s 			page 33


 687 0030 08BD     		pop	{r3, pc}
 688              	.L46:
 427:Core/Src/main.c ****   }
 689              		.loc 1 427 0
 690 0032 FFF7FEFF 		bl	Error_Handler
 691              	.LVL55:
 692              	.L48:
 693 0036 00BF     		.align	2
 694              	.L47:
 695 0038 00000000 		.word	hcan2
 696 003c 00680040 		.word	1073768448
 697              		.cfi_endproc
 698              	.LFE76:
 700              		.section	.text.MX_ADC1_Init,"ax",%progbits
 701              		.align	1
 702              		.syntax unified
 703              		.thumb
 704              		.thumb_func
 705              		.fpu softvfp
 707              	MX_ADC1_Init:
 708              	.LFB74:
 305:Core/Src/main.c **** 
 709              		.loc 1 305 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 16
 712              		@ frame_needed = 0, uses_anonymous_args = 0
 713 0000 00B5     		push	{lr}
 714              	.LCFI16:
 715              		.cfi_def_cfa_offset 4
 716              		.cfi_offset 14, -4
 717 0002 85B0     		sub	sp, sp, #20
 718              	.LCFI17:
 719              		.cfi_def_cfa_offset 24
 311:Core/Src/main.c **** 
 720              		.loc 1 311 0
 721 0004 0023     		movs	r3, #0
 722 0006 0193     		str	r3, [sp, #4]
 723 0008 0293     		str	r3, [sp, #8]
 724 000a 0393     		str	r3, [sp, #12]
 318:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 725              		.loc 1 318 0
 726 000c 1E48     		ldr	r0, .L59
 727 000e 1F4A     		ldr	r2, .L59+4
 728 0010 0260     		str	r2, [r0]
 319:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 729              		.loc 1 319 0
 730 0012 4FF48072 		mov	r2, #256
 731 0016 8260     		str	r2, [r0, #8]
 320:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 732              		.loc 1 320 0
 733 0018 0122     		movs	r2, #1
 734 001a 0273     		strb	r2, [r0, #12]
 321:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 735              		.loc 1 321 0
 736 001c 0375     		strb	r3, [r0, #20]
 322:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 737              		.loc 1 322 0
ARM GAS  /tmp/ccycL6v5.s 			page 34


 738 001e 4FF46022 		mov	r2, #917504
 739 0022 C261     		str	r2, [r0, #28]
 323:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 740              		.loc 1 323 0
 741 0024 4360     		str	r3, [r0, #4]
 324:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 742              		.loc 1 324 0
 743 0026 0323     		movs	r3, #3
 744 0028 0361     		str	r3, [r0, #16]
 325:Core/Src/main.c ****   {
 745              		.loc 1 325 0
 746 002a FFF7FEFF 		bl	HAL_ADC_Init
 747              	.LVL56:
 748 002e 10BB     		cbnz	r0, .L55
 331:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 749              		.loc 1 331 0
 750 0030 0B23     		movs	r3, #11
 751 0032 0193     		str	r3, [sp, #4]
 332:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 752              		.loc 1 332 0
 753 0034 0123     		movs	r3, #1
 754 0036 0293     		str	r3, [sp, #8]
 333:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 755              		.loc 1 333 0
 756 0038 0723     		movs	r3, #7
 757 003a 0393     		str	r3, [sp, #12]
 334:Core/Src/main.c ****   {
 758              		.loc 1 334 0
 759 003c 01A9     		add	r1, sp, #4
 760 003e 1248     		ldr	r0, .L59
 761 0040 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 762              	.LVL57:
 763 0044 C8B9     		cbnz	r0, .L56
 340:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 764              		.loc 1 340 0
 765 0046 0523     		movs	r3, #5
 766 0048 0193     		str	r3, [sp, #4]
 341:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 767              		.loc 1 341 0
 768 004a 0223     		movs	r3, #2
 769 004c 0293     		str	r3, [sp, #8]
 342:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 770              		.loc 1 342 0
 771 004e 0423     		movs	r3, #4
 772 0050 0393     		str	r3, [sp, #12]
 343:Core/Src/main.c ****   {
 773              		.loc 1 343 0
 774 0052 0DEB0301 		add	r1, sp, r3
 775 0056 0C48     		ldr	r0, .L59
 776 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 777              	.LVL58:
 778 005c 78B9     		cbnz	r0, .L57
 349:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 779              		.loc 1 349 0
 780 005e 0623     		movs	r3, #6
 781 0060 0193     		str	r3, [sp, #4]
 350:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/ccycL6v5.s 			page 35


 782              		.loc 1 350 0
 783 0062 0323     		movs	r3, #3
 784 0064 0293     		str	r3, [sp, #8]
 351:Core/Src/main.c ****   {
 785              		.loc 1 351 0
 786 0066 01A9     		add	r1, sp, #4
 787 0068 0748     		ldr	r0, .L59
 788 006a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 789              	.LVL59:
 790 006e 40B9     		cbnz	r0, .L58
 359:Core/Src/main.c **** 
 791              		.loc 1 359 0
 792 0070 05B0     		add	sp, sp, #20
 793              	.LCFI18:
 794              		.cfi_remember_state
 795              		.cfi_def_cfa_offset 4
 796              		@ sp needed
 797 0072 5DF804FB 		ldr	pc, [sp], #4
 798              	.L55:
 799              	.LCFI19:
 800              		.cfi_restore_state
 327:Core/Src/main.c ****   }
 801              		.loc 1 327 0
 802 0076 FFF7FEFF 		bl	Error_Handler
 803              	.LVL60:
 804              	.L56:
 336:Core/Src/main.c ****   }
 805              		.loc 1 336 0
 806 007a FFF7FEFF 		bl	Error_Handler
 807              	.LVL61:
 808              	.L57:
 345:Core/Src/main.c ****   }
 809              		.loc 1 345 0
 810 007e FFF7FEFF 		bl	Error_Handler
 811              	.LVL62:
 812              	.L58:
 353:Core/Src/main.c ****   }
 813              		.loc 1 353 0
 814 0082 FFF7FEFF 		bl	Error_Handler
 815              	.LVL63:
 816              	.L60:
 817 0086 00BF     		.align	2
 818              	.L59:
 819 0088 00000000 		.word	hadc1
 820 008c 00240140 		.word	1073816576
 821              		.cfi_endproc
 822              	.LFE74:
 824              		.section	.text.MX_CAN1_Init,"ax",%progbits
 825              		.align	1
 826              		.syntax unified
 827              		.thumb
 828              		.thumb_func
 829              		.fpu softvfp
 831              	MX_CAN1_Init:
 832              	.LFB75:
 367:Core/Src/main.c **** 
 833              		.loc 1 367 0
ARM GAS  /tmp/ccycL6v5.s 			page 36


 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 837 0000 08B5     		push	{r3, lr}
 838              	.LCFI20:
 839              		.cfi_def_cfa_offset 8
 840              		.cfi_offset 3, -8
 841              		.cfi_offset 14, -4
 376:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 842              		.loc 1 376 0
 843 0002 0D48     		ldr	r0, .L65
 844 0004 0D4B     		ldr	r3, .L65+4
 845 0006 0360     		str	r3, [r0]
 377:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 846              		.loc 1 377 0
 847 0008 0C23     		movs	r3, #12
 848 000a 4360     		str	r3, [r0, #4]
 378:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 849              		.loc 1 378 0
 850 000c 0023     		movs	r3, #0
 851 000e 8360     		str	r3, [r0, #8]
 379:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 852              		.loc 1 379 0
 853 0010 C360     		str	r3, [r0, #12]
 380:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 854              		.loc 1 380 0
 855 0012 4FF48032 		mov	r2, #65536
 856 0016 0261     		str	r2, [r0, #16]
 381:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 857              		.loc 1 381 0
 858 0018 4FF40012 		mov	r2, #2097152
 859 001c 4261     		str	r2, [r0, #20]
 382:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 860              		.loc 1 382 0
 861 001e 0376     		strb	r3, [r0, #24]
 383:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 862              		.loc 1 383 0
 863 0020 4376     		strb	r3, [r0, #25]
 384:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 864              		.loc 1 384 0
 865 0022 8376     		strb	r3, [r0, #26]
 385:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 866              		.loc 1 385 0
 867 0024 C376     		strb	r3, [r0, #27]
 386:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 868              		.loc 1 386 0
 869 0026 0377     		strb	r3, [r0, #28]
 387:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 870              		.loc 1 387 0
 871 0028 4377     		strb	r3, [r0, #29]
 388:Core/Src/main.c ****   {
 872              		.loc 1 388 0
 873 002a FFF7FEFF 		bl	HAL_CAN_Init
 874              	.LVL64:
 875 002e 00B9     		cbnz	r0, .L64
 876 0030 08BD     		pop	{r3, pc}
 877              	.L64:
ARM GAS  /tmp/ccycL6v5.s 			page 37


 390:Core/Src/main.c ****   }
 878              		.loc 1 390 0
 879 0032 FFF7FEFF 		bl	Error_Handler
 880              	.LVL65:
 881              	.L66:
 882 0036 00BF     		.align	2
 883              	.L65:
 884 0038 00000000 		.word	hcan1
 885 003c 00640040 		.word	1073767424
 886              		.cfi_endproc
 887              	.LFE75:
 889              		.section	.text.MX_UART4_Init,"ax",%progbits
 890              		.align	1
 891              		.syntax unified
 892              		.thumb
 893              		.thumb_func
 894              		.fpu softvfp
 896              	MX_UART4_Init:
 897              	.LFB82:
 686:Core/Src/main.c **** 
 898              		.loc 1 686 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902 0000 08B5     		push	{r3, lr}
 903              	.LCFI21:
 904              		.cfi_def_cfa_offset 8
 905              		.cfi_offset 3, -8
 906              		.cfi_offset 14, -4
 695:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 907              		.loc 1 695 0
 908 0002 0A48     		ldr	r0, .L71
 909 0004 0A4B     		ldr	r3, .L71+4
 910 0006 0360     		str	r3, [r0]
 696:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 911              		.loc 1 696 0
 912 0008 4FF4E133 		mov	r3, #115200
 913 000c 4360     		str	r3, [r0, #4]
 697:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 914              		.loc 1 697 0
 915 000e 0023     		movs	r3, #0
 916 0010 8360     		str	r3, [r0, #8]
 698:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 917              		.loc 1 698 0
 918 0012 C360     		str	r3, [r0, #12]
 699:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 919              		.loc 1 699 0
 920 0014 0361     		str	r3, [r0, #16]
 700:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 921              		.loc 1 700 0
 922 0016 0C22     		movs	r2, #12
 923 0018 4261     		str	r2, [r0, #20]
 701:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 924              		.loc 1 701 0
 925 001a 8361     		str	r3, [r0, #24]
 702:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 926              		.loc 1 702 0
ARM GAS  /tmp/ccycL6v5.s 			page 38


 927 001c C361     		str	r3, [r0, #28]
 703:Core/Src/main.c ****   {
 928              		.loc 1 703 0
 929 001e FFF7FEFF 		bl	HAL_UART_Init
 930              	.LVL66:
 931 0022 00B9     		cbnz	r0, .L70
 932 0024 08BD     		pop	{r3, pc}
 933              	.L70:
 705:Core/Src/main.c ****   }
 934              		.loc 1 705 0
 935 0026 FFF7FEFF 		bl	Error_Handler
 936              	.LVL67:
 937              	.L72:
 938 002a 00BF     		.align	2
 939              	.L71:
 940 002c 00000000 		.word	huart4
 941 0030 004C0040 		.word	1073761280
 942              		.cfi_endproc
 943              	.LFE82:
 945              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 946              		.align	1
 947              		.syntax unified
 948              		.thumb
 949              		.thumb_func
 950              		.fpu softvfp
 952              	MX_USART1_UART_Init:
 953              	.LFB83:
 719:Core/Src/main.c **** 
 954              		.loc 1 719 0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 958 0000 08B5     		push	{r3, lr}
 959              	.LCFI22:
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 3, -8
 962              		.cfi_offset 14, -4
 728:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 963              		.loc 1 728 0
 964 0002 0A48     		ldr	r0, .L77
 965 0004 0A4B     		ldr	r3, .L77+4
 966 0006 0360     		str	r3, [r0]
 729:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 967              		.loc 1 729 0
 968 0008 4FF4E133 		mov	r3, #115200
 969 000c 4360     		str	r3, [r0, #4]
 730:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 970              		.loc 1 730 0
 971 000e 0023     		movs	r3, #0
 972 0010 8360     		str	r3, [r0, #8]
 731:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 973              		.loc 1 731 0
 974 0012 C360     		str	r3, [r0, #12]
 732:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 975              		.loc 1 732 0
 976 0014 0361     		str	r3, [r0, #16]
 733:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
ARM GAS  /tmp/ccycL6v5.s 			page 39


 977              		.loc 1 733 0
 978 0016 0C22     		movs	r2, #12
 979 0018 4261     		str	r2, [r0, #20]
 734:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 980              		.loc 1 734 0
 981 001a 8361     		str	r3, [r0, #24]
 735:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 982              		.loc 1 735 0
 983 001c C361     		str	r3, [r0, #28]
 736:Core/Src/main.c ****   {
 984              		.loc 1 736 0
 985 001e FFF7FEFF 		bl	HAL_UART_Init
 986              	.LVL68:
 987 0022 00B9     		cbnz	r0, .L76
 988 0024 08BD     		pop	{r3, pc}
 989              	.L76:
 738:Core/Src/main.c ****   }
 990              		.loc 1 738 0
 991 0026 FFF7FEFF 		bl	Error_Handler
 992              	.LVL69:
 993              	.L78:
 994 002a 00BF     		.align	2
 995              	.L77:
 996 002c 00000000 		.word	huart1
 997 0030 00380140 		.word	1073821696
 998              		.cfi_endproc
 999              	.LFE83:
 1001              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1002              		.align	1
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1006              		.fpu softvfp
 1008              	MX_TIM3_Init:
 1009              	.LFB80:
 575:Core/Src/main.c **** 
 1010              		.loc 1 575 0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 56
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014 0000 00B5     		push	{lr}
 1015              	.LCFI23:
 1016              		.cfi_def_cfa_offset 4
 1017              		.cfi_offset 14, -4
 1018 0002 8FB0     		sub	sp, sp, #60
 1019              	.LCFI24:
 1020              		.cfi_def_cfa_offset 64
 581:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1021              		.loc 1 581 0
 1022 0004 0023     		movs	r3, #0
 1023 0006 0A93     		str	r3, [sp, #40]
 1024 0008 0B93     		str	r3, [sp, #44]
 1025 000a 0C93     		str	r3, [sp, #48]
 1026 000c 0D93     		str	r3, [sp, #52]
 582:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1027              		.loc 1 582 0
 1028 000e 0893     		str	r3, [sp, #32]
ARM GAS  /tmp/ccycL6v5.s 			page 40


 1029 0010 0993     		str	r3, [sp, #36]
 583:Core/Src/main.c **** 
 1030              		.loc 1 583 0
 1031 0012 0193     		str	r3, [sp, #4]
 1032 0014 0293     		str	r3, [sp, #8]
 1033 0016 0393     		str	r3, [sp, #12]
 1034 0018 0493     		str	r3, [sp, #16]
 1035 001a 0593     		str	r3, [sp, #20]
 1036 001c 0693     		str	r3, [sp, #24]
 1037 001e 0793     		str	r3, [sp, #28]
 588:Core/Src/main.c ****   htim3.Init.Prescaler = 5000;
 1038              		.loc 1 588 0
 1039 0020 1F48     		ldr	r0, .L91
 1040 0022 204A     		ldr	r2, .L91+4
 1041 0024 0260     		str	r2, [r0]
 589:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1042              		.loc 1 589 0
 1043 0026 41F28832 		movw	r2, #5000
 1044 002a 4260     		str	r2, [r0, #4]
 590:Core/Src/main.c ****   htim3.Init.Period = 600;
 1045              		.loc 1 590 0
 1046 002c 8360     		str	r3, [r0, #8]
 591:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1047              		.loc 1 591 0
 1048 002e 4FF41672 		mov	r2, #600
 1049 0032 C260     		str	r2, [r0, #12]
 592:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1050              		.loc 1 592 0
 1051 0034 0361     		str	r3, [r0, #16]
 593:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1052              		.loc 1 593 0
 1053 0036 8361     		str	r3, [r0, #24]
 594:Core/Src/main.c ****   {
 1054              		.loc 1 594 0
 1055 0038 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1056              	.LVL70:
 1057 003c 30BB     		cbnz	r0, .L86
 598:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1058              		.loc 1 598 0
 1059 003e 0EA9     		add	r1, sp, #56
 1060 0040 4FF48053 		mov	r3, #4096
 1061 0044 41F8103D 		str	r3, [r1, #-16]!
 599:Core/Src/main.c ****   {
 1062              		.loc 1 599 0
 1063 0048 1548     		ldr	r0, .L91
 1064 004a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1065              	.LVL71:
 1066 004e F8B9     		cbnz	r0, .L87
 603:Core/Src/main.c ****   {
 1067              		.loc 1 603 0
 1068 0050 1348     		ldr	r0, .L91
 1069 0052 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1070              	.LVL72:
 1071 0056 E8B9     		cbnz	r0, .L88
 607:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1072              		.loc 1 607 0
 1073 0058 0023     		movs	r3, #0
ARM GAS  /tmp/ccycL6v5.s 			page 41


 1074 005a 0893     		str	r3, [sp, #32]
 608:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1075              		.loc 1 608 0
 1076 005c 0993     		str	r3, [sp, #36]
 609:Core/Src/main.c ****   {
 1077              		.loc 1 609 0
 1078 005e 08A9     		add	r1, sp, #32
 1079 0060 0F48     		ldr	r0, .L91
 1080 0062 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1081              	.LVL73:
 1082 0066 B8B9     		cbnz	r0, .L89
 613:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1083              		.loc 1 613 0
 1084 0068 6023     		movs	r3, #96
 1085 006a 0193     		str	r3, [sp, #4]
 614:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1086              		.loc 1 614 0
 1087 006c 0023     		movs	r3, #0
 1088 006e 0293     		str	r3, [sp, #8]
 615:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1089              		.loc 1 615 0
 1090 0070 0393     		str	r3, [sp, #12]
 616:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1091              		.loc 1 616 0
 1092 0072 0593     		str	r3, [sp, #20]
 617:Core/Src/main.c ****   {
 1093              		.loc 1 617 0
 1094 0074 0822     		movs	r2, #8
 1095 0076 01A9     		add	r1, sp, #4
 1096 0078 0948     		ldr	r0, .L91
 1097 007a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1098              	.LVL74:
 1099 007e 68B9     		cbnz	r0, .L90
 624:Core/Src/main.c **** 
 1100              		.loc 1 624 0
 1101 0080 0748     		ldr	r0, .L91
 1102 0082 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1103              	.LVL75:
 626:Core/Src/main.c **** 
 1104              		.loc 1 626 0
 1105 0086 0FB0     		add	sp, sp, #60
 1106              	.LCFI25:
 1107              		.cfi_remember_state
 1108              		.cfi_def_cfa_offset 4
 1109              		@ sp needed
 1110 0088 5DF804FB 		ldr	pc, [sp], #4
 1111              	.L86:
 1112              	.LCFI26:
 1113              		.cfi_restore_state
 596:Core/Src/main.c ****   }
 1114              		.loc 1 596 0
 1115 008c FFF7FEFF 		bl	Error_Handler
 1116              	.LVL76:
 1117              	.L87:
 601:Core/Src/main.c ****   }
 1118              		.loc 1 601 0
 1119 0090 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccycL6v5.s 			page 42


 1120              	.LVL77:
 1121              	.L88:
 605:Core/Src/main.c ****   }
 1122              		.loc 1 605 0
 1123 0094 FFF7FEFF 		bl	Error_Handler
 1124              	.LVL78:
 1125              	.L89:
 611:Core/Src/main.c ****   }
 1126              		.loc 1 611 0
 1127 0098 FFF7FEFF 		bl	Error_Handler
 1128              	.LVL79:
 1129              	.L90:
 619:Core/Src/main.c ****   }
 1130              		.loc 1 619 0
 1131 009c FFF7FEFF 		bl	Error_Handler
 1132              	.LVL80:
 1133              	.L92:
 1134              		.align	2
 1135              	.L91:
 1136 00a0 00000000 		.word	htim3
 1137 00a4 00040040 		.word	1073742848
 1138              		.cfi_endproc
 1139              	.LFE80:
 1141              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1142              		.align	1
 1143              		.syntax unified
 1144              		.thumb
 1145              		.thumb_func
 1146              		.fpu softvfp
 1148              	MX_TIM1_Init:
 1149              	.LFB78:
 462:Core/Src/main.c **** 
 1150              		.loc 1 462 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 72
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 1154 0000 10B5     		push	{r4, lr}
 1155              	.LCFI27:
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 4, -8
 1158              		.cfi_offset 14, -4
 1159 0002 92B0     		sub	sp, sp, #72
 1160              	.LCFI28:
 1161              		.cfi_def_cfa_offset 80
 468:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1162              		.loc 1 468 0
 1163 0004 0024     		movs	r4, #0
 1164 0006 1094     		str	r4, [sp, #64]
 1165 0008 1194     		str	r4, [sp, #68]
 469:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1166              		.loc 1 469 0
 1167 000a 0994     		str	r4, [sp, #36]
 1168 000c 0A94     		str	r4, [sp, #40]
 1169 000e 0B94     		str	r4, [sp, #44]
 1170 0010 0C94     		str	r4, [sp, #48]
 1171 0012 0D94     		str	r4, [sp, #52]
 1172 0014 0E94     		str	r4, [sp, #56]
ARM GAS  /tmp/ccycL6v5.s 			page 43


 1173 0016 0F94     		str	r4, [sp, #60]
 470:Core/Src/main.c **** 
 1174              		.loc 1 470 0
 1175 0018 2022     		movs	r2, #32
 1176 001a 2146     		mov	r1, r4
 1177 001c 01A8     		add	r0, sp, #4
 1178 001e FFF7FEFF 		bl	memset
 1179              	.LVL81:
 475:Core/Src/main.c ****   htim1.Init.Prescaler = 1050;
 1180              		.loc 1 475 0
 1181 0022 2148     		ldr	r0, .L103
 1182 0024 214B     		ldr	r3, .L103+4
 1183 0026 0360     		str	r3, [r0]
 476:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1184              		.loc 1 476 0
 1185 0028 40F21A43 		movw	r3, #1050
 1186 002c 4360     		str	r3, [r0, #4]
 477:Core/Src/main.c ****   htim1.Init.Period = 65535;
 1187              		.loc 1 477 0
 1188 002e 8460     		str	r4, [r0, #8]
 478:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1189              		.loc 1 478 0
 1190 0030 4FF6FF73 		movw	r3, #65535
 1191 0034 C360     		str	r3, [r0, #12]
 479:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1192              		.loc 1 479 0
 1193 0036 0461     		str	r4, [r0, #16]
 480:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1194              		.loc 1 480 0
 1195 0038 4461     		str	r4, [r0, #20]
 481:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1196              		.loc 1 481 0
 1197 003a 8461     		str	r4, [r0, #24]
 482:Core/Src/main.c ****   {
 1198              		.loc 1 482 0
 1199 003c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1200              	.LVL82:
 1201 0040 0028     		cmp	r0, #0
 1202 0042 29D1     		bne	.L99
 486:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1203              		.loc 1 486 0
 1204 0044 0023     		movs	r3, #0
 1205 0046 1093     		str	r3, [sp, #64]
 487:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1206              		.loc 1 487 0
 1207 0048 1193     		str	r3, [sp, #68]
 488:Core/Src/main.c ****   {
 1208              		.loc 1 488 0
 1209 004a 10A9     		add	r1, sp, #64
 1210 004c 1648     		ldr	r0, .L103
 1211 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1212              	.LVL83:
 1213 0052 18BB     		cbnz	r0, .L100
 492:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1214              		.loc 1 492 0
 1215 0054 6023     		movs	r3, #96
 1216 0056 0993     		str	r3, [sp, #36]
ARM GAS  /tmp/ccycL6v5.s 			page 44


 493:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1217              		.loc 1 493 0
 1218 0058 0022     		movs	r2, #0
 1219 005a 0A92     		str	r2, [sp, #40]
 494:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1220              		.loc 1 494 0
 1221 005c 0B92     		str	r2, [sp, #44]
 495:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1222              		.loc 1 495 0
 1223 005e 0C92     		str	r2, [sp, #48]
 496:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1224              		.loc 1 496 0
 1225 0060 0D92     		str	r2, [sp, #52]
 497:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1226              		.loc 1 497 0
 1227 0062 0E92     		str	r2, [sp, #56]
 498:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1228              		.loc 1 498 0
 1229 0064 0F92     		str	r2, [sp, #60]
 499:Core/Src/main.c ****   {
 1230              		.loc 1 499 0
 1231 0066 09A9     		add	r1, sp, #36
 1232 0068 0F48     		ldr	r0, .L103
 1233 006a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1234              	.LVL84:
 1235 006e B8B9     		cbnz	r0, .L101
 503:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1236              		.loc 1 503 0
 1237 0070 0023     		movs	r3, #0
 1238 0072 0193     		str	r3, [sp, #4]
 504:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1239              		.loc 1 504 0
 1240 0074 0293     		str	r3, [sp, #8]
 505:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1241              		.loc 1 505 0
 1242 0076 0393     		str	r3, [sp, #12]
 506:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1243              		.loc 1 506 0
 1244 0078 0493     		str	r3, [sp, #16]
 507:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1245              		.loc 1 507 0
 1246 007a 0593     		str	r3, [sp, #20]
 508:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1247              		.loc 1 508 0
 1248 007c 4FF40052 		mov	r2, #8192
 1249 0080 0692     		str	r2, [sp, #24]
 509:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1250              		.loc 1 509 0
 1251 0082 0893     		str	r3, [sp, #32]
 510:Core/Src/main.c ****   {
 1252              		.loc 1 510 0
 1253 0084 01A9     		add	r1, sp, #4
 1254 0086 0848     		ldr	r0, .L103
 1255 0088 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1256              	.LVL85:
 1257 008c 50B9     		cbnz	r0, .L102
 517:Core/Src/main.c **** 
ARM GAS  /tmp/ccycL6v5.s 			page 45


 1258              		.loc 1 517 0
 1259 008e 0648     		ldr	r0, .L103
 1260 0090 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1261              	.LVL86:
 519:Core/Src/main.c **** 
 1262              		.loc 1 519 0
 1263 0094 12B0     		add	sp, sp, #72
 1264              	.LCFI29:
 1265              		.cfi_remember_state
 1266              		.cfi_def_cfa_offset 8
 1267              		@ sp needed
 1268 0096 10BD     		pop	{r4, pc}
 1269              	.L99:
 1270              	.LCFI30:
 1271              		.cfi_restore_state
 484:Core/Src/main.c ****   }
 1272              		.loc 1 484 0
 1273 0098 FFF7FEFF 		bl	Error_Handler
 1274              	.LVL87:
 1275              	.L100:
 490:Core/Src/main.c ****   }
 1276              		.loc 1 490 0
 1277 009c FFF7FEFF 		bl	Error_Handler
 1278              	.LVL88:
 1279              	.L101:
 501:Core/Src/main.c ****   }
 1280              		.loc 1 501 0
 1281 00a0 FFF7FEFF 		bl	Error_Handler
 1282              	.LVL89:
 1283              	.L102:
 512:Core/Src/main.c ****   }
 1284              		.loc 1 512 0
 1285 00a4 FFF7FEFF 		bl	Error_Handler
 1286              	.LVL90:
 1287              	.L104:
 1288              		.align	2
 1289              	.L103:
 1290 00a8 00000000 		.word	htim1
 1291 00ac 002C0140 		.word	1073818624
 1292              		.cfi_endproc
 1293              	.LFE78:
 1295              		.section	.text.MX_TIM5_Init,"ax",%progbits
 1296              		.align	1
 1297              		.syntax unified
 1298              		.thumb
 1299              		.thumb_func
 1300              		.fpu softvfp
 1302              	MX_TIM5_Init:
 1303              	.LFB81:
 634:Core/Src/main.c **** 
 1304              		.loc 1 634 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 40
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308 0000 00B5     		push	{lr}
 1309              	.LCFI31:
 1310              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccycL6v5.s 			page 46


 1311              		.cfi_offset 14, -4
 1312 0002 8BB0     		sub	sp, sp, #44
 1313              	.LCFI32:
 1314              		.cfi_def_cfa_offset 48
 640:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1315              		.loc 1 640 0
 1316 0004 0023     		movs	r3, #0
 1317 0006 0893     		str	r3, [sp, #32]
 1318 0008 0993     		str	r3, [sp, #36]
 641:Core/Src/main.c **** 
 1319              		.loc 1 641 0
 1320 000a 0193     		str	r3, [sp, #4]
 1321 000c 0293     		str	r3, [sp, #8]
 1322 000e 0393     		str	r3, [sp, #12]
 1323 0010 0493     		str	r3, [sp, #16]
 1324 0012 0593     		str	r3, [sp, #20]
 1325 0014 0693     		str	r3, [sp, #24]
 1326 0016 0793     		str	r3, [sp, #28]
 646:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 1327              		.loc 1 646 0
 1328 0018 1848     		ldr	r0, .L115
 1329 001a 194A     		ldr	r2, .L115+4
 1330 001c 0260     		str	r2, [r0]
 647:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1331              		.loc 1 647 0
 1332 001e 6422     		movs	r2, #100
 1333 0020 4260     		str	r2, [r0, #4]
 648:Core/Src/main.c ****   htim5.Init.Period = 10;
 1334              		.loc 1 648 0
 1335 0022 8360     		str	r3, [r0, #8]
 649:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1336              		.loc 1 649 0
 1337 0024 0A22     		movs	r2, #10
 1338 0026 C260     		str	r2, [r0, #12]
 650:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1339              		.loc 1 650 0
 1340 0028 0361     		str	r3, [r0, #16]
 651:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 1341              		.loc 1 651 0
 1342 002a 8361     		str	r3, [r0, #24]
 652:Core/Src/main.c ****   {
 1343              		.loc 1 652 0
 1344 002c FFF7FEFF 		bl	HAL_TIM_OC_Init
 1345              	.LVL91:
 1346 0030 D8B9     		cbnz	r0, .L111
 656:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1347              		.loc 1 656 0
 1348 0032 0023     		movs	r3, #0
 1349 0034 0893     		str	r3, [sp, #32]
 657:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1350              		.loc 1 657 0
 1351 0036 0993     		str	r3, [sp, #36]
 658:Core/Src/main.c ****   {
 1352              		.loc 1 658 0
 1353 0038 08A9     		add	r1, sp, #32
 1354 003a 1048     		ldr	r0, .L115
 1355 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccycL6v5.s 			page 47


 1356              	.LVL92:
 1357 0040 A8B9     		cbnz	r0, .L112
 662:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1358              		.loc 1 662 0
 1359 0042 0022     		movs	r2, #0
 1360 0044 0192     		str	r2, [sp, #4]
 663:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1361              		.loc 1 663 0
 1362 0046 0292     		str	r2, [sp, #8]
 664:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1363              		.loc 1 664 0
 1364 0048 0392     		str	r2, [sp, #12]
 665:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1365              		.loc 1 665 0
 1366 004a 0592     		str	r2, [sp, #20]
 666:Core/Src/main.c ****   {
 1367              		.loc 1 666 0
 1368 004c 01A9     		add	r1, sp, #4
 1369 004e 0B48     		ldr	r0, .L115
 1370 0050 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1371              	.LVL93:
 1372 0054 68B9     		cbnz	r0, .L113
 670:Core/Src/main.c ****   {
 1373              		.loc 1 670 0
 1374 0056 0422     		movs	r2, #4
 1375 0058 0DEB0201 		add	r1, sp, r2
 1376 005c 0748     		ldr	r0, .L115
 1377 005e FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1378              	.LVL94:
 1379 0062 40B9     		cbnz	r0, .L114
 678:Core/Src/main.c **** 
 1380              		.loc 1 678 0
 1381 0064 0BB0     		add	sp, sp, #44
 1382              	.LCFI33:
 1383              		.cfi_remember_state
 1384              		.cfi_def_cfa_offset 4
 1385              		@ sp needed
 1386 0066 5DF804FB 		ldr	pc, [sp], #4
 1387              	.L111:
 1388              	.LCFI34:
 1389              		.cfi_restore_state
 654:Core/Src/main.c ****   }
 1390              		.loc 1 654 0
 1391 006a FFF7FEFF 		bl	Error_Handler
 1392              	.LVL95:
 1393              	.L112:
 660:Core/Src/main.c ****   }
 1394              		.loc 1 660 0
 1395 006e FFF7FEFF 		bl	Error_Handler
 1396              	.LVL96:
 1397              	.L113:
 668:Core/Src/main.c ****   }
 1398              		.loc 1 668 0
 1399 0072 FFF7FEFF 		bl	Error_Handler
 1400              	.LVL97:
 1401              	.L114:
 672:Core/Src/main.c ****   }
ARM GAS  /tmp/ccycL6v5.s 			page 48


 1402              		.loc 1 672 0
 1403 0076 FFF7FEFF 		bl	Error_Handler
 1404              	.LVL98:
 1405              	.L116:
 1406 007a 00BF     		.align	2
 1407              	.L115:
 1408 007c 00000000 		.word	htim5
 1409 0080 000C0040 		.word	1073744896
 1410              		.cfi_endproc
 1411              	.LFE81:
 1413              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1414              		.align	1
 1415              		.syntax unified
 1416              		.thumb
 1417              		.thumb_func
 1418              		.fpu softvfp
 1420              	MX_TIM2_Init:
 1421              	.LFB79:
 527:Core/Src/main.c **** 
 1422              		.loc 1 527 0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 40
 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 1426 0000 00B5     		push	{lr}
 1427              	.LCFI35:
 1428              		.cfi_def_cfa_offset 4
 1429              		.cfi_offset 14, -4
 1430 0002 8BB0     		sub	sp, sp, #44
 1431              	.LCFI36:
 1432              		.cfi_def_cfa_offset 48
 533:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1433              		.loc 1 533 0
 1434 0004 0023     		movs	r3, #0
 1435 0006 0893     		str	r3, [sp, #32]
 1436 0008 0993     		str	r3, [sp, #36]
 534:Core/Src/main.c **** 
 1437              		.loc 1 534 0
 1438 000a 0193     		str	r3, [sp, #4]
 1439 000c 0293     		str	r3, [sp, #8]
 1440 000e 0393     		str	r3, [sp, #12]
 1441 0010 0493     		str	r3, [sp, #16]
 1442 0012 0593     		str	r3, [sp, #20]
 1443 0014 0693     		str	r3, [sp, #24]
 1444 0016 0793     		str	r3, [sp, #28]
 539:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 1445              		.loc 1 539 0
 1446 0018 1448     		ldr	r0, .L125
 1447 001a 4FF08042 		mov	r2, #1073741824
 1448 001e 0260     		str	r2, [r0]
 540:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1449              		.loc 1 540 0
 1450 0020 0A22     		movs	r2, #10
 1451 0022 4260     		str	r2, [r0, #4]
 541:Core/Src/main.c ****   htim2.Init.Period = 600;
 1452              		.loc 1 541 0
 1453 0024 8360     		str	r3, [r0, #8]
 542:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccycL6v5.s 			page 49


 1454              		.loc 1 542 0
 1455 0026 4FF41672 		mov	r2, #600
 1456 002a C260     		str	r2, [r0, #12]
 543:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1457              		.loc 1 543 0
 1458 002c 0361     		str	r3, [r0, #16]
 544:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 1459              		.loc 1 544 0
 1460 002e 8361     		str	r3, [r0, #24]
 545:Core/Src/main.c ****   {
 1461              		.loc 1 545 0
 1462 0030 FFF7FEFF 		bl	HAL_TIM_OC_Init
 1463              	.LVL99:
 1464 0034 A0B9     		cbnz	r0, .L122
 549:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1465              		.loc 1 549 0
 1466 0036 0023     		movs	r3, #0
 1467 0038 0893     		str	r3, [sp, #32]
 550:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1468              		.loc 1 550 0
 1469 003a 0993     		str	r3, [sp, #36]
 551:Core/Src/main.c ****   {
 1470              		.loc 1 551 0
 1471 003c 08A9     		add	r1, sp, #32
 1472 003e 0B48     		ldr	r0, .L125
 1473 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1474              	.LVL100:
 1475 0044 70B9     		cbnz	r0, .L123
 555:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1476              		.loc 1 555 0
 1477 0046 0022     		movs	r2, #0
 1478 0048 0192     		str	r2, [sp, #4]
 556:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1479              		.loc 1 556 0
 1480 004a 0292     		str	r2, [sp, #8]
 557:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1481              		.loc 1 557 0
 1482 004c 0392     		str	r2, [sp, #12]
 558:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1483              		.loc 1 558 0
 1484 004e 0592     		str	r2, [sp, #20]
 559:Core/Src/main.c ****   {
 1485              		.loc 1 559 0
 1486 0050 01A9     		add	r1, sp, #4
 1487 0052 0648     		ldr	r0, .L125
 1488 0054 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1489              	.LVL101:
 1490 0058 30B9     		cbnz	r0, .L124
 567:Core/Src/main.c **** 
 1491              		.loc 1 567 0
 1492 005a 0BB0     		add	sp, sp, #44
 1493              	.LCFI37:
 1494              		.cfi_remember_state
 1495              		.cfi_def_cfa_offset 4
 1496              		@ sp needed
 1497 005c 5DF804FB 		ldr	pc, [sp], #4
 1498              	.L122:
ARM GAS  /tmp/ccycL6v5.s 			page 50


 1499              	.LCFI38:
 1500              		.cfi_restore_state
 547:Core/Src/main.c ****   }
 1501              		.loc 1 547 0
 1502 0060 FFF7FEFF 		bl	Error_Handler
 1503              	.LVL102:
 1504              	.L123:
 553:Core/Src/main.c ****   }
 1505              		.loc 1 553 0
 1506 0064 FFF7FEFF 		bl	Error_Handler
 1507              	.LVL103:
 1508              	.L124:
 561:Core/Src/main.c ****   }
 1509              		.loc 1 561 0
 1510 0068 FFF7FEFF 		bl	Error_Handler
 1511              	.LVL104:
 1512              	.L126:
 1513              		.align	2
 1514              	.L125:
 1515 006c 00000000 		.word	htim2
 1516              		.cfi_endproc
 1517              	.LFE79:
 1519              		.section	.text.SystemClock_Config,"ax",%progbits
 1520              		.align	1
 1521              		.global	SystemClock_Config
 1522              		.syntax unified
 1523              		.thumb
 1524              		.thumb_func
 1525              		.fpu softvfp
 1527              	SystemClock_Config:
 1528              	.LFB73:
 254:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1529              		.loc 1 254 0
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 112
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 1533 0000 00B5     		push	{lr}
 1534              	.LCFI39:
 1535              		.cfi_def_cfa_offset 4
 1536              		.cfi_offset 14, -4
 1537 0002 9DB0     		sub	sp, sp, #116
 1538              	.LCFI40:
 1539              		.cfi_def_cfa_offset 120
 255:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1540              		.loc 1 255 0
 1541 0004 3822     		movs	r2, #56
 1542 0006 0021     		movs	r1, #0
 1543 0008 0DEB0200 		add	r0, sp, r2
 1544 000c FFF7FEFF 		bl	memset
 1545              	.LVL105:
 256:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1546              		.loc 1 256 0
 1547 0010 0021     		movs	r1, #0
 1548 0012 0991     		str	r1, [sp, #36]
 1549 0014 0A91     		str	r1, [sp, #40]
 1550 0016 0B91     		str	r1, [sp, #44]
 1551 0018 0C91     		str	r1, [sp, #48]
ARM GAS  /tmp/ccycL6v5.s 			page 51


 1552 001a 0D91     		str	r1, [sp, #52]
 257:Core/Src/main.c **** 
 1553              		.loc 1 257 0
 1554 001c 2022     		movs	r2, #32
 1555 001e 01A8     		add	r0, sp, #4
 1556 0020 FFF7FEFF 		bl	memset
 1557              	.LVL106:
 262:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1558              		.loc 1 262 0
 1559 0024 0122     		movs	r2, #1
 1560 0026 0E92     		str	r2, [sp, #56]
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1561              		.loc 1 263 0
 1562 0028 4FF48033 		mov	r3, #65536
 1563 002c 1093     		str	r3, [sp, #64]
 265:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 1564              		.loc 1 265 0
 1565 002e 1392     		str	r2, [sp, #76]
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1566              		.loc 1 267 0
 1567 0030 0222     		movs	r2, #2
 1568 0032 1692     		str	r2, [sp, #88]
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1569              		.loc 1 268 0
 1570 0034 1793     		str	r3, [sp, #92]
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 1571              		.loc 1 269 0
 1572 0036 4FF4E013 		mov	r3, #1835008
 1573 003a 1893     		str	r3, [sp, #96]
 271:Core/Src/main.c ****   {
 1574              		.loc 1 271 0
 1575 003c 0EA8     		add	r0, sp, #56
 1576 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1577              	.LVL107:
 1578 0042 E0B9     		cbnz	r0, .L132
 277:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1579              		.loc 1 277 0
 1580 0044 0F23     		movs	r3, #15
 1581 0046 0993     		str	r3, [sp, #36]
 279:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1582              		.loc 1 279 0
 1583 0048 0221     		movs	r1, #2
 1584 004a 0A91     		str	r1, [sp, #40]
 280:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1585              		.loc 1 280 0
 1586 004c 0023     		movs	r3, #0
 1587 004e 0B93     		str	r3, [sp, #44]
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1588              		.loc 1 281 0
 1589 0050 4FF48062 		mov	r2, #1024
 1590 0054 0C92     		str	r2, [sp, #48]
 282:Core/Src/main.c **** 
 1591              		.loc 1 282 0
 1592 0056 0D93     		str	r3, [sp, #52]
 284:Core/Src/main.c ****   {
 1593              		.loc 1 284 0
 1594 0058 09A8     		add	r0, sp, #36
ARM GAS  /tmp/ccycL6v5.s 			page 52


 1595 005a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1596              	.LVL108:
 1597 005e 80B9     		cbnz	r0, .L133
 288:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1598              		.loc 1 288 0
 1599 0060 0223     		movs	r3, #2
 1600 0062 0193     		str	r3, [sp, #4]
 289:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1601              		.loc 1 289 0
 1602 0064 4FF40043 		mov	r3, #32768
 1603 0068 0393     		str	r3, [sp, #12]
 290:Core/Src/main.c ****   {
 1604              		.loc 1 290 0
 1605 006a 01A8     		add	r0, sp, #4
 1606 006c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1607              	.LVL109:
 1608 0070 48B9     		cbnz	r0, .L134
 296:Core/Src/main.c **** }
 1609              		.loc 1 296 0
 1610 0072 0122     		movs	r2, #1
 1611 0074 054B     		ldr	r3, .L135
 1612 0076 1A60     		str	r2, [r3]
 297:Core/Src/main.c **** 
 1613              		.loc 1 297 0
 1614 0078 1DB0     		add	sp, sp, #116
 1615              	.LCFI41:
 1616              		.cfi_remember_state
 1617              		.cfi_def_cfa_offset 4
 1618              		@ sp needed
 1619 007a 5DF804FB 		ldr	pc, [sp], #4
 1620              	.L132:
 1621              	.LCFI42:
 1622              		.cfi_restore_state
 273:Core/Src/main.c ****   }
 1623              		.loc 1 273 0
 1624 007e FFF7FEFF 		bl	Error_Handler
 1625              	.LVL110:
 1626              	.L133:
 286:Core/Src/main.c ****   }
 1627              		.loc 1 286 0
 1628 0082 FFF7FEFF 		bl	Error_Handler
 1629              	.LVL111:
 1630              	.L134:
 292:Core/Src/main.c ****   }
 1631              		.loc 1 292 0
 1632 0086 FFF7FEFF 		bl	Error_Handler
 1633              	.LVL112:
 1634              	.L136:
 1635 008a 00BF     		.align	2
 1636              	.L135:
 1637 008c 70004242 		.word	1111621744
 1638              		.cfi_endproc
 1639              	.LFE73:
 1641              		.section	.text.main,"ax",%progbits
 1642              		.align	1
 1643              		.global	main
 1644              		.syntax unified
ARM GAS  /tmp/ccycL6v5.s 			page 53


 1645              		.thumb
 1646              		.thumb_func
 1647              		.fpu softvfp
 1649              	main:
 1650              	.LFB72:
 135:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1651              		.loc 1 135 0
 1652              		.cfi_startproc
 1653              		@ Volatile: function does not return.
 1654              		@ args = 0, pretend = 0, frame = 0
 1655              		@ frame_needed = 0, uses_anonymous_args = 0
 1656 0000 08B5     		push	{r3, lr}
 1657              	.LCFI43:
 1658              		.cfi_def_cfa_offset 8
 1659              		.cfi_offset 3, -8
 1660              		.cfi_offset 14, -4
 143:Core/Src/main.c **** 
 1661              		.loc 1 143 0
 1662 0002 FFF7FEFF 		bl	HAL_Init
 1663              	.LVL113:
 150:Core/Src/main.c **** 
 1664              		.loc 1 150 0
 1665 0006 FFF7FEFF 		bl	SystemClock_Config
 1666              	.LVL114:
 157:Core/Src/main.c ****   MX_DMA_Init();
 1667              		.loc 1 157 0
 1668 000a FFF7FEFF 		bl	MX_GPIO_Init
 1669              	.LVL115:
 158:Core/Src/main.c ****   MX_CAN2_Init();
 1670              		.loc 1 158 0
 1671 000e FFF7FEFF 		bl	MX_DMA_Init
 1672              	.LVL116:
 159:Core/Src/main.c ****   MX_ADC1_Init();
 1673              		.loc 1 159 0
 1674 0012 FFF7FEFF 		bl	MX_CAN2_Init
 1675              	.LVL117:
 160:Core/Src/main.c ****   MX_CAN1_Init();
 1676              		.loc 1 160 0
 1677 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1678              	.LVL118:
 161:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 1679              		.loc 1 161 0
 1680 001a FFF7FEFF 		bl	MX_CAN1_Init
 1681              	.LVL119:
 163:Core/Src/main.c ****   MX_USART1_UART_Init();
 1682              		.loc 1 163 0
 1683 001e FFF7FEFF 		bl	MX_UART4_Init
 1684              	.LVL120:
 164:Core/Src/main.c ****   MX_TIM3_Init();
 1685              		.loc 1 164 0
 1686 0022 FFF7FEFF 		bl	MX_USART1_UART_Init
 1687              	.LVL121:
 165:Core/Src/main.c ****   MX_TIM1_Init();
 1688              		.loc 1 165 0
 1689 0026 FFF7FEFF 		bl	MX_TIM3_Init
 1690              	.LVL122:
 166:Core/Src/main.c ****   MX_TIM5_Init();
ARM GAS  /tmp/ccycL6v5.s 			page 54


 1691              		.loc 1 166 0
 1692 002a FFF7FEFF 		bl	MX_TIM1_Init
 1693              	.LVL123:
 167:Core/Src/main.c ****   MX_TIM2_Init();
 1694              		.loc 1 167 0
 1695 002e FFF7FEFF 		bl	MX_TIM5_Init
 1696              	.LVL124:
 168:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1697              		.loc 1 168 0
 1698 0032 FFF7FEFF 		bl	MX_TIM2_Init
 1699              	.LVL125:
 170:Core/Src/main.c ****   gaugeInit();
 1700              		.loc 1 170 0
 1701 0036 FFF7FEFF 		bl	canSettings
 1702              	.LVL126:
 171:Core/Src/main.c ****   dcdcInit();
 1703              		.loc 1 171 0
 1704 003a FFF7FEFF 		bl	gaugeInit
 1705              	.LVL127:
 172:Core/Src/main.c ****   vcuInit();
 1706              		.loc 1 172 0
 1707 003e FFF7FEFF 		bl	dcdcInit
 1708              	.LVL128:
 173:Core/Src/main.c ****   wpInit();
 1709              		.loc 1 173 0
 1710 0042 FFF7FEFF 		bl	vcuInit
 1711              	.LVL129:
 174:Core/Src/main.c **** 
 1712              		.loc 1 174 0
 1713 0046 FFF7FEFF 		bl	wpInit
 1714              	.LVL130:
 176:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); //water pump pwm
 1715              		.loc 1 176 0
 1716 004a 2C4C     		ldr	r4, .L140
 1717 004c 2046     		mov	r0, r4
 1718 004e FFF7FEFF 		bl	HAL_TIM_Base_Start
 1719              	.LVL131:
 177:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1720              		.loc 1 177 0
 1721 0052 2B4D     		ldr	r5, .L140+4
 1722 0054 6423     		movs	r3, #100
 1723 0056 2A46     		mov	r2, r5
 1724 0058 2A49     		ldr	r1, .L140+8
 1725 005a 2B48     		ldr	r0, .L140+12
 1726 005c FFF7FEFF 		bl	HAL_DMA_Start
 1727              	.LVL132:
 178:Core/Src/main.c **** 
 1728              		.loc 1 178 0
 1729 0060 2268     		ldr	r2, [r4]
 1730 0062 D368     		ldr	r3, [r2, #12]
 1731 0064 43F40073 		orr	r3, r3, #512
 1732 0068 D360     		str	r3, [r2, #12]
 180:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 1733              		.loc 1 180 0
 1734 006a 284C     		ldr	r4, .L140+16
 1735 006c 2046     		mov	r0, r4
 1736 006e FFF7FEFF 		bl	HAL_TIM_Base_Start
ARM GAS  /tmp/ccycL6v5.s 			page 55


 1737              	.LVL133:
 181:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 1738              		.loc 1 181 0
 1739 0072 6423     		movs	r3, #100
 1740 0074 2A46     		mov	r2, r5
 1741 0076 2649     		ldr	r1, .L140+20
 1742 0078 2648     		ldr	r0, .L140+24
 1743 007a FFF7FEFF 		bl	HAL_DMA_Start
 1744              	.LVL134:
 182:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 1745              		.loc 1 182 0
 1746 007e 2268     		ldr	r2, [r4]
 1747 0080 D368     		ldr	r3, [r2, #12]
 1748 0082 43F40073 		orr	r3, r3, #512
 1749 0086 D360     		str	r3, [r2, #12]
 183:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 1750              		.loc 1 183 0
 1751 0088 4FF47A73 		mov	r3, #1000
 1752 008c 2A46     		mov	r2, r5
 1753 008e 2249     		ldr	r1, .L140+28
 1754 0090 2248     		ldr	r0, .L140+32
 1755 0092 FFF7FEFF 		bl	HAL_DMA_Start
 1756              	.LVL135:
 184:Core/Src/main.c **** 
 1757              		.loc 1 184 0
 1758 0096 2268     		ldr	r2, [r4]
 1759 0098 D368     		ldr	r3, [r2, #12]
 1760 009a 43F48063 		orr	r3, r3, #1024
 1761 009e D360     		str	r3, [r2, #12]
 186:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 1762              		.loc 1 186 0
 1763 00a0 0021     		movs	r1, #0
 1764 00a2 1F48     		ldr	r0, .L140+36
 1765 00a4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1766              	.LVL136:
 187:Core/Src/main.c **** 
 1767              		.loc 1 187 0
 1768 00a8 0821     		movs	r1, #8
 1769 00aa 1E48     		ldr	r0, .L140+40
 1770 00ac FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1771              	.LVL137:
 189:Core/Src/main.c **** 
 1772              		.loc 1 189 0
 1773 00b0 0322     		movs	r2, #3
 1774 00b2 1D49     		ldr	r1, .L140+44
 1775 00b4 1D48     		ldr	r0, .L140+48
 1776 00b6 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1777              	.LVL138:
 194:Core/Src/main.c **** 
 1778              		.loc 1 194 0
 1779 00ba FFF7FEFF 		bl	osKernelInitialize
 1780              	.LVL139:
 214:Core/Src/main.c **** 
 1781              		.loc 1 214 0
 1782 00be 1C4A     		ldr	r2, .L140+52
 1783 00c0 0021     		movs	r1, #0
 1784 00c2 1C48     		ldr	r0, .L140+56
ARM GAS  /tmp/ccycL6v5.s 			page 56


 1785 00c4 FFF7FEFF 		bl	osThreadNew
 1786              	.LVL140:
 1787 00c8 1B4B     		ldr	r3, .L140+60
 1788 00ca 1860     		str	r0, [r3]
 217:Core/Src/main.c **** 
 1789              		.loc 1 217 0
 1790 00cc 1B4A     		ldr	r2, .L140+64
 1791 00ce 0021     		movs	r1, #0
 1792 00d0 1B48     		ldr	r0, .L140+68
 1793 00d2 FFF7FEFF 		bl	osThreadNew
 1794              	.LVL141:
 1795 00d6 1B4B     		ldr	r3, .L140+72
 1796 00d8 1860     		str	r0, [r3]
 220:Core/Src/main.c **** 
 1797              		.loc 1 220 0
 1798 00da 1B4A     		ldr	r2, .L140+76
 1799 00dc 0021     		movs	r1, #0
 1800 00de 1B48     		ldr	r0, .L140+80
 1801 00e0 FFF7FEFF 		bl	osThreadNew
 1802              	.LVL142:
 1803 00e4 1A4B     		ldr	r3, .L140+84
 1804 00e6 1860     		str	r0, [r3]
 223:Core/Src/main.c **** 
 1805              		.loc 1 223 0
 1806 00e8 1A4A     		ldr	r2, .L140+88
 1807 00ea 0021     		movs	r1, #0
 1808 00ec 1A48     		ldr	r0, .L140+92
 1809 00ee FFF7FEFF 		bl	osThreadNew
 1810              	.LVL143:
 1811 00f2 1A4B     		ldr	r3, .L140+96
 1812 00f4 1860     		str	r0, [r3]
 234:Core/Src/main.c **** 
 1813              		.loc 1 234 0
 1814 00f6 FFF7FEFF 		bl	osKernelStart
 1815              	.LVL144:
 1816              	.L138:
 1817 00fa FEE7     		b	.L138
 1818              	.L141:
 1819              		.align	2
 1820              	.L140:
 1821 00fc 00000000 		.word	htim2
 1822 0100 10100140 		.word	1073811472
 1823 0104 00000000 		.word	waterPWM
 1824 0108 00000000 		.word	hdma_tim2_ch1
 1825 010c 00000000 		.word	htim5
 1826 0110 00000000 		.word	tempPWM
 1827 0114 00000000 		.word	hdma_tim5_ch1
 1828 0118 00000000 		.word	socPWM
 1829 011c 00000000 		.word	hdma_tim5_ch2
 1830 0120 00000000 		.word	htim1
 1831 0124 00000000 		.word	htim3
 1832 0128 00000000 		.word	ADC_data
 1833 012c 00000000 		.word	hadc1
 1834 0130 00000000 		.word	.LANCHOR0
 1835 0134 00000000 		.word	StartTaskLoop
 1836 0138 00000000 		.word	TaskLoopHandle
 1837 013c 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccycL6v5.s 			page 57


 1838 0140 00000000 		.word	StartTask10ms
 1839 0144 00000000 		.word	Task10msHandle
 1840 0148 00000000 		.word	.LANCHOR2
 1841 014c 00000000 		.word	StartTask100ms
 1842 0150 00000000 		.word	Task100msHandle
 1843 0154 00000000 		.word	.LANCHOR3
 1844 0158 00000000 		.word	StartTask250ms
 1845 015c 00000000 		.word	Task250msHandle
 1846              		.cfi_endproc
 1847              	.LFE72:
 1849              		.global	Task250ms_attributes
 1850              		.comm	Task250msHandle,4,4
 1851              		.global	Task100ms_attributes
 1852              		.comm	Task100msHandle,4,4
 1853              		.global	Task10ms_attributes
 1854              		.comm	Task10msHandle,4,4
 1855              		.global	TaskLoop_attributes
 1856              		.comm	TaskLoopHandle,4,4
 1857              		.comm	huart4,64,4
 1858              		.comm	hdma_tim5_ch2,68,4
 1859              		.comm	hdma_tim5_ch1,68,4
 1860              		.comm	hdma_tim2_ch1,68,4
 1861              		.comm	htim5,72,4
 1862              		.comm	htim3,72,4
 1863              		.comm	htim2,72,4
 1864              		.comm	htim1,72,4
 1865              		.comm	hdma_adc1,68,4
 1866              		.comm	hadc1,48,4
 1867              		.comm	waterPWM,400,4
 1868              		.comm	socPWM,4000,4
 1869              		.comm	tempPWM,400,4
 1870              		.comm	canDebug,4,4
 1871              		.comm	txCycle2,4,4
 1872              		.comm	txCycle,4,4
 1873              		.comm	canTx2,8,4
 1874              		.comm	canTx,8,4
 1875              		.comm	canMailbox2,4,4
 1876              		.comm	canMailbox,4,4
 1877              		.comm	canRx2,8,4
 1878              		.comm	canRx,8,4
 1879              		.comm	txMsgExt2,24,4
 1880              		.comm	txMsg2,24,4
 1881              		.comm	rxMsg2,28,4
 1882              		.comm	txMsgExt,24,4
 1883              		.comm	txMsg,24,4
 1884              		.comm	rxMsg,28,4
 1885              		.comm	sf5,40,4
 1886              		.comm	sf4,40,4
 1887              		.comm	sf3,40,4
 1888              		.comm	sf2,40,4
 1889              		.comm	sf,40,4
 1890              		.comm	hcan2,40,4
 1891              		.comm	hcan1,40,4
 1892              		.comm	setPrevState,1,1
 1893              		.comm	te,12,4
 1894              		.comm	BMS,20,4
 1895              		.comm	charger,2,4
ARM GAS  /tmp/ccycL6v5.s 			page 58


 1896              		.comm	vcu,16,4
 1897              		.comm	iboost,2,4
 1898              		.comm	ldu,18,4
 1899              		.comm	tempdata,4,4
 1900              		.comm	ADC_data,12,4
 1901              		.comm	tenderActive,1,1
 1902              		.comm	time_now,4,4
 1903              		.comm	period,4,4
 1904              		.comm	DCDC,4,4
 1905              		.comm	huart1,64,4
 1906              		.section	.rodata.Task100ms_attributes,"a",%progbits
 1907              		.align	2
 1908              		.set	.LANCHOR2,. + 0
 1911              	Task100ms_attributes:
 1912 0000 0C000000 		.word	.LC1
 1913 0004 00000000 		.space	16
 1913      00000000 
 1913      00000000 
 1913      00000000 
 1914 0014 00020000 		.word	512
 1915 0018 30000000 		.word	48
 1916 001c 00000000 		.space	8
 1916      00000000 
 1917              		.section	.rodata.Task10ms_attributes,"a",%progbits
 1918              		.align	2
 1919              		.set	.LANCHOR1,. + 0
 1922              	Task10ms_attributes:
 1923 0000 18000000 		.word	.LC2
 1924 0004 00000000 		.space	16
 1924      00000000 
 1924      00000000 
 1924      00000000 
 1925 0014 00020000 		.word	512
 1926 0018 37000000 		.word	55
 1927 001c 00000000 		.space	8
 1927      00000000 
 1928              		.section	.rodata.Task250ms_attributes,"a",%progbits
 1929              		.align	2
 1930              		.set	.LANCHOR3,. + 0
 1933              	Task250ms_attributes:
 1934 0000 00000000 		.word	.LC0
 1935 0004 00000000 		.space	16
 1935      00000000 
 1935      00000000 
 1935      00000000 
 1936 0014 00020000 		.word	512
 1937 0018 28000000 		.word	40
 1938 001c 00000000 		.space	8
 1938      00000000 
 1939              		.section	.rodata.TaskLoop_attributes,"a",%progbits
 1940              		.align	2
 1941              		.set	.LANCHOR0,. + 0
 1944              	TaskLoop_attributes:
 1945 0000 24000000 		.word	.LC3
 1946 0004 00000000 		.space	16
 1946      00000000 
 1946      00000000 
ARM GAS  /tmp/ccycL6v5.s 			page 59


 1946      00000000 
 1947 0014 00020000 		.word	512
 1948 0018 18000000 		.word	24
 1949 001c 00000000 		.space	8
 1949      00000000 
 1950              		.section	.rodata.str1.4,"aMS",%progbits,1
 1951              		.align	2
 1952              	.LC0:
 1953 0000 5461736B 		.ascii	"Task250ms\000"
 1953      3235306D 
 1953      7300
 1954 000a 0000     		.space	2
 1955              	.LC1:
 1956 000c 5461736B 		.ascii	"Task100ms\000"
 1956      3130306D 
 1956      7300
 1957 0016 0000     		.space	2
 1958              	.LC2:
 1959 0018 5461736B 		.ascii	"Task10ms\000"
 1959      31306D73 
 1959      00
 1960 0021 000000   		.space	3
 1961              	.LC3:
 1962 0024 5461736B 		.ascii	"TaskLoop\000"
 1962      4C6F6F70 
 1962      00
 1963              		.text
 1964              	.Letext0:
 1965              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1966              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 1967              		.file 6 "Drivers/CMSIS/Include/core_cm3.h"
 1968              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1969              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 1970              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1971              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1972              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1973              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1974              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1975              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1976              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1977              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1978              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1979              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1980              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1981              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1982              		.file 21 "/usr/include/newlib/sys/lock.h"
 1983              		.file 22 "/usr/include/newlib/sys/_types.h"
 1984              		.file 23 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1985              		.file 24 "/usr/include/newlib/sys/reent.h"
 1986              		.file 25 "Core/Inc/dcdc.h"
 1987              		.file 26 "Core/Inc/vcu.h"
 1988              		.file 27 "Core/Inc/encoder.h"
 1989              		.file 28 "Core/Inc/can_setup.h"
 1990              		.file 29 "Core/Inc/gauges.h"
 1991              		.file 30 "Core/Inc/water_pump.h"
 1992              		.file 31 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1993              		.file 32 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
ARM GAS  /tmp/ccycL6v5.s 			page 60


 1994              		.file 33 "Core/Inc/main.h"
ARM GAS  /tmp/ccycL6v5.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccycL6v5.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccycL6v5.s:168    .text.MX_GPIO_Init:00000000000000d4 $d
     /tmp/ccycL6v5.s:175    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:181    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccycL6v5.s:264    .text.MX_DMA_Init:0000000000000070 $d
     /tmp/ccycL6v5.s:269    .text.StartTaskLoop:0000000000000000 $t
     /tmp/ccycL6v5.s:276    .text.StartTaskLoop:0000000000000000 StartTaskLoop
     /tmp/ccycL6v5.s:309    .text.StartTask10ms:0000000000000000 $t
     /tmp/ccycL6v5.s:316    .text.StartTask10ms:0000000000000000 StartTask10ms
     /tmp/ccycL6v5.s:353    .text.StartTask10ms:0000000000000020 $d
                            *COM*:0000000000000010 vcu
     /tmp/ccycL6v5.s:358    .text.StartTask100ms:0000000000000000 $t
     /tmp/ccycL6v5.s:365    .text.StartTask100ms:0000000000000000 StartTask100ms
     /tmp/ccycL6v5.s:399    .text.StartTask100ms:000000000000001c $d
                            *COM*:0000000000000012 ldu
     /tmp/ccycL6v5.s:404    .text.StartTask250ms:0000000000000000 $t
     /tmp/ccycL6v5.s:411    .text.StartTask250ms:0000000000000000 StartTask250ms
     /tmp/ccycL6v5.s:453    .text.StartTask250ms:000000000000002c $d
                            *COM*:0000000000000014 BMS
     /tmp/ccycL6v5.s:460    .text.__io_putchar:0000000000000000 $t
     /tmp/ccycL6v5.s:467    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/ccycL6v5.s:505    .text.__io_putchar:000000000000001c $d
                            *COM*:0000000000000040 huart1
     /tmp/ccycL6v5.s:510    .text._write:0000000000000000 $t
     /tmp/ccycL6v5.s:517    .text._write:0000000000000000 _write
     /tmp/ccycL6v5.s:561    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccycL6v5.s:568    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccycL6v5.s:598    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccycL6v5.s:603    .text.Error_Handler:0000000000000000 $t
     /tmp/ccycL6v5.s:610    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccycL6v5.s:636    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:642    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/ccycL6v5.s:695    .text.MX_CAN2_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan2
     /tmp/ccycL6v5.s:701    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:707    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccycL6v5.s:819    .text.MX_ADC1_Init:0000000000000088 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccycL6v5.s:825    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:831    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccycL6v5.s:884    .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccycL6v5.s:890    .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:896    .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccycL6v5.s:940    .text.MX_UART4_Init:000000000000002c $d
                            *COM*:0000000000000040 huart4
     /tmp/ccycL6v5.s:946    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:952    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccycL6v5.s:996    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccycL6v5.s:1002   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:1008   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccycL6v5.s:1136   .text.MX_TIM3_Init:00000000000000a0 $d
                            *COM*:0000000000000048 htim3
     /tmp/ccycL6v5.s:1142   .text.MX_TIM1_Init:0000000000000000 $t
ARM GAS  /tmp/ccycL6v5.s 			page 62


     /tmp/ccycL6v5.s:1148   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccycL6v5.s:1290   .text.MX_TIM1_Init:00000000000000a8 $d
                            *COM*:0000000000000048 htim1
     /tmp/ccycL6v5.s:1296   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:1302   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccycL6v5.s:1408   .text.MX_TIM5_Init:000000000000007c $d
                            *COM*:0000000000000048 htim5
     /tmp/ccycL6v5.s:1414   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccycL6v5.s:1420   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccycL6v5.s:1515   .text.MX_TIM2_Init:000000000000006c $d
                            *COM*:0000000000000048 htim2
     /tmp/ccycL6v5.s:1520   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccycL6v5.s:1527   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccycL6v5.s:1637   .text.SystemClock_Config:000000000000008c $d
     /tmp/ccycL6v5.s:1642   .text.main:0000000000000000 $t
     /tmp/ccycL6v5.s:1649   .text.main:0000000000000000 main
     /tmp/ccycL6v5.s:1821   .text.main:00000000000000fc $d
                            *COM*:0000000000000190 waterPWM
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000190 tempPWM
                            *COM*:0000000000000044 hdma_tim5_ch1
                            *COM*:0000000000000fa0 socPWM
                            *COM*:0000000000000044 hdma_tim5_ch2
                            *COM*:000000000000000c ADC_data
                            *COM*:0000000000000004 TaskLoopHandle
                            *COM*:0000000000000004 Task10msHandle
                            *COM*:0000000000000004 Task100msHandle
                            *COM*:0000000000000004 Task250msHandle
     /tmp/ccycL6v5.s:1933   .rodata.Task250ms_attributes:0000000000000000 Task250ms_attributes
     /tmp/ccycL6v5.s:1911   .rodata.Task100ms_attributes:0000000000000000 Task100ms_attributes
     /tmp/ccycL6v5.s:1922   .rodata.Task10ms_attributes:0000000000000000 Task10ms_attributes
     /tmp/ccycL6v5.s:1944   .rodata.TaskLoop_attributes:0000000000000000 TaskLoop_attributes
                            *COM*:0000000000000044 hdma_adc1
                            *COM*:0000000000000004 canDebug
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000008 canTx2
                            *COM*:0000000000000008 canTx
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
                            *COM*:0000000000000001 setPrevState
                            *COM*:000000000000000c te
                            *COM*:0000000000000002 charger
                            *COM*:0000000000000002 iboost
ARM GAS  /tmp/ccycL6v5.s 			page 63


                            *COM*:0000000000000004 tempdata
                            *COM*:0000000000000001 tenderActive
                            *COM*:0000000000000004 time_now
                            *COM*:0000000000000004 period
                            *COM*:0000000000000004 DCDC
     /tmp/ccycL6v5.s:1907   .rodata.Task100ms_attributes:0000000000000000 $d
     /tmp/ccycL6v5.s:1918   .rodata.Task10ms_attributes:0000000000000000 $d
     /tmp/ccycL6v5.s:1929   .rodata.Task250ms_attributes:0000000000000000 $d
     /tmp/ccycL6v5.s:1940   .rodata.TaskLoop_attributes:0000000000000000 $d
     /tmp/ccycL6v5.s:1951   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
wpHandler
vcuState
ioHandler
osDelay
throttleHandler
canIOsend
regenHandler
dcdcHandler
updateSpeed
updateTach
HAL_GPIO_TogglePin
updateTemp
updateSOC
encoderHandler
HAL_UART_Transmit
HAL_IncTick
HAL_CAN_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
memset
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_OC_Init
HAL_TIM_OC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
canSettings
gaugeInit
dcdcInit
vcuInit
wpInit
HAL_TIM_Base_Start
ARM GAS  /tmp/ccycL6v5.s 			page 64


HAL_DMA_Start
HAL_TIM_PWM_Start
HAL_ADC_Start_DMA
osKernelInitialize
osThreadNew
osKernelStart
