ARM GAS  /tmp/ccw0MSgW.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB85:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.</center></h2>
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****  * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****  * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****  *                             www.st.com/SLA0044
  16:Core/Src/main.c ****  *
  17:Core/Src/main.c ****  ******************************************************************************
  18:Core/Src/main.c ****  */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "print_uart.h"
  27:Core/Src/main.c **** #include "can_setup.h"
  28:Core/Src/main.c **** //#include "FreeRTOS.h"
  29:Core/Src/main.c **** //#include "task.h" //needed for delayuntil
  30:Core/Src/main.c **** #include "gauges.h"
  31:Core/Src/main.c **** #include "vcu.h"
  32:Core/Src/main.c **** #include "test.h"
  33:Core/Src/main.c **** #include "water_pump.h"
ARM GAS  /tmp/ccw0MSgW.s 			page 2


  34:Core/Src/main.c **** #include "dcdc.h"
  35:Core/Src/main.c **** #include "tasks.h"
  36:Core/Src/main.c **** __attribute__((__section__(".board_info"))) const unsigned char BOARD_NAME[10] = "VCU"; // BOARD_NA
  37:Core/Src/main.c **** /* USER CODE END Includes */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  41:Core/Src/main.c **** uint32_t lastRun = 0;
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PTD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PD */
  47:Core/Src/main.c **** /* USER CODE END PD */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  50:Core/Src/main.c **** /* USER CODE BEGIN PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PM */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  55:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  56:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  59:Core/Src/main.c **** CAN_HandleTypeDef hcan2;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** IWDG_HandleTypeDef hiwdg;
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  64:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  65:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  66:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  67:Core/Src/main.c **** TIM_HandleTypeDef htim6;
  68:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_ch1;
  69:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch1;
  70:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch2;
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** UART_HandleTypeDef huart4;
  73:Core/Src/main.c **** UART_HandleTypeDef huart1;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE BEGIN PV */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* USER CODE END PV */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  80:Core/Src/main.c **** void SystemClock_Config(void);
  81:Core/Src/main.c **** static void MX_GPIO_Init(void);
  82:Core/Src/main.c **** static void MX_DMA_Init(void);
  83:Core/Src/main.c **** static void MX_CAN2_Init(void);
  84:Core/Src/main.c **** static void MX_ADC1_Init(void);
  85:Core/Src/main.c **** static void MX_CAN1_Init(void);
  86:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void);
  87:Core/Src/main.c **** static void MX_UART4_Init(void);
  88:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  89:Core/Src/main.c **** static void MX_TIM3_Init(void);
  90:Core/Src/main.c **** static void MX_TIM1_Init(void);
ARM GAS  /tmp/ccw0MSgW.s 			page 3


  91:Core/Src/main.c **** static void MX_TIM5_Init(void);
  92:Core/Src/main.c **** static void MX_TIM2_Init(void);
  93:Core/Src/main.c **** static void MX_IWDG_Init(void);
  94:Core/Src/main.c **** static void MX_TIM6_Init(void);
  95:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /* USER CODE END PFP */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 100:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** /* USER CODE END 0 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** /**
 105:Core/Src/main.c ****  * @brief  The application entry point.
 106:Core/Src/main.c ****  * @retval int
 107:Core/Src/main.c ****  */
 108:Core/Src/main.c **** int main(void)
 109:Core/Src/main.c **** {
 110:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* USER CODE END 1 */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 117:Core/Src/main.c ****   HAL_Init();
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* USER CODE END Init */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* Configure the system clock */
 124:Core/Src/main.c ****   SystemClock_Config();
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* USER CODE END SysInit */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* Initialize all configured peripherals */
 131:Core/Src/main.c ****   MX_GPIO_Init();
 132:Core/Src/main.c ****   MX_DMA_Init();
 133:Core/Src/main.c ****   MX_CAN2_Init();
 134:Core/Src/main.c ****   MX_ADC1_Init();
 135:Core/Src/main.c ****   MX_CAN1_Init();
 136:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 137:Core/Src/main.c ****   MX_UART4_Init();
 138:Core/Src/main.c ****   MX_USART1_UART_Init();
 139:Core/Src/main.c ****   MX_TIM3_Init();
 140:Core/Src/main.c ****   MX_TIM1_Init();
 141:Core/Src/main.c ****   MX_TIM5_Init();
 142:Core/Src/main.c ****   MX_TIM2_Init();
 143:Core/Src/main.c ****   //MX_IWDG_Init();
 144:Core/Src/main.c ****   MX_TIM6_Init();
 145:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 146:Core/Src/main.c ****   canSettings();
 147:Core/Src/main.c ****   gaugeInit();
ARM GAS  /tmp/ccw0MSgW.s 			page 4


 148:Core/Src/main.c ****   dcdcInit();
 149:Core/Src/main.c ****   vcuInit();
 150:Core/Src/main.c ****   wpInit();
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim6);
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 155:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); // water pump pw
 156:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim5);
 159:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 160:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 161:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 162:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Tach pwm start
 165:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, ADC_data, 3);
 168:Core/Src/main.c ****   lastRun = HAL_GetTick();
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE END 2 */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* Infinite loop */
 173:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 174:Core/Src/main.c ****   while (1)
 175:Core/Src/main.c ****   {
 176:Core/Src/main.c ****     taskHandler();
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****     /* USER CODE END WHILE */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 181:Core/Src/main.c ****   }
 182:Core/Src/main.c ****   /* USER CODE END 3 */
 183:Core/Src/main.c **** }
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****  * @brief System Clock Configuration
 187:Core/Src/main.c ****  * @retval None
 188:Core/Src/main.c ****  */
 189:Core/Src/main.c **** void SystemClock_Config(void)
 190:Core/Src/main.c **** {
 191:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 192:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 193:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 196:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 197:Core/Src/main.c ****    */
 198:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 200:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 201:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 202:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 203:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/ccw0MSgW.s 			page 5


 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 208:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 209:Core/Src/main.c ****   {
 210:Core/Src/main.c ****     Error_Handler();
 211:Core/Src/main.c ****   }
 212:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 213:Core/Src/main.c ****    */
 214:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 215:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 216:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 217:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 218:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 221:Core/Src/main.c ****   {
 222:Core/Src/main.c ****     Error_Handler();
 223:Core/Src/main.c ****   }
 224:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 225:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 226:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 227:Core/Src/main.c ****   {
 228:Core/Src/main.c ****     Error_Handler();
 229:Core/Src/main.c ****   }
 230:Core/Src/main.c ****   /** Configure the Systick interrupt time
 231:Core/Src/main.c ****    */
 232:Core/Src/main.c ****   __HAL_RCC_PLLI2S_ENABLE();
 233:Core/Src/main.c **** }
 234:Core/Src/main.c **** 
 235:Core/Src/main.c **** /**
 236:Core/Src/main.c ****  * @brief ADC1 Initialization Function
 237:Core/Src/main.c ****  * @param None
 238:Core/Src/main.c ****  * @retval None
 239:Core/Src/main.c ****  */
 240:Core/Src/main.c **** static void MX_ADC1_Init(void)
 241:Core/Src/main.c **** {
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 252:Core/Src/main.c ****   /** Common config
 253:Core/Src/main.c ****    */
 254:Core/Src/main.c ****   hadc1.Instance = ADC1;
 255:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 256:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 257:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 258:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 259:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 260:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 261:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
ARM GAS  /tmp/ccw0MSgW.s 			page 6


 262:Core/Src/main.c ****   {
 263:Core/Src/main.c ****     Error_Handler();
 264:Core/Src/main.c ****   }
 265:Core/Src/main.c ****   /** Configure Regular Channel
 266:Core/Src/main.c ****    */
 267:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_11;
 268:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 269:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 270:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 271:Core/Src/main.c ****   {
 272:Core/Src/main.c ****     Error_Handler();
 273:Core/Src/main.c ****   }
 274:Core/Src/main.c ****   /** Configure Regular Channel
 275:Core/Src/main.c ****    */
 276:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 277:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 278:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 279:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 280:Core/Src/main.c ****   {
 281:Core/Src/main.c ****     Error_Handler();
 282:Core/Src/main.c ****   }
 283:Core/Src/main.c ****   /** Configure Regular Channel
 284:Core/Src/main.c ****    */
 285:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 286:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 287:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 288:Core/Src/main.c ****   {
 289:Core/Src/main.c ****     Error_Handler();
 290:Core/Src/main.c ****   }
 291:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 294:Core/Src/main.c **** }
 295:Core/Src/main.c **** 
 296:Core/Src/main.c **** /**
 297:Core/Src/main.c ****  * @brief CAN1 Initialization Function
 298:Core/Src/main.c ****  * @param None
 299:Core/Src/main.c ****  * @retval None
 300:Core/Src/main.c ****  */
 301:Core/Src/main.c **** static void MX_CAN1_Init(void)
 302:Core/Src/main.c **** {
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 311:Core/Src/main.c ****   hcan1.Instance = CAN1;
 312:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 313:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 314:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 315:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 316:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 317:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 318:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
ARM GAS  /tmp/ccw0MSgW.s 			page 7


 319:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 320:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 321:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 322:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 323:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 324:Core/Src/main.c ****   {
 325:Core/Src/main.c ****     Error_Handler();
 326:Core/Src/main.c ****   }
 327:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 330:Core/Src/main.c **** }
 331:Core/Src/main.c **** 
 332:Core/Src/main.c **** /**
 333:Core/Src/main.c ****  * @brief CAN2 Initialization Function
 334:Core/Src/main.c ****  * @param None
 335:Core/Src/main.c ****  * @retval None
 336:Core/Src/main.c ****  */
 337:Core/Src/main.c **** static void MX_CAN2_Init(void)
 338:Core/Src/main.c **** {
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 0 */
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /* USER CODE END CAN2_Init 0 */
 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 1 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   /* USER CODE END CAN2_Init 1 */
 347:Core/Src/main.c ****   hcan2.Instance = CAN2;
 348:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 349:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 350:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 351:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 352:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 353:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 354:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 355:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 356:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 357:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 358:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 359:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 360:Core/Src/main.c ****   {
 361:Core/Src/main.c ****     Error_Handler();
 362:Core/Src/main.c ****   }
 363:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 2 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE END CAN2_Init 2 */
 366:Core/Src/main.c **** }
 367:Core/Src/main.c **** 
 368:Core/Src/main.c **** /**
 369:Core/Src/main.c ****  * @brief I2C1 Initialization Function
 370:Core/Src/main.c ****  * @param None
 371:Core/Src/main.c ****  * @retval None
 372:Core/Src/main.c ****  */
 373:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void)
 374:Core/Src/main.c **** {
 375:Core/Src/main.c **** 
ARM GAS  /tmp/ccw0MSgW.s 			page 8


 376:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 383:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 386:Core/Src/main.c **** }
 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** /**
 389:Core/Src/main.c ****  * @brief IWDG Initialization Function
 390:Core/Src/main.c ****  * @param None
 391:Core/Src/main.c ****  * @retval None
 392:Core/Src/main.c ****  */
 393:Core/Src/main.c **** static void MX_IWDG_Init(void)
 394:Core/Src/main.c **** {
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 0 */
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /* USER CODE END IWDG_Init 0 */
 399:Core/Src/main.c **** 
 400:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 1 */
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****   /* USER CODE END IWDG_Init 1 */
 403:Core/Src/main.c ****   hiwdg.Instance = IWDG;
 404:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 405:Core/Src/main.c ****   hiwdg.Init.Reload = 439;
 406:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 407:Core/Src/main.c ****   {
 408:Core/Src/main.c ****     Error_Handler();
 409:Core/Src/main.c ****   }
 410:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 2 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE END IWDG_Init 2 */
 413:Core/Src/main.c **** }
 414:Core/Src/main.c **** 
 415:Core/Src/main.c **** /**
 416:Core/Src/main.c ****  * @brief TIM1 Initialization Function
 417:Core/Src/main.c ****  * @param None
 418:Core/Src/main.c ****  * @retval None
 419:Core/Src/main.c ****  */
 420:Core/Src/main.c **** static void MX_TIM1_Init(void)
 421:Core/Src/main.c **** {
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 428:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 429:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 432:Core/Src/main.c **** 
ARM GAS  /tmp/ccw0MSgW.s 			page 9


 433:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 434:Core/Src/main.c ****   htim1.Instance = TIM1;
 435:Core/Src/main.c ****   htim1.Init.Prescaler = 240;
 436:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 437:Core/Src/main.c ****   htim1.Init.Period = 65535;
 438:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 439:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 440:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 441:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 442:Core/Src/main.c ****   {
 443:Core/Src/main.c ****     Error_Handler();
 444:Core/Src/main.c ****   }
 445:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 446:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 447:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 448:Core/Src/main.c ****   {
 449:Core/Src/main.c ****     Error_Handler();
 450:Core/Src/main.c ****   }
 451:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 452:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 453:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 454:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 455:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 456:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 457:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 458:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 459:Core/Src/main.c ****   {
 460:Core/Src/main.c ****     Error_Handler();
 461:Core/Src/main.c ****   }
 462:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 463:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 464:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 465:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 466:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 467:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 468:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 469:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 470:Core/Src/main.c ****   {
 471:Core/Src/main.c ****     Error_Handler();
 472:Core/Src/main.c ****   }
 473:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 476:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 477:Core/Src/main.c **** }
 478:Core/Src/main.c **** 
 479:Core/Src/main.c **** /**
 480:Core/Src/main.c ****  * @brief TIM2 Initialization Function
 481:Core/Src/main.c ****  * @param None
 482:Core/Src/main.c ****  * @retval None
 483:Core/Src/main.c ****  */
 484:Core/Src/main.c **** static void MX_TIM2_Init(void)
 485:Core/Src/main.c **** {
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 488:Core/Src/main.c **** 
 489:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
ARM GAS  /tmp/ccw0MSgW.s 			page 10


 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 492:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 493:Core/Src/main.c **** 
 494:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 495:Core/Src/main.c ****   // Water pump pwm emulation
 496:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 497:Core/Src/main.c ****   htim2.Instance = TIM2;
 498:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 499:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 500:Core/Src/main.c ****   htim2.Init.Period = 600;
 501:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 502:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 503:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 504:Core/Src/main.c ****   {
 505:Core/Src/main.c ****     Error_Handler();
 506:Core/Src/main.c ****   }
 507:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 508:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 509:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 510:Core/Src/main.c ****   {
 511:Core/Src/main.c ****     Error_Handler();
 512:Core/Src/main.c ****   }
 513:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 514:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 515:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 516:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 517:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 518:Core/Src/main.c ****   {
 519:Core/Src/main.c ****     Error_Handler();
 520:Core/Src/main.c ****   }
 521:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 522:Core/Src/main.c **** 
 523:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 524:Core/Src/main.c **** }
 525:Core/Src/main.c **** 
 526:Core/Src/main.c **** /**
 527:Core/Src/main.c ****  * @brief TIM3 Initialization Function
 528:Core/Src/main.c ****  * @param None
 529:Core/Src/main.c ****  * @retval None
 530:Core/Src/main.c ****  */
 531:Core/Src/main.c **** static void MX_TIM3_Init(void)
 532:Core/Src/main.c **** {
 533:Core/Src/main.c **** 
 534:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 535:Core/Src/main.c **** 
 536:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 537:Core/Src/main.c **** 
 538:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 539:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 540:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 541:Core/Src/main.c **** 
 542:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 543:Core/Src/main.c **** 
 544:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 545:Core/Src/main.c ****   htim3.Instance = TIM3;
 546:Core/Src/main.c ****   htim3.Init.Prescaler = 120;
ARM GAS  /tmp/ccw0MSgW.s 			page 11


 547:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 548:Core/Src/main.c ****   htim3.Init.Period = 600;
 549:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 550:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 551:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 552:Core/Src/main.c ****   {
 553:Core/Src/main.c ****     Error_Handler();
 554:Core/Src/main.c ****   }
 555:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 556:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 557:Core/Src/main.c ****   {
 558:Core/Src/main.c ****     Error_Handler();
 559:Core/Src/main.c ****   }
 560:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 561:Core/Src/main.c ****   {
 562:Core/Src/main.c ****     Error_Handler();
 563:Core/Src/main.c ****   }
 564:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 565:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 566:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 567:Core/Src/main.c ****   {
 568:Core/Src/main.c ****     Error_Handler();
 569:Core/Src/main.c ****   }
 570:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 571:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 572:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 573:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 574:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 575:Core/Src/main.c ****   {
 576:Core/Src/main.c ****     Error_Handler();
 577:Core/Src/main.c ****   }
 578:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 579:Core/Src/main.c **** 
 580:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 581:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 582:Core/Src/main.c **** }
 583:Core/Src/main.c **** 
 584:Core/Src/main.c **** /**
 585:Core/Src/main.c ****  * @brief TIM5 Initialization Function
 586:Core/Src/main.c ****  * @param None
 587:Core/Src/main.c ****  * @retval None
 588:Core/Src/main.c ****  */
 589:Core/Src/main.c **** static void MX_TIM5_Init(void)
 590:Core/Src/main.c **** {
 591:Core/Src/main.c **** 
 592:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
 593:Core/Src/main.c **** 
 594:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
 595:Core/Src/main.c **** 
 596:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 597:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 598:Core/Src/main.c **** 
 599:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
 600:Core/Src/main.c **** 
 601:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
 602:Core/Src/main.c ****   htim5.Instance = TIM5;
 603:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
ARM GAS  /tmp/ccw0MSgW.s 			page 12


 604:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 605:Core/Src/main.c ****   htim5.Init.Period = 10;
 606:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 607:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 608:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 609:Core/Src/main.c ****   {
 610:Core/Src/main.c ****     Error_Handler();
 611:Core/Src/main.c ****   }
 612:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 613:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 614:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 615:Core/Src/main.c ****   {
 616:Core/Src/main.c ****     Error_Handler();
 617:Core/Src/main.c ****   }
 618:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 619:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 620:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 621:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 622:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 623:Core/Src/main.c ****   {
 624:Core/Src/main.c ****     Error_Handler();
 625:Core/Src/main.c ****   }
 626:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 627:Core/Src/main.c ****   {
 628:Core/Src/main.c ****     Error_Handler();
 629:Core/Src/main.c ****   }
 630:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
 631:Core/Src/main.c **** 
 632:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
 633:Core/Src/main.c **** }
 634:Core/Src/main.c **** 
 635:Core/Src/main.c **** /**
 636:Core/Src/main.c ****  * @brief TIM6 Initialization Function
 637:Core/Src/main.c ****  * @param None
 638:Core/Src/main.c ****  * @retval None
 639:Core/Src/main.c ****  */
 640:Core/Src/main.c **** static void MX_TIM6_Init(void)
 641:Core/Src/main.c **** {
 642:Core/Src/main.c **** 
 643:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 0 */
 644:Core/Src/main.c **** 
 645:Core/Src/main.c ****   /* USER CODE END TIM6_Init 0 */
 646:Core/Src/main.c **** 
 647:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 648:Core/Src/main.c **** 
 649:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 1 */
 650:Core/Src/main.c **** 
 651:Core/Src/main.c ****   /* USER CODE END TIM6_Init 1 */
 652:Core/Src/main.c ****   htim6.Instance = TIM6;
 653:Core/Src/main.c ****   htim6.Init.Prescaler = 72 - 1;
 654:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 655:Core/Src/main.c ****   htim6.Init.Period = 1000 - 1;
 656:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 657:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 658:Core/Src/main.c ****   {
 659:Core/Src/main.c ****     Error_Handler();
 660:Core/Src/main.c ****   }
ARM GAS  /tmp/ccw0MSgW.s 			page 13


 661:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 662:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 663:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 664:Core/Src/main.c ****   {
 665:Core/Src/main.c ****     Error_Handler();
 666:Core/Src/main.c ****   }
 667:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 2 */
 668:Core/Src/main.c **** 
 669:Core/Src/main.c ****   /* USER CODE END TIM6_Init 2 */
 670:Core/Src/main.c **** }
 671:Core/Src/main.c **** 
 672:Core/Src/main.c **** /**
 673:Core/Src/main.c ****  * @brief UART4 Initialization Function
 674:Core/Src/main.c ****  * @param None
 675:Core/Src/main.c ****  * @retval None
 676:Core/Src/main.c ****  */
 677:Core/Src/main.c **** static void MX_UART4_Init(void)
 678:Core/Src/main.c **** {
 679:Core/Src/main.c **** 
 680:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 0 */
 681:Core/Src/main.c **** 
 682:Core/Src/main.c ****   /* USER CODE END UART4_Init 0 */
 683:Core/Src/main.c **** 
 684:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 1 */
 685:Core/Src/main.c **** 
 686:Core/Src/main.c ****   /* USER CODE END UART4_Init 1 */
 687:Core/Src/main.c ****   huart4.Instance = UART4;
 688:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 689:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 690:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 691:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 692:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 693:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 694:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 695:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 696:Core/Src/main.c ****   {
 697:Core/Src/main.c ****     Error_Handler();
 698:Core/Src/main.c ****   }
 699:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 2 */
 700:Core/Src/main.c **** 
 701:Core/Src/main.c ****   /* USER CODE END UART4_Init 2 */
 702:Core/Src/main.c **** }
 703:Core/Src/main.c **** 
 704:Core/Src/main.c **** /**
 705:Core/Src/main.c ****  * @brief USART1 Initialization Function
 706:Core/Src/main.c ****  * @param None
 707:Core/Src/main.c ****  * @retval None
 708:Core/Src/main.c ****  */
 709:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 710:Core/Src/main.c **** {
 711:Core/Src/main.c **** 
 712:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 713:Core/Src/main.c **** 
 714:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 715:Core/Src/main.c **** 
 716:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 717:Core/Src/main.c **** 
ARM GAS  /tmp/ccw0MSgW.s 			page 14


 718:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 719:Core/Src/main.c ****   huart1.Instance = USART1;
 720:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 721:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 722:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 723:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 724:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 725:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 726:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 727:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 728:Core/Src/main.c ****   {
 729:Core/Src/main.c ****     Error_Handler();
 730:Core/Src/main.c ****   }
 731:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 732:Core/Src/main.c **** 
 733:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 734:Core/Src/main.c **** }
 735:Core/Src/main.c **** 
 736:Core/Src/main.c **** /**
 737:Core/Src/main.c ****  * Enable DMA controller clock
 738:Core/Src/main.c ****  */
 739:Core/Src/main.c **** static void MX_DMA_Init(void)
 740:Core/Src/main.c **** {
 741:Core/Src/main.c **** 
 742:Core/Src/main.c ****   /* DMA controller clock enable */
 743:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 744:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 745:Core/Src/main.c **** 
 746:Core/Src/main.c ****   /* DMA interrupt init */
 747:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 748:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 749:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 750:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 751:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 752:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 753:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 754:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 755:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 756:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 757:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 758:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 759:Core/Src/main.c **** }
 760:Core/Src/main.c **** 
 761:Core/Src/main.c **** /**
 762:Core/Src/main.c ****  * @brief GPIO Initialization Function
 763:Core/Src/main.c ****  * @param None
 764:Core/Src/main.c ****  * @retval None
 765:Core/Src/main.c ****  */
 766:Core/Src/main.c **** static void MX_GPIO_Init(void)
 767:Core/Src/main.c **** {
  26              		.loc 1 767 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
ARM GAS  /tmp/ccw0MSgW.s 			page 15


  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 88B0     		sub	sp, sp, #32
  39              		.cfi_def_cfa_offset 56
 768:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 768 3 view .LVU1
  41              		.loc 1 768 20 is_stmt 0 view .LVU2
  42 0006 0024     		movs	r4, #0
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
 769:Core/Src/main.c **** 
 770:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 771:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 771 3 is_stmt 1 view .LVU3
  48              	.LBB4:
  49              		.loc 1 771 3 view .LVU4
  50              		.loc 1 771 3 view .LVU5
  51 0010 304B     		ldr	r3, .L3
  52 0012 9A69     		ldr	r2, [r3, #24]
  53 0014 42F01002 		orr	r2, r2, #16
  54 0018 9A61     		str	r2, [r3, #24]
  55              		.loc 1 771 3 view .LVU6
  56 001a 9A69     		ldr	r2, [r3, #24]
  57 001c 02F01002 		and	r2, r2, #16
  58 0020 0092     		str	r2, [sp]
  59              		.loc 1 771 3 view .LVU7
  60 0022 009A     		ldr	r2, [sp]
  61              	.LBE4:
  62              		.loc 1 771 3 view .LVU8
 772:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  63              		.loc 1 772 3 view .LVU9
  64              	.LBB5:
  65              		.loc 1 772 3 view .LVU10
  66              		.loc 1 772 3 view .LVU11
  67 0024 9A69     		ldr	r2, [r3, #24]
  68 0026 42F02002 		orr	r2, r2, #32
  69 002a 9A61     		str	r2, [r3, #24]
  70              		.loc 1 772 3 view .LVU12
  71 002c 9A69     		ldr	r2, [r3, #24]
  72 002e 02F02002 		and	r2, r2, #32
  73 0032 0192     		str	r2, [sp, #4]
  74              		.loc 1 772 3 view .LVU13
  75 0034 019A     		ldr	r2, [sp, #4]
  76              	.LBE5:
  77              		.loc 1 772 3 view .LVU14
 773:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  78              		.loc 1 773 3 view .LVU15
  79              	.LBB6:
  80              		.loc 1 773 3 view .LVU16
  81              		.loc 1 773 3 view .LVU17
  82 0036 9A69     		ldr	r2, [r3, #24]
  83 0038 42F00402 		orr	r2, r2, #4
ARM GAS  /tmp/ccw0MSgW.s 			page 16


  84 003c 9A61     		str	r2, [r3, #24]
  85              		.loc 1 773 3 view .LVU18
  86 003e 9A69     		ldr	r2, [r3, #24]
  87 0040 02F00402 		and	r2, r2, #4
  88 0044 0292     		str	r2, [sp, #8]
  89              		.loc 1 773 3 view .LVU19
  90 0046 029A     		ldr	r2, [sp, #8]
  91              	.LBE6:
  92              		.loc 1 773 3 view .LVU20
 774:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  93              		.loc 1 774 3 view .LVU21
  94              	.LBB7:
  95              		.loc 1 774 3 view .LVU22
  96              		.loc 1 774 3 view .LVU23
  97 0048 9A69     		ldr	r2, [r3, #24]
  98 004a 42F00802 		orr	r2, r2, #8
  99 004e 9A61     		str	r2, [r3, #24]
 100              		.loc 1 774 3 view .LVU24
 101 0050 9B69     		ldr	r3, [r3, #24]
 102 0052 03F00803 		and	r3, r3, #8
 103 0056 0393     		str	r3, [sp, #12]
 104              		.loc 1 774 3 view .LVU25
 105 0058 039B     		ldr	r3, [sp, #12]
 106              	.LBE7:
 107              		.loc 1 774 3 view .LVU26
 775:Core/Src/main.c **** 
 776:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 777:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, LED_Pin | WP_Pin | TEMP_Pin | SOC_Pin, GPIO_PIN_RESET);
 108              		.loc 1 777 3 view .LVU27
 109 005a 1F4E     		ldr	r6, .L3+4
 110 005c 2246     		mov	r2, r4
 111 005e 4FF40B51 		mov	r1, #8896
 112 0062 3046     		mov	r0, r6
 113 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL0:
 778:Core/Src/main.c **** 
 779:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 780:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, PS_INIT_Pin | HEAT_OUT_Pin, GPIO_PIN_RESET);
 115              		.loc 1 780 3 view .LVU28
 116 0068 1C4D     		ldr	r5, .L3+8
 117 006a 2246     		mov	r2, r4
 118 006c 4FF44041 		mov	r1, #49152
 119 0070 2846     		mov	r0, r5
 120 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 121              	.LVL1:
 781:Core/Src/main.c **** 
 782:Core/Src/main.c ****   /*Configure GPIO pins : LED_Pin WP_Pin */
 783:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin | WP_Pin;
 122              		.loc 1 783 3 view .LVU29
 123              		.loc 1 783 23 is_stmt 0 view .LVU30
 124 0076 4FF40153 		mov	r3, #8256
 125 007a 0493     		str	r3, [sp, #16]
 784:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 126              		.loc 1 784 3 is_stmt 1 view .LVU31
 127              		.loc 1 784 24 is_stmt 0 view .LVU32
 128 007c 0127     		movs	r7, #1
 129 007e 0597     		str	r7, [sp, #20]
ARM GAS  /tmp/ccw0MSgW.s 			page 17


 785:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 130              		.loc 1 785 3 is_stmt 1 view .LVU33
 131              		.loc 1 785 24 is_stmt 0 view .LVU34
 132 0080 0694     		str	r4, [sp, #24]
 786:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 133              		.loc 1 786 3 is_stmt 1 view .LVU35
 134              		.loc 1 786 25 is_stmt 0 view .LVU36
 135 0082 4FF00208 		mov	r8, #2
 136 0086 CDF81C80 		str	r8, [sp, #28]
 787:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 137              		.loc 1 787 3 is_stmt 1 view .LVU37
 138 008a 04A9     		add	r1, sp, #16
 139 008c 3046     		mov	r0, r6
 140 008e FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL2:
 788:Core/Src/main.c **** 
 789:Core/Src/main.c ****   /*Configure GPIO pins : PS_INIT_Pin HEAT_OUT_Pin */
 790:Core/Src/main.c ****   GPIO_InitStruct.Pin = PS_INIT_Pin | HEAT_OUT_Pin;
 142              		.loc 1 790 3 view .LVU38
 143              		.loc 1 790 23 is_stmt 0 view .LVU39
 144 0092 4FF44043 		mov	r3, #49152
 145 0096 0493     		str	r3, [sp, #16]
 791:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 146              		.loc 1 791 3 is_stmt 1 view .LVU40
 147              		.loc 1 791 24 is_stmt 0 view .LVU41
 148 0098 0597     		str	r7, [sp, #20]
 792:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 149              		.loc 1 792 3 is_stmt 1 view .LVU42
 150              		.loc 1 792 24 is_stmt 0 view .LVU43
 151 009a 0694     		str	r4, [sp, #24]
 793:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 152              		.loc 1 793 3 is_stmt 1 view .LVU44
 153              		.loc 1 793 25 is_stmt 0 view .LVU45
 154 009c CDF81C80 		str	r8, [sp, #28]
 794:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 155              		.loc 1 794 3 is_stmt 1 view .LVU46
 156 00a0 04A9     		add	r1, sp, #16
 157 00a2 2846     		mov	r0, r5
 158 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 159              	.LVL3:
 795:Core/Src/main.c **** 
 796:Core/Src/main.c ****   /*Configure GPIO pins : TEMP_Pin SOC_Pin */
 797:Core/Src/main.c ****   GPIO_InitStruct.Pin = TEMP_Pin | SOC_Pin;
 160              		.loc 1 797 3 view .LVU47
 161              		.loc 1 797 23 is_stmt 0 view .LVU48
 162 00a8 4FF42073 		mov	r3, #640
 163 00ac 0493     		str	r3, [sp, #16]
 798:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 164              		.loc 1 798 3 is_stmt 1 view .LVU49
 165              		.loc 1 798 24 is_stmt 0 view .LVU50
 166 00ae 0597     		str	r7, [sp, #20]
 799:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 167              		.loc 1 799 3 is_stmt 1 view .LVU51
 168              		.loc 1 799 24 is_stmt 0 view .LVU52
 169 00b0 0694     		str	r4, [sp, #24]
 800:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 170              		.loc 1 800 3 is_stmt 1 view .LVU53
ARM GAS  /tmp/ccw0MSgW.s 			page 18


 171              		.loc 1 800 25 is_stmt 0 view .LVU54
 172 00b2 0323     		movs	r3, #3
 173 00b4 0793     		str	r3, [sp, #28]
 801:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 174              		.loc 1 801 3 is_stmt 1 view .LVU55
 175 00b6 04A9     		add	r1, sp, #16
 176 00b8 3046     		mov	r0, r6
 177 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 178              	.LVL4:
 802:Core/Src/main.c **** 
 803:Core/Src/main.c ****   /*Configure GPIO pins : SW12_Pin HEAT_REQ_Pin */
 804:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW12_Pin | HEAT_REQ_Pin;
 179              		.loc 1 804 3 view .LVU56
 180              		.loc 1 804 23 is_stmt 0 view .LVU57
 181 00be 3023     		movs	r3, #48
 182 00c0 0493     		str	r3, [sp, #16]
 805:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 183              		.loc 1 805 3 is_stmt 1 view .LVU58
 184              		.loc 1 805 24 is_stmt 0 view .LVU59
 185 00c2 0594     		str	r4, [sp, #20]
 806:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 186              		.loc 1 806 3 is_stmt 1 view .LVU60
 187              		.loc 1 806 24 is_stmt 0 view .LVU61
 188 00c4 0694     		str	r4, [sp, #24]
 807:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 189              		.loc 1 807 3 is_stmt 1 view .LVU62
 190 00c6 04A9     		add	r1, sp, #16
 191 00c8 2846     		mov	r0, r5
 192 00ca FFF7FEFF 		bl	HAL_GPIO_Init
 193              	.LVL5:
 808:Core/Src/main.c **** }
 194              		.loc 1 808 1 is_stmt 0 view .LVU63
 195 00ce 08B0     		add	sp, sp, #32
 196              		.cfi_def_cfa_offset 24
 197              		@ sp needed
 198 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 199              	.L4:
 200              		.align	2
 201              	.L3:
 202 00d4 00100240 		.word	1073876992
 203 00d8 00100140 		.word	1073811456
 204 00dc 000C0140 		.word	1073810432
 205              		.cfi_endproc
 206              	.LFE85:
 208              		.section	.text.MX_DMA_Init,"ax",%progbits
 209              		.align	1
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu softvfp
 215              	MX_DMA_Init:
 216              	.LFB84:
 740:Core/Src/main.c **** 
 217              		.loc 1 740 1 is_stmt 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 8
 220              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccw0MSgW.s 			page 19


 221 0000 00B5     		push	{lr}
 222              		.cfi_def_cfa_offset 4
 223              		.cfi_offset 14, -4
 224 0002 83B0     		sub	sp, sp, #12
 225              		.cfi_def_cfa_offset 16
 743:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 226              		.loc 1 743 3 view .LVU65
 227              	.LBB8:
 743:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 228              		.loc 1 743 3 view .LVU66
 743:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 229              		.loc 1 743 3 view .LVU67
 230 0004 1A4B     		ldr	r3, .L7
 231 0006 5A69     		ldr	r2, [r3, #20]
 232 0008 42F00202 		orr	r2, r2, #2
 233 000c 5A61     		str	r2, [r3, #20]
 743:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 234              		.loc 1 743 3 view .LVU68
 235 000e 5A69     		ldr	r2, [r3, #20]
 236 0010 02F00202 		and	r2, r2, #2
 237 0014 0092     		str	r2, [sp]
 743:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 238              		.loc 1 743 3 view .LVU69
 239 0016 009A     		ldr	r2, [sp]
 240              	.LBE8:
 743:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 241              		.loc 1 743 3 view .LVU70
 744:Core/Src/main.c **** 
 242              		.loc 1 744 3 view .LVU71
 243              	.LBB9:
 744:Core/Src/main.c **** 
 244              		.loc 1 744 3 view .LVU72
 744:Core/Src/main.c **** 
 245              		.loc 1 744 3 view .LVU73
 246 0018 5A69     		ldr	r2, [r3, #20]
 247 001a 42F00102 		orr	r2, r2, #1
 248 001e 5A61     		str	r2, [r3, #20]
 744:Core/Src/main.c **** 
 249              		.loc 1 744 3 view .LVU74
 250 0020 5B69     		ldr	r3, [r3, #20]
 251 0022 03F00103 		and	r3, r3, #1
 252 0026 0193     		str	r3, [sp, #4]
 744:Core/Src/main.c **** 
 253              		.loc 1 744 3 view .LVU75
 254 0028 019B     		ldr	r3, [sp, #4]
 255              	.LBE9:
 744:Core/Src/main.c **** 
 256              		.loc 1 744 3 view .LVU76
 748:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 257              		.loc 1 748 3 view .LVU77
 258 002a 0022     		movs	r2, #0
 259 002c 1146     		mov	r1, r2
 260 002e 0B20     		movs	r0, #11
 261 0030 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262              	.LVL6:
 749:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 263              		.loc 1 749 3 view .LVU78
ARM GAS  /tmp/ccw0MSgW.s 			page 20


 264 0034 0B20     		movs	r0, #11
 265 0036 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 266              	.LVL7:
 751:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 267              		.loc 1 751 3 view .LVU79
 268 003a 0022     		movs	r2, #0
 269 003c 1146     		mov	r1, r2
 270 003e 0F20     		movs	r0, #15
 271 0040 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 272              	.LVL8:
 752:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 273              		.loc 1 752 3 view .LVU80
 274 0044 0F20     		movs	r0, #15
 275 0046 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 276              	.LVL9:
 754:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 277              		.loc 1 754 3 view .LVU81
 278 004a 0022     		movs	r2, #0
 279 004c 1146     		mov	r1, r2
 280 004e 3B20     		movs	r0, #59
 281 0050 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 282              	.LVL10:
 755:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 283              		.loc 1 755 3 view .LVU82
 284 0054 3B20     		movs	r0, #59
 285 0056 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 286              	.LVL11:
 757:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 287              		.loc 1 757 3 view .LVU83
 288 005a 0022     		movs	r2, #0
 289 005c 1146     		mov	r1, r2
 290 005e 3C20     		movs	r0, #60
 291 0060 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 292              	.LVL12:
 758:Core/Src/main.c **** }
 293              		.loc 1 758 3 view .LVU84
 294 0064 3C20     		movs	r0, #60
 295 0066 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 296              	.LVL13:
 759:Core/Src/main.c **** 
 297              		.loc 1 759 1 is_stmt 0 view .LVU85
 298 006a 03B0     		add	sp, sp, #12
 299              		.cfi_def_cfa_offset 4
 300              		@ sp needed
 301 006c 5DF804FB 		ldr	pc, [sp], #4
 302              	.L8:
 303              		.align	2
 304              	.L7:
 305 0070 00100240 		.word	1073876992
 306              		.cfi_endproc
 307              	.LFE84:
 309              		.section	.text.__io_putchar,"ax",%progbits
 310              		.align	1
 311              		.global	__io_putchar
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
ARM GAS  /tmp/ccw0MSgW.s 			page 21


 315              		.fpu softvfp
 317              	__io_putchar:
 318              	.LVL14:
 319              	.LFB68:
 320              		.file 2 "Core/Inc/print_uart.h"
   1:Core/Inc/print_uart.h **** #ifndef __PRINT_UART_H
   2:Core/Inc/print_uart.h **** #define __PRINT_UART_H
   3:Core/Inc/print_uart.h **** 
   4:Core/Inc/print_uart.h **** 
   5:Core/Inc/print_uart.h **** #include <stdio.h>
   6:Core/Inc/print_uart.h **** #include "stm32f1xx_hal.h"
   7:Core/Inc/print_uart.h **** 
   8:Core/Inc/print_uart.h **** UART_HandleTypeDef huart1;
   9:Core/Inc/print_uart.h **** 
  10:Core/Inc/print_uart.h **** //////////////////////////// Begin UART Magic ////////////////////////
  11:Core/Inc/print_uart.h **** int __io_putchar(int ch)
  12:Core/Inc/print_uart.h **** {
 321              		.loc 2 12 1 is_stmt 1 view -0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 8
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		.loc 2 12 1 is_stmt 0 view .LVU87
 326 0000 10B5     		push	{r4, lr}
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 4, -8
 329              		.cfi_offset 14, -4
 330 0002 82B0     		sub	sp, sp, #8
 331              		.cfi_def_cfa_offset 16
 332 0004 0446     		mov	r4, r0
  13:Core/Inc/print_uart.h ****  uint8_t c[1];
 333              		.loc 2 13 2 is_stmt 1 view .LVU88
  14:Core/Inc/print_uart.h ****  c[0] = ch & 0x00FF;
 334              		.loc 2 14 2 view .LVU89
 335              		.loc 2 14 7 is_stmt 0 view .LVU90
 336 0006 8DF80400 		strb	r0, [sp, #4]
  15:Core/Inc/print_uart.h ****  HAL_UART_Transmit(&huart1, &*c, 1, 10);
 337              		.loc 2 15 2 is_stmt 1 view .LVU91
 338 000a 0A23     		movs	r3, #10
 339 000c 0122     		movs	r2, #1
 340 000e 01A9     		add	r1, sp, #4
 341 0010 0248     		ldr	r0, .L11
 342              	.LVL15:
 343              		.loc 2 15 2 is_stmt 0 view .LVU92
 344 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 345              	.LVL16:
  16:Core/Inc/print_uart.h ****  return ch;
 346              		.loc 2 16 2 is_stmt 1 view .LVU93
  17:Core/Inc/print_uart.h **** }
 347              		.loc 2 17 1 is_stmt 0 view .LVU94
 348 0016 2046     		mov	r0, r4
 349 0018 02B0     		add	sp, sp, #8
 350              		.cfi_def_cfa_offset 8
 351              		@ sp needed
 352 001a 10BD     		pop	{r4, pc}
 353              	.LVL17:
 354              	.L12:
 355              		.loc 2 17 1 view .LVU95
ARM GAS  /tmp/ccw0MSgW.s 			page 22


 356              		.align	2
 357              	.L11:
 358 001c 00000000 		.word	huart1
 359              		.cfi_endproc
 360              	.LFE68:
 362              		.section	.text._write,"ax",%progbits
 363              		.align	1
 364              		.global	_write
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 368              		.fpu softvfp
 370              	_write:
 371              	.LVL18:
 372              	.LFB69:
  18:Core/Inc/print_uart.h **** 
  19:Core/Inc/print_uart.h **** int _write(int file,char *ptr, int len)
  20:Core/Inc/print_uart.h **** {
 373              		.loc 2 20 1 is_stmt 1 view -0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              		.loc 2 20 1 is_stmt 0 view .LVU97
 378 0000 70B5     		push	{r4, r5, r6, lr}
 379              		.cfi_def_cfa_offset 16
 380              		.cfi_offset 4, -16
 381              		.cfi_offset 5, -12
 382              		.cfi_offset 6, -8
 383              		.cfi_offset 14, -4
 384 0002 0C46     		mov	r4, r1
 385 0004 1646     		mov	r6, r2
  21:Core/Inc/print_uart.h ****  int DataIdx;
 386              		.loc 2 21 2 is_stmt 1 view .LVU98
  22:Core/Inc/print_uart.h ****  for(DataIdx= 0; DataIdx< len; DataIdx++)
 387              		.loc 2 22 2 view .LVU99
 388              	.LVL19:
 389              		.loc 2 22 13 is_stmt 0 view .LVU100
 390 0006 0025     		movs	r5, #0
 391              	.LVL20:
 392              	.L14:
 393              		.loc 2 22 18 is_stmt 1 discriminator 1 view .LVU101
 394              		.loc 2 22 2 is_stmt 0 discriminator 1 view .LVU102
 395 0008 B542     		cmp	r5, r6
 396 000a 05DA     		bge	.L17
  23:Core/Inc/print_uart.h ****  {
  24:Core/Inc/print_uart.h ****  __io_putchar(*ptr++);
 397              		.loc 2 24 2 is_stmt 1 discriminator 3 view .LVU103
 398              	.LVL21:
 399              		.loc 2 24 2 is_stmt 0 discriminator 3 view .LVU104
 400 000c 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 401              	.LVL22:
 402              		.loc 2 24 2 discriminator 3 view .LVU105
 403 0010 FFF7FEFF 		bl	__io_putchar
 404              	.LVL23:
  22:Core/Inc/print_uart.h ****  for(DataIdx= 0; DataIdx< len; DataIdx++)
 405              		.loc 2 22 32 is_stmt 1 discriminator 3 view .LVU106
  22:Core/Inc/print_uart.h ****  for(DataIdx= 0; DataIdx< len; DataIdx++)
ARM GAS  /tmp/ccw0MSgW.s 			page 23


 406              		.loc 2 22 39 is_stmt 0 discriminator 3 view .LVU107
 407 0014 0135     		adds	r5, r5, #1
 408              	.LVL24:
  22:Core/Inc/print_uart.h ****  for(DataIdx= 0; DataIdx< len; DataIdx++)
 409              		.loc 2 22 39 discriminator 3 view .LVU108
 410 0016 F7E7     		b	.L14
 411              	.L17:
  25:Core/Inc/print_uart.h ****  }
  26:Core/Inc/print_uart.h **** return len;
 412              		.loc 2 26 1 is_stmt 1 view .LVU109
  27:Core/Inc/print_uart.h **** }
 413              		.loc 2 27 1 is_stmt 0 view .LVU110
 414 0018 3046     		mov	r0, r6
 415 001a 70BD     		pop	{r4, r5, r6, pc}
 416              		.loc 2 27 1 view .LVU111
 417              		.cfi_endproc
 418              	.LFE69:
 420              		.section	.text.Error_Handler,"ax",%progbits
 421              		.align	1
 422              		.global	Error_Handler
 423              		.syntax unified
 424              		.thumb
 425              		.thumb_func
 426              		.fpu softvfp
 428              	Error_Handler:
 429              	.LFB86:
 809:Core/Src/main.c **** 
 810:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 811:Core/Src/main.c **** // Callback: timer has rolled over
 812:Core/Src/main.c **** 
 813:Core/Src/main.c **** 
 814:Core/Src/main.c **** /* USER CODE END 4 */
 815:Core/Src/main.c **** 
 816:Core/Src/main.c **** /**
 817:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 818:Core/Src/main.c ****  * @retval None
 819:Core/Src/main.c ****  */
 820:Core/Src/main.c **** void Error_Handler(void)
 821:Core/Src/main.c **** {
 430              		.loc 1 821 1 is_stmt 1 view -0
 431              		.cfi_startproc
 432              		@ Volatile: function does not return.
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 822:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 823:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 824:Core/Src/main.c ****   __disable_irq();
 436              		.loc 1 824 3 view .LVU113
 437              	.LBB10:
 438              	.LBI10:
 439              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
ARM GAS  /tmp/ccw0MSgW.s 			page 24


   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
ARM GAS  /tmp/ccw0MSgW.s 			page 25


  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
ARM GAS  /tmp/ccw0MSgW.s 			page 26


 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 440              		.loc 3 140 27 view .LVU114
 441              	.LBB11:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 442              		.loc 3 142 3 view .LVU115
 443              		.syntax unified
 444              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 445 0000 72B6     		cpsid i
 446              	@ 0 "" 2
 447              		.thumb
 448              		.syntax unified
 449              	.L19:
 450              	.LBE11:
 451              	.LBE10:
 825:Core/Src/main.c ****   while (1)
 452              		.loc 1 825 3 discriminator 1 view .LVU116
 826:Core/Src/main.c ****   {
 827:Core/Src/main.c ****   }
 453              		.loc 1 827 3 discriminator 1 view .LVU117
 825:Core/Src/main.c ****   while (1)
 454              		.loc 1 825 9 discriminator 1 view .LVU118
 455 0002 FEE7     		b	.L19
 456              		.cfi_endproc
 457              	.LFE86:
 459              		.section	.text.MX_CAN2_Init,"ax",%progbits
 460              		.align	1
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu softvfp
 466              	MX_CAN2_Init:
 467              	.LFB74:
 338:Core/Src/main.c **** 
 468              		.loc 1 338 1 view -0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccw0MSgW.s 			page 27


 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472 0000 08B5     		push	{r3, lr}
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 3, -8
 475              		.cfi_offset 14, -4
 347:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 476              		.loc 1 347 3 view .LVU120
 347:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 477              		.loc 1 347 18 is_stmt 0 view .LVU121
 478 0002 0D48     		ldr	r0, .L24
 479 0004 0D4B     		ldr	r3, .L24+4
 480 0006 0360     		str	r3, [r0]
 348:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 481              		.loc 1 348 3 is_stmt 1 view .LVU122
 348:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 482              		.loc 1 348 24 is_stmt 0 view .LVU123
 483 0008 0C23     		movs	r3, #12
 484 000a 4360     		str	r3, [r0, #4]
 349:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 485              		.loc 1 349 3 is_stmt 1 view .LVU124
 349:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 486              		.loc 1 349 19 is_stmt 0 view .LVU125
 487 000c 0023     		movs	r3, #0
 488 000e 8360     		str	r3, [r0, #8]
 350:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 489              		.loc 1 350 3 is_stmt 1 view .LVU126
 350:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 490              		.loc 1 350 28 is_stmt 0 view .LVU127
 491 0010 C360     		str	r3, [r0, #12]
 351:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 492              		.loc 1 351 3 is_stmt 1 view .LVU128
 351:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 493              		.loc 1 351 23 is_stmt 0 view .LVU129
 494 0012 4FF48032 		mov	r2, #65536
 495 0016 0261     		str	r2, [r0, #16]
 352:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 496              		.loc 1 352 3 is_stmt 1 view .LVU130
 352:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 497              		.loc 1 352 23 is_stmt 0 view .LVU131
 498 0018 4FF40012 		mov	r2, #2097152
 499 001c 4261     		str	r2, [r0, #20]
 353:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 500              		.loc 1 353 3 is_stmt 1 view .LVU132
 353:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 501              		.loc 1 353 32 is_stmt 0 view .LVU133
 502 001e 0376     		strb	r3, [r0, #24]
 354:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 503              		.loc 1 354 3 is_stmt 1 view .LVU134
 354:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 504              		.loc 1 354 25 is_stmt 0 view .LVU135
 505 0020 4376     		strb	r3, [r0, #25]
 355:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 506              		.loc 1 355 3 is_stmt 1 view .LVU136
 355:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 507              		.loc 1 355 25 is_stmt 0 view .LVU137
 508 0022 8376     		strb	r3, [r0, #26]
 356:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
ARM GAS  /tmp/ccw0MSgW.s 			page 28


 509              		.loc 1 356 3 is_stmt 1 view .LVU138
 356:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 510              		.loc 1 356 33 is_stmt 0 view .LVU139
 511 0024 C376     		strb	r3, [r0, #27]
 357:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 512              		.loc 1 357 3 is_stmt 1 view .LVU140
 357:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 513              		.loc 1 357 32 is_stmt 0 view .LVU141
 514 0026 0377     		strb	r3, [r0, #28]
 358:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 515              		.loc 1 358 3 is_stmt 1 view .LVU142
 358:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 516              		.loc 1 358 35 is_stmt 0 view .LVU143
 517 0028 4377     		strb	r3, [r0, #29]
 359:Core/Src/main.c ****   {
 518              		.loc 1 359 3 is_stmt 1 view .LVU144
 359:Core/Src/main.c ****   {
 519              		.loc 1 359 7 is_stmt 0 view .LVU145
 520 002a FFF7FEFF 		bl	HAL_CAN_Init
 521              	.LVL25:
 359:Core/Src/main.c ****   {
 522              		.loc 1 359 6 view .LVU146
 523 002e 00B9     		cbnz	r0, .L23
 366:Core/Src/main.c **** 
 524              		.loc 1 366 1 view .LVU147
 525 0030 08BD     		pop	{r3, pc}
 526              	.L23:
 361:Core/Src/main.c ****   }
 527              		.loc 1 361 5 is_stmt 1 view .LVU148
 528 0032 FFF7FEFF 		bl	Error_Handler
 529              	.LVL26:
 530              	.L25:
 531 0036 00BF     		.align	2
 532              	.L24:
 533 0038 00000000 		.word	hcan2
 534 003c 00680040 		.word	1073768448
 535              		.cfi_endproc
 536              	.LFE74:
 538              		.section	.text.MX_ADC1_Init,"ax",%progbits
 539              		.align	1
 540              		.syntax unified
 541              		.thumb
 542              		.thumb_func
 543              		.fpu softvfp
 545              	MX_ADC1_Init:
 546              	.LFB72:
 241:Core/Src/main.c **** 
 547              		.loc 1 241 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 16
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 00B5     		push	{lr}
 552              		.cfi_def_cfa_offset 4
 553              		.cfi_offset 14, -4
 554 0002 85B0     		sub	sp, sp, #20
 555              		.cfi_def_cfa_offset 24
 247:Core/Src/main.c **** 
ARM GAS  /tmp/ccw0MSgW.s 			page 29


 556              		.loc 1 247 3 view .LVU150
 247:Core/Src/main.c **** 
 557              		.loc 1 247 26 is_stmt 0 view .LVU151
 558 0004 0023     		movs	r3, #0
 559 0006 0193     		str	r3, [sp, #4]
 560 0008 0293     		str	r3, [sp, #8]
 561 000a 0393     		str	r3, [sp, #12]
 254:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 562              		.loc 1 254 3 is_stmt 1 view .LVU152
 254:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 563              		.loc 1 254 18 is_stmt 0 view .LVU153
 564 000c 1E48     		ldr	r0, .L36
 565 000e 1F4A     		ldr	r2, .L36+4
 566 0010 0260     		str	r2, [r0]
 255:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 567              		.loc 1 255 3 is_stmt 1 view .LVU154
 255:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 568              		.loc 1 255 27 is_stmt 0 view .LVU155
 569 0012 4FF48072 		mov	r2, #256
 570 0016 8260     		str	r2, [r0, #8]
 256:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 571              		.loc 1 256 3 is_stmt 1 view .LVU156
 256:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 572              		.loc 1 256 33 is_stmt 0 view .LVU157
 573 0018 0122     		movs	r2, #1
 574 001a 0273     		strb	r2, [r0, #12]
 257:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 575              		.loc 1 257 3 is_stmt 1 view .LVU158
 257:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 576              		.loc 1 257 36 is_stmt 0 view .LVU159
 577 001c 0375     		strb	r3, [r0, #20]
 258:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 578              		.loc 1 258 3 is_stmt 1 view .LVU160
 258:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 579              		.loc 1 258 31 is_stmt 0 view .LVU161
 580 001e 4FF46022 		mov	r2, #917504
 581 0022 C261     		str	r2, [r0, #28]
 259:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 582              		.loc 1 259 3 is_stmt 1 view .LVU162
 259:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 583              		.loc 1 259 24 is_stmt 0 view .LVU163
 584 0024 4360     		str	r3, [r0, #4]
 260:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 585              		.loc 1 260 3 is_stmt 1 view .LVU164
 260:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 586              		.loc 1 260 30 is_stmt 0 view .LVU165
 587 0026 0323     		movs	r3, #3
 588 0028 0361     		str	r3, [r0, #16]
 261:Core/Src/main.c ****   {
 589              		.loc 1 261 3 is_stmt 1 view .LVU166
 261:Core/Src/main.c ****   {
 590              		.loc 1 261 7 is_stmt 0 view .LVU167
 591 002a FFF7FEFF 		bl	HAL_ADC_Init
 592              	.LVL27:
 261:Core/Src/main.c ****   {
 593              		.loc 1 261 6 view .LVU168
 594 002e 10BB     		cbnz	r0, .L32
ARM GAS  /tmp/ccw0MSgW.s 			page 30


 267:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 595              		.loc 1 267 3 is_stmt 1 view .LVU169
 267:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 596              		.loc 1 267 19 is_stmt 0 view .LVU170
 597 0030 0B23     		movs	r3, #11
 598 0032 0193     		str	r3, [sp, #4]
 268:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 599              		.loc 1 268 3 is_stmt 1 view .LVU171
 268:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 600              		.loc 1 268 16 is_stmt 0 view .LVU172
 601 0034 0123     		movs	r3, #1
 602 0036 0293     		str	r3, [sp, #8]
 269:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 603              		.loc 1 269 3 is_stmt 1 view .LVU173
 269:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 604              		.loc 1 269 24 is_stmt 0 view .LVU174
 605 0038 0723     		movs	r3, #7
 606 003a 0393     		str	r3, [sp, #12]
 270:Core/Src/main.c ****   {
 607              		.loc 1 270 3 is_stmt 1 view .LVU175
 270:Core/Src/main.c ****   {
 608              		.loc 1 270 7 is_stmt 0 view .LVU176
 609 003c 01A9     		add	r1, sp, #4
 610 003e 1248     		ldr	r0, .L36
 611 0040 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 612              	.LVL28:
 270:Core/Src/main.c ****   {
 613              		.loc 1 270 6 view .LVU177
 614 0044 C8B9     		cbnz	r0, .L33
 276:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 615              		.loc 1 276 3 is_stmt 1 view .LVU178
 276:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 616              		.loc 1 276 19 is_stmt 0 view .LVU179
 617 0046 0523     		movs	r3, #5
 618 0048 0193     		str	r3, [sp, #4]
 277:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 619              		.loc 1 277 3 is_stmt 1 view .LVU180
 277:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 620              		.loc 1 277 16 is_stmt 0 view .LVU181
 621 004a 0223     		movs	r3, #2
 622 004c 0293     		str	r3, [sp, #8]
 278:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 623              		.loc 1 278 3 is_stmt 1 view .LVU182
 278:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 624              		.loc 1 278 24 is_stmt 0 view .LVU183
 625 004e 0423     		movs	r3, #4
 626 0050 0393     		str	r3, [sp, #12]
 279:Core/Src/main.c ****   {
 627              		.loc 1 279 3 is_stmt 1 view .LVU184
 279:Core/Src/main.c ****   {
 628              		.loc 1 279 7 is_stmt 0 view .LVU185
 629 0052 0DEB0301 		add	r1, sp, r3
 630 0056 0C48     		ldr	r0, .L36
 631 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 632              	.LVL29:
 279:Core/Src/main.c ****   {
 633              		.loc 1 279 6 view .LVU186
ARM GAS  /tmp/ccw0MSgW.s 			page 31


 634 005c 78B9     		cbnz	r0, .L34
 285:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 635              		.loc 1 285 3 is_stmt 1 view .LVU187
 285:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 636              		.loc 1 285 19 is_stmt 0 view .LVU188
 637 005e 0623     		movs	r3, #6
 638 0060 0193     		str	r3, [sp, #4]
 286:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 639              		.loc 1 286 3 is_stmt 1 view .LVU189
 286:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 640              		.loc 1 286 16 is_stmt 0 view .LVU190
 641 0062 0323     		movs	r3, #3
 642 0064 0293     		str	r3, [sp, #8]
 287:Core/Src/main.c ****   {
 643              		.loc 1 287 3 is_stmt 1 view .LVU191
 287:Core/Src/main.c ****   {
 644              		.loc 1 287 7 is_stmt 0 view .LVU192
 645 0066 01A9     		add	r1, sp, #4
 646 0068 0748     		ldr	r0, .L36
 647 006a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 648              	.LVL30:
 287:Core/Src/main.c ****   {
 649              		.loc 1 287 6 view .LVU193
 650 006e 40B9     		cbnz	r0, .L35
 294:Core/Src/main.c **** 
 651              		.loc 1 294 1 view .LVU194
 652 0070 05B0     		add	sp, sp, #20
 653              		.cfi_remember_state
 654              		.cfi_def_cfa_offset 4
 655              		@ sp needed
 656 0072 5DF804FB 		ldr	pc, [sp], #4
 657              	.L32:
 658              		.cfi_restore_state
 263:Core/Src/main.c ****   }
 659              		.loc 1 263 5 is_stmt 1 view .LVU195
 660 0076 FFF7FEFF 		bl	Error_Handler
 661              	.LVL31:
 662              	.L33:
 272:Core/Src/main.c ****   }
 663              		.loc 1 272 5 view .LVU196
 664 007a FFF7FEFF 		bl	Error_Handler
 665              	.LVL32:
 666              	.L34:
 281:Core/Src/main.c ****   }
 667              		.loc 1 281 5 view .LVU197
 668 007e FFF7FEFF 		bl	Error_Handler
 669              	.LVL33:
 670              	.L35:
 289:Core/Src/main.c ****   }
 671              		.loc 1 289 5 view .LVU198
 672 0082 FFF7FEFF 		bl	Error_Handler
 673              	.LVL34:
 674              	.L37:
 675 0086 00BF     		.align	2
 676              	.L36:
 677 0088 00000000 		.word	hadc1
 678 008c 00240140 		.word	1073816576
ARM GAS  /tmp/ccw0MSgW.s 			page 32


 679              		.cfi_endproc
 680              	.LFE72:
 682              		.section	.text.MX_CAN1_Init,"ax",%progbits
 683              		.align	1
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 687              		.fpu softvfp
 689              	MX_CAN1_Init:
 690              	.LFB73:
 302:Core/Src/main.c **** 
 691              		.loc 1 302 1 view -0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695 0000 08B5     		push	{r3, lr}
 696              		.cfi_def_cfa_offset 8
 697              		.cfi_offset 3, -8
 698              		.cfi_offset 14, -4
 311:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 699              		.loc 1 311 3 view .LVU200
 311:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 700              		.loc 1 311 18 is_stmt 0 view .LVU201
 701 0002 0D48     		ldr	r0, .L42
 702 0004 0D4B     		ldr	r3, .L42+4
 703 0006 0360     		str	r3, [r0]
 312:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 704              		.loc 1 312 3 is_stmt 1 view .LVU202
 312:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 705              		.loc 1 312 24 is_stmt 0 view .LVU203
 706 0008 0C23     		movs	r3, #12
 707 000a 4360     		str	r3, [r0, #4]
 313:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 708              		.loc 1 313 3 is_stmt 1 view .LVU204
 313:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 709              		.loc 1 313 19 is_stmt 0 view .LVU205
 710 000c 0023     		movs	r3, #0
 711 000e 8360     		str	r3, [r0, #8]
 314:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 712              		.loc 1 314 3 is_stmt 1 view .LVU206
 314:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 713              		.loc 1 314 28 is_stmt 0 view .LVU207
 714 0010 C360     		str	r3, [r0, #12]
 315:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 715              		.loc 1 315 3 is_stmt 1 view .LVU208
 315:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 716              		.loc 1 315 23 is_stmt 0 view .LVU209
 717 0012 4FF48032 		mov	r2, #65536
 718 0016 0261     		str	r2, [r0, #16]
 316:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 719              		.loc 1 316 3 is_stmt 1 view .LVU210
 316:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 720              		.loc 1 316 23 is_stmt 0 view .LVU211
 721 0018 4FF40012 		mov	r2, #2097152
 722 001c 4261     		str	r2, [r0, #20]
 317:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 723              		.loc 1 317 3 is_stmt 1 view .LVU212
ARM GAS  /tmp/ccw0MSgW.s 			page 33


 317:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 724              		.loc 1 317 32 is_stmt 0 view .LVU213
 725 001e 0376     		strb	r3, [r0, #24]
 318:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 726              		.loc 1 318 3 is_stmt 1 view .LVU214
 318:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 727              		.loc 1 318 25 is_stmt 0 view .LVU215
 728 0020 4376     		strb	r3, [r0, #25]
 319:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 729              		.loc 1 319 3 is_stmt 1 view .LVU216
 319:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 730              		.loc 1 319 25 is_stmt 0 view .LVU217
 731 0022 8376     		strb	r3, [r0, #26]
 320:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 732              		.loc 1 320 3 is_stmt 1 view .LVU218
 320:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 733              		.loc 1 320 33 is_stmt 0 view .LVU219
 734 0024 C376     		strb	r3, [r0, #27]
 321:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 735              		.loc 1 321 3 is_stmt 1 view .LVU220
 321:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 736              		.loc 1 321 32 is_stmt 0 view .LVU221
 737 0026 0377     		strb	r3, [r0, #28]
 322:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 738              		.loc 1 322 3 is_stmt 1 view .LVU222
 322:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 739              		.loc 1 322 35 is_stmt 0 view .LVU223
 740 0028 4377     		strb	r3, [r0, #29]
 323:Core/Src/main.c ****   {
 741              		.loc 1 323 3 is_stmt 1 view .LVU224
 323:Core/Src/main.c ****   {
 742              		.loc 1 323 7 is_stmt 0 view .LVU225
 743 002a FFF7FEFF 		bl	HAL_CAN_Init
 744              	.LVL35:
 323:Core/Src/main.c ****   {
 745              		.loc 1 323 6 view .LVU226
 746 002e 00B9     		cbnz	r0, .L41
 330:Core/Src/main.c **** 
 747              		.loc 1 330 1 view .LVU227
 748 0030 08BD     		pop	{r3, pc}
 749              	.L41:
 325:Core/Src/main.c ****   }
 750              		.loc 1 325 5 is_stmt 1 view .LVU228
 751 0032 FFF7FEFF 		bl	Error_Handler
 752              	.LVL36:
 753              	.L43:
 754 0036 00BF     		.align	2
 755              	.L42:
 756 0038 00000000 		.word	hcan1
 757 003c 00640040 		.word	1073767424
 758              		.cfi_endproc
 759              	.LFE73:
 761              		.section	.text.MX_UART4_Init,"ax",%progbits
 762              		.align	1
 763              		.syntax unified
 764              		.thumb
 765              		.thumb_func
ARM GAS  /tmp/ccw0MSgW.s 			page 34


 766              		.fpu softvfp
 768              	MX_UART4_Init:
 769              	.LFB82:
 678:Core/Src/main.c **** 
 770              		.loc 1 678 1 view -0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774 0000 08B5     		push	{r3, lr}
 775              		.cfi_def_cfa_offset 8
 776              		.cfi_offset 3, -8
 777              		.cfi_offset 14, -4
 687:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 778              		.loc 1 687 3 view .LVU230
 687:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 779              		.loc 1 687 19 is_stmt 0 view .LVU231
 780 0002 0A48     		ldr	r0, .L48
 781 0004 0A4B     		ldr	r3, .L48+4
 782 0006 0360     		str	r3, [r0]
 688:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 783              		.loc 1 688 3 is_stmt 1 view .LVU232
 688:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 784              		.loc 1 688 24 is_stmt 0 view .LVU233
 785 0008 4FF4E133 		mov	r3, #115200
 786 000c 4360     		str	r3, [r0, #4]
 689:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 787              		.loc 1 689 3 is_stmt 1 view .LVU234
 689:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 788              		.loc 1 689 26 is_stmt 0 view .LVU235
 789 000e 0023     		movs	r3, #0
 790 0010 8360     		str	r3, [r0, #8]
 690:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 791              		.loc 1 690 3 is_stmt 1 view .LVU236
 690:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 792              		.loc 1 690 24 is_stmt 0 view .LVU237
 793 0012 C360     		str	r3, [r0, #12]
 691:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 794              		.loc 1 691 3 is_stmt 1 view .LVU238
 691:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 795              		.loc 1 691 22 is_stmt 0 view .LVU239
 796 0014 0361     		str	r3, [r0, #16]
 692:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 797              		.loc 1 692 3 is_stmt 1 view .LVU240
 692:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 798              		.loc 1 692 20 is_stmt 0 view .LVU241
 799 0016 0C22     		movs	r2, #12
 800 0018 4261     		str	r2, [r0, #20]
 693:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 801              		.loc 1 693 3 is_stmt 1 view .LVU242
 693:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802              		.loc 1 693 25 is_stmt 0 view .LVU243
 803 001a 8361     		str	r3, [r0, #24]
 694:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 804              		.loc 1 694 3 is_stmt 1 view .LVU244
 694:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 805              		.loc 1 694 28 is_stmt 0 view .LVU245
 806 001c C361     		str	r3, [r0, #28]
ARM GAS  /tmp/ccw0MSgW.s 			page 35


 695:Core/Src/main.c ****   {
 807              		.loc 1 695 3 is_stmt 1 view .LVU246
 695:Core/Src/main.c ****   {
 808              		.loc 1 695 7 is_stmt 0 view .LVU247
 809 001e FFF7FEFF 		bl	HAL_UART_Init
 810              	.LVL37:
 695:Core/Src/main.c ****   {
 811              		.loc 1 695 6 view .LVU248
 812 0022 00B9     		cbnz	r0, .L47
 702:Core/Src/main.c **** 
 813              		.loc 1 702 1 view .LVU249
 814 0024 08BD     		pop	{r3, pc}
 815              	.L47:
 697:Core/Src/main.c ****   }
 816              		.loc 1 697 5 is_stmt 1 view .LVU250
 817 0026 FFF7FEFF 		bl	Error_Handler
 818              	.LVL38:
 819              	.L49:
 820 002a 00BF     		.align	2
 821              	.L48:
 822 002c 00000000 		.word	huart4
 823 0030 004C0040 		.word	1073761280
 824              		.cfi_endproc
 825              	.LFE82:
 827              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 828              		.align	1
 829              		.syntax unified
 830              		.thumb
 831              		.thumb_func
 832              		.fpu softvfp
 834              	MX_USART1_UART_Init:
 835              	.LFB83:
 710:Core/Src/main.c **** 
 836              		.loc 1 710 1 view -0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 0
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840 0000 08B5     		push	{r3, lr}
 841              		.cfi_def_cfa_offset 8
 842              		.cfi_offset 3, -8
 843              		.cfi_offset 14, -4
 719:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 844              		.loc 1 719 3 view .LVU252
 719:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 845              		.loc 1 719 19 is_stmt 0 view .LVU253
 846 0002 0A48     		ldr	r0, .L54
 847 0004 0A4B     		ldr	r3, .L54+4
 848 0006 0360     		str	r3, [r0]
 720:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 849              		.loc 1 720 3 is_stmt 1 view .LVU254
 720:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 850              		.loc 1 720 24 is_stmt 0 view .LVU255
 851 0008 4FF4E133 		mov	r3, #115200
 852 000c 4360     		str	r3, [r0, #4]
 721:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 853              		.loc 1 721 3 is_stmt 1 view .LVU256
 721:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
ARM GAS  /tmp/ccw0MSgW.s 			page 36


 854              		.loc 1 721 26 is_stmt 0 view .LVU257
 855 000e 0023     		movs	r3, #0
 856 0010 8360     		str	r3, [r0, #8]
 722:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 857              		.loc 1 722 3 is_stmt 1 view .LVU258
 722:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 858              		.loc 1 722 24 is_stmt 0 view .LVU259
 859 0012 C360     		str	r3, [r0, #12]
 723:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 860              		.loc 1 723 3 is_stmt 1 view .LVU260
 723:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 861              		.loc 1 723 22 is_stmt 0 view .LVU261
 862 0014 0361     		str	r3, [r0, #16]
 724:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 863              		.loc 1 724 3 is_stmt 1 view .LVU262
 724:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 864              		.loc 1 724 20 is_stmt 0 view .LVU263
 865 0016 0C22     		movs	r2, #12
 866 0018 4261     		str	r2, [r0, #20]
 725:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 867              		.loc 1 725 3 is_stmt 1 view .LVU264
 725:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 868              		.loc 1 725 25 is_stmt 0 view .LVU265
 869 001a 8361     		str	r3, [r0, #24]
 726:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 870              		.loc 1 726 3 is_stmt 1 view .LVU266
 726:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 871              		.loc 1 726 28 is_stmt 0 view .LVU267
 872 001c C361     		str	r3, [r0, #28]
 727:Core/Src/main.c ****   {
 873              		.loc 1 727 3 is_stmt 1 view .LVU268
 727:Core/Src/main.c ****   {
 874              		.loc 1 727 7 is_stmt 0 view .LVU269
 875 001e FFF7FEFF 		bl	HAL_UART_Init
 876              	.LVL39:
 727:Core/Src/main.c ****   {
 877              		.loc 1 727 6 view .LVU270
 878 0022 00B9     		cbnz	r0, .L53
 734:Core/Src/main.c **** 
 879              		.loc 1 734 1 view .LVU271
 880 0024 08BD     		pop	{r3, pc}
 881              	.L53:
 729:Core/Src/main.c ****   }
 882              		.loc 1 729 5 is_stmt 1 view .LVU272
 883 0026 FFF7FEFF 		bl	Error_Handler
 884              	.LVL40:
 885              	.L55:
 886 002a 00BF     		.align	2
 887              	.L54:
 888 002c 00000000 		.word	huart1
 889 0030 00380140 		.word	1073821696
 890              		.cfi_endproc
 891              	.LFE83:
 893              		.section	.text.MX_TIM3_Init,"ax",%progbits
 894              		.align	1
 895              		.syntax unified
 896              		.thumb
ARM GAS  /tmp/ccw0MSgW.s 			page 37


 897              		.thumb_func
 898              		.fpu softvfp
 900              	MX_TIM3_Init:
 901              	.LFB79:
 532:Core/Src/main.c **** 
 902              		.loc 1 532 1 view -0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 56
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906 0000 00B5     		push	{lr}
 907              		.cfi_def_cfa_offset 4
 908              		.cfi_offset 14, -4
 909 0002 8FB0     		sub	sp, sp, #60
 910              		.cfi_def_cfa_offset 64
 538:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 911              		.loc 1 538 3 view .LVU274
 538:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 912              		.loc 1 538 26 is_stmt 0 view .LVU275
 913 0004 0023     		movs	r3, #0
 914 0006 0A93     		str	r3, [sp, #40]
 915 0008 0B93     		str	r3, [sp, #44]
 916 000a 0C93     		str	r3, [sp, #48]
 917 000c 0D93     		str	r3, [sp, #52]
 539:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 918              		.loc 1 539 3 is_stmt 1 view .LVU276
 539:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 919              		.loc 1 539 27 is_stmt 0 view .LVU277
 920 000e 0893     		str	r3, [sp, #32]
 921 0010 0993     		str	r3, [sp, #36]
 540:Core/Src/main.c **** 
 922              		.loc 1 540 3 is_stmt 1 view .LVU278
 540:Core/Src/main.c **** 
 923              		.loc 1 540 22 is_stmt 0 view .LVU279
 924 0012 0193     		str	r3, [sp, #4]
 925 0014 0293     		str	r3, [sp, #8]
 926 0016 0393     		str	r3, [sp, #12]
 927 0018 0493     		str	r3, [sp, #16]
 928 001a 0593     		str	r3, [sp, #20]
 929 001c 0693     		str	r3, [sp, #24]
 930 001e 0793     		str	r3, [sp, #28]
 545:Core/Src/main.c ****   htim3.Init.Prescaler = 120;
 931              		.loc 1 545 3 is_stmt 1 view .LVU280
 545:Core/Src/main.c ****   htim3.Init.Prescaler = 120;
 932              		.loc 1 545 18 is_stmt 0 view .LVU281
 933 0020 1E48     		ldr	r0, .L68
 934 0022 1F4A     		ldr	r2, .L68+4
 935 0024 0260     		str	r2, [r0]
 546:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 936              		.loc 1 546 3 is_stmt 1 view .LVU282
 546:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 937              		.loc 1 546 24 is_stmt 0 view .LVU283
 938 0026 7822     		movs	r2, #120
 939 0028 4260     		str	r2, [r0, #4]
 547:Core/Src/main.c ****   htim3.Init.Period = 600;
 940              		.loc 1 547 3 is_stmt 1 view .LVU284
 547:Core/Src/main.c ****   htim3.Init.Period = 600;
 941              		.loc 1 547 26 is_stmt 0 view .LVU285
ARM GAS  /tmp/ccw0MSgW.s 			page 38


 942 002a 8360     		str	r3, [r0, #8]
 548:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 943              		.loc 1 548 3 is_stmt 1 view .LVU286
 548:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 944              		.loc 1 548 21 is_stmt 0 view .LVU287
 945 002c 4FF41672 		mov	r2, #600
 946 0030 C260     		str	r2, [r0, #12]
 549:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 947              		.loc 1 549 3 is_stmt 1 view .LVU288
 549:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 948              		.loc 1 549 28 is_stmt 0 view .LVU289
 949 0032 0361     		str	r3, [r0, #16]
 550:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 950              		.loc 1 550 3 is_stmt 1 view .LVU290
 550:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 951              		.loc 1 550 32 is_stmt 0 view .LVU291
 952 0034 8361     		str	r3, [r0, #24]
 551:Core/Src/main.c ****   {
 953              		.loc 1 551 3 is_stmt 1 view .LVU292
 551:Core/Src/main.c ****   {
 954              		.loc 1 551 7 is_stmt 0 view .LVU293
 955 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 956              	.LVL41:
 551:Core/Src/main.c ****   {
 957              		.loc 1 551 6 view .LVU294
 958 003a 28BB     		cbnz	r0, .L63
 555:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 959              		.loc 1 555 3 is_stmt 1 view .LVU295
 555:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 960              		.loc 1 555 34 is_stmt 0 view .LVU296
 961 003c 4FF48053 		mov	r3, #4096
 962 0040 0A93     		str	r3, [sp, #40]
 556:Core/Src/main.c ****   {
 963              		.loc 1 556 3 is_stmt 1 view .LVU297
 556:Core/Src/main.c ****   {
 964              		.loc 1 556 7 is_stmt 0 view .LVU298
 965 0042 0AA9     		add	r1, sp, #40
 966 0044 1548     		ldr	r0, .L68
 967 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 968              	.LVL42:
 556:Core/Src/main.c ****   {
 969              		.loc 1 556 6 view .LVU299
 970 004a F8B9     		cbnz	r0, .L64
 560:Core/Src/main.c ****   {
 971              		.loc 1 560 3 is_stmt 1 view .LVU300
 560:Core/Src/main.c ****   {
 972              		.loc 1 560 7 is_stmt 0 view .LVU301
 973 004c 1348     		ldr	r0, .L68
 974 004e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 975              	.LVL43:
 560:Core/Src/main.c ****   {
 976              		.loc 1 560 6 view .LVU302
 977 0052 E8B9     		cbnz	r0, .L65
 564:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 978              		.loc 1 564 3 is_stmt 1 view .LVU303
 564:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 979              		.loc 1 564 37 is_stmt 0 view .LVU304
ARM GAS  /tmp/ccw0MSgW.s 			page 39


 980 0054 0023     		movs	r3, #0
 981 0056 0893     		str	r3, [sp, #32]
 565:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 982              		.loc 1 565 3 is_stmt 1 view .LVU305
 565:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 983              		.loc 1 565 33 is_stmt 0 view .LVU306
 984 0058 0993     		str	r3, [sp, #36]
 566:Core/Src/main.c ****   {
 985              		.loc 1 566 3 is_stmt 1 view .LVU307
 566:Core/Src/main.c ****   {
 986              		.loc 1 566 7 is_stmt 0 view .LVU308
 987 005a 08A9     		add	r1, sp, #32
 988 005c 0F48     		ldr	r0, .L68
 989 005e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 990              	.LVL44:
 566:Core/Src/main.c ****   {
 991              		.loc 1 566 6 view .LVU309
 992 0062 B8B9     		cbnz	r0, .L66
 570:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 993              		.loc 1 570 3 is_stmt 1 view .LVU310
 570:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 994              		.loc 1 570 20 is_stmt 0 view .LVU311
 995 0064 6023     		movs	r3, #96
 996 0066 0193     		str	r3, [sp, #4]
 571:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 997              		.loc 1 571 3 is_stmt 1 view .LVU312
 571:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 998              		.loc 1 571 19 is_stmt 0 view .LVU313
 999 0068 0023     		movs	r3, #0
 1000 006a 0293     		str	r3, [sp, #8]
 572:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1001              		.loc 1 572 3 is_stmt 1 view .LVU314
 572:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1002              		.loc 1 572 24 is_stmt 0 view .LVU315
 1003 006c 0393     		str	r3, [sp, #12]
 573:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1004              		.loc 1 573 3 is_stmt 1 view .LVU316
 573:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1005              		.loc 1 573 24 is_stmt 0 view .LVU317
 1006 006e 0593     		str	r3, [sp, #20]
 574:Core/Src/main.c ****   {
 1007              		.loc 1 574 3 is_stmt 1 view .LVU318
 574:Core/Src/main.c ****   {
 1008              		.loc 1 574 7 is_stmt 0 view .LVU319
 1009 0070 0822     		movs	r2, #8
 1010 0072 01A9     		add	r1, sp, #4
 1011 0074 0948     		ldr	r0, .L68
 1012 0076 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1013              	.LVL45:
 574:Core/Src/main.c ****   {
 1014              		.loc 1 574 6 view .LVU320
 1015 007a 68B9     		cbnz	r0, .L67
 581:Core/Src/main.c **** }
 1016              		.loc 1 581 3 is_stmt 1 view .LVU321
 1017 007c 0748     		ldr	r0, .L68
 1018 007e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1019              	.LVL46:
ARM GAS  /tmp/ccw0MSgW.s 			page 40


 582:Core/Src/main.c **** 
 1020              		.loc 1 582 1 is_stmt 0 view .LVU322
 1021 0082 0FB0     		add	sp, sp, #60
 1022              		.cfi_remember_state
 1023              		.cfi_def_cfa_offset 4
 1024              		@ sp needed
 1025 0084 5DF804FB 		ldr	pc, [sp], #4
 1026              	.L63:
 1027              		.cfi_restore_state
 553:Core/Src/main.c ****   }
 1028              		.loc 1 553 5 is_stmt 1 view .LVU323
 1029 0088 FFF7FEFF 		bl	Error_Handler
 1030              	.LVL47:
 1031              	.L64:
 558:Core/Src/main.c ****   }
 1032              		.loc 1 558 5 view .LVU324
 1033 008c FFF7FEFF 		bl	Error_Handler
 1034              	.LVL48:
 1035              	.L65:
 562:Core/Src/main.c ****   }
 1036              		.loc 1 562 5 view .LVU325
 1037 0090 FFF7FEFF 		bl	Error_Handler
 1038              	.LVL49:
 1039              	.L66:
 568:Core/Src/main.c ****   }
 1040              		.loc 1 568 5 view .LVU326
 1041 0094 FFF7FEFF 		bl	Error_Handler
 1042              	.LVL50:
 1043              	.L67:
 576:Core/Src/main.c ****   }
 1044              		.loc 1 576 5 view .LVU327
 1045 0098 FFF7FEFF 		bl	Error_Handler
 1046              	.LVL51:
 1047              	.L69:
 1048              		.align	2
 1049              	.L68:
 1050 009c 00000000 		.word	htim3
 1051 00a0 00040040 		.word	1073742848
 1052              		.cfi_endproc
 1053              	.LFE79:
 1055              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1056              		.align	1
 1057              		.syntax unified
 1058              		.thumb
 1059              		.thumb_func
 1060              		.fpu softvfp
 1062              	MX_TIM1_Init:
 1063              	.LFB77:
 421:Core/Src/main.c **** 
 1064              		.loc 1 421 1 view -0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 72
 1067              		@ frame_needed = 0, uses_anonymous_args = 0
 1068 0000 10B5     		push	{r4, lr}
 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 4, -8
 1071              		.cfi_offset 14, -4
ARM GAS  /tmp/ccw0MSgW.s 			page 41


 1072 0002 92B0     		sub	sp, sp, #72
 1073              		.cfi_def_cfa_offset 80
 427:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1074              		.loc 1 427 3 view .LVU329
 427:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1075              		.loc 1 427 27 is_stmt 0 view .LVU330
 1076 0004 0024     		movs	r4, #0
 1077 0006 1094     		str	r4, [sp, #64]
 1078 0008 1194     		str	r4, [sp, #68]
 428:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1079              		.loc 1 428 3 is_stmt 1 view .LVU331
 428:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1080              		.loc 1 428 22 is_stmt 0 view .LVU332
 1081 000a 0994     		str	r4, [sp, #36]
 1082 000c 0A94     		str	r4, [sp, #40]
 1083 000e 0B94     		str	r4, [sp, #44]
 1084 0010 0C94     		str	r4, [sp, #48]
 1085 0012 0D94     		str	r4, [sp, #52]
 1086 0014 0E94     		str	r4, [sp, #56]
 1087 0016 0F94     		str	r4, [sp, #60]
 429:Core/Src/main.c **** 
 1088              		.loc 1 429 3 is_stmt 1 view .LVU333
 429:Core/Src/main.c **** 
 1089              		.loc 1 429 34 is_stmt 0 view .LVU334
 1090 0018 2022     		movs	r2, #32
 1091 001a 2146     		mov	r1, r4
 1092 001c 01A8     		add	r0, sp, #4
 1093 001e FFF7FEFF 		bl	memset
 1094              	.LVL52:
 434:Core/Src/main.c ****   htim1.Init.Prescaler = 240;
 1095              		.loc 1 434 3 is_stmt 1 view .LVU335
 434:Core/Src/main.c ****   htim1.Init.Prescaler = 240;
 1096              		.loc 1 434 18 is_stmt 0 view .LVU336
 1097 0022 2148     		ldr	r0, .L80
 1098 0024 214B     		ldr	r3, .L80+4
 1099 0026 0360     		str	r3, [r0]
 435:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1100              		.loc 1 435 3 is_stmt 1 view .LVU337
 435:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1101              		.loc 1 435 24 is_stmt 0 view .LVU338
 1102 0028 F023     		movs	r3, #240
 1103 002a 4360     		str	r3, [r0, #4]
 436:Core/Src/main.c ****   htim1.Init.Period = 65535;
 1104              		.loc 1 436 3 is_stmt 1 view .LVU339
 436:Core/Src/main.c ****   htim1.Init.Period = 65535;
 1105              		.loc 1 436 26 is_stmt 0 view .LVU340
 1106 002c 8460     		str	r4, [r0, #8]
 437:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1107              		.loc 1 437 3 is_stmt 1 view .LVU341
 437:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1108              		.loc 1 437 21 is_stmt 0 view .LVU342
 1109 002e 4FF6FF73 		movw	r3, #65535
 1110 0032 C360     		str	r3, [r0, #12]
 438:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1111              		.loc 1 438 3 is_stmt 1 view .LVU343
 438:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1112              		.loc 1 438 28 is_stmt 0 view .LVU344
ARM GAS  /tmp/ccw0MSgW.s 			page 42


 1113 0034 0461     		str	r4, [r0, #16]
 439:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1114              		.loc 1 439 3 is_stmt 1 view .LVU345
 439:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1115              		.loc 1 439 32 is_stmt 0 view .LVU346
 1116 0036 4461     		str	r4, [r0, #20]
 440:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1117              		.loc 1 440 3 is_stmt 1 view .LVU347
 440:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1118              		.loc 1 440 32 is_stmt 0 view .LVU348
 1119 0038 8461     		str	r4, [r0, #24]
 441:Core/Src/main.c ****   {
 1120              		.loc 1 441 3 is_stmt 1 view .LVU349
 441:Core/Src/main.c ****   {
 1121              		.loc 1 441 7 is_stmt 0 view .LVU350
 1122 003a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1123              	.LVL53:
 441:Core/Src/main.c ****   {
 1124              		.loc 1 441 6 view .LVU351
 1125 003e 0028     		cmp	r0, #0
 1126 0040 29D1     		bne	.L76
 445:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1127              		.loc 1 445 3 is_stmt 1 view .LVU352
 445:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1128              		.loc 1 445 37 is_stmt 0 view .LVU353
 1129 0042 0023     		movs	r3, #0
 1130 0044 1093     		str	r3, [sp, #64]
 446:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1131              		.loc 1 446 3 is_stmt 1 view .LVU354
 446:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1132              		.loc 1 446 33 is_stmt 0 view .LVU355
 1133 0046 1193     		str	r3, [sp, #68]
 447:Core/Src/main.c ****   {
 1134              		.loc 1 447 3 is_stmt 1 view .LVU356
 447:Core/Src/main.c ****   {
 1135              		.loc 1 447 7 is_stmt 0 view .LVU357
 1136 0048 10A9     		add	r1, sp, #64
 1137 004a 1748     		ldr	r0, .L80
 1138 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1139              	.LVL54:
 447:Core/Src/main.c ****   {
 1140              		.loc 1 447 6 view .LVU358
 1141 0050 18BB     		cbnz	r0, .L77
 451:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1142              		.loc 1 451 3 is_stmt 1 view .LVU359
 451:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1143              		.loc 1 451 20 is_stmt 0 view .LVU360
 1144 0052 6023     		movs	r3, #96
 1145 0054 0993     		str	r3, [sp, #36]
 452:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1146              		.loc 1 452 3 is_stmt 1 view .LVU361
 452:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1147              		.loc 1 452 19 is_stmt 0 view .LVU362
 1148 0056 0022     		movs	r2, #0
 1149 0058 0A92     		str	r2, [sp, #40]
 453:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1150              		.loc 1 453 3 is_stmt 1 view .LVU363
ARM GAS  /tmp/ccw0MSgW.s 			page 43


 453:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1151              		.loc 1 453 24 is_stmt 0 view .LVU364
 1152 005a 0B92     		str	r2, [sp, #44]
 454:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1153              		.loc 1 454 3 is_stmt 1 view .LVU365
 454:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1154              		.loc 1 454 25 is_stmt 0 view .LVU366
 1155 005c 0C92     		str	r2, [sp, #48]
 455:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1156              		.loc 1 455 3 is_stmt 1 view .LVU367
 455:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1157              		.loc 1 455 24 is_stmt 0 view .LVU368
 1158 005e 0D92     		str	r2, [sp, #52]
 456:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1159              		.loc 1 456 3 is_stmt 1 view .LVU369
 456:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1160              		.loc 1 456 25 is_stmt 0 view .LVU370
 1161 0060 0E92     		str	r2, [sp, #56]
 457:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1162              		.loc 1 457 3 is_stmt 1 view .LVU371
 457:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1163              		.loc 1 457 26 is_stmt 0 view .LVU372
 1164 0062 0F92     		str	r2, [sp, #60]
 458:Core/Src/main.c ****   {
 1165              		.loc 1 458 3 is_stmt 1 view .LVU373
 458:Core/Src/main.c ****   {
 1166              		.loc 1 458 7 is_stmt 0 view .LVU374
 1167 0064 09A9     		add	r1, sp, #36
 1168 0066 1048     		ldr	r0, .L80
 1169 0068 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1170              	.LVL55:
 458:Core/Src/main.c ****   {
 1171              		.loc 1 458 6 view .LVU375
 1172 006c B8B9     		cbnz	r0, .L78
 462:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1173              		.loc 1 462 3 is_stmt 1 view .LVU376
 462:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1174              		.loc 1 462 40 is_stmt 0 view .LVU377
 1175 006e 0023     		movs	r3, #0
 1176 0070 0193     		str	r3, [sp, #4]
 463:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1177              		.loc 1 463 3 is_stmt 1 view .LVU378
 463:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1178              		.loc 1 463 41 is_stmt 0 view .LVU379
 1179 0072 0293     		str	r3, [sp, #8]
 464:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1180              		.loc 1 464 3 is_stmt 1 view .LVU380
 464:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1181              		.loc 1 464 34 is_stmt 0 view .LVU381
 1182 0074 0393     		str	r3, [sp, #12]
 465:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1183              		.loc 1 465 3 is_stmt 1 view .LVU382
 465:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1184              		.loc 1 465 33 is_stmt 0 view .LVU383
 1185 0076 0493     		str	r3, [sp, #16]
 466:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1186              		.loc 1 466 3 is_stmt 1 view .LVU384
ARM GAS  /tmp/ccw0MSgW.s 			page 44


 466:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1187              		.loc 1 466 35 is_stmt 0 view .LVU385
 1188 0078 0593     		str	r3, [sp, #20]
 467:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1189              		.loc 1 467 3 is_stmt 1 view .LVU386
 467:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1190              		.loc 1 467 38 is_stmt 0 view .LVU387
 1191 007a 4FF40052 		mov	r2, #8192
 1192 007e 0692     		str	r2, [sp, #24]
 468:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1193              		.loc 1 468 3 is_stmt 1 view .LVU388
 468:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1194              		.loc 1 468 40 is_stmt 0 view .LVU389
 1195 0080 0893     		str	r3, [sp, #32]
 469:Core/Src/main.c ****   {
 1196              		.loc 1 469 3 is_stmt 1 view .LVU390
 469:Core/Src/main.c ****   {
 1197              		.loc 1 469 7 is_stmt 0 view .LVU391
 1198 0082 01A9     		add	r1, sp, #4
 1199 0084 0848     		ldr	r0, .L80
 1200 0086 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1201              	.LVL56:
 469:Core/Src/main.c ****   {
 1202              		.loc 1 469 6 view .LVU392
 1203 008a 50B9     		cbnz	r0, .L79
 476:Core/Src/main.c **** }
 1204              		.loc 1 476 3 is_stmt 1 view .LVU393
 1205 008c 0648     		ldr	r0, .L80
 1206 008e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1207              	.LVL57:
 477:Core/Src/main.c **** 
 1208              		.loc 1 477 1 is_stmt 0 view .LVU394
 1209 0092 12B0     		add	sp, sp, #72
 1210              		.cfi_remember_state
 1211              		.cfi_def_cfa_offset 8
 1212              		@ sp needed
 1213 0094 10BD     		pop	{r4, pc}
 1214              	.L76:
 1215              		.cfi_restore_state
 443:Core/Src/main.c ****   }
 1216              		.loc 1 443 5 is_stmt 1 view .LVU395
 1217 0096 FFF7FEFF 		bl	Error_Handler
 1218              	.LVL58:
 1219              	.L77:
 449:Core/Src/main.c ****   }
 1220              		.loc 1 449 5 view .LVU396
 1221 009a FFF7FEFF 		bl	Error_Handler
 1222              	.LVL59:
 1223              	.L78:
 460:Core/Src/main.c ****   }
 1224              		.loc 1 460 5 view .LVU397
 1225 009e FFF7FEFF 		bl	Error_Handler
 1226              	.LVL60:
 1227              	.L79:
 471:Core/Src/main.c ****   }
 1228              		.loc 1 471 5 view .LVU398
 1229 00a2 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccw0MSgW.s 			page 45


 1230              	.LVL61:
 1231              	.L81:
 1232 00a6 00BF     		.align	2
 1233              	.L80:
 1234 00a8 00000000 		.word	htim1
 1235 00ac 002C0140 		.word	1073818624
 1236              		.cfi_endproc
 1237              	.LFE77:
 1239              		.section	.text.MX_TIM5_Init,"ax",%progbits
 1240              		.align	1
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu softvfp
 1246              	MX_TIM5_Init:
 1247              	.LFB80:
 590:Core/Src/main.c **** 
 1248              		.loc 1 590 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 40
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252 0000 00B5     		push	{lr}
 1253              		.cfi_def_cfa_offset 4
 1254              		.cfi_offset 14, -4
 1255 0002 8BB0     		sub	sp, sp, #44
 1256              		.cfi_def_cfa_offset 48
 596:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1257              		.loc 1 596 3 view .LVU400
 596:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1258              		.loc 1 596 27 is_stmt 0 view .LVU401
 1259 0004 0023     		movs	r3, #0
 1260 0006 0893     		str	r3, [sp, #32]
 1261 0008 0993     		str	r3, [sp, #36]
 597:Core/Src/main.c **** 
 1262              		.loc 1 597 3 is_stmt 1 view .LVU402
 597:Core/Src/main.c **** 
 1263              		.loc 1 597 22 is_stmt 0 view .LVU403
 1264 000a 0193     		str	r3, [sp, #4]
 1265 000c 0293     		str	r3, [sp, #8]
 1266 000e 0393     		str	r3, [sp, #12]
 1267 0010 0493     		str	r3, [sp, #16]
 1268 0012 0593     		str	r3, [sp, #20]
 1269 0014 0693     		str	r3, [sp, #24]
 1270 0016 0793     		str	r3, [sp, #28]
 602:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 1271              		.loc 1 602 3 is_stmt 1 view .LVU404
 602:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 1272              		.loc 1 602 18 is_stmt 0 view .LVU405
 1273 0018 1848     		ldr	r0, .L92
 1274 001a 194A     		ldr	r2, .L92+4
 1275 001c 0260     		str	r2, [r0]
 603:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1276              		.loc 1 603 3 is_stmt 1 view .LVU406
 603:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1277              		.loc 1 603 24 is_stmt 0 view .LVU407
 1278 001e 6422     		movs	r2, #100
 1279 0020 4260     		str	r2, [r0, #4]
ARM GAS  /tmp/ccw0MSgW.s 			page 46


 604:Core/Src/main.c ****   htim5.Init.Period = 10;
 1280              		.loc 1 604 3 is_stmt 1 view .LVU408
 604:Core/Src/main.c ****   htim5.Init.Period = 10;
 1281              		.loc 1 604 26 is_stmt 0 view .LVU409
 1282 0022 8360     		str	r3, [r0, #8]
 605:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1283              		.loc 1 605 3 is_stmt 1 view .LVU410
 605:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1284              		.loc 1 605 21 is_stmt 0 view .LVU411
 1285 0024 0A22     		movs	r2, #10
 1286 0026 C260     		str	r2, [r0, #12]
 606:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1287              		.loc 1 606 3 is_stmt 1 view .LVU412
 606:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1288              		.loc 1 606 28 is_stmt 0 view .LVU413
 1289 0028 0361     		str	r3, [r0, #16]
 607:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 1290              		.loc 1 607 3 is_stmt 1 view .LVU414
 607:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 1291              		.loc 1 607 32 is_stmt 0 view .LVU415
 1292 002a 8361     		str	r3, [r0, #24]
 608:Core/Src/main.c ****   {
 1293              		.loc 1 608 3 is_stmt 1 view .LVU416
 608:Core/Src/main.c ****   {
 1294              		.loc 1 608 7 is_stmt 0 view .LVU417
 1295 002c FFF7FEFF 		bl	HAL_TIM_OC_Init
 1296              	.LVL62:
 608:Core/Src/main.c ****   {
 1297              		.loc 1 608 6 view .LVU418
 1298 0030 D8B9     		cbnz	r0, .L88
 612:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1299              		.loc 1 612 3 is_stmt 1 view .LVU419
 612:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1300              		.loc 1 612 37 is_stmt 0 view .LVU420
 1301 0032 0023     		movs	r3, #0
 1302 0034 0893     		str	r3, [sp, #32]
 613:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1303              		.loc 1 613 3 is_stmt 1 view .LVU421
 613:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1304              		.loc 1 613 33 is_stmt 0 view .LVU422
 1305 0036 0993     		str	r3, [sp, #36]
 614:Core/Src/main.c ****   {
 1306              		.loc 1 614 3 is_stmt 1 view .LVU423
 614:Core/Src/main.c ****   {
 1307              		.loc 1 614 7 is_stmt 0 view .LVU424
 1308 0038 08A9     		add	r1, sp, #32
 1309 003a 1048     		ldr	r0, .L92
 1310 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1311              	.LVL63:
 614:Core/Src/main.c ****   {
 1312              		.loc 1 614 6 view .LVU425
 1313 0040 A8B9     		cbnz	r0, .L89
 618:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1314              		.loc 1 618 3 is_stmt 1 view .LVU426
 618:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1315              		.loc 1 618 20 is_stmt 0 view .LVU427
 1316 0042 0022     		movs	r2, #0
ARM GAS  /tmp/ccw0MSgW.s 			page 47


 1317 0044 0192     		str	r2, [sp, #4]
 619:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1318              		.loc 1 619 3 is_stmt 1 view .LVU428
 619:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1319              		.loc 1 619 19 is_stmt 0 view .LVU429
 1320 0046 0292     		str	r2, [sp, #8]
 620:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1321              		.loc 1 620 3 is_stmt 1 view .LVU430
 620:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1322              		.loc 1 620 24 is_stmt 0 view .LVU431
 1323 0048 0392     		str	r2, [sp, #12]
 621:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1324              		.loc 1 621 3 is_stmt 1 view .LVU432
 621:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1325              		.loc 1 621 24 is_stmt 0 view .LVU433
 1326 004a 0592     		str	r2, [sp, #20]
 622:Core/Src/main.c ****   {
 1327              		.loc 1 622 3 is_stmt 1 view .LVU434
 622:Core/Src/main.c ****   {
 1328              		.loc 1 622 7 is_stmt 0 view .LVU435
 1329 004c 01A9     		add	r1, sp, #4
 1330 004e 0B48     		ldr	r0, .L92
 1331 0050 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1332              	.LVL64:
 622:Core/Src/main.c ****   {
 1333              		.loc 1 622 6 view .LVU436
 1334 0054 68B9     		cbnz	r0, .L90
 626:Core/Src/main.c ****   {
 1335              		.loc 1 626 3 is_stmt 1 view .LVU437
 626:Core/Src/main.c ****   {
 1336              		.loc 1 626 7 is_stmt 0 view .LVU438
 1337 0056 0422     		movs	r2, #4
 1338 0058 0DEB0201 		add	r1, sp, r2
 1339 005c 0748     		ldr	r0, .L92
 1340 005e FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1341              	.LVL65:
 626:Core/Src/main.c ****   {
 1342              		.loc 1 626 6 view .LVU439
 1343 0062 40B9     		cbnz	r0, .L91
 633:Core/Src/main.c **** 
 1344              		.loc 1 633 1 view .LVU440
 1345 0064 0BB0     		add	sp, sp, #44
 1346              		.cfi_remember_state
 1347              		.cfi_def_cfa_offset 4
 1348              		@ sp needed
 1349 0066 5DF804FB 		ldr	pc, [sp], #4
 1350              	.L88:
 1351              		.cfi_restore_state
 610:Core/Src/main.c ****   }
 1352              		.loc 1 610 5 is_stmt 1 view .LVU441
 1353 006a FFF7FEFF 		bl	Error_Handler
 1354              	.LVL66:
 1355              	.L89:
 616:Core/Src/main.c ****   }
 1356              		.loc 1 616 5 view .LVU442
 1357 006e FFF7FEFF 		bl	Error_Handler
 1358              	.LVL67:
ARM GAS  /tmp/ccw0MSgW.s 			page 48


 1359              	.L90:
 624:Core/Src/main.c ****   }
 1360              		.loc 1 624 5 view .LVU443
 1361 0072 FFF7FEFF 		bl	Error_Handler
 1362              	.LVL68:
 1363              	.L91:
 628:Core/Src/main.c ****   }
 1364              		.loc 1 628 5 view .LVU444
 1365 0076 FFF7FEFF 		bl	Error_Handler
 1366              	.LVL69:
 1367              	.L93:
 1368 007a 00BF     		.align	2
 1369              	.L92:
 1370 007c 00000000 		.word	htim5
 1371 0080 000C0040 		.word	1073744896
 1372              		.cfi_endproc
 1373              	.LFE80:
 1375              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1376              		.align	1
 1377              		.syntax unified
 1378              		.thumb
 1379              		.thumb_func
 1380              		.fpu softvfp
 1382              	MX_TIM2_Init:
 1383              	.LFB78:
 485:Core/Src/main.c **** 
 1384              		.loc 1 485 1 view -0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 40
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 1388 0000 00B5     		push	{lr}
 1389              		.cfi_def_cfa_offset 4
 1390              		.cfi_offset 14, -4
 1391 0002 8BB0     		sub	sp, sp, #44
 1392              		.cfi_def_cfa_offset 48
 491:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1393              		.loc 1 491 3 view .LVU446
 491:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1394              		.loc 1 491 27 is_stmt 0 view .LVU447
 1395 0004 0023     		movs	r3, #0
 1396 0006 0893     		str	r3, [sp, #32]
 1397 0008 0993     		str	r3, [sp, #36]
 492:Core/Src/main.c **** 
 1398              		.loc 1 492 3 is_stmt 1 view .LVU448
 492:Core/Src/main.c **** 
 1399              		.loc 1 492 22 is_stmt 0 view .LVU449
 1400 000a 0193     		str	r3, [sp, #4]
 1401 000c 0293     		str	r3, [sp, #8]
 1402 000e 0393     		str	r3, [sp, #12]
 1403 0010 0493     		str	r3, [sp, #16]
 1404 0012 0593     		str	r3, [sp, #20]
 1405 0014 0693     		str	r3, [sp, #24]
 1406 0016 0793     		str	r3, [sp, #28]
 497:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 1407              		.loc 1 497 3 is_stmt 1 view .LVU450
 497:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 1408              		.loc 1 497 18 is_stmt 0 view .LVU451
ARM GAS  /tmp/ccw0MSgW.s 			page 49


 1409 0018 1448     		ldr	r0, .L102
 1410 001a 4FF08042 		mov	r2, #1073741824
 1411 001e 0260     		str	r2, [r0]
 498:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1412              		.loc 1 498 3 is_stmt 1 view .LVU452
 498:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1413              		.loc 1 498 24 is_stmt 0 view .LVU453
 1414 0020 0A22     		movs	r2, #10
 1415 0022 4260     		str	r2, [r0, #4]
 499:Core/Src/main.c ****   htim2.Init.Period = 600;
 1416              		.loc 1 499 3 is_stmt 1 view .LVU454
 499:Core/Src/main.c ****   htim2.Init.Period = 600;
 1417              		.loc 1 499 26 is_stmt 0 view .LVU455
 1418 0024 8360     		str	r3, [r0, #8]
 500:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1419              		.loc 1 500 3 is_stmt 1 view .LVU456
 500:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1420              		.loc 1 500 21 is_stmt 0 view .LVU457
 1421 0026 4FF41672 		mov	r2, #600
 1422 002a C260     		str	r2, [r0, #12]
 501:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1423              		.loc 1 501 3 is_stmt 1 view .LVU458
 501:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1424              		.loc 1 501 28 is_stmt 0 view .LVU459
 1425 002c 0361     		str	r3, [r0, #16]
 502:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 1426              		.loc 1 502 3 is_stmt 1 view .LVU460
 502:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 1427              		.loc 1 502 32 is_stmt 0 view .LVU461
 1428 002e 8361     		str	r3, [r0, #24]
 503:Core/Src/main.c ****   {
 1429              		.loc 1 503 3 is_stmt 1 view .LVU462
 503:Core/Src/main.c ****   {
 1430              		.loc 1 503 7 is_stmt 0 view .LVU463
 1431 0030 FFF7FEFF 		bl	HAL_TIM_OC_Init
 1432              	.LVL70:
 503:Core/Src/main.c ****   {
 1433              		.loc 1 503 6 view .LVU464
 1434 0034 A0B9     		cbnz	r0, .L99
 507:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1435              		.loc 1 507 3 is_stmt 1 view .LVU465
 507:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1436              		.loc 1 507 37 is_stmt 0 view .LVU466
 1437 0036 0023     		movs	r3, #0
 1438 0038 0893     		str	r3, [sp, #32]
 508:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1439              		.loc 1 508 3 is_stmt 1 view .LVU467
 508:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1440              		.loc 1 508 33 is_stmt 0 view .LVU468
 1441 003a 0993     		str	r3, [sp, #36]
 509:Core/Src/main.c ****   {
 1442              		.loc 1 509 3 is_stmt 1 view .LVU469
 509:Core/Src/main.c ****   {
 1443              		.loc 1 509 7 is_stmt 0 view .LVU470
 1444 003c 08A9     		add	r1, sp, #32
 1445 003e 0B48     		ldr	r0, .L102
 1446 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccw0MSgW.s 			page 50


 1447              	.LVL71:
 509:Core/Src/main.c ****   {
 1448              		.loc 1 509 6 view .LVU471
 1449 0044 70B9     		cbnz	r0, .L100
 513:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1450              		.loc 1 513 3 is_stmt 1 view .LVU472
 513:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1451              		.loc 1 513 20 is_stmt 0 view .LVU473
 1452 0046 0022     		movs	r2, #0
 1453 0048 0192     		str	r2, [sp, #4]
 514:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1454              		.loc 1 514 3 is_stmt 1 view .LVU474
 514:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1455              		.loc 1 514 19 is_stmt 0 view .LVU475
 1456 004a 0292     		str	r2, [sp, #8]
 515:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1457              		.loc 1 515 3 is_stmt 1 view .LVU476
 515:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1458              		.loc 1 515 24 is_stmt 0 view .LVU477
 1459 004c 0392     		str	r2, [sp, #12]
 516:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1460              		.loc 1 516 3 is_stmt 1 view .LVU478
 516:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1461              		.loc 1 516 24 is_stmt 0 view .LVU479
 1462 004e 0592     		str	r2, [sp, #20]
 517:Core/Src/main.c ****   {
 1463              		.loc 1 517 3 is_stmt 1 view .LVU480
 517:Core/Src/main.c ****   {
 1464              		.loc 1 517 7 is_stmt 0 view .LVU481
 1465 0050 01A9     		add	r1, sp, #4
 1466 0052 0648     		ldr	r0, .L102
 1467 0054 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1468              	.LVL72:
 517:Core/Src/main.c ****   {
 1469              		.loc 1 517 6 view .LVU482
 1470 0058 30B9     		cbnz	r0, .L101
 524:Core/Src/main.c **** 
 1471              		.loc 1 524 1 view .LVU483
 1472 005a 0BB0     		add	sp, sp, #44
 1473              		.cfi_remember_state
 1474              		.cfi_def_cfa_offset 4
 1475              		@ sp needed
 1476 005c 5DF804FB 		ldr	pc, [sp], #4
 1477              	.L99:
 1478              		.cfi_restore_state
 505:Core/Src/main.c ****   }
 1479              		.loc 1 505 5 is_stmt 1 view .LVU484
 1480 0060 FFF7FEFF 		bl	Error_Handler
 1481              	.LVL73:
 1482              	.L100:
 511:Core/Src/main.c ****   }
 1483              		.loc 1 511 5 view .LVU485
 1484 0064 FFF7FEFF 		bl	Error_Handler
 1485              	.LVL74:
 1486              	.L101:
 519:Core/Src/main.c ****   }
 1487              		.loc 1 519 5 view .LVU486
ARM GAS  /tmp/ccw0MSgW.s 			page 51


 1488 0068 FFF7FEFF 		bl	Error_Handler
 1489              	.LVL75:
 1490              	.L103:
 1491              		.align	2
 1492              	.L102:
 1493 006c 00000000 		.word	htim2
 1494              		.cfi_endproc
 1495              	.LFE78:
 1497              		.section	.text.MX_TIM6_Init,"ax",%progbits
 1498              		.align	1
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1502              		.fpu softvfp
 1504              	MX_TIM6_Init:
 1505              	.LFB81:
 641:Core/Src/main.c **** 
 1506              		.loc 1 641 1 view -0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 8
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510 0000 00B5     		push	{lr}
 1511              		.cfi_def_cfa_offset 4
 1512              		.cfi_offset 14, -4
 1513 0002 83B0     		sub	sp, sp, #12
 1514              		.cfi_def_cfa_offset 16
 647:Core/Src/main.c **** 
 1515              		.loc 1 647 3 view .LVU488
 647:Core/Src/main.c **** 
 1516              		.loc 1 647 27 is_stmt 0 view .LVU489
 1517 0004 0023     		movs	r3, #0
 1518 0006 0093     		str	r3, [sp]
 1519 0008 0193     		str	r3, [sp, #4]
 652:Core/Src/main.c ****   htim6.Init.Prescaler = 72 - 1;
 1520              		.loc 1 652 3 is_stmt 1 view .LVU490
 652:Core/Src/main.c ****   htim6.Init.Prescaler = 72 - 1;
 1521              		.loc 1 652 18 is_stmt 0 view .LVU491
 1522 000a 0E48     		ldr	r0, .L110
 1523 000c 0E4A     		ldr	r2, .L110+4
 1524 000e 0260     		str	r2, [r0]
 653:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 1525              		.loc 1 653 3 is_stmt 1 view .LVU492
 653:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 1526              		.loc 1 653 24 is_stmt 0 view .LVU493
 1527 0010 4722     		movs	r2, #71
 1528 0012 4260     		str	r2, [r0, #4]
 654:Core/Src/main.c ****   htim6.Init.Period = 1000 - 1;
 1529              		.loc 1 654 3 is_stmt 1 view .LVU494
 654:Core/Src/main.c ****   htim6.Init.Period = 1000 - 1;
 1530              		.loc 1 654 26 is_stmt 0 view .LVU495
 1531 0014 8360     		str	r3, [r0, #8]
 655:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1532              		.loc 1 655 3 is_stmt 1 view .LVU496
 655:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1533              		.loc 1 655 21 is_stmt 0 view .LVU497
 1534 0016 40F2E732 		movw	r2, #999
 1535 001a C260     		str	r2, [r0, #12]
ARM GAS  /tmp/ccw0MSgW.s 			page 52


 656:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1536              		.loc 1 656 3 is_stmt 1 view .LVU498
 656:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1537              		.loc 1 656 32 is_stmt 0 view .LVU499
 1538 001c 8361     		str	r3, [r0, #24]
 657:Core/Src/main.c ****   {
 1539              		.loc 1 657 3 is_stmt 1 view .LVU500
 657:Core/Src/main.c ****   {
 1540              		.loc 1 657 7 is_stmt 0 view .LVU501
 1541 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 1542              	.LVL76:
 657:Core/Src/main.c ****   {
 1543              		.loc 1 657 6 view .LVU502
 1544 0022 50B9     		cbnz	r0, .L108
 661:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1545              		.loc 1 661 3 is_stmt 1 view .LVU503
 661:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1546              		.loc 1 661 37 is_stmt 0 view .LVU504
 1547 0024 0023     		movs	r3, #0
 1548 0026 0093     		str	r3, [sp]
 662:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1549              		.loc 1 662 3 is_stmt 1 view .LVU505
 662:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1550              		.loc 1 662 33 is_stmt 0 view .LVU506
 1551 0028 0193     		str	r3, [sp, #4]
 663:Core/Src/main.c ****   {
 1552              		.loc 1 663 3 is_stmt 1 view .LVU507
 663:Core/Src/main.c ****   {
 1553              		.loc 1 663 7 is_stmt 0 view .LVU508
 1554 002a 6946     		mov	r1, sp
 1555 002c 0548     		ldr	r0, .L110
 1556 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1557              	.LVL77:
 663:Core/Src/main.c ****   {
 1558              		.loc 1 663 6 view .LVU509
 1559 0032 20B9     		cbnz	r0, .L109
 670:Core/Src/main.c **** 
 1560              		.loc 1 670 1 view .LVU510
 1561 0034 03B0     		add	sp, sp, #12
 1562              		.cfi_remember_state
 1563              		.cfi_def_cfa_offset 4
 1564              		@ sp needed
 1565 0036 5DF804FB 		ldr	pc, [sp], #4
 1566              	.L108:
 1567              		.cfi_restore_state
 659:Core/Src/main.c ****   }
 1568              		.loc 1 659 5 is_stmt 1 view .LVU511
 1569 003a FFF7FEFF 		bl	Error_Handler
 1570              	.LVL78:
 1571              	.L109:
 665:Core/Src/main.c ****   }
 1572              		.loc 1 665 5 view .LVU512
 1573 003e FFF7FEFF 		bl	Error_Handler
 1574              	.LVL79:
 1575              	.L111:
 1576 0042 00BF     		.align	2
 1577              	.L110:
ARM GAS  /tmp/ccw0MSgW.s 			page 53


 1578 0044 00000000 		.word	htim6
 1579 0048 00100040 		.word	1073745920
 1580              		.cfi_endproc
 1581              	.LFE81:
 1583              		.section	.text.SystemClock_Config,"ax",%progbits
 1584              		.align	1
 1585              		.global	SystemClock_Config
 1586              		.syntax unified
 1587              		.thumb
 1588              		.thumb_func
 1589              		.fpu softvfp
 1591              	SystemClock_Config:
 1592              	.LFB71:
 190:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1593              		.loc 1 190 1 view -0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 112
 1596              		@ frame_needed = 0, uses_anonymous_args = 0
 1597 0000 10B5     		push	{r4, lr}
 1598              		.cfi_def_cfa_offset 8
 1599              		.cfi_offset 4, -8
 1600              		.cfi_offset 14, -4
 1601 0002 9CB0     		sub	sp, sp, #112
 1602              		.cfi_def_cfa_offset 120
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1603              		.loc 1 191 3 view .LVU514
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1604              		.loc 1 191 22 is_stmt 0 view .LVU515
 1605 0004 2822     		movs	r2, #40
 1606 0006 0021     		movs	r1, #0
 1607 0008 12A8     		add	r0, sp, #72
 1608 000a FFF7FEFF 		bl	memset
 1609              	.LVL80:
 192:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1610              		.loc 1 192 3 is_stmt 1 view .LVU516
 192:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1611              		.loc 1 192 22 is_stmt 0 view .LVU517
 1612 000e 0024     		movs	r4, #0
 1613 0010 0994     		str	r4, [sp, #36]
 1614 0012 0A94     		str	r4, [sp, #40]
 1615 0014 0B94     		str	r4, [sp, #44]
 1616 0016 0C94     		str	r4, [sp, #48]
 1617 0018 0D94     		str	r4, [sp, #52]
 193:Core/Src/main.c **** 
 1618              		.loc 1 193 3 is_stmt 1 view .LVU518
 193:Core/Src/main.c **** 
 1619              		.loc 1 193 28 is_stmt 0 view .LVU519
 1620 001a 2022     		movs	r2, #32
 1621 001c 2146     		mov	r1, r4
 1622 001e 01A8     		add	r0, sp, #4
 1623 0020 FFF7FEFF 		bl	memset
 1624              	.LVL81:
 198:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1625              		.loc 1 198 3 is_stmt 1 view .LVU520
 198:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1626              		.loc 1 198 36 is_stmt 0 view .LVU521
 1627 0024 0923     		movs	r3, #9
ARM GAS  /tmp/ccw0MSgW.s 			page 54


 1628 0026 0E93     		str	r3, [sp, #56]
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1629              		.loc 1 199 3 is_stmt 1 view .LVU522
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1630              		.loc 1 199 30 is_stmt 0 view .LVU523
 1631 0028 4FF48033 		mov	r3, #65536
 1632 002c 1093     		str	r3, [sp, #64]
 200:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1633              		.loc 1 200 3 is_stmt 1 view .LVU524
 200:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1634              		.loc 1 200 36 is_stmt 0 view .LVU525
 1635 002e 1194     		str	r4, [sp, #68]
 201:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 1636              		.loc 1 201 3 is_stmt 1 view .LVU526
 201:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 1637              		.loc 1 201 30 is_stmt 0 view .LVU527
 1638 0030 0122     		movs	r2, #1
 1639 0032 1392     		str	r2, [sp, #76]
 202:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 1640              		.loc 1 202 3 is_stmt 1 view .LVU528
 202:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 1641              		.loc 1 202 30 is_stmt 0 view .LVU529
 1642 0034 1592     		str	r2, [sp, #84]
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1643              		.loc 1 203 3 is_stmt 1 view .LVU530
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1644              		.loc 1 203 35 is_stmt 0 view .LVU531
 1645 0036 0F94     		str	r4, [sp, #60]
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1646              		.loc 1 204 3 is_stmt 1 view .LVU532
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1647              		.loc 1 204 34 is_stmt 0 view .LVU533
 1648 0038 0222     		movs	r2, #2
 1649 003a 1692     		str	r2, [sp, #88]
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1650              		.loc 1 205 3 is_stmt 1 view .LVU534
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1651              		.loc 1 205 35 is_stmt 0 view .LVU535
 1652 003c 1793     		str	r3, [sp, #92]
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 1653              		.loc 1 206 3 is_stmt 1 view .LVU536
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 1654              		.loc 1 206 32 is_stmt 0 view .LVU537
 1655 003e 4FF4E013 		mov	r3, #1835008
 1656 0042 1893     		str	r3, [sp, #96]
 207:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1657              		.loc 1 207 3 is_stmt 1 view .LVU538
 208:Core/Src/main.c ****   {
 1658              		.loc 1 208 3 view .LVU539
 208:Core/Src/main.c ****   {
 1659              		.loc 1 208 7 is_stmt 0 view .LVU540
 1660 0044 0EA8     		add	r0, sp, #56
 1661 0046 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1662              	.LVL82:
 208:Core/Src/main.c ****   {
 1663              		.loc 1 208 6 view .LVU541
 1664 004a D8B9     		cbnz	r0, .L117
ARM GAS  /tmp/ccw0MSgW.s 			page 55


 214:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1665              		.loc 1 214 3 is_stmt 1 view .LVU542
 214:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1666              		.loc 1 214 31 is_stmt 0 view .LVU543
 1667 004c 0F23     		movs	r3, #15
 1668 004e 0993     		str	r3, [sp, #36]
 215:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1669              		.loc 1 215 3 is_stmt 1 view .LVU544
 215:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1670              		.loc 1 215 34 is_stmt 0 view .LVU545
 1671 0050 0221     		movs	r1, #2
 1672 0052 0A91     		str	r1, [sp, #40]
 216:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1673              		.loc 1 216 3 is_stmt 1 view .LVU546
 216:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1674              		.loc 1 216 35 is_stmt 0 view .LVU547
 1675 0054 0023     		movs	r3, #0
 1676 0056 0B93     		str	r3, [sp, #44]
 217:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1677              		.loc 1 217 3 is_stmt 1 view .LVU548
 217:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1678              		.loc 1 217 36 is_stmt 0 view .LVU549
 1679 0058 4FF48062 		mov	r2, #1024
 1680 005c 0C92     		str	r2, [sp, #48]
 218:Core/Src/main.c **** 
 1681              		.loc 1 218 3 is_stmt 1 view .LVU550
 218:Core/Src/main.c **** 
 1682              		.loc 1 218 36 is_stmt 0 view .LVU551
 1683 005e 0D93     		str	r3, [sp, #52]
 220:Core/Src/main.c ****   {
 1684              		.loc 1 220 3 is_stmt 1 view .LVU552
 220:Core/Src/main.c ****   {
 1685              		.loc 1 220 7 is_stmt 0 view .LVU553
 1686 0060 09A8     		add	r0, sp, #36
 1687 0062 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1688              	.LVL83:
 220:Core/Src/main.c ****   {
 1689              		.loc 1 220 6 view .LVU554
 1690 0066 78B9     		cbnz	r0, .L118
 224:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1691              		.loc 1 224 3 is_stmt 1 view .LVU555
 224:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1692              		.loc 1 224 38 is_stmt 0 view .LVU556
 1693 0068 0223     		movs	r3, #2
 1694 006a 0193     		str	r3, [sp, #4]
 225:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1695              		.loc 1 225 3 is_stmt 1 view .LVU557
 225:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1696              		.loc 1 225 35 is_stmt 0 view .LVU558
 1697 006c 4FF40043 		mov	r3, #32768
 1698 0070 0393     		str	r3, [sp, #12]
 226:Core/Src/main.c ****   {
 1699              		.loc 1 226 3 is_stmt 1 view .LVU559
 226:Core/Src/main.c ****   {
 1700              		.loc 1 226 7 is_stmt 0 view .LVU560
 1701 0072 01A8     		add	r0, sp, #4
 1702 0074 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
ARM GAS  /tmp/ccw0MSgW.s 			page 56


 1703              	.LVL84:
 226:Core/Src/main.c ****   {
 1704              		.loc 1 226 6 view .LVU561
 1705 0078 40B9     		cbnz	r0, .L119
 232:Core/Src/main.c **** }
 1706              		.loc 1 232 3 is_stmt 1 view .LVU562
 1707 007a 054B     		ldr	r3, .L120
 1708 007c 0122     		movs	r2, #1
 1709 007e 1A60     		str	r2, [r3]
 233:Core/Src/main.c **** 
 1710              		.loc 1 233 1 is_stmt 0 view .LVU563
 1711 0080 1CB0     		add	sp, sp, #112
 1712              		.cfi_remember_state
 1713              		.cfi_def_cfa_offset 8
 1714              		@ sp needed
 1715 0082 10BD     		pop	{r4, pc}
 1716              	.L117:
 1717              		.cfi_restore_state
 210:Core/Src/main.c ****   }
 1718              		.loc 1 210 5 is_stmt 1 view .LVU564
 1719 0084 FFF7FEFF 		bl	Error_Handler
 1720              	.LVL85:
 1721              	.L118:
 222:Core/Src/main.c ****   }
 1722              		.loc 1 222 5 view .LVU565
 1723 0088 FFF7FEFF 		bl	Error_Handler
 1724              	.LVL86:
 1725              	.L119:
 228:Core/Src/main.c ****   }
 1726              		.loc 1 228 5 view .LVU566
 1727 008c FFF7FEFF 		bl	Error_Handler
 1728              	.LVL87:
 1729              	.L121:
 1730              		.align	2
 1731              	.L120:
 1732 0090 70004242 		.word	1111621744
 1733              		.cfi_endproc
 1734              	.LFE71:
 1736              		.section	.text.main,"ax",%progbits
 1737              		.align	1
 1738              		.global	main
 1739              		.syntax unified
 1740              		.thumb
 1741              		.thumb_func
 1742              		.fpu softvfp
 1744              	main:
 1745              	.LFB70:
 109:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1746              		.loc 1 109 1 view -0
 1747              		.cfi_startproc
 1748              		@ Volatile: function does not return.
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751 0000 08B5     		push	{r3, lr}
 1752              		.cfi_def_cfa_offset 8
 1753              		.cfi_offset 3, -8
 1754              		.cfi_offset 14, -4
ARM GAS  /tmp/ccw0MSgW.s 			page 57


 117:Core/Src/main.c **** 
 1755              		.loc 1 117 3 view .LVU568
 1756 0002 FFF7FEFF 		bl	HAL_Init
 1757              	.LVL88:
 124:Core/Src/main.c **** 
 1758              		.loc 1 124 3 view .LVU569
 1759 0006 FFF7FEFF 		bl	SystemClock_Config
 1760              	.LVL89:
 131:Core/Src/main.c ****   MX_DMA_Init();
 1761              		.loc 1 131 3 view .LVU570
 1762 000a FFF7FEFF 		bl	MX_GPIO_Init
 1763              	.LVL90:
 132:Core/Src/main.c ****   MX_CAN2_Init();
 1764              		.loc 1 132 3 view .LVU571
 1765 000e FFF7FEFF 		bl	MX_DMA_Init
 1766              	.LVL91:
 133:Core/Src/main.c ****   MX_ADC1_Init();
 1767              		.loc 1 133 3 view .LVU572
 1768 0012 FFF7FEFF 		bl	MX_CAN2_Init
 1769              	.LVL92:
 134:Core/Src/main.c ****   MX_CAN1_Init();
 1770              		.loc 1 134 3 view .LVU573
 1771 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1772              	.LVL93:
 135:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 1773              		.loc 1 135 3 view .LVU574
 1774 001a FFF7FEFF 		bl	MX_CAN1_Init
 1775              	.LVL94:
 136:Core/Src/main.c ****   MX_UART4_Init();
 1776              		.loc 1 136 3 view .LVU575
 137:Core/Src/main.c ****   MX_USART1_UART_Init();
 1777              		.loc 1 137 3 view .LVU576
 1778 001e FFF7FEFF 		bl	MX_UART4_Init
 1779              	.LVL95:
 138:Core/Src/main.c ****   MX_TIM3_Init();
 1780              		.loc 1 138 3 view .LVU577
 1781 0022 FFF7FEFF 		bl	MX_USART1_UART_Init
 1782              	.LVL96:
 139:Core/Src/main.c ****   MX_TIM1_Init();
 1783              		.loc 1 139 3 view .LVU578
 1784 0026 FFF7FEFF 		bl	MX_TIM3_Init
 1785              	.LVL97:
 140:Core/Src/main.c ****   MX_TIM5_Init();
 1786              		.loc 1 140 3 view .LVU579
 1787 002a FFF7FEFF 		bl	MX_TIM1_Init
 1788              	.LVL98:
 141:Core/Src/main.c ****   MX_TIM2_Init();
 1789              		.loc 1 141 3 view .LVU580
 1790 002e FFF7FEFF 		bl	MX_TIM5_Init
 1791              	.LVL99:
 142:Core/Src/main.c ****   //MX_IWDG_Init();
 1792              		.loc 1 142 3 view .LVU581
 1793 0032 FFF7FEFF 		bl	MX_TIM2_Init
 1794              	.LVL100:
 144:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1795              		.loc 1 144 3 view .LVU582
 1796 0036 FFF7FEFF 		bl	MX_TIM6_Init
ARM GAS  /tmp/ccw0MSgW.s 			page 58


 1797              	.LVL101:
 146:Core/Src/main.c ****   gaugeInit();
 1798              		.loc 1 146 3 view .LVU583
 1799 003a FFF7FEFF 		bl	canSettings
 1800              	.LVL102:
 147:Core/Src/main.c ****   dcdcInit();
 1801              		.loc 1 147 3 view .LVU584
 1802 003e FFF7FEFF 		bl	gaugeInit
 1803              	.LVL103:
 148:Core/Src/main.c ****   vcuInit();
 1804              		.loc 1 148 3 view .LVU585
 1805 0042 FFF7FEFF 		bl	dcdcInit
 1806              	.LVL104:
 149:Core/Src/main.c ****   wpInit();
 1807              		.loc 1 149 3 view .LVU586
 1808 0046 FFF7FEFF 		bl	vcuInit
 1809              	.LVL105:
 150:Core/Src/main.c **** 
 1810              		.loc 1 150 3 view .LVU587
 1811 004a FFF7FEFF 		bl	wpInit
 1812              	.LVL106:
 152:Core/Src/main.c **** 
 1813              		.loc 1 152 3 view .LVU588
 1814 004e 2148     		ldr	r0, .L125
 1815 0050 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1816              	.LVL107:
 154:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); // water pump pw
 1817              		.loc 1 154 3 view .LVU589
 1818 0054 204C     		ldr	r4, .L125+4
 1819 0056 2046     		mov	r0, r4
 1820 0058 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1821              	.LVL108:
 155:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1822              		.loc 1 155 3 view .LVU590
 1823 005c 1F4D     		ldr	r5, .L125+8
 1824 005e 6423     		movs	r3, #100
 1825 0060 2A46     		mov	r2, r5
 1826 0062 1F49     		ldr	r1, .L125+12
 1827 0064 1F48     		ldr	r0, .L125+16
 1828 0066 FFF7FEFF 		bl	HAL_DMA_Start
 1829              	.LVL109:
 156:Core/Src/main.c **** 
 1830              		.loc 1 156 3 view .LVU591
 1831 006a 2268     		ldr	r2, [r4]
 1832 006c D368     		ldr	r3, [r2, #12]
 1833 006e 43F40073 		orr	r3, r3, #512
 1834 0072 D360     		str	r3, [r2, #12]
 158:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 1835              		.loc 1 158 3 view .LVU592
 1836 0074 1C4C     		ldr	r4, .L125+20
 1837 0076 2046     		mov	r0, r4
 1838 0078 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1839              	.LVL110:
 159:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 1840              		.loc 1 159 3 view .LVU593
 1841 007c 6423     		movs	r3, #100
 1842 007e 2A46     		mov	r2, r5
ARM GAS  /tmp/ccw0MSgW.s 			page 59


 1843 0080 1A49     		ldr	r1, .L125+24
 1844 0082 1B48     		ldr	r0, .L125+28
 1845 0084 FFF7FEFF 		bl	HAL_DMA_Start
 1846              	.LVL111:
 160:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 1847              		.loc 1 160 3 view .LVU594
 1848 0088 2268     		ldr	r2, [r4]
 1849 008a D368     		ldr	r3, [r2, #12]
 1850 008c 43F40073 		orr	r3, r3, #512
 1851 0090 D360     		str	r3, [r2, #12]
 161:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 1852              		.loc 1 161 3 view .LVU595
 1853 0092 4FF47A73 		mov	r3, #1000
 1854 0096 2A46     		mov	r2, r5
 1855 0098 1649     		ldr	r1, .L125+32
 1856 009a 1748     		ldr	r0, .L125+36
 1857 009c FFF7FEFF 		bl	HAL_DMA_Start
 1858              	.LVL112:
 162:Core/Src/main.c **** 
 1859              		.loc 1 162 3 view .LVU596
 1860 00a0 2268     		ldr	r2, [r4]
 1861 00a2 D368     		ldr	r3, [r2, #12]
 1862 00a4 43F48063 		orr	r3, r3, #1024
 1863 00a8 D360     		str	r3, [r2, #12]
 164:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 1864              		.loc 1 164 3 view .LVU597
 1865 00aa 0021     		movs	r1, #0
 1866 00ac 1348     		ldr	r0, .L125+40
 1867 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1868              	.LVL113:
 165:Core/Src/main.c **** 
 1869              		.loc 1 165 3 view .LVU598
 1870 00b2 0821     		movs	r1, #8
 1871 00b4 1248     		ldr	r0, .L125+44
 1872 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1873              	.LVL114:
 167:Core/Src/main.c ****   lastRun = HAL_GetTick();
 1874              		.loc 1 167 3 view .LVU599
 1875 00ba 0322     		movs	r2, #3
 1876 00bc 1149     		ldr	r1, .L125+48
 1877 00be 1248     		ldr	r0, .L125+52
 1878 00c0 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1879              	.LVL115:
 168:Core/Src/main.c **** 
 1880              		.loc 1 168 3 view .LVU600
 168:Core/Src/main.c **** 
 1881              		.loc 1 168 13 is_stmt 0 view .LVU601
 1882 00c4 FFF7FEFF 		bl	HAL_GetTick
 1883              	.LVL116:
 168:Core/Src/main.c **** 
 1884              		.loc 1 168 11 view .LVU602
 1885 00c8 104B     		ldr	r3, .L125+56
 1886 00ca 1860     		str	r0, [r3]
 1887              	.L123:
 174:Core/Src/main.c ****   {
 1888              		.loc 1 174 3 is_stmt 1 discriminator 1 view .LVU603
 176:Core/Src/main.c **** 
ARM GAS  /tmp/ccw0MSgW.s 			page 60


 1889              		.loc 1 176 5 discriminator 1 view .LVU604
 1890 00cc FFF7FEFF 		bl	taskHandler
 1891              	.LVL117:
 174:Core/Src/main.c ****   {
 1892              		.loc 1 174 9 discriminator 1 view .LVU605
 1893 00d0 FCE7     		b	.L123
 1894              	.L126:
 1895 00d2 00BF     		.align	2
 1896              	.L125:
 1897 00d4 00000000 		.word	htim6
 1898 00d8 00000000 		.word	htim2
 1899 00dc 10100140 		.word	1073811472
 1900 00e0 00000000 		.word	waterPWM
 1901 00e4 00000000 		.word	hdma_tim2_ch1
 1902 00e8 00000000 		.word	htim5
 1903 00ec 00000000 		.word	tempPWM
 1904 00f0 00000000 		.word	hdma_tim5_ch1
 1905 00f4 00000000 		.word	socPWM
 1906 00f8 00000000 		.word	hdma_tim5_ch2
 1907 00fc 00000000 		.word	htim1
 1908 0100 00000000 		.word	htim3
 1909 0104 00000000 		.word	ADC_data
 1910 0108 00000000 		.word	hadc1
 1911 010c 00000000 		.word	.LANCHOR0
 1912              		.cfi_endproc
 1913              	.LFE70:
 1915              		.comm	huart4,64,4
 1916              		.comm	hdma_tim5_ch2,68,4
 1917              		.comm	hdma_tim5_ch1,68,4
 1918              		.comm	hdma_tim2_ch1,68,4
 1919              		.comm	htim6,72,4
 1920              		.comm	htim5,72,4
 1921              		.comm	htim3,72,4
 1922              		.comm	htim2,72,4
 1923              		.comm	htim1,72,4
 1924              		.comm	hiwdg,12,4
 1925              		.comm	hdma_adc1,68,4
 1926              		.comm	hadc1,48,4
 1927              		.global	lastRun
 1928              		.global	BOARD_NAME
 1929              		.comm	waterPWM,400,4
 1930              		.comm	socPWM,4000,4
 1931              		.comm	tempPWM,400,4
 1932              		.comm	canDebug,4,4
 1933              		.comm	txCycle2,4,4
 1934              		.comm	txCycle,4,4
 1935              		.comm	canTx2,8,4
 1936              		.comm	canTx,8,4
 1937              		.comm	canMailbox2,4,4
 1938              		.comm	canMailbox,4,4
 1939              		.comm	canRx2,8,4
 1940              		.comm	canRx,8,4
 1941              		.comm	txMsgExt2,24,4
 1942              		.comm	txMsg2,24,4
 1943              		.comm	rxMsg2,28,4
 1944              		.comm	txMsgExt,24,4
 1945              		.comm	txMsg,24,4
ARM GAS  /tmp/ccw0MSgW.s 			page 61


 1946              		.comm	rxMsg,28,4
 1947              		.comm	sf5,40,4
 1948              		.comm	sf4,40,4
 1949              		.comm	sf3,40,4
 1950              		.comm	sf2,40,4
 1951              		.comm	sf,40,4
 1952              		.comm	hcan2,40,4
 1953              		.comm	hcan1,40,4
 1954              		.comm	LIDAR,8,4
 1955              		.comm	te,12,4
 1956              		.comm	taskTime,32,4
 1957              		.comm	BMS,20,4
 1958              		.comm	charger,3,4
 1959              		.comm	vcu,7,4
 1960              		.comm	iboost,2,4
 1961              		.comm	ldu,18,4
 1962              		.comm	tempdata,4,4
 1963              		.comm	ADC_data,12,4
 1964              		.comm	tenderActive,1,1
 1965              		.comm	time_now,4,4
 1966              		.comm	period,4,4
 1967              		.comm	DCDC,4,4
 1968              		.comm	huart1,64,4
 1969              		.section	.board_info,"a"
 1970              		.align	2
 1973              	BOARD_NAME:
 1974 0000 56435500 		.ascii	"VCU\000"
 1975 0004 00000000 		.space	6
 1975      0000
 1976              		.section	.bss.lastRun,"aw",%nobits
 1977              		.align	2
 1978              		.set	.LANCHOR0,. + 0
 1981              	lastRun:
 1982 0000 00000000 		.space	4
 1983              		.text
 1984              	.Letext0:
 1985              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1986              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 1987              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1988              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 1989              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1990              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1991              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1992              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1993              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1994              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1995              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1996              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1997              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 1998              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1999              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 2000              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2001              		.file 20 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 2002              		.file 21 "/usr/include/newlib/sys/_types.h"
 2003              		.file 22 "/usr/include/newlib/sys/reent.h"
 2004              		.file 23 "/usr/include/newlib/sys/lock.h"
 2005              		.file 24 "Core/Inc/dcdc.h"
ARM GAS  /tmp/ccw0MSgW.s 			page 62


 2006              		.file 25 "Core/Inc/vcu.h"
 2007              		.file 26 "Core/Inc/encoder.h"
 2008              		.file 27 "Core/Inc/lidar.h"
 2009              		.file 28 "Core/Inc/can_setup.h"
 2010              		.file 29 "Core/Inc/gauges.h"
 2011              		.file 30 "Core/Inc/water_pump.h"
 2012              		.file 31 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 2013              		.file 32 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2014              		.file 33 "Core/Inc/main.h"
 2015              		.file 34 "Core/Inc/tasks.h"
 2016              		.file 35 "<built-in>"
ARM GAS  /tmp/ccw0MSgW.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccw0MSgW.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccw0MSgW.s:202    .text.MX_GPIO_Init:00000000000000d4 $d
     /tmp/ccw0MSgW.s:209    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:215    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccw0MSgW.s:305    .text.MX_DMA_Init:0000000000000070 $d
     /tmp/ccw0MSgW.s:310    .text.__io_putchar:0000000000000000 $t
     /tmp/ccw0MSgW.s:317    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/ccw0MSgW.s:358    .text.__io_putchar:000000000000001c $d
                            *COM*:0000000000000040 huart1
     /tmp/ccw0MSgW.s:363    .text._write:0000000000000000 $t
     /tmp/ccw0MSgW.s:370    .text._write:0000000000000000 _write
     /tmp/ccw0MSgW.s:421    .text.Error_Handler:0000000000000000 $t
     /tmp/ccw0MSgW.s:428    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccw0MSgW.s:460    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:466    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/ccw0MSgW.s:533    .text.MX_CAN2_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan2
     /tmp/ccw0MSgW.s:539    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:545    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccw0MSgW.s:677    .text.MX_ADC1_Init:0000000000000088 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccw0MSgW.s:683    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:689    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccw0MSgW.s:756    .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccw0MSgW.s:762    .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:768    .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccw0MSgW.s:822    .text.MX_UART4_Init:000000000000002c $d
                            *COM*:0000000000000040 huart4
     /tmp/ccw0MSgW.s:828    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:834    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccw0MSgW.s:888    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccw0MSgW.s:894    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:900    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccw0MSgW.s:1050   .text.MX_TIM3_Init:000000000000009c $d
                            *COM*:0000000000000048 htim3
     /tmp/ccw0MSgW.s:1056   .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:1062   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccw0MSgW.s:1234   .text.MX_TIM1_Init:00000000000000a8 $d
                            *COM*:0000000000000048 htim1
     /tmp/ccw0MSgW.s:1240   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:1246   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccw0MSgW.s:1370   .text.MX_TIM5_Init:000000000000007c $d
                            *COM*:0000000000000048 htim5
     /tmp/ccw0MSgW.s:1376   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:1382   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccw0MSgW.s:1493   .text.MX_TIM2_Init:000000000000006c $d
                            *COM*:0000000000000048 htim2
     /tmp/ccw0MSgW.s:1498   .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/ccw0MSgW.s:1504   .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/ccw0MSgW.s:1578   .text.MX_TIM6_Init:0000000000000044 $d
                            *COM*:0000000000000048 htim6
     /tmp/ccw0MSgW.s:1584   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccw0MSgW.s:1591   .text.SystemClock_Config:0000000000000000 SystemClock_Config
ARM GAS  /tmp/ccw0MSgW.s 			page 64


     /tmp/ccw0MSgW.s:1732   .text.SystemClock_Config:0000000000000090 $d
     /tmp/ccw0MSgW.s:1737   .text.main:0000000000000000 $t
     /tmp/ccw0MSgW.s:1744   .text.main:0000000000000000 main
     /tmp/ccw0MSgW.s:1897   .text.main:00000000000000d4 $d
                            *COM*:0000000000000190 waterPWM
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000190 tempPWM
                            *COM*:0000000000000044 hdma_tim5_ch1
                            *COM*:0000000000000fa0 socPWM
                            *COM*:0000000000000044 hdma_tim5_ch2
                            *COM*:000000000000000c ADC_data
                            *COM*:000000000000000c hiwdg
                            *COM*:0000000000000044 hdma_adc1
     /tmp/ccw0MSgW.s:1981   .bss.lastRun:0000000000000000 lastRun
     /tmp/ccw0MSgW.s:1973   .board_info:0000000000000000 BOARD_NAME
                            *COM*:0000000000000004 canDebug
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000008 canTx2
                            *COM*:0000000000000008 canTx
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
                            *COM*:0000000000000008 LIDAR
                            *COM*:000000000000000c te
                            *COM*:0000000000000020 taskTime
                            *COM*:0000000000000014 BMS
                            *COM*:0000000000000003 charger
                            *COM*:0000000000000007 vcu
                            *COM*:0000000000000002 iboost
                            *COM*:0000000000000012 ldu
                            *COM*:0000000000000004 tempdata
                            *COM*:0000000000000001 tenderActive
                            *COM*:0000000000000004 time_now
                            *COM*:0000000000000004 period
                            *COM*:0000000000000004 DCDC
     /tmp/ccw0MSgW.s:1970   .board_info:0000000000000000 $d
     /tmp/ccw0MSgW.s:1977   .bss.lastRun:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
ARM GAS  /tmp/ccw0MSgW.s 			page 65


HAL_CAN_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
memset
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_OC_Init
HAL_TIM_OC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
canSettings
gaugeInit
dcdcInit
vcuInit
wpInit
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Start
HAL_DMA_Start
HAL_TIM_PWM_Start
HAL_ADC_Start_DMA
HAL_GetTick
taskHandler
