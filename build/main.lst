ARM GAS  /tmp/ccGfBWxb.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB85:
  24              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** #include "print_uart.h"
  28:Core/Src/main.c **** #include "can_setup.h"
  29:Core/Src/main.c **** #include "FreeRTOS.h"
  30:Core/Src/main.c **** #include "task.h" //needed for delayuntil
  31:Core/Src/main.c **** #include "gauges.h"
  32:Core/Src/main.c **** #include "vcu.h"
  33:Core/Src/main.c **** #include "test.h"
  34:Core/Src/main.c **** #include "water_pump.h"
ARM GAS  /tmp/ccGfBWxb.s 			page 2


  35:Core/Src/main.c **** #include "dcdc.h"
  36:Core/Src/main.c **** /* USER CODE END Includes */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PTD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PD */
  45:Core/Src/main.c **** /* USER CODE END PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  53:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  54:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  57:Core/Src/main.c **** CAN_HandleTypeDef hcan2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  60:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  61:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  62:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  63:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_ch1;
  64:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch1;
  65:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch2;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** UART_HandleTypeDef huart4;
  68:Core/Src/main.c **** UART_HandleTypeDef huart1;
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Definitions for TaskLoop */
  71:Core/Src/main.c **** osThreadId_t TaskLoopHandle;
  72:Core/Src/main.c **** const osThreadAttr_t TaskLoop_attributes = {
  73:Core/Src/main.c ****   .name = "TaskLoop",
  74:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  75:Core/Src/main.c ****   .stack_size = 128 * 4
  76:Core/Src/main.c **** };
  77:Core/Src/main.c **** /* Definitions for Task10ms */
  78:Core/Src/main.c **** osThreadId_t Task10msHandle;
  79:Core/Src/main.c **** const osThreadAttr_t Task10ms_attributes = {
  80:Core/Src/main.c ****   .name = "Task10ms",
  81:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityRealtime,
  82:Core/Src/main.c ****   .stack_size = 128 * 4
  83:Core/Src/main.c **** };
  84:Core/Src/main.c **** /* Definitions for Task100ms */
  85:Core/Src/main.c **** osThreadId_t Task100msHandle;
  86:Core/Src/main.c **** const osThreadAttr_t Task100ms_attributes = {
  87:Core/Src/main.c ****   .name = "Task100ms",
  88:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityRealtime,
  89:Core/Src/main.c ****   .stack_size = 128 * 4
  90:Core/Src/main.c **** };
  91:Core/Src/main.c **** /* Definitions for Task250ms */
ARM GAS  /tmp/ccGfBWxb.s 			page 3


  92:Core/Src/main.c **** osThreadId_t Task250msHandle;
  93:Core/Src/main.c **** const osThreadAttr_t Task250ms_attributes = {
  94:Core/Src/main.c ****   .name = "Task250ms",
  95:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityRealtime,
  96:Core/Src/main.c ****   .stack_size = 128 * 4
  97:Core/Src/main.c **** };
  98:Core/Src/main.c **** /* USER CODE BEGIN PV */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /* USER CODE END PV */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 103:Core/Src/main.c **** void SystemClock_Config(void);
 104:Core/Src/main.c **** static void MX_GPIO_Init(void);
 105:Core/Src/main.c **** static void MX_DMA_Init(void);
 106:Core/Src/main.c **** static void MX_CAN2_Init(void);
 107:Core/Src/main.c **** static void MX_ADC1_Init(void);
 108:Core/Src/main.c **** static void MX_CAN1_Init(void);
 109:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void);
 110:Core/Src/main.c **** static void MX_UART4_Init(void);
 111:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 112:Core/Src/main.c **** static void MX_TIM3_Init(void);
 113:Core/Src/main.c **** static void MX_TIM1_Init(void);
 114:Core/Src/main.c **** static void MX_TIM5_Init(void);
 115:Core/Src/main.c **** static void MX_TIM2_Init(void);
 116:Core/Src/main.c **** void StartTaskLoop(void *argument);
 117:Core/Src/main.c **** void StartTask10ms(void *argument);
 118:Core/Src/main.c **** void StartTask100ms(void *argument);
 119:Core/Src/main.c **** void StartTask250ms(void *argument);
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c **** /* USER CODE END PFP */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 126:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** /* USER CODE END 0 */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** /**
 131:Core/Src/main.c ****   * @brief  The application entry point.
 132:Core/Src/main.c ****   * @retval int
 133:Core/Src/main.c ****   */
 134:Core/Src/main.c **** int main(void)
 135:Core/Src/main.c **** {
 136:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* USER CODE END 1 */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 143:Core/Src/main.c ****   HAL_Init();
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* USER CODE END Init */
 148:Core/Src/main.c **** 
ARM GAS  /tmp/ccGfBWxb.s 			page 4


 149:Core/Src/main.c ****   /* Configure the system clock */
 150:Core/Src/main.c ****   SystemClock_Config();
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* USER CODE END SysInit */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* Initialize all configured peripherals */
 157:Core/Src/main.c ****   MX_GPIO_Init();
 158:Core/Src/main.c ****   MX_DMA_Init();
 159:Core/Src/main.c ****   MX_CAN2_Init();
 160:Core/Src/main.c ****   MX_ADC1_Init();
 161:Core/Src/main.c ****   MX_CAN1_Init();
 162:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 163:Core/Src/main.c ****   MX_UART4_Init();
 164:Core/Src/main.c ****   MX_USART1_UART_Init();
 165:Core/Src/main.c ****   MX_TIM3_Init();
 166:Core/Src/main.c ****   MX_TIM1_Init();
 167:Core/Src/main.c ****   MX_TIM5_Init();
 168:Core/Src/main.c ****   MX_TIM2_Init();
 169:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 170:Core/Src/main.c ****   canSettings();
 171:Core/Src/main.c ****   gaugeInit();
 172:Core/Src/main.c ****   dcdcInit();
 173:Core/Src/main.c ****   vcuInit();
 174:Core/Src/main.c ****   wpInit();
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 177:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); //water pump pwm
 178:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim5);
 181:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 182:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 183:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 184:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Tach pwm start
 187:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, ADC_data, 3);
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END 2 */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* Init scheduler */
 194:Core/Src/main.c ****   osKernelInitialize();
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 197:Core/Src/main.c ****   /* add mutexes, ... */
 198:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 201:Core/Src/main.c ****   /* add semaphores, ... */
 202:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 205:Core/Src/main.c ****   /* start timers, add new ones, ... */
ARM GAS  /tmp/ccGfBWxb.s 			page 5


 206:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 209:Core/Src/main.c ****   /* add queues, ... */
 210:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Create the thread(s) */
 213:Core/Src/main.c ****   /* creation of TaskLoop */
 214:Core/Src/main.c ****   TaskLoopHandle = osThreadNew(StartTaskLoop, NULL, &TaskLoop_attributes);
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /* creation of Task10ms */
 217:Core/Src/main.c ****   Task10msHandle = osThreadNew(StartTask10ms, NULL, &Task10ms_attributes);
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* creation of Task100ms */
 220:Core/Src/main.c ****   Task100msHandle = osThreadNew(StartTask100ms, NULL, &Task100ms_attributes);
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /* creation of Task250ms */
 223:Core/Src/main.c ****   Task250msHandle = osThreadNew(StartTask250ms, NULL, &Task250ms_attributes);
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 226:Core/Src/main.c ****   /* add threads, ... */
 227:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 230:Core/Src/main.c ****   /* add events, ... */
 231:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* Start scheduler */
 234:Core/Src/main.c ****   osKernelStart();
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 237:Core/Src/main.c ****   /* Infinite loop */
 238:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 239:Core/Src/main.c ****   while (1)
 240:Core/Src/main.c ****   {
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****     /* USER CODE END WHILE */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 245:Core/Src/main.c ****   }
 246:Core/Src/main.c ****   /* USER CODE END 3 */
 247:Core/Src/main.c **** }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** /**
 250:Core/Src/main.c ****   * @brief System Clock Configuration
 251:Core/Src/main.c ****   * @retval None
 252:Core/Src/main.c ****   */
 253:Core/Src/main.c **** void SystemClock_Config(void)
 254:Core/Src/main.c **** {
 255:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 256:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 257:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 260:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 261:Core/Src/main.c ****   */
 262:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
ARM GAS  /tmp/ccGfBWxb.s 			page 6


 263:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 265:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 266:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 271:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 272:Core/Src/main.c ****   {
 273:Core/Src/main.c ****     Error_Handler();
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 276:Core/Src/main.c ****   */
 277:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 278:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 279:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 280:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 282:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 285:Core/Src/main.c ****   {
 286:Core/Src/main.c ****     Error_Handler();
 287:Core/Src/main.c ****   }
 288:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 289:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 290:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****     Error_Handler();
 293:Core/Src/main.c ****   }
 294:Core/Src/main.c ****   /** Configure the Systick interrupt time
 295:Core/Src/main.c ****   */
 296:Core/Src/main.c ****   __HAL_RCC_PLLI2S_ENABLE();
 297:Core/Src/main.c **** }
 298:Core/Src/main.c **** 
 299:Core/Src/main.c **** /**
 300:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 301:Core/Src/main.c ****   * @param None
 302:Core/Src/main.c ****   * @retval None
 303:Core/Src/main.c ****   */
 304:Core/Src/main.c **** static void MX_ADC1_Init(void)
 305:Core/Src/main.c **** {
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 316:Core/Src/main.c ****   /** Common config
 317:Core/Src/main.c ****   */
 318:Core/Src/main.c ****   hadc1.Instance = ADC1;
 319:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
ARM GAS  /tmp/ccGfBWxb.s 			page 7


 320:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 321:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 322:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 323:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 324:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 325:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 326:Core/Src/main.c ****   {
 327:Core/Src/main.c ****     Error_Handler();
 328:Core/Src/main.c ****   }
 329:Core/Src/main.c ****   /** Configure Regular Channel
 330:Core/Src/main.c ****   */
 331:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_11;
 332:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 333:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 334:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 335:Core/Src/main.c ****   {
 336:Core/Src/main.c ****     Error_Handler();
 337:Core/Src/main.c ****   }
 338:Core/Src/main.c ****   /** Configure Regular Channel
 339:Core/Src/main.c ****   */
 340:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 341:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 342:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 343:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 344:Core/Src/main.c ****   {
 345:Core/Src/main.c ****     Error_Handler();
 346:Core/Src/main.c ****   }
 347:Core/Src/main.c ****   /** Configure Regular Channel
 348:Core/Src/main.c ****   */
 349:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 350:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 351:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 358:Core/Src/main.c **** 
 359:Core/Src/main.c **** }
 360:Core/Src/main.c **** 
 361:Core/Src/main.c **** /**
 362:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 363:Core/Src/main.c ****   * @param None
 364:Core/Src/main.c ****   * @retval None
 365:Core/Src/main.c ****   */
 366:Core/Src/main.c **** static void MX_CAN1_Init(void)
 367:Core/Src/main.c **** {
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 376:Core/Src/main.c ****   hcan1.Instance = CAN1;
ARM GAS  /tmp/ccGfBWxb.s 			page 8


 377:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 378:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 379:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 380:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 381:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 382:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 383:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 384:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 385:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 386:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 387:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 388:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 389:Core/Src/main.c ****   {
 390:Core/Src/main.c ****     Error_Handler();
 391:Core/Src/main.c ****   }
 392:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c **** }
 397:Core/Src/main.c **** 
 398:Core/Src/main.c **** /**
 399:Core/Src/main.c ****   * @brief CAN2 Initialization Function
 400:Core/Src/main.c ****   * @param None
 401:Core/Src/main.c ****   * @retval None
 402:Core/Src/main.c ****   */
 403:Core/Src/main.c **** static void MX_CAN2_Init(void)
 404:Core/Src/main.c **** {
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 0 */
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* USER CODE END CAN2_Init 0 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 1 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE END CAN2_Init 1 */
 413:Core/Src/main.c ****   hcan2.Instance = CAN2;
 414:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 415:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 416:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 417:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 418:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 419:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 420:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 421:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 422:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 423:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 424:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 425:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 426:Core/Src/main.c ****   {
 427:Core/Src/main.c ****     Error_Handler();
 428:Core/Src/main.c ****   }
 429:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 2 */
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   /* USER CODE END CAN2_Init 2 */
 432:Core/Src/main.c **** 
 433:Core/Src/main.c **** }
ARM GAS  /tmp/ccGfBWxb.s 			page 9


 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** /**
 436:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 437:Core/Src/main.c ****   * @param None
 438:Core/Src/main.c ****   * @retval None
 439:Core/Src/main.c ****   */
 440:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void)
 441:Core/Src/main.c **** {
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 450:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 453:Core/Src/main.c **** 
 454:Core/Src/main.c **** }
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** /**
 457:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 458:Core/Src/main.c ****   * @param None
 459:Core/Src/main.c ****   * @retval None
 460:Core/Src/main.c ****   */
 461:Core/Src/main.c **** static void MX_TIM1_Init(void)
 462:Core/Src/main.c **** {
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 469:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 470:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 475:Core/Src/main.c ****   htim1.Instance = TIM1;
 476:Core/Src/main.c ****   htim1.Init.Prescaler = 1050;
 477:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 478:Core/Src/main.c ****   htim1.Init.Period = 65535;
 479:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 480:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 481:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 482:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 483:Core/Src/main.c ****   {
 484:Core/Src/main.c ****     Error_Handler();
 485:Core/Src/main.c ****   }
 486:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 487:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 488:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 489:Core/Src/main.c ****   {
 490:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccGfBWxb.s 			page 10


 491:Core/Src/main.c ****   }
 492:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 493:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 494:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 495:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 496:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 497:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 498:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 499:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 500:Core/Src/main.c ****   {
 501:Core/Src/main.c ****     Error_Handler();
 502:Core/Src/main.c ****   }
 503:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 504:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 505:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 506:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 507:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 508:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 509:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 510:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 511:Core/Src/main.c ****   {
 512:Core/Src/main.c ****     Error_Handler();
 513:Core/Src/main.c ****   }
 514:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 517:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** }
 520:Core/Src/main.c **** 
 521:Core/Src/main.c **** /**
 522:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 523:Core/Src/main.c ****   * @param None
 524:Core/Src/main.c ****   * @retval None
 525:Core/Src/main.c ****   */
 526:Core/Src/main.c **** static void MX_TIM2_Init(void)
 527:Core/Src/main.c **** {
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 530:Core/Src/main.c **** 
 531:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 532:Core/Src/main.c **** 
 533:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 534:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 535:Core/Src/main.c **** 
 536:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 537:Core/Src/main.c ****   // Water pump pwm emulation
 538:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 539:Core/Src/main.c ****   htim2.Instance = TIM2;
 540:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 541:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 542:Core/Src/main.c ****   htim2.Init.Period = 600;
 543:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 544:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 545:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 546:Core/Src/main.c ****   {
 547:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccGfBWxb.s 			page 11


 548:Core/Src/main.c ****   }
 549:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 550:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 551:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 552:Core/Src/main.c ****   {
 553:Core/Src/main.c ****     Error_Handler();
 554:Core/Src/main.c ****   }
 555:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 556:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 557:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 558:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 559:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 560:Core/Src/main.c ****   {
 561:Core/Src/main.c ****     Error_Handler();
 562:Core/Src/main.c ****   }
 563:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 566:Core/Src/main.c **** 
 567:Core/Src/main.c **** }
 568:Core/Src/main.c **** 
 569:Core/Src/main.c **** /**
 570:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 571:Core/Src/main.c ****   * @param None
 572:Core/Src/main.c ****   * @retval None
 573:Core/Src/main.c ****   */
 574:Core/Src/main.c **** static void MX_TIM3_Init(void)
 575:Core/Src/main.c **** {
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 578:Core/Src/main.c **** 
 579:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 580:Core/Src/main.c **** 
 581:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 582:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 583:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 584:Core/Src/main.c **** 
 585:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 586:Core/Src/main.c **** 
 587:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 588:Core/Src/main.c ****   htim3.Instance = TIM3;
 589:Core/Src/main.c ****   htim3.Init.Prescaler = 5000;
 590:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 591:Core/Src/main.c ****   htim3.Init.Period = 600;
 592:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 593:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 594:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 595:Core/Src/main.c ****   {
 596:Core/Src/main.c ****     Error_Handler();
 597:Core/Src/main.c ****   }
 598:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 599:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 600:Core/Src/main.c ****   {
 601:Core/Src/main.c ****     Error_Handler();
 602:Core/Src/main.c ****   }
 603:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 604:Core/Src/main.c ****   {
ARM GAS  /tmp/ccGfBWxb.s 			page 12


 605:Core/Src/main.c ****     Error_Handler();
 606:Core/Src/main.c ****   }
 607:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 608:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 609:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 610:Core/Src/main.c ****   {
 611:Core/Src/main.c ****     Error_Handler();
 612:Core/Src/main.c ****   }
 613:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 614:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 615:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 616:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 617:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 618:Core/Src/main.c ****   {
 619:Core/Src/main.c ****     Error_Handler();
 620:Core/Src/main.c ****   }
 621:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 622:Core/Src/main.c **** 
 623:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 624:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 625:Core/Src/main.c **** 
 626:Core/Src/main.c **** }
 627:Core/Src/main.c **** 
 628:Core/Src/main.c **** /**
 629:Core/Src/main.c ****   * @brief TIM5 Initialization Function
 630:Core/Src/main.c ****   * @param None
 631:Core/Src/main.c ****   * @retval None
 632:Core/Src/main.c ****   */
 633:Core/Src/main.c **** static void MX_TIM5_Init(void)
 634:Core/Src/main.c **** {
 635:Core/Src/main.c **** 
 636:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
 637:Core/Src/main.c **** 
 638:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
 639:Core/Src/main.c **** 
 640:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 641:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 642:Core/Src/main.c **** 
 643:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
 644:Core/Src/main.c **** 
 645:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
 646:Core/Src/main.c ****   htim5.Instance = TIM5;
 647:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 648:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 649:Core/Src/main.c ****   htim5.Init.Period = 10;
 650:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 651:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 652:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 653:Core/Src/main.c ****   {
 654:Core/Src/main.c ****     Error_Handler();
 655:Core/Src/main.c ****   }
 656:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 657:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 658:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 659:Core/Src/main.c ****   {
 660:Core/Src/main.c ****     Error_Handler();
 661:Core/Src/main.c ****   }
ARM GAS  /tmp/ccGfBWxb.s 			page 13


 662:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 663:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 664:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 665:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 666:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 667:Core/Src/main.c ****   {
 668:Core/Src/main.c ****     Error_Handler();
 669:Core/Src/main.c ****   }
 670:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 671:Core/Src/main.c ****   {
 672:Core/Src/main.c ****     Error_Handler();
 673:Core/Src/main.c ****   }
 674:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
 675:Core/Src/main.c **** 
 676:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
 677:Core/Src/main.c **** 
 678:Core/Src/main.c **** }
 679:Core/Src/main.c **** 
 680:Core/Src/main.c **** /**
 681:Core/Src/main.c ****   * @brief UART4 Initialization Function
 682:Core/Src/main.c ****   * @param None
 683:Core/Src/main.c ****   * @retval None
 684:Core/Src/main.c ****   */
 685:Core/Src/main.c **** static void MX_UART4_Init(void)
 686:Core/Src/main.c **** {
 687:Core/Src/main.c **** 
 688:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 0 */
 689:Core/Src/main.c **** 
 690:Core/Src/main.c ****   /* USER CODE END UART4_Init 0 */
 691:Core/Src/main.c **** 
 692:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 1 */
 693:Core/Src/main.c **** 
 694:Core/Src/main.c ****   /* USER CODE END UART4_Init 1 */
 695:Core/Src/main.c ****   huart4.Instance = UART4;
 696:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 697:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 698:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 699:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 700:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 701:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 702:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 703:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 704:Core/Src/main.c ****   {
 705:Core/Src/main.c ****     Error_Handler();
 706:Core/Src/main.c ****   }
 707:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 2 */
 708:Core/Src/main.c **** 
 709:Core/Src/main.c ****   /* USER CODE END UART4_Init 2 */
 710:Core/Src/main.c **** 
 711:Core/Src/main.c **** }
 712:Core/Src/main.c **** 
 713:Core/Src/main.c **** /**
 714:Core/Src/main.c ****   * @brief USART1 Initialization Function
 715:Core/Src/main.c ****   * @param None
 716:Core/Src/main.c ****   * @retval None
 717:Core/Src/main.c ****   */
 718:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
ARM GAS  /tmp/ccGfBWxb.s 			page 14


 719:Core/Src/main.c **** {
 720:Core/Src/main.c **** 
 721:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 722:Core/Src/main.c **** 
 723:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 724:Core/Src/main.c **** 
 725:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 726:Core/Src/main.c **** 
 727:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 728:Core/Src/main.c ****   huart1.Instance = USART1;
 729:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 730:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 731:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 732:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 733:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 734:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 735:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 736:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 737:Core/Src/main.c ****   {
 738:Core/Src/main.c ****     Error_Handler();
 739:Core/Src/main.c ****   }
 740:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 741:Core/Src/main.c **** 
 742:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 743:Core/Src/main.c **** 
 744:Core/Src/main.c **** }
 745:Core/Src/main.c **** 
 746:Core/Src/main.c **** /**
 747:Core/Src/main.c ****   * Enable DMA controller clock
 748:Core/Src/main.c ****   */
 749:Core/Src/main.c **** static void MX_DMA_Init(void)
 750:Core/Src/main.c **** {
 751:Core/Src/main.c **** 
 752:Core/Src/main.c ****   /* DMA controller clock enable */
 753:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 754:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 755:Core/Src/main.c **** 
 756:Core/Src/main.c ****   /* DMA interrupt init */
 757:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 758:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 759:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 760:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 761:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 762:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 763:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 764:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 765:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 766:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 767:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 768:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 769:Core/Src/main.c **** 
 770:Core/Src/main.c **** }
 771:Core/Src/main.c **** 
 772:Core/Src/main.c **** /**
 773:Core/Src/main.c ****   * @brief GPIO Initialization Function
 774:Core/Src/main.c ****   * @param None
 775:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccGfBWxb.s 			page 15


 776:Core/Src/main.c ****   */
 777:Core/Src/main.c **** static void MX_GPIO_Init(void)
 778:Core/Src/main.c **** {
  25              		.loc 1 778 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 779:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 779 0
  42 0006 0024     		movs	r4, #0
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB4:
 780:Core/Src/main.c **** 
 781:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 782:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 782 0
  49 0010 304B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F01002 		orr	r2, r2, #16
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F01002 		and	r2, r2, #16
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE4:
  58              	.LBB5:
 783:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  59              		.loc 1 783 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F02002 		orr	r2, r2, #32
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9A69     		ldr	r2, [r3, #24]
  64 002e 02F02002 		and	r2, r2, #32
  65 0032 0192     		str	r2, [sp, #4]
  66 0034 019A     		ldr	r2, [sp, #4]
  67              	.LBE5:
  68              	.LBB6:
 784:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 784 0
  70 0036 9A69     		ldr	r2, [r3, #24]
  71 0038 42F00402 		orr	r2, r2, #4
  72 003c 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/ccGfBWxb.s 			page 16


  73 003e 9A69     		ldr	r2, [r3, #24]
  74 0040 02F00402 		and	r2, r2, #4
  75 0044 0292     		str	r2, [sp, #8]
  76 0046 029A     		ldr	r2, [sp, #8]
  77              	.LBE6:
  78              	.LBB7:
 785:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  79              		.loc 1 785 0
  80 0048 9A69     		ldr	r2, [r3, #24]
  81 004a 42F00802 		orr	r2, r2, #8
  82 004e 9A61     		str	r2, [r3, #24]
  83 0050 9B69     		ldr	r3, [r3, #24]
  84 0052 03F00803 		and	r3, r3, #8
  85 0056 0393     		str	r3, [sp, #12]
  86 0058 039B     		ldr	r3, [sp, #12]
  87              	.LBE7:
 786:Core/Src/main.c **** 
 787:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 788:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, LED_Pin|WP_Pin|TEMP_Pin|SOC_Pin, GPIO_PIN_RESET);
  88              		.loc 1 788 0
  89 005a 1F4E     		ldr	r6, .L3+4
  90 005c 2246     		mov	r2, r4
  91 005e 4FF40B51 		mov	r1, #8896
  92 0062 3046     		mov	r0, r6
  93 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL0:
 789:Core/Src/main.c **** 
 790:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 791:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, PS_INIT_Pin|HEAT_OUT_Pin, GPIO_PIN_RESET);
  95              		.loc 1 791 0
  96 0068 1C4D     		ldr	r5, .L3+8
  97 006a 2246     		mov	r2, r4
  98 006c 4FF44041 		mov	r1, #49152
  99 0070 2846     		mov	r0, r5
 100 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL1:
 792:Core/Src/main.c **** 
 793:Core/Src/main.c ****   /*Configure GPIO pins : LED_Pin WP_Pin */
 794:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin|WP_Pin;
 102              		.loc 1 794 0
 103 0076 4FF40153 		mov	r3, #8256
 104 007a 0493     		str	r3, [sp, #16]
 795:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 105              		.loc 1 795 0
 106 007c 0127     		movs	r7, #1
 107 007e 0597     		str	r7, [sp, #20]
 796:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 108              		.loc 1 796 0
 109 0080 0694     		str	r4, [sp, #24]
 797:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 110              		.loc 1 797 0
 111 0082 4FF00208 		mov	r8, #2
 112 0086 CDF81C80 		str	r8, [sp, #28]
 798:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 113              		.loc 1 798 0
 114 008a 04A9     		add	r1, sp, #16
 115 008c 3046     		mov	r0, r6
ARM GAS  /tmp/ccGfBWxb.s 			page 17


 116 008e FFF7FEFF 		bl	HAL_GPIO_Init
 117              	.LVL2:
 799:Core/Src/main.c **** 
 800:Core/Src/main.c ****   /*Configure GPIO pins : PS_INIT_Pin HEAT_OUT_Pin */
 801:Core/Src/main.c ****   GPIO_InitStruct.Pin = PS_INIT_Pin|HEAT_OUT_Pin;
 118              		.loc 1 801 0
 119 0092 4FF44043 		mov	r3, #49152
 120 0096 0493     		str	r3, [sp, #16]
 802:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 121              		.loc 1 802 0
 122 0098 0597     		str	r7, [sp, #20]
 803:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 123              		.loc 1 803 0
 124 009a 0694     		str	r4, [sp, #24]
 804:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 804 0
 126 009c CDF81C80 		str	r8, [sp, #28]
 805:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 127              		.loc 1 805 0
 128 00a0 04A9     		add	r1, sp, #16
 129 00a2 2846     		mov	r0, r5
 130 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL3:
 806:Core/Src/main.c **** 
 807:Core/Src/main.c ****   /*Configure GPIO pins : TEMP_Pin SOC_Pin */
 808:Core/Src/main.c ****   GPIO_InitStruct.Pin = TEMP_Pin|SOC_Pin;
 132              		.loc 1 808 0
 133 00a8 4FF42073 		mov	r3, #640
 134 00ac 0493     		str	r3, [sp, #16]
 809:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 135              		.loc 1 809 0
 136 00ae 0597     		str	r7, [sp, #20]
 810:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 137              		.loc 1 810 0
 138 00b0 0694     		str	r4, [sp, #24]
 811:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 139              		.loc 1 811 0
 140 00b2 0323     		movs	r3, #3
 141 00b4 0793     		str	r3, [sp, #28]
 812:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 142              		.loc 1 812 0
 143 00b6 04A9     		add	r1, sp, #16
 144 00b8 3046     		mov	r0, r6
 145 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL4:
 813:Core/Src/main.c **** 
 814:Core/Src/main.c ****   /*Configure GPIO pins : SW12_Pin HEAT_REQ_Pin */
 815:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW12_Pin|HEAT_REQ_Pin;
 147              		.loc 1 815 0
 148 00be 3023     		movs	r3, #48
 149 00c0 0493     		str	r3, [sp, #16]
 816:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 150              		.loc 1 816 0
 151 00c2 0594     		str	r4, [sp, #20]
 817:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 817 0
 153 00c4 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccGfBWxb.s 			page 18


 818:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 154              		.loc 1 818 0
 155 00c6 04A9     		add	r1, sp, #16
 156 00c8 2846     		mov	r0, r5
 157 00ca FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL5:
 819:Core/Src/main.c **** 
 820:Core/Src/main.c **** }
 159              		.loc 1 820 0
 160 00ce 08B0     		add	sp, sp, #32
 161              	.LCFI2:
 162              		.cfi_def_cfa_offset 24
 163              		@ sp needed
 164 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 165              	.L4:
 166              		.align	2
 167              	.L3:
 168 00d4 00100240 		.word	1073876992
 169 00d8 00100140 		.word	1073811456
 170 00dc 000C0140 		.word	1073810432
 171              		.cfi_endproc
 172              	.LFE85:
 174              		.section	.text.MX_DMA_Init,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	MX_DMA_Init:
 182              	.LFB84:
 750:Core/Src/main.c **** 
 183              		.loc 1 750 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 8
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187 0000 00B5     		push	{lr}
 188              	.LCFI3:
 189              		.cfi_def_cfa_offset 4
 190              		.cfi_offset 14, -4
 191 0002 83B0     		sub	sp, sp, #12
 192              	.LCFI4:
 193              		.cfi_def_cfa_offset 16
 194              	.LBB8:
 753:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 195              		.loc 1 753 0
 196 0004 1A4B     		ldr	r3, .L7
 197 0006 5A69     		ldr	r2, [r3, #20]
 198 0008 42F00202 		orr	r2, r2, #2
 199 000c 5A61     		str	r2, [r3, #20]
 200 000e 5A69     		ldr	r2, [r3, #20]
 201 0010 02F00202 		and	r2, r2, #2
 202 0014 0092     		str	r2, [sp]
 203 0016 009A     		ldr	r2, [sp]
 204              	.LBE8:
 205              	.LBB9:
 754:Core/Src/main.c **** 
 206              		.loc 1 754 0
ARM GAS  /tmp/ccGfBWxb.s 			page 19


 207 0018 5A69     		ldr	r2, [r3, #20]
 208 001a 42F00102 		orr	r2, r2, #1
 209 001e 5A61     		str	r2, [r3, #20]
 210 0020 5B69     		ldr	r3, [r3, #20]
 211 0022 03F00103 		and	r3, r3, #1
 212 0026 0193     		str	r3, [sp, #4]
 213 0028 019B     		ldr	r3, [sp, #4]
 214              	.LBE9:
 758:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 215              		.loc 1 758 0
 216 002a 0022     		movs	r2, #0
 217 002c 0521     		movs	r1, #5
 218 002e 0B20     		movs	r0, #11
 219 0030 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 220              	.LVL6:
 759:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 221              		.loc 1 759 0
 222 0034 0B20     		movs	r0, #11
 223 0036 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 224              	.LVL7:
 761:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 225              		.loc 1 761 0
 226 003a 0022     		movs	r2, #0
 227 003c 0521     		movs	r1, #5
 228 003e 0F20     		movs	r0, #15
 229 0040 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 230              	.LVL8:
 762:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 231              		.loc 1 762 0
 232 0044 0F20     		movs	r0, #15
 233 0046 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 234              	.LVL9:
 764:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 235              		.loc 1 764 0
 236 004a 0022     		movs	r2, #0
 237 004c 0521     		movs	r1, #5
 238 004e 3B20     		movs	r0, #59
 239 0050 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 240              	.LVL10:
 765:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 241              		.loc 1 765 0
 242 0054 3B20     		movs	r0, #59
 243 0056 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 244              	.LVL11:
 767:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 245              		.loc 1 767 0
 246 005a 0022     		movs	r2, #0
 247 005c 0521     		movs	r1, #5
 248 005e 3C20     		movs	r0, #60
 249 0060 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 250              	.LVL12:
 768:Core/Src/main.c **** 
 251              		.loc 1 768 0
 252 0064 3C20     		movs	r0, #60
 253 0066 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 254              	.LVL13:
 770:Core/Src/main.c **** 
ARM GAS  /tmp/ccGfBWxb.s 			page 20


 255              		.loc 1 770 0
 256 006a 03B0     		add	sp, sp, #12
 257              	.LCFI5:
 258              		.cfi_def_cfa_offset 4
 259              		@ sp needed
 260 006c 5DF804FB 		ldr	pc, [sp], #4
 261              	.L8:
 262              		.align	2
 263              	.L7:
 264 0070 00100240 		.word	1073876992
 265              		.cfi_endproc
 266              	.LFE84:
 268              		.section	.text.StartTaskLoop,"ax",%progbits
 269              		.align	1
 270              		.global	StartTaskLoop
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu softvfp
 276              	StartTaskLoop:
 277              	.LFB86:
 821:Core/Src/main.c **** 
 822:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 823:Core/Src/main.c **** 
 824:Core/Src/main.c **** /* USER CODE END 4 */
 825:Core/Src/main.c **** 
 826:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTaskLoop */
 827:Core/Src/main.c **** /**
 828:Core/Src/main.c ****   * @brief  Function implementing the TaskLoop thread.
 829:Core/Src/main.c ****   * @param  argument: Not used
 830:Core/Src/main.c ****   * @retval None
 831:Core/Src/main.c ****   */
 832:Core/Src/main.c **** /* USER CODE END Header_StartTaskLoop */
 833:Core/Src/main.c **** void StartTaskLoop(void *argument)
 834:Core/Src/main.c **** {
 278              		.loc 1 834 0
 279              		.cfi_startproc
 280              		@ Volatile: function does not return.
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL14:
 284 0000 08B5     		push	{r3, lr}
 285              	.LCFI6:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 289              	.LVL15:
 290              	.L10:
 835:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 836:Core/Src/main.c ****   /* Infinite loop */
 837:Core/Src/main.c ****   for (;;)
 838:Core/Src/main.c ****   {
 839:Core/Src/main.c ****     wpHandler();
 291              		.loc 1 839 0 discriminator 1
 292 0002 FFF7FEFF 		bl	wpHandler
 293              	.LVL16:
 840:Core/Src/main.c ****     vcuState();
ARM GAS  /tmp/ccGfBWxb.s 			page 21


 294              		.loc 1 840 0 discriminator 1
 295 0006 FFF7FEFF 		bl	vcuState
 296              	.LVL17:
 841:Core/Src/main.c ****     ioHandler();
 297              		.loc 1 841 0 discriminator 1
 298 000a FFF7FEFF 		bl	ioHandler
 299              	.LVL18:
 842:Core/Src/main.c ****     osDelay(1);
 300              		.loc 1 842 0 discriminator 1
 301 000e 0120     		movs	r0, #1
 302 0010 FFF7FEFF 		bl	osDelay
 303              	.LVL19:
 304 0014 F5E7     		b	.L10
 305              		.cfi_endproc
 306              	.LFE86:
 308              		.section	.text.StartTask10ms,"ax",%progbits
 309              		.align	1
 310              		.global	StartTask10ms
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu softvfp
 316              	StartTask10ms:
 317              	.LFB87:
 843:Core/Src/main.c ****   }
 844:Core/Src/main.c ****   /* USER CODE END 5 */
 845:Core/Src/main.c **** }
 846:Core/Src/main.c **** 
 847:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask10ms */
 848:Core/Src/main.c **** /**
 849:Core/Src/main.c **** * @brief Function implementing the Task10ms thread.
 850:Core/Src/main.c **** * @param argument: Not used
 851:Core/Src/main.c **** * @retval None
 852:Core/Src/main.c **** */
 853:Core/Src/main.c **** /* USER CODE END Header_StartTask10ms */
 854:Core/Src/main.c **** void StartTask10ms(void *argument)
 855:Core/Src/main.c **** {
 318              		.loc 1 855 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 8
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              	.LVL20:
 323 0000 00B5     		push	{lr}
 324              	.LCFI7:
 325              		.cfi_def_cfa_offset 4
 326              		.cfi_offset 14, -4
 327 0002 83B0     		sub	sp, sp, #12
 328              	.LCFI8:
 329              		.cfi_def_cfa_offset 16
 330              	.LVL21:
 856:Core/Src/main.c ****   /* USER CODE BEGIN StartTask10ms */
 857:Core/Src/main.c ****   TickType_t lastWakeTime;
 858:Core/Src/main.c ****   const TickType_t frequency = 10;
 859:Core/Src/main.c ****   lastWakeTime = xTaskGetTickCount();
 331              		.loc 1 859 0
 332 0004 FFF7FEFF 		bl	xTaskGetTickCount
 333              	.LVL22:
ARM GAS  /tmp/ccGfBWxb.s 			page 22


 334 0008 0190     		str	r0, [sp, #4]
 335              	.L13:
 860:Core/Src/main.c ****   /* Infinite loop */
 861:Core/Src/main.c ****   for (;;)
 862:Core/Src/main.c ****   {
 863:Core/Src/main.c ****     vTaskDelayUntil(&lastWakeTime, frequency);
 336              		.loc 1 863 0 discriminator 1
 337 000a 0A21     		movs	r1, #10
 338 000c 01A8     		add	r0, sp, #4
 339 000e FFF7FEFF 		bl	vTaskDelayUntil
 340              	.LVL23:
 864:Core/Src/main.c ****     throttleHandler();
 341              		.loc 1 864 0 discriminator 1
 342 0012 FFF7FEFF 		bl	throttleHandler
 343              	.LVL24:
 865:Core/Src/main.c ****     canIOsend();
 344              		.loc 1 865 0 discriminator 1
 345 0016 FFF7FEFF 		bl	canIOsend
 346              	.LVL25:
 866:Core/Src/main.c ****     regenHandler();
 347              		.loc 1 866 0 discriminator 1
 348 001a FFF7FEFF 		bl	regenHandler
 349              	.LVL26:
 867:Core/Src/main.c ****     dcdcHandler(vcu.state);
 350              		.loc 1 867 0 discriminator 1
 351 001e 024B     		ldr	r3, .L15
 352 0020 187B     		ldrb	r0, [r3, #12]	@ zero_extendqisi2
 353 0022 FFF7FEFF 		bl	dcdcHandler
 354              	.LVL27:
 355 0026 F0E7     		b	.L13
 356              	.L16:
 357              		.align	2
 358              	.L15:
 359 0028 00000000 		.word	vcu
 360              		.cfi_endproc
 361              	.LFE87:
 363              		.section	.text.StartTask100ms,"ax",%progbits
 364              		.align	1
 365              		.global	StartTask100ms
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu softvfp
 371              	StartTask100ms:
 372              	.LFB88:
 868:Core/Src/main.c ****   }
 869:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 870:Core/Src/main.c ****   osThreadTerminate(NULL);
 871:Core/Src/main.c ****   /* USER CODE END StartTask10ms */
 872:Core/Src/main.c **** }
 873:Core/Src/main.c **** 
 874:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask100ms */
 875:Core/Src/main.c **** /**
 876:Core/Src/main.c **** * @brief Function implementing the Task100ms thread.
 877:Core/Src/main.c **** * @param argument: Not used
 878:Core/Src/main.c **** * @retval None
 879:Core/Src/main.c **** */
ARM GAS  /tmp/ccGfBWxb.s 			page 23


 880:Core/Src/main.c **** /* USER CODE END Header_StartTask100ms */
 881:Core/Src/main.c **** void StartTask100ms(void *argument)
 882:Core/Src/main.c **** {
 373              		.loc 1 882 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 8
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              	.LVL28:
 378 0000 10B5     		push	{r4, lr}
 379              	.LCFI9:
 380              		.cfi_def_cfa_offset 8
 381              		.cfi_offset 4, -8
 382              		.cfi_offset 14, -4
 383 0002 82B0     		sub	sp, sp, #8
 384              	.LCFI10:
 385              		.cfi_def_cfa_offset 16
 386              	.LVL29:
 883:Core/Src/main.c ****   /* USER CODE BEGIN StartTask100ms */
 884:Core/Src/main.c ****   TickType_t lastWakeTime;
 885:Core/Src/main.c ****   const TickType_t frequency = 100;
 886:Core/Src/main.c ****   lastWakeTime = xTaskGetTickCount();
 387              		.loc 1 886 0
 388 0004 FFF7FEFF 		bl	xTaskGetTickCount
 389              	.LVL30:
 390 0008 0190     		str	r0, [sp, #4]
 391              	.L18:
 887:Core/Src/main.c **** 
 888:Core/Src/main.c ****   /* Infinite loop */
 889:Core/Src/main.c **** 
 890:Core/Src/main.c ****   for (;;)
 891:Core/Src/main.c ****   {
 892:Core/Src/main.c ****     vTaskDelayUntil(&lastWakeTime, frequency);
 392              		.loc 1 892 0 discriminator 1
 393 000a 6421     		movs	r1, #100
 394 000c 01A8     		add	r0, sp, #4
 395 000e FFF7FEFF 		bl	vTaskDelayUntil
 396              	.LVL31:
 893:Core/Src/main.c **** 
 894:Core/Src/main.c ****     updateSpeed(ldu.rpm);
 397              		.loc 1 894 0 discriminator 1
 398 0012 054C     		ldr	r4, .L20
 399 0014 2088     		ldrh	r0, [r4]
 400 0016 80B2     		uxth	r0, r0
 401 0018 FFF7FEFF 		bl	updateSpeed
 402              	.LVL32:
 895:Core/Src/main.c ****     updateTach(ldu.amps);
 403              		.loc 1 895 0 discriminator 1
 404 001c 6089     		ldrh	r0, [r4, #10]
 405 001e 80B2     		uxth	r0, r0
 406 0020 FFF7FEFF 		bl	updateTach
 407              	.LVL33:
 408 0024 F1E7     		b	.L18
 409              	.L21:
 410 0026 00BF     		.align	2
 411              	.L20:
 412 0028 00000000 		.word	ldu
 413              		.cfi_endproc
ARM GAS  /tmp/ccGfBWxb.s 			page 24


 414              	.LFE88:
 416              		.section	.text.StartTask250ms,"ax",%progbits
 417              		.align	1
 418              		.global	StartTask250ms
 419              		.syntax unified
 420              		.thumb
 421              		.thumb_func
 422              		.fpu softvfp
 424              	StartTask250ms:
 425              	.LFB89:
 896:Core/Src/main.c ****   }
 897:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 898:Core/Src/main.c ****   osThreadTerminate(NULL);
 899:Core/Src/main.c ****   /* USER CODE END StartTask100ms */
 900:Core/Src/main.c **** }
 901:Core/Src/main.c **** 
 902:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask250ms */
 903:Core/Src/main.c **** /**
 904:Core/Src/main.c **** * @brief Function implementing the Task250ms thread.
 905:Core/Src/main.c **** * @param argument: Not used
 906:Core/Src/main.c **** * @retval None
 907:Core/Src/main.c **** */
 908:Core/Src/main.c **** /* USER CODE END Header_StartTask250ms */
 909:Core/Src/main.c **** void StartTask250ms(void *argument)
 910:Core/Src/main.c **** {
 426              		.loc 1 910 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 8
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              	.LVL34:
 431 0000 00B5     		push	{lr}
 432              	.LCFI11:
 433              		.cfi_def_cfa_offset 4
 434              		.cfi_offset 14, -4
 435 0002 83B0     		sub	sp, sp, #12
 436              	.LCFI12:
 437              		.cfi_def_cfa_offset 16
 438              	.LVL35:
 911:Core/Src/main.c ****   /* USER CODE BEGIN StartTask250ms */
 912:Core/Src/main.c ****   TickType_t lastWakeTime;
 913:Core/Src/main.c ****   const TickType_t frequency = 250;
 914:Core/Src/main.c ****   lastWakeTime = xTaskGetTickCount();
 439              		.loc 1 914 0
 440 0004 FFF7FEFF 		bl	xTaskGetTickCount
 441              	.LVL36:
 442 0008 0190     		str	r0, [sp, #4]
 443              	.L23:
 915:Core/Src/main.c ****   /* Infinite loop */
 916:Core/Src/main.c **** 
 917:Core/Src/main.c ****   for (;;)
 918:Core/Src/main.c **** 
 919:Core/Src/main.c ****   {
 920:Core/Src/main.c ****     vTaskDelayUntil(&lastWakeTime, frequency);
 444              		.loc 1 920 0 discriminator 1
 445 000a FA21     		movs	r1, #250
 446 000c 01A8     		add	r0, sp, #4
 447 000e FFF7FEFF 		bl	vTaskDelayUntil
ARM GAS  /tmp/ccGfBWxb.s 			page 25


 448              	.LVL37:
 921:Core/Src/main.c ****     HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 449              		.loc 1 921 0 discriminator 1
 450 0012 4FF40051 		mov	r1, #8192
 451 0016 0748     		ldr	r0, .L25
 452 0018 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 453              	.LVL38:
 922:Core/Src/main.c **** 
 923:Core/Src/main.c ****     updateTemp(ldu.hsTemp);
 454              		.loc 1 923 0 discriminator 1
 455 001c 064B     		ldr	r3, .L25+4
 456 001e 9888     		ldrh	r0, [r3, #4]
 457 0020 80B2     		uxth	r0, r0
 458 0022 FFF7FEFF 		bl	updateTemp
 459              	.LVL39:
 924:Core/Src/main.c ****     updateSOC(BMS[0].chargeState);
 460              		.loc 1 924 0 discriminator 1
 461 0026 054B     		ldr	r3, .L25+8
 462 0028 187A     		ldrb	r0, [r3, #8]	@ zero_extendqisi2
 463 002a FFF7FEFF 		bl	updateSOC
 464              	.LVL40:
 925:Core/Src/main.c ****     encoderHandler();
 465              		.loc 1 925 0 discriminator 1
 466 002e FFF7FEFF 		bl	encoderHandler
 467              	.LVL41:
 468 0032 EAE7     		b	.L23
 469              	.L26:
 470              		.align	2
 471              	.L25:
 472 0034 00100140 		.word	1073811456
 473 0038 00000000 		.word	ldu
 474 003c 00000000 		.word	BMS
 475              		.cfi_endproc
 476              	.LFE89:
 478              		.section	.text.__io_putchar,"ax",%progbits
 479              		.align	1
 480              		.global	__io_putchar
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu softvfp
 486              	__io_putchar:
 487              	.LFB70:
 488              		.file 2 "Core/Inc/print_uart.h"
   1:Core/Inc/print_uart.h **** #ifndef __PRINT_UART_H
   2:Core/Inc/print_uart.h **** #define __PRINT_UART_H
   3:Core/Inc/print_uart.h **** 
   4:Core/Inc/print_uart.h **** 
   5:Core/Inc/print_uart.h **** #include <stdio.h>
   6:Core/Inc/print_uart.h **** #include "stm32f1xx_hal.h"
   7:Core/Inc/print_uart.h **** 
   8:Core/Inc/print_uart.h **** UART_HandleTypeDef huart1;
   9:Core/Inc/print_uart.h **** 
  10:Core/Inc/print_uart.h **** //////////////////////////// Begin UART Magic ////////////////////////
  11:Core/Inc/print_uart.h **** int __io_putchar(int ch)
  12:Core/Inc/print_uart.h **** {
 489              		.loc 2 12 0
ARM GAS  /tmp/ccGfBWxb.s 			page 26


 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 8
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              	.LVL42:
 494 0000 10B5     		push	{r4, lr}
 495              	.LCFI13:
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 4, -8
 498              		.cfi_offset 14, -4
 499 0002 82B0     		sub	sp, sp, #8
 500              	.LCFI14:
 501              		.cfi_def_cfa_offset 16
 502 0004 0446     		mov	r4, r0
  13:Core/Inc/print_uart.h ****  uint8_t c[1];
  14:Core/Inc/print_uart.h ****  c[0] = ch & 0x00FF;
 503              		.loc 2 14 0
 504 0006 02A9     		add	r1, sp, #8
 505 0008 01F8040D 		strb	r0, [r1, #-4]!
  15:Core/Inc/print_uart.h ****  HAL_UART_Transmit(&huart1, &*c, 1, 10);
 506              		.loc 2 15 0
 507 000c 0A23     		movs	r3, #10
 508 000e 0122     		movs	r2, #1
 509 0010 0248     		ldr	r0, .L29
 510              	.LVL43:
 511 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 512              	.LVL44:
  16:Core/Inc/print_uart.h ****  return ch;
  17:Core/Inc/print_uart.h **** }
 513              		.loc 2 17 0
 514 0016 2046     		mov	r0, r4
 515 0018 02B0     		add	sp, sp, #8
 516              	.LCFI15:
 517              		.cfi_def_cfa_offset 8
 518              		@ sp needed
 519 001a 10BD     		pop	{r4, pc}
 520              	.LVL45:
 521              	.L30:
 522              		.align	2
 523              	.L29:
 524 001c 00000000 		.word	huart1
 525              		.cfi_endproc
 526              	.LFE70:
 528              		.section	.text._write,"ax",%progbits
 529              		.align	1
 530              		.global	_write
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu softvfp
 536              	_write:
 537              	.LFB71:
  18:Core/Inc/print_uart.h **** 
  19:Core/Inc/print_uart.h **** int _write(int file,char *ptr, int len)
  20:Core/Inc/print_uart.h **** {
 538              		.loc 2 20 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccGfBWxb.s 			page 27


 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              	.LVL46:
 543 0000 70B5     		push	{r4, r5, r6, lr}
 544              	.LCFI16:
 545              		.cfi_def_cfa_offset 16
 546              		.cfi_offset 4, -16
 547              		.cfi_offset 5, -12
 548              		.cfi_offset 6, -8
 549              		.cfi_offset 14, -4
 550 0002 1646     		mov	r6, r2
 551              	.LVL47:
  21:Core/Inc/print_uart.h ****  int DataIdx;
  22:Core/Inc/print_uart.h ****  for(DataIdx= 0; DataIdx< len; DataIdx++)
 552              		.loc 2 22 0
 553 0004 0024     		movs	r4, #0
 554 0006 05E0     		b	.L32
 555              	.LVL48:
 556              	.L33:
  23:Core/Inc/print_uart.h ****  {
  24:Core/Inc/print_uart.h ****  __io_putchar(*ptr++);
 557              		.loc 2 24 0 discriminator 3
 558 0008 4D1C     		adds	r5, r1, #1
 559              	.LVL49:
 560 000a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 561 000c FFF7FEFF 		bl	__io_putchar
 562              	.LVL50:
  22:Core/Inc/print_uart.h ****  {
 563              		.loc 2 22 0 discriminator 3
 564 0010 0134     		adds	r4, r4, #1
 565              	.LVL51:
 566              		.loc 2 24 0 discriminator 3
 567 0012 2946     		mov	r1, r5
 568              	.LVL52:
 569              	.L32:
  22:Core/Inc/print_uart.h ****  {
 570              		.loc 2 22 0 discriminator 1
 571 0014 B442     		cmp	r4, r6
 572 0016 F7DB     		blt	.L33
  25:Core/Inc/print_uart.h ****  }
  26:Core/Inc/print_uart.h **** return len;
  27:Core/Inc/print_uart.h **** }
 573              		.loc 2 27 0
 574 0018 3046     		mov	r0, r6
 575 001a 70BD     		pop	{r4, r5, r6, pc}
 576              		.cfi_endproc
 577              	.LFE71:
 579              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 580              		.align	1
 581              		.global	HAL_TIM_PeriodElapsedCallback
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu softvfp
 587              	HAL_TIM_PeriodElapsedCallback:
 588              	.LFB90:
 926:Core/Src/main.c **** 
 927:Core/Src/main.c ****     //testVal();
ARM GAS  /tmp/ccGfBWxb.s 			page 28


 928:Core/Src/main.c ****   }
 929:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 930:Core/Src/main.c ****   osThreadTerminate(NULL);
 931:Core/Src/main.c ****   /* USER CODE END StartTask250ms */
 932:Core/Src/main.c **** }
 933:Core/Src/main.c **** 
 934:Core/Src/main.c ****  /**
 935:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 936:Core/Src/main.c ****   * @note   This function is called  when TIM7 interrupt took place, inside
 937:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 938:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 939:Core/Src/main.c ****   * @param  htim : TIM handle
 940:Core/Src/main.c ****   * @retval None
 941:Core/Src/main.c ****   */
 942:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 943:Core/Src/main.c **** {
 589              		.loc 1 943 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593              	.LVL53:
 594 0000 08B5     		push	{r3, lr}
 595              	.LCFI17:
 596              		.cfi_def_cfa_offset 8
 597              		.cfi_offset 3, -8
 598              		.cfi_offset 14, -4
 944:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 945:Core/Src/main.c **** 
 946:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 947:Core/Src/main.c ****   if (htim->Instance == TIM7) {
 599              		.loc 1 947 0
 600 0002 0268     		ldr	r2, [r0]
 601 0004 034B     		ldr	r3, .L39
 602 0006 9A42     		cmp	r2, r3
 603 0008 00D0     		beq	.L38
 604              	.LVL54:
 605              	.L35:
 606 000a 08BD     		pop	{r3, pc}
 607              	.LVL55:
 608              	.L38:
 948:Core/Src/main.c ****     HAL_IncTick();
 609              		.loc 1 948 0
 610 000c FFF7FEFF 		bl	HAL_IncTick
 611              	.LVL56:
 949:Core/Src/main.c ****   }
 950:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 951:Core/Src/main.c **** 
 952:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 953:Core/Src/main.c **** }
 612              		.loc 1 953 0
 613 0010 FBE7     		b	.L35
 614              	.L40:
 615 0012 00BF     		.align	2
 616              	.L39:
 617 0014 00140040 		.word	1073746944
 618              		.cfi_endproc
 619              	.LFE90:
ARM GAS  /tmp/ccGfBWxb.s 			page 29


 621              		.section	.text.Error_Handler,"ax",%progbits
 622              		.align	1
 623              		.global	Error_Handler
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 627              		.fpu softvfp
 629              	Error_Handler:
 630              	.LFB91:
 954:Core/Src/main.c **** 
 955:Core/Src/main.c **** /**
 956:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 957:Core/Src/main.c ****   * @retval None
 958:Core/Src/main.c ****   */
 959:Core/Src/main.c **** void Error_Handler(void)
 960:Core/Src/main.c **** {
 631              		.loc 1 960 0
 632              		.cfi_startproc
 633              		@ Volatile: function does not return.
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637              	.LBB10:
 638              	.LBB11:
 639              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
ARM GAS  /tmp/ccGfBWxb.s 			page 30


  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/ccGfBWxb.s 			page 31


  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 640              		.loc 3 142 0
 641              		.syntax unified
 642              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 643 0000 72B6     		cpsid i
ARM GAS  /tmp/ccGfBWxb.s 			page 32


 644              	@ 0 "" 2
 645              		.thumb
 646              		.syntax unified
 647              	.L42:
 648 0002 FEE7     		b	.L42
 649              	.LBE11:
 650              	.LBE10:
 651              		.cfi_endproc
 652              	.LFE91:
 654              		.section	.text.MX_CAN2_Init,"ax",%progbits
 655              		.align	1
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 659              		.fpu softvfp
 661              	MX_CAN2_Init:
 662              	.LFB76:
 404:Core/Src/main.c **** 
 663              		.loc 1 404 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667 0000 08B5     		push	{r3, lr}
 668              	.LCFI18:
 669              		.cfi_def_cfa_offset 8
 670              		.cfi_offset 3, -8
 671              		.cfi_offset 14, -4
 413:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 672              		.loc 1 413 0
 673 0002 0D48     		ldr	r0, .L47
 674 0004 0D4B     		ldr	r3, .L47+4
 675 0006 0360     		str	r3, [r0]
 414:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 676              		.loc 1 414 0
 677 0008 0C23     		movs	r3, #12
 678 000a 4360     		str	r3, [r0, #4]
 415:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 679              		.loc 1 415 0
 680 000c 0023     		movs	r3, #0
 681 000e 8360     		str	r3, [r0, #8]
 416:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 682              		.loc 1 416 0
 683 0010 C360     		str	r3, [r0, #12]
 417:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 684              		.loc 1 417 0
 685 0012 4FF48032 		mov	r2, #65536
 686 0016 0261     		str	r2, [r0, #16]
 418:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 687              		.loc 1 418 0
 688 0018 4FF40012 		mov	r2, #2097152
 689 001c 4261     		str	r2, [r0, #20]
 419:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 690              		.loc 1 419 0
 691 001e 0376     		strb	r3, [r0, #24]
 420:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 692              		.loc 1 420 0
 693 0020 4376     		strb	r3, [r0, #25]
ARM GAS  /tmp/ccGfBWxb.s 			page 33


 421:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 694              		.loc 1 421 0
 695 0022 8376     		strb	r3, [r0, #26]
 422:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 696              		.loc 1 422 0
 697 0024 C376     		strb	r3, [r0, #27]
 423:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 698              		.loc 1 423 0
 699 0026 0377     		strb	r3, [r0, #28]
 424:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 700              		.loc 1 424 0
 701 0028 4377     		strb	r3, [r0, #29]
 425:Core/Src/main.c ****   {
 702              		.loc 1 425 0
 703 002a FFF7FEFF 		bl	HAL_CAN_Init
 704              	.LVL57:
 705 002e 00B9     		cbnz	r0, .L46
 706 0030 08BD     		pop	{r3, pc}
 707              	.L46:
 427:Core/Src/main.c ****   }
 708              		.loc 1 427 0
 709 0032 FFF7FEFF 		bl	Error_Handler
 710              	.LVL58:
 711              	.L48:
 712 0036 00BF     		.align	2
 713              	.L47:
 714 0038 00000000 		.word	hcan2
 715 003c 00680040 		.word	1073768448
 716              		.cfi_endproc
 717              	.LFE76:
 719              		.section	.text.MX_ADC1_Init,"ax",%progbits
 720              		.align	1
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu softvfp
 726              	MX_ADC1_Init:
 727              	.LFB74:
 305:Core/Src/main.c **** 
 728              		.loc 1 305 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 16
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732 0000 00B5     		push	{lr}
 733              	.LCFI19:
 734              		.cfi_def_cfa_offset 4
 735              		.cfi_offset 14, -4
 736 0002 85B0     		sub	sp, sp, #20
 737              	.LCFI20:
 738              		.cfi_def_cfa_offset 24
 311:Core/Src/main.c **** 
 739              		.loc 1 311 0
 740 0004 0023     		movs	r3, #0
 741 0006 0193     		str	r3, [sp, #4]
 742 0008 0293     		str	r3, [sp, #8]
 743 000a 0393     		str	r3, [sp, #12]
 318:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
ARM GAS  /tmp/ccGfBWxb.s 			page 34


 744              		.loc 1 318 0
 745 000c 1E48     		ldr	r0, .L59
 746 000e 1F4A     		ldr	r2, .L59+4
 747 0010 0260     		str	r2, [r0]
 319:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 748              		.loc 1 319 0
 749 0012 4FF48072 		mov	r2, #256
 750 0016 8260     		str	r2, [r0, #8]
 320:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 751              		.loc 1 320 0
 752 0018 0122     		movs	r2, #1
 753 001a 0273     		strb	r2, [r0, #12]
 321:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 754              		.loc 1 321 0
 755 001c 0375     		strb	r3, [r0, #20]
 322:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 756              		.loc 1 322 0
 757 001e 4FF46022 		mov	r2, #917504
 758 0022 C261     		str	r2, [r0, #28]
 323:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 759              		.loc 1 323 0
 760 0024 4360     		str	r3, [r0, #4]
 324:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 761              		.loc 1 324 0
 762 0026 0323     		movs	r3, #3
 763 0028 0361     		str	r3, [r0, #16]
 325:Core/Src/main.c ****   {
 764              		.loc 1 325 0
 765 002a FFF7FEFF 		bl	HAL_ADC_Init
 766              	.LVL59:
 767 002e 10BB     		cbnz	r0, .L55
 331:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 768              		.loc 1 331 0
 769 0030 0B23     		movs	r3, #11
 770 0032 0193     		str	r3, [sp, #4]
 332:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 771              		.loc 1 332 0
 772 0034 0123     		movs	r3, #1
 773 0036 0293     		str	r3, [sp, #8]
 333:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 774              		.loc 1 333 0
 775 0038 0723     		movs	r3, #7
 776 003a 0393     		str	r3, [sp, #12]
 334:Core/Src/main.c ****   {
 777              		.loc 1 334 0
 778 003c 01A9     		add	r1, sp, #4
 779 003e 1248     		ldr	r0, .L59
 780 0040 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 781              	.LVL60:
 782 0044 C8B9     		cbnz	r0, .L56
 340:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 783              		.loc 1 340 0
 784 0046 0523     		movs	r3, #5
 785 0048 0193     		str	r3, [sp, #4]
 341:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 786              		.loc 1 341 0
 787 004a 0223     		movs	r3, #2
ARM GAS  /tmp/ccGfBWxb.s 			page 35


 788 004c 0293     		str	r3, [sp, #8]
 342:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 789              		.loc 1 342 0
 790 004e 0423     		movs	r3, #4
 791 0050 0393     		str	r3, [sp, #12]
 343:Core/Src/main.c ****   {
 792              		.loc 1 343 0
 793 0052 0DEB0301 		add	r1, sp, r3
 794 0056 0C48     		ldr	r0, .L59
 795 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 796              	.LVL61:
 797 005c 78B9     		cbnz	r0, .L57
 349:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 798              		.loc 1 349 0
 799 005e 0623     		movs	r3, #6
 800 0060 0193     		str	r3, [sp, #4]
 350:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801              		.loc 1 350 0
 802 0062 0323     		movs	r3, #3
 803 0064 0293     		str	r3, [sp, #8]
 351:Core/Src/main.c ****   {
 804              		.loc 1 351 0
 805 0066 01A9     		add	r1, sp, #4
 806 0068 0748     		ldr	r0, .L59
 807 006a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 808              	.LVL62:
 809 006e 40B9     		cbnz	r0, .L58
 359:Core/Src/main.c **** 
 810              		.loc 1 359 0
 811 0070 05B0     		add	sp, sp, #20
 812              	.LCFI21:
 813              		.cfi_remember_state
 814              		.cfi_def_cfa_offset 4
 815              		@ sp needed
 816 0072 5DF804FB 		ldr	pc, [sp], #4
 817              	.L55:
 818              	.LCFI22:
 819              		.cfi_restore_state
 327:Core/Src/main.c ****   }
 820              		.loc 1 327 0
 821 0076 FFF7FEFF 		bl	Error_Handler
 822              	.LVL63:
 823              	.L56:
 336:Core/Src/main.c ****   }
 824              		.loc 1 336 0
 825 007a FFF7FEFF 		bl	Error_Handler
 826              	.LVL64:
 827              	.L57:
 345:Core/Src/main.c ****   }
 828              		.loc 1 345 0
 829 007e FFF7FEFF 		bl	Error_Handler
 830              	.LVL65:
 831              	.L58:
 353:Core/Src/main.c ****   }
 832              		.loc 1 353 0
 833 0082 FFF7FEFF 		bl	Error_Handler
 834              	.LVL66:
ARM GAS  /tmp/ccGfBWxb.s 			page 36


 835              	.L60:
 836 0086 00BF     		.align	2
 837              	.L59:
 838 0088 00000000 		.word	hadc1
 839 008c 00240140 		.word	1073816576
 840              		.cfi_endproc
 841              	.LFE74:
 843              		.section	.text.MX_CAN1_Init,"ax",%progbits
 844              		.align	1
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu softvfp
 850              	MX_CAN1_Init:
 851              	.LFB75:
 367:Core/Src/main.c **** 
 852              		.loc 1 367 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856 0000 08B5     		push	{r3, lr}
 857              	.LCFI23:
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 3, -8
 860              		.cfi_offset 14, -4
 376:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 861              		.loc 1 376 0
 862 0002 0D48     		ldr	r0, .L65
 863 0004 0D4B     		ldr	r3, .L65+4
 864 0006 0360     		str	r3, [r0]
 377:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 865              		.loc 1 377 0
 866 0008 0C23     		movs	r3, #12
 867 000a 4360     		str	r3, [r0, #4]
 378:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 868              		.loc 1 378 0
 869 000c 0023     		movs	r3, #0
 870 000e 8360     		str	r3, [r0, #8]
 379:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 871              		.loc 1 379 0
 872 0010 C360     		str	r3, [r0, #12]
 380:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 873              		.loc 1 380 0
 874 0012 4FF48032 		mov	r2, #65536
 875 0016 0261     		str	r2, [r0, #16]
 381:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 876              		.loc 1 381 0
 877 0018 4FF40012 		mov	r2, #2097152
 878 001c 4261     		str	r2, [r0, #20]
 382:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 879              		.loc 1 382 0
 880 001e 0376     		strb	r3, [r0, #24]
 383:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 881              		.loc 1 383 0
 882 0020 4376     		strb	r3, [r0, #25]
 384:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 883              		.loc 1 384 0
ARM GAS  /tmp/ccGfBWxb.s 			page 37


 884 0022 8376     		strb	r3, [r0, #26]
 385:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 885              		.loc 1 385 0
 886 0024 C376     		strb	r3, [r0, #27]
 386:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 887              		.loc 1 386 0
 888 0026 0377     		strb	r3, [r0, #28]
 387:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 889              		.loc 1 387 0
 890 0028 4377     		strb	r3, [r0, #29]
 388:Core/Src/main.c ****   {
 891              		.loc 1 388 0
 892 002a FFF7FEFF 		bl	HAL_CAN_Init
 893              	.LVL67:
 894 002e 00B9     		cbnz	r0, .L64
 895 0030 08BD     		pop	{r3, pc}
 896              	.L64:
 390:Core/Src/main.c ****   }
 897              		.loc 1 390 0
 898 0032 FFF7FEFF 		bl	Error_Handler
 899              	.LVL68:
 900              	.L66:
 901 0036 00BF     		.align	2
 902              	.L65:
 903 0038 00000000 		.word	hcan1
 904 003c 00640040 		.word	1073767424
 905              		.cfi_endproc
 906              	.LFE75:
 908              		.section	.text.MX_UART4_Init,"ax",%progbits
 909              		.align	1
 910              		.syntax unified
 911              		.thumb
 912              		.thumb_func
 913              		.fpu softvfp
 915              	MX_UART4_Init:
 916              	.LFB82:
 686:Core/Src/main.c **** 
 917              		.loc 1 686 0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 921 0000 08B5     		push	{r3, lr}
 922              	.LCFI24:
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 3, -8
 925              		.cfi_offset 14, -4
 695:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 926              		.loc 1 695 0
 927 0002 0A48     		ldr	r0, .L71
 928 0004 0A4B     		ldr	r3, .L71+4
 929 0006 0360     		str	r3, [r0]
 696:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 930              		.loc 1 696 0
 931 0008 4FF4E133 		mov	r3, #115200
 932 000c 4360     		str	r3, [r0, #4]
 697:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 933              		.loc 1 697 0
ARM GAS  /tmp/ccGfBWxb.s 			page 38


 934 000e 0023     		movs	r3, #0
 935 0010 8360     		str	r3, [r0, #8]
 698:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 936              		.loc 1 698 0
 937 0012 C360     		str	r3, [r0, #12]
 699:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 938              		.loc 1 699 0
 939 0014 0361     		str	r3, [r0, #16]
 700:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 940              		.loc 1 700 0
 941 0016 0C22     		movs	r2, #12
 942 0018 4261     		str	r2, [r0, #20]
 701:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 943              		.loc 1 701 0
 944 001a 8361     		str	r3, [r0, #24]
 702:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 945              		.loc 1 702 0
 946 001c C361     		str	r3, [r0, #28]
 703:Core/Src/main.c ****   {
 947              		.loc 1 703 0
 948 001e FFF7FEFF 		bl	HAL_UART_Init
 949              	.LVL69:
 950 0022 00B9     		cbnz	r0, .L70
 951 0024 08BD     		pop	{r3, pc}
 952              	.L70:
 705:Core/Src/main.c ****   }
 953              		.loc 1 705 0
 954 0026 FFF7FEFF 		bl	Error_Handler
 955              	.LVL70:
 956              	.L72:
 957 002a 00BF     		.align	2
 958              	.L71:
 959 002c 00000000 		.word	huart4
 960 0030 004C0040 		.word	1073761280
 961              		.cfi_endproc
 962              	.LFE82:
 964              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 965              		.align	1
 966              		.syntax unified
 967              		.thumb
 968              		.thumb_func
 969              		.fpu softvfp
 971              	MX_USART1_UART_Init:
 972              	.LFB83:
 719:Core/Src/main.c **** 
 973              		.loc 1 719 0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 0
 976              		@ frame_needed = 0, uses_anonymous_args = 0
 977 0000 08B5     		push	{r3, lr}
 978              	.LCFI25:
 979              		.cfi_def_cfa_offset 8
 980              		.cfi_offset 3, -8
 981              		.cfi_offset 14, -4
 728:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 982              		.loc 1 728 0
 983 0002 0A48     		ldr	r0, .L77
ARM GAS  /tmp/ccGfBWxb.s 			page 39


 984 0004 0A4B     		ldr	r3, .L77+4
 985 0006 0360     		str	r3, [r0]
 729:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 986              		.loc 1 729 0
 987 0008 4FF4E133 		mov	r3, #115200
 988 000c 4360     		str	r3, [r0, #4]
 730:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 989              		.loc 1 730 0
 990 000e 0023     		movs	r3, #0
 991 0010 8360     		str	r3, [r0, #8]
 731:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 992              		.loc 1 731 0
 993 0012 C360     		str	r3, [r0, #12]
 732:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 994              		.loc 1 732 0
 995 0014 0361     		str	r3, [r0, #16]
 733:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 996              		.loc 1 733 0
 997 0016 0C22     		movs	r2, #12
 998 0018 4261     		str	r2, [r0, #20]
 734:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 999              		.loc 1 734 0
 1000 001a 8361     		str	r3, [r0, #24]
 735:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1001              		.loc 1 735 0
 1002 001c C361     		str	r3, [r0, #28]
 736:Core/Src/main.c ****   {
 1003              		.loc 1 736 0
 1004 001e FFF7FEFF 		bl	HAL_UART_Init
 1005              	.LVL71:
 1006 0022 00B9     		cbnz	r0, .L76
 1007 0024 08BD     		pop	{r3, pc}
 1008              	.L76:
 738:Core/Src/main.c ****   }
 1009              		.loc 1 738 0
 1010 0026 FFF7FEFF 		bl	Error_Handler
 1011              	.LVL72:
 1012              	.L78:
 1013 002a 00BF     		.align	2
 1014              	.L77:
 1015 002c 00000000 		.word	huart1
 1016 0030 00380140 		.word	1073821696
 1017              		.cfi_endproc
 1018              	.LFE83:
 1020              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1021              		.align	1
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
 1025              		.fpu softvfp
 1027              	MX_TIM3_Init:
 1028              	.LFB80:
 575:Core/Src/main.c **** 
 1029              		.loc 1 575 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 56
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccGfBWxb.s 			page 40


 1033 0000 00B5     		push	{lr}
 1034              	.LCFI26:
 1035              		.cfi_def_cfa_offset 4
 1036              		.cfi_offset 14, -4
 1037 0002 8FB0     		sub	sp, sp, #60
 1038              	.LCFI27:
 1039              		.cfi_def_cfa_offset 64
 581:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1040              		.loc 1 581 0
 1041 0004 0023     		movs	r3, #0
 1042 0006 0A93     		str	r3, [sp, #40]
 1043 0008 0B93     		str	r3, [sp, #44]
 1044 000a 0C93     		str	r3, [sp, #48]
 1045 000c 0D93     		str	r3, [sp, #52]
 582:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1046              		.loc 1 582 0
 1047 000e 0893     		str	r3, [sp, #32]
 1048 0010 0993     		str	r3, [sp, #36]
 583:Core/Src/main.c **** 
 1049              		.loc 1 583 0
 1050 0012 0193     		str	r3, [sp, #4]
 1051 0014 0293     		str	r3, [sp, #8]
 1052 0016 0393     		str	r3, [sp, #12]
 1053 0018 0493     		str	r3, [sp, #16]
 1054 001a 0593     		str	r3, [sp, #20]
 1055 001c 0693     		str	r3, [sp, #24]
 1056 001e 0793     		str	r3, [sp, #28]
 588:Core/Src/main.c ****   htim3.Init.Prescaler = 5000;
 1057              		.loc 1 588 0
 1058 0020 1F48     		ldr	r0, .L91
 1059 0022 204A     		ldr	r2, .L91+4
 1060 0024 0260     		str	r2, [r0]
 589:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1061              		.loc 1 589 0
 1062 0026 41F28832 		movw	r2, #5000
 1063 002a 4260     		str	r2, [r0, #4]
 590:Core/Src/main.c ****   htim3.Init.Period = 600;
 1064              		.loc 1 590 0
 1065 002c 8360     		str	r3, [r0, #8]
 591:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1066              		.loc 1 591 0
 1067 002e 4FF41672 		mov	r2, #600
 1068 0032 C260     		str	r2, [r0, #12]
 592:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1069              		.loc 1 592 0
 1070 0034 0361     		str	r3, [r0, #16]
 593:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1071              		.loc 1 593 0
 1072 0036 8361     		str	r3, [r0, #24]
 594:Core/Src/main.c ****   {
 1073              		.loc 1 594 0
 1074 0038 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1075              	.LVL73:
 1076 003c 30BB     		cbnz	r0, .L86
 598:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1077              		.loc 1 598 0
 1078 003e 0EA9     		add	r1, sp, #56
ARM GAS  /tmp/ccGfBWxb.s 			page 41


 1079 0040 4FF48053 		mov	r3, #4096
 1080 0044 41F8103D 		str	r3, [r1, #-16]!
 599:Core/Src/main.c ****   {
 1081              		.loc 1 599 0
 1082 0048 1548     		ldr	r0, .L91
 1083 004a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1084              	.LVL74:
 1085 004e F8B9     		cbnz	r0, .L87
 603:Core/Src/main.c ****   {
 1086              		.loc 1 603 0
 1087 0050 1348     		ldr	r0, .L91
 1088 0052 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1089              	.LVL75:
 1090 0056 E8B9     		cbnz	r0, .L88
 607:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1091              		.loc 1 607 0
 1092 0058 0023     		movs	r3, #0
 1093 005a 0893     		str	r3, [sp, #32]
 608:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1094              		.loc 1 608 0
 1095 005c 0993     		str	r3, [sp, #36]
 609:Core/Src/main.c ****   {
 1096              		.loc 1 609 0
 1097 005e 08A9     		add	r1, sp, #32
 1098 0060 0F48     		ldr	r0, .L91
 1099 0062 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1100              	.LVL76:
 1101 0066 B8B9     		cbnz	r0, .L89
 613:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1102              		.loc 1 613 0
 1103 0068 6023     		movs	r3, #96
 1104 006a 0193     		str	r3, [sp, #4]
 614:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1105              		.loc 1 614 0
 1106 006c 0023     		movs	r3, #0
 1107 006e 0293     		str	r3, [sp, #8]
 615:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1108              		.loc 1 615 0
 1109 0070 0393     		str	r3, [sp, #12]
 616:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1110              		.loc 1 616 0
 1111 0072 0593     		str	r3, [sp, #20]
 617:Core/Src/main.c ****   {
 1112              		.loc 1 617 0
 1113 0074 0822     		movs	r2, #8
 1114 0076 01A9     		add	r1, sp, #4
 1115 0078 0948     		ldr	r0, .L91
 1116 007a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1117              	.LVL77:
 1118 007e 68B9     		cbnz	r0, .L90
 624:Core/Src/main.c **** 
 1119              		.loc 1 624 0
 1120 0080 0748     		ldr	r0, .L91
 1121 0082 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1122              	.LVL78:
 626:Core/Src/main.c **** 
 1123              		.loc 1 626 0
ARM GAS  /tmp/ccGfBWxb.s 			page 42


 1124 0086 0FB0     		add	sp, sp, #60
 1125              	.LCFI28:
 1126              		.cfi_remember_state
 1127              		.cfi_def_cfa_offset 4
 1128              		@ sp needed
 1129 0088 5DF804FB 		ldr	pc, [sp], #4
 1130              	.L86:
 1131              	.LCFI29:
 1132              		.cfi_restore_state
 596:Core/Src/main.c ****   }
 1133              		.loc 1 596 0
 1134 008c FFF7FEFF 		bl	Error_Handler
 1135              	.LVL79:
 1136              	.L87:
 601:Core/Src/main.c ****   }
 1137              		.loc 1 601 0
 1138 0090 FFF7FEFF 		bl	Error_Handler
 1139              	.LVL80:
 1140              	.L88:
 605:Core/Src/main.c ****   }
 1141              		.loc 1 605 0
 1142 0094 FFF7FEFF 		bl	Error_Handler
 1143              	.LVL81:
 1144              	.L89:
 611:Core/Src/main.c ****   }
 1145              		.loc 1 611 0
 1146 0098 FFF7FEFF 		bl	Error_Handler
 1147              	.LVL82:
 1148              	.L90:
 619:Core/Src/main.c ****   }
 1149              		.loc 1 619 0
 1150 009c FFF7FEFF 		bl	Error_Handler
 1151              	.LVL83:
 1152              	.L92:
 1153              		.align	2
 1154              	.L91:
 1155 00a0 00000000 		.word	htim3
 1156 00a4 00040040 		.word	1073742848
 1157              		.cfi_endproc
 1158              	.LFE80:
 1160              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1161              		.align	1
 1162              		.syntax unified
 1163              		.thumb
 1164              		.thumb_func
 1165              		.fpu softvfp
 1167              	MX_TIM1_Init:
 1168              	.LFB78:
 462:Core/Src/main.c **** 
 1169              		.loc 1 462 0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 72
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 1173 0000 10B5     		push	{r4, lr}
 1174              	.LCFI30:
 1175              		.cfi_def_cfa_offset 8
 1176              		.cfi_offset 4, -8
ARM GAS  /tmp/ccGfBWxb.s 			page 43


 1177              		.cfi_offset 14, -4
 1178 0002 92B0     		sub	sp, sp, #72
 1179              	.LCFI31:
 1180              		.cfi_def_cfa_offset 80
 468:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1181              		.loc 1 468 0
 1182 0004 0024     		movs	r4, #0
 1183 0006 1094     		str	r4, [sp, #64]
 1184 0008 1194     		str	r4, [sp, #68]
 469:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1185              		.loc 1 469 0
 1186 000a 0994     		str	r4, [sp, #36]
 1187 000c 0A94     		str	r4, [sp, #40]
 1188 000e 0B94     		str	r4, [sp, #44]
 1189 0010 0C94     		str	r4, [sp, #48]
 1190 0012 0D94     		str	r4, [sp, #52]
 1191 0014 0E94     		str	r4, [sp, #56]
 1192 0016 0F94     		str	r4, [sp, #60]
 470:Core/Src/main.c **** 
 1193              		.loc 1 470 0
 1194 0018 2022     		movs	r2, #32
 1195 001a 2146     		mov	r1, r4
 1196 001c 01A8     		add	r0, sp, #4
 1197 001e FFF7FEFF 		bl	memset
 1198              	.LVL84:
 475:Core/Src/main.c ****   htim1.Init.Prescaler = 1050;
 1199              		.loc 1 475 0
 1200 0022 2148     		ldr	r0, .L103
 1201 0024 214B     		ldr	r3, .L103+4
 1202 0026 0360     		str	r3, [r0]
 476:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1203              		.loc 1 476 0
 1204 0028 40F21A43 		movw	r3, #1050
 1205 002c 4360     		str	r3, [r0, #4]
 477:Core/Src/main.c ****   htim1.Init.Period = 65535;
 1206              		.loc 1 477 0
 1207 002e 8460     		str	r4, [r0, #8]
 478:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1208              		.loc 1 478 0
 1209 0030 4FF6FF73 		movw	r3, #65535
 1210 0034 C360     		str	r3, [r0, #12]
 479:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1211              		.loc 1 479 0
 1212 0036 0461     		str	r4, [r0, #16]
 480:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1213              		.loc 1 480 0
 1214 0038 4461     		str	r4, [r0, #20]
 481:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1215              		.loc 1 481 0
 1216 003a 8461     		str	r4, [r0, #24]
 482:Core/Src/main.c ****   {
 1217              		.loc 1 482 0
 1218 003c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1219              	.LVL85:
 1220 0040 0028     		cmp	r0, #0
 1221 0042 29D1     		bne	.L99
 486:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/ccGfBWxb.s 			page 44


 1222              		.loc 1 486 0
 1223 0044 0023     		movs	r3, #0
 1224 0046 1093     		str	r3, [sp, #64]
 487:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1225              		.loc 1 487 0
 1226 0048 1193     		str	r3, [sp, #68]
 488:Core/Src/main.c ****   {
 1227              		.loc 1 488 0
 1228 004a 10A9     		add	r1, sp, #64
 1229 004c 1648     		ldr	r0, .L103
 1230 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1231              	.LVL86:
 1232 0052 18BB     		cbnz	r0, .L100
 492:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1233              		.loc 1 492 0
 1234 0054 6023     		movs	r3, #96
 1235 0056 0993     		str	r3, [sp, #36]
 493:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1236              		.loc 1 493 0
 1237 0058 0022     		movs	r2, #0
 1238 005a 0A92     		str	r2, [sp, #40]
 494:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1239              		.loc 1 494 0
 1240 005c 0B92     		str	r2, [sp, #44]
 495:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1241              		.loc 1 495 0
 1242 005e 0C92     		str	r2, [sp, #48]
 496:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1243              		.loc 1 496 0
 1244 0060 0D92     		str	r2, [sp, #52]
 497:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1245              		.loc 1 497 0
 1246 0062 0E92     		str	r2, [sp, #56]
 498:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1247              		.loc 1 498 0
 1248 0064 0F92     		str	r2, [sp, #60]
 499:Core/Src/main.c ****   {
 1249              		.loc 1 499 0
 1250 0066 09A9     		add	r1, sp, #36
 1251 0068 0F48     		ldr	r0, .L103
 1252 006a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1253              	.LVL87:
 1254 006e B8B9     		cbnz	r0, .L101
 503:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1255              		.loc 1 503 0
 1256 0070 0023     		movs	r3, #0
 1257 0072 0193     		str	r3, [sp, #4]
 504:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1258              		.loc 1 504 0
 1259 0074 0293     		str	r3, [sp, #8]
 505:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1260              		.loc 1 505 0
 1261 0076 0393     		str	r3, [sp, #12]
 506:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1262              		.loc 1 506 0
 1263 0078 0493     		str	r3, [sp, #16]
 507:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
ARM GAS  /tmp/ccGfBWxb.s 			page 45


 1264              		.loc 1 507 0
 1265 007a 0593     		str	r3, [sp, #20]
 508:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1266              		.loc 1 508 0
 1267 007c 4FF40052 		mov	r2, #8192
 1268 0080 0692     		str	r2, [sp, #24]
 509:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1269              		.loc 1 509 0
 1270 0082 0893     		str	r3, [sp, #32]
 510:Core/Src/main.c ****   {
 1271              		.loc 1 510 0
 1272 0084 01A9     		add	r1, sp, #4
 1273 0086 0848     		ldr	r0, .L103
 1274 0088 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1275              	.LVL88:
 1276 008c 50B9     		cbnz	r0, .L102
 517:Core/Src/main.c **** 
 1277              		.loc 1 517 0
 1278 008e 0648     		ldr	r0, .L103
 1279 0090 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1280              	.LVL89:
 519:Core/Src/main.c **** 
 1281              		.loc 1 519 0
 1282 0094 12B0     		add	sp, sp, #72
 1283              	.LCFI32:
 1284              		.cfi_remember_state
 1285              		.cfi_def_cfa_offset 8
 1286              		@ sp needed
 1287 0096 10BD     		pop	{r4, pc}
 1288              	.L99:
 1289              	.LCFI33:
 1290              		.cfi_restore_state
 484:Core/Src/main.c ****   }
 1291              		.loc 1 484 0
 1292 0098 FFF7FEFF 		bl	Error_Handler
 1293              	.LVL90:
 1294              	.L100:
 490:Core/Src/main.c ****   }
 1295              		.loc 1 490 0
 1296 009c FFF7FEFF 		bl	Error_Handler
 1297              	.LVL91:
 1298              	.L101:
 501:Core/Src/main.c ****   }
 1299              		.loc 1 501 0
 1300 00a0 FFF7FEFF 		bl	Error_Handler
 1301              	.LVL92:
 1302              	.L102:
 512:Core/Src/main.c ****   }
 1303              		.loc 1 512 0
 1304 00a4 FFF7FEFF 		bl	Error_Handler
 1305              	.LVL93:
 1306              	.L104:
 1307              		.align	2
 1308              	.L103:
 1309 00a8 00000000 		.word	htim1
 1310 00ac 002C0140 		.word	1073818624
 1311              		.cfi_endproc
ARM GAS  /tmp/ccGfBWxb.s 			page 46


 1312              	.LFE78:
 1314              		.section	.text.MX_TIM5_Init,"ax",%progbits
 1315              		.align	1
 1316              		.syntax unified
 1317              		.thumb
 1318              		.thumb_func
 1319              		.fpu softvfp
 1321              	MX_TIM5_Init:
 1322              	.LFB81:
 634:Core/Src/main.c **** 
 1323              		.loc 1 634 0
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 40
 1326              		@ frame_needed = 0, uses_anonymous_args = 0
 1327 0000 00B5     		push	{lr}
 1328              	.LCFI34:
 1329              		.cfi_def_cfa_offset 4
 1330              		.cfi_offset 14, -4
 1331 0002 8BB0     		sub	sp, sp, #44
 1332              	.LCFI35:
 1333              		.cfi_def_cfa_offset 48
 640:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1334              		.loc 1 640 0
 1335 0004 0023     		movs	r3, #0
 1336 0006 0893     		str	r3, [sp, #32]
 1337 0008 0993     		str	r3, [sp, #36]
 641:Core/Src/main.c **** 
 1338              		.loc 1 641 0
 1339 000a 0193     		str	r3, [sp, #4]
 1340 000c 0293     		str	r3, [sp, #8]
 1341 000e 0393     		str	r3, [sp, #12]
 1342 0010 0493     		str	r3, [sp, #16]
 1343 0012 0593     		str	r3, [sp, #20]
 1344 0014 0693     		str	r3, [sp, #24]
 1345 0016 0793     		str	r3, [sp, #28]
 646:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 1346              		.loc 1 646 0
 1347 0018 1848     		ldr	r0, .L115
 1348 001a 194A     		ldr	r2, .L115+4
 1349 001c 0260     		str	r2, [r0]
 647:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1350              		.loc 1 647 0
 1351 001e 6422     		movs	r2, #100
 1352 0020 4260     		str	r2, [r0, #4]
 648:Core/Src/main.c ****   htim5.Init.Period = 10;
 1353              		.loc 1 648 0
 1354 0022 8360     		str	r3, [r0, #8]
 649:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1355              		.loc 1 649 0
 1356 0024 0A22     		movs	r2, #10
 1357 0026 C260     		str	r2, [r0, #12]
 650:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1358              		.loc 1 650 0
 1359 0028 0361     		str	r3, [r0, #16]
 651:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 1360              		.loc 1 651 0
 1361 002a 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/ccGfBWxb.s 			page 47


 652:Core/Src/main.c ****   {
 1362              		.loc 1 652 0
 1363 002c FFF7FEFF 		bl	HAL_TIM_OC_Init
 1364              	.LVL94:
 1365 0030 D8B9     		cbnz	r0, .L111
 656:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1366              		.loc 1 656 0
 1367 0032 0023     		movs	r3, #0
 1368 0034 0893     		str	r3, [sp, #32]
 657:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1369              		.loc 1 657 0
 1370 0036 0993     		str	r3, [sp, #36]
 658:Core/Src/main.c ****   {
 1371              		.loc 1 658 0
 1372 0038 08A9     		add	r1, sp, #32
 1373 003a 1048     		ldr	r0, .L115
 1374 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1375              	.LVL95:
 1376 0040 A8B9     		cbnz	r0, .L112
 662:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1377              		.loc 1 662 0
 1378 0042 0022     		movs	r2, #0
 1379 0044 0192     		str	r2, [sp, #4]
 663:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1380              		.loc 1 663 0
 1381 0046 0292     		str	r2, [sp, #8]
 664:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1382              		.loc 1 664 0
 1383 0048 0392     		str	r2, [sp, #12]
 665:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1384              		.loc 1 665 0
 1385 004a 0592     		str	r2, [sp, #20]
 666:Core/Src/main.c ****   {
 1386              		.loc 1 666 0
 1387 004c 01A9     		add	r1, sp, #4
 1388 004e 0B48     		ldr	r0, .L115
 1389 0050 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1390              	.LVL96:
 1391 0054 68B9     		cbnz	r0, .L113
 670:Core/Src/main.c ****   {
 1392              		.loc 1 670 0
 1393 0056 0422     		movs	r2, #4
 1394 0058 0DEB0201 		add	r1, sp, r2
 1395 005c 0748     		ldr	r0, .L115
 1396 005e FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1397              	.LVL97:
 1398 0062 40B9     		cbnz	r0, .L114
 678:Core/Src/main.c **** 
 1399              		.loc 1 678 0
 1400 0064 0BB0     		add	sp, sp, #44
 1401              	.LCFI36:
 1402              		.cfi_remember_state
 1403              		.cfi_def_cfa_offset 4
 1404              		@ sp needed
 1405 0066 5DF804FB 		ldr	pc, [sp], #4
 1406              	.L111:
 1407              	.LCFI37:
ARM GAS  /tmp/ccGfBWxb.s 			page 48


 1408              		.cfi_restore_state
 654:Core/Src/main.c ****   }
 1409              		.loc 1 654 0
 1410 006a FFF7FEFF 		bl	Error_Handler
 1411              	.LVL98:
 1412              	.L112:
 660:Core/Src/main.c ****   }
 1413              		.loc 1 660 0
 1414 006e FFF7FEFF 		bl	Error_Handler
 1415              	.LVL99:
 1416              	.L113:
 668:Core/Src/main.c ****   }
 1417              		.loc 1 668 0
 1418 0072 FFF7FEFF 		bl	Error_Handler
 1419              	.LVL100:
 1420              	.L114:
 672:Core/Src/main.c ****   }
 1421              		.loc 1 672 0
 1422 0076 FFF7FEFF 		bl	Error_Handler
 1423              	.LVL101:
 1424              	.L116:
 1425 007a 00BF     		.align	2
 1426              	.L115:
 1427 007c 00000000 		.word	htim5
 1428 0080 000C0040 		.word	1073744896
 1429              		.cfi_endproc
 1430              	.LFE81:
 1432              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1433              		.align	1
 1434              		.syntax unified
 1435              		.thumb
 1436              		.thumb_func
 1437              		.fpu softvfp
 1439              	MX_TIM2_Init:
 1440              	.LFB79:
 527:Core/Src/main.c **** 
 1441              		.loc 1 527 0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 40
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 1445 0000 00B5     		push	{lr}
 1446              	.LCFI38:
 1447              		.cfi_def_cfa_offset 4
 1448              		.cfi_offset 14, -4
 1449 0002 8BB0     		sub	sp, sp, #44
 1450              	.LCFI39:
 1451              		.cfi_def_cfa_offset 48
 533:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1452              		.loc 1 533 0
 1453 0004 0023     		movs	r3, #0
 1454 0006 0893     		str	r3, [sp, #32]
 1455 0008 0993     		str	r3, [sp, #36]
 534:Core/Src/main.c **** 
 1456              		.loc 1 534 0
 1457 000a 0193     		str	r3, [sp, #4]
 1458 000c 0293     		str	r3, [sp, #8]
 1459 000e 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccGfBWxb.s 			page 49


 1460 0010 0493     		str	r3, [sp, #16]
 1461 0012 0593     		str	r3, [sp, #20]
 1462 0014 0693     		str	r3, [sp, #24]
 1463 0016 0793     		str	r3, [sp, #28]
 539:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 1464              		.loc 1 539 0
 1465 0018 1448     		ldr	r0, .L125
 1466 001a 4FF08042 		mov	r2, #1073741824
 1467 001e 0260     		str	r2, [r0]
 540:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1468              		.loc 1 540 0
 1469 0020 0A22     		movs	r2, #10
 1470 0022 4260     		str	r2, [r0, #4]
 541:Core/Src/main.c ****   htim2.Init.Period = 600;
 1471              		.loc 1 541 0
 1472 0024 8360     		str	r3, [r0, #8]
 542:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1473              		.loc 1 542 0
 1474 0026 4FF41672 		mov	r2, #600
 1475 002a C260     		str	r2, [r0, #12]
 543:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1476              		.loc 1 543 0
 1477 002c 0361     		str	r3, [r0, #16]
 544:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 1478              		.loc 1 544 0
 1479 002e 8361     		str	r3, [r0, #24]
 545:Core/Src/main.c ****   {
 1480              		.loc 1 545 0
 1481 0030 FFF7FEFF 		bl	HAL_TIM_OC_Init
 1482              	.LVL102:
 1483 0034 A0B9     		cbnz	r0, .L122
 549:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1484              		.loc 1 549 0
 1485 0036 0023     		movs	r3, #0
 1486 0038 0893     		str	r3, [sp, #32]
 550:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1487              		.loc 1 550 0
 1488 003a 0993     		str	r3, [sp, #36]
 551:Core/Src/main.c ****   {
 1489              		.loc 1 551 0
 1490 003c 08A9     		add	r1, sp, #32
 1491 003e 0B48     		ldr	r0, .L125
 1492 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1493              	.LVL103:
 1494 0044 70B9     		cbnz	r0, .L123
 555:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1495              		.loc 1 555 0
 1496 0046 0022     		movs	r2, #0
 1497 0048 0192     		str	r2, [sp, #4]
 556:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1498              		.loc 1 556 0
 1499 004a 0292     		str	r2, [sp, #8]
 557:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1500              		.loc 1 557 0
 1501 004c 0392     		str	r2, [sp, #12]
 558:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1502              		.loc 1 558 0
ARM GAS  /tmp/ccGfBWxb.s 			page 50


 1503 004e 0592     		str	r2, [sp, #20]
 559:Core/Src/main.c ****   {
 1504              		.loc 1 559 0
 1505 0050 01A9     		add	r1, sp, #4
 1506 0052 0648     		ldr	r0, .L125
 1507 0054 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1508              	.LVL104:
 1509 0058 30B9     		cbnz	r0, .L124
 567:Core/Src/main.c **** 
 1510              		.loc 1 567 0
 1511 005a 0BB0     		add	sp, sp, #44
 1512              	.LCFI40:
 1513              		.cfi_remember_state
 1514              		.cfi_def_cfa_offset 4
 1515              		@ sp needed
 1516 005c 5DF804FB 		ldr	pc, [sp], #4
 1517              	.L122:
 1518              	.LCFI41:
 1519              		.cfi_restore_state
 547:Core/Src/main.c ****   }
 1520              		.loc 1 547 0
 1521 0060 FFF7FEFF 		bl	Error_Handler
 1522              	.LVL105:
 1523              	.L123:
 553:Core/Src/main.c ****   }
 1524              		.loc 1 553 0
 1525 0064 FFF7FEFF 		bl	Error_Handler
 1526              	.LVL106:
 1527              	.L124:
 561:Core/Src/main.c ****   }
 1528              		.loc 1 561 0
 1529 0068 FFF7FEFF 		bl	Error_Handler
 1530              	.LVL107:
 1531              	.L126:
 1532              		.align	2
 1533              	.L125:
 1534 006c 00000000 		.word	htim2
 1535              		.cfi_endproc
 1536              	.LFE79:
 1538              		.section	.text.SystemClock_Config,"ax",%progbits
 1539              		.align	1
 1540              		.global	SystemClock_Config
 1541              		.syntax unified
 1542              		.thumb
 1543              		.thumb_func
 1544              		.fpu softvfp
 1546              	SystemClock_Config:
 1547              	.LFB73:
 254:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1548              		.loc 1 254 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 112
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552 0000 00B5     		push	{lr}
 1553              	.LCFI42:
 1554              		.cfi_def_cfa_offset 4
 1555              		.cfi_offset 14, -4
ARM GAS  /tmp/ccGfBWxb.s 			page 51


 1556 0002 9DB0     		sub	sp, sp, #116
 1557              	.LCFI43:
 1558              		.cfi_def_cfa_offset 120
 255:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1559              		.loc 1 255 0
 1560 0004 3822     		movs	r2, #56
 1561 0006 0021     		movs	r1, #0
 1562 0008 0DEB0200 		add	r0, sp, r2
 1563 000c FFF7FEFF 		bl	memset
 1564              	.LVL108:
 256:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1565              		.loc 1 256 0
 1566 0010 0021     		movs	r1, #0
 1567 0012 0991     		str	r1, [sp, #36]
 1568 0014 0A91     		str	r1, [sp, #40]
 1569 0016 0B91     		str	r1, [sp, #44]
 1570 0018 0C91     		str	r1, [sp, #48]
 1571 001a 0D91     		str	r1, [sp, #52]
 257:Core/Src/main.c **** 
 1572              		.loc 1 257 0
 1573 001c 2022     		movs	r2, #32
 1574 001e 01A8     		add	r0, sp, #4
 1575 0020 FFF7FEFF 		bl	memset
 1576              	.LVL109:
 262:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1577              		.loc 1 262 0
 1578 0024 0122     		movs	r2, #1
 1579 0026 0E92     		str	r2, [sp, #56]
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1580              		.loc 1 263 0
 1581 0028 4FF48033 		mov	r3, #65536
 1582 002c 1093     		str	r3, [sp, #64]
 265:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 1583              		.loc 1 265 0
 1584 002e 1392     		str	r2, [sp, #76]
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1585              		.loc 1 267 0
 1586 0030 0222     		movs	r2, #2
 1587 0032 1692     		str	r2, [sp, #88]
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1588              		.loc 1 268 0
 1589 0034 1793     		str	r3, [sp, #92]
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 1590              		.loc 1 269 0
 1591 0036 4FF4E013 		mov	r3, #1835008
 1592 003a 1893     		str	r3, [sp, #96]
 271:Core/Src/main.c ****   {
 1593              		.loc 1 271 0
 1594 003c 0EA8     		add	r0, sp, #56
 1595 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1596              	.LVL110:
 1597 0042 E0B9     		cbnz	r0, .L132
 277:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1598              		.loc 1 277 0
 1599 0044 0F23     		movs	r3, #15
 1600 0046 0993     		str	r3, [sp, #36]
 279:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccGfBWxb.s 			page 52


 1601              		.loc 1 279 0
 1602 0048 0221     		movs	r1, #2
 1603 004a 0A91     		str	r1, [sp, #40]
 280:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1604              		.loc 1 280 0
 1605 004c 0023     		movs	r3, #0
 1606 004e 0B93     		str	r3, [sp, #44]
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1607              		.loc 1 281 0
 1608 0050 4FF48062 		mov	r2, #1024
 1609 0054 0C92     		str	r2, [sp, #48]
 282:Core/Src/main.c **** 
 1610              		.loc 1 282 0
 1611 0056 0D93     		str	r3, [sp, #52]
 284:Core/Src/main.c ****   {
 1612              		.loc 1 284 0
 1613 0058 09A8     		add	r0, sp, #36
 1614 005a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1615              	.LVL111:
 1616 005e 80B9     		cbnz	r0, .L133
 288:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1617              		.loc 1 288 0
 1618 0060 0223     		movs	r3, #2
 1619 0062 0193     		str	r3, [sp, #4]
 289:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1620              		.loc 1 289 0
 1621 0064 4FF40043 		mov	r3, #32768
 1622 0068 0393     		str	r3, [sp, #12]
 290:Core/Src/main.c ****   {
 1623              		.loc 1 290 0
 1624 006a 01A8     		add	r0, sp, #4
 1625 006c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1626              	.LVL112:
 1627 0070 48B9     		cbnz	r0, .L134
 296:Core/Src/main.c **** }
 1628              		.loc 1 296 0
 1629 0072 0122     		movs	r2, #1
 1630 0074 054B     		ldr	r3, .L135
 1631 0076 1A60     		str	r2, [r3]
 297:Core/Src/main.c **** 
 1632              		.loc 1 297 0
 1633 0078 1DB0     		add	sp, sp, #116
 1634              	.LCFI44:
 1635              		.cfi_remember_state
 1636              		.cfi_def_cfa_offset 4
 1637              		@ sp needed
 1638 007a 5DF804FB 		ldr	pc, [sp], #4
 1639              	.L132:
 1640              	.LCFI45:
 1641              		.cfi_restore_state
 273:Core/Src/main.c ****   }
 1642              		.loc 1 273 0
 1643 007e FFF7FEFF 		bl	Error_Handler
 1644              	.LVL113:
 1645              	.L133:
 286:Core/Src/main.c ****   }
 1646              		.loc 1 286 0
ARM GAS  /tmp/ccGfBWxb.s 			page 53


 1647 0082 FFF7FEFF 		bl	Error_Handler
 1648              	.LVL114:
 1649              	.L134:
 292:Core/Src/main.c ****   }
 1650              		.loc 1 292 0
 1651 0086 FFF7FEFF 		bl	Error_Handler
 1652              	.LVL115:
 1653              	.L136:
 1654 008a 00BF     		.align	2
 1655              	.L135:
 1656 008c 70004242 		.word	1111621744
 1657              		.cfi_endproc
 1658              	.LFE73:
 1660              		.section	.text.main,"ax",%progbits
 1661              		.align	1
 1662              		.global	main
 1663              		.syntax unified
 1664              		.thumb
 1665              		.thumb_func
 1666              		.fpu softvfp
 1668              	main:
 1669              	.LFB72:
 135:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1670              		.loc 1 135 0
 1671              		.cfi_startproc
 1672              		@ Volatile: function does not return.
 1673              		@ args = 0, pretend = 0, frame = 0
 1674              		@ frame_needed = 0, uses_anonymous_args = 0
 1675 0000 08B5     		push	{r3, lr}
 1676              	.LCFI46:
 1677              		.cfi_def_cfa_offset 8
 1678              		.cfi_offset 3, -8
 1679              		.cfi_offset 14, -4
 143:Core/Src/main.c **** 
 1680              		.loc 1 143 0
 1681 0002 FFF7FEFF 		bl	HAL_Init
 1682              	.LVL116:
 150:Core/Src/main.c **** 
 1683              		.loc 1 150 0
 1684 0006 FFF7FEFF 		bl	SystemClock_Config
 1685              	.LVL117:
 157:Core/Src/main.c ****   MX_DMA_Init();
 1686              		.loc 1 157 0
 1687 000a FFF7FEFF 		bl	MX_GPIO_Init
 1688              	.LVL118:
 158:Core/Src/main.c ****   MX_CAN2_Init();
 1689              		.loc 1 158 0
 1690 000e FFF7FEFF 		bl	MX_DMA_Init
 1691              	.LVL119:
 159:Core/Src/main.c ****   MX_ADC1_Init();
 1692              		.loc 1 159 0
 1693 0012 FFF7FEFF 		bl	MX_CAN2_Init
 1694              	.LVL120:
 160:Core/Src/main.c ****   MX_CAN1_Init();
 1695              		.loc 1 160 0
 1696 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1697              	.LVL121:
ARM GAS  /tmp/ccGfBWxb.s 			page 54


 161:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 1698              		.loc 1 161 0
 1699 001a FFF7FEFF 		bl	MX_CAN1_Init
 1700              	.LVL122:
 163:Core/Src/main.c ****   MX_USART1_UART_Init();
 1701              		.loc 1 163 0
 1702 001e FFF7FEFF 		bl	MX_UART4_Init
 1703              	.LVL123:
 164:Core/Src/main.c ****   MX_TIM3_Init();
 1704              		.loc 1 164 0
 1705 0022 FFF7FEFF 		bl	MX_USART1_UART_Init
 1706              	.LVL124:
 165:Core/Src/main.c ****   MX_TIM1_Init();
 1707              		.loc 1 165 0
 1708 0026 FFF7FEFF 		bl	MX_TIM3_Init
 1709              	.LVL125:
 166:Core/Src/main.c ****   MX_TIM5_Init();
 1710              		.loc 1 166 0
 1711 002a FFF7FEFF 		bl	MX_TIM1_Init
 1712              	.LVL126:
 167:Core/Src/main.c ****   MX_TIM2_Init();
 1713              		.loc 1 167 0
 1714 002e FFF7FEFF 		bl	MX_TIM5_Init
 1715              	.LVL127:
 168:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1716              		.loc 1 168 0
 1717 0032 FFF7FEFF 		bl	MX_TIM2_Init
 1718              	.LVL128:
 170:Core/Src/main.c ****   gaugeInit();
 1719              		.loc 1 170 0
 1720 0036 FFF7FEFF 		bl	canSettings
 1721              	.LVL129:
 171:Core/Src/main.c ****   dcdcInit();
 1722              		.loc 1 171 0
 1723 003a FFF7FEFF 		bl	gaugeInit
 1724              	.LVL130:
 172:Core/Src/main.c ****   vcuInit();
 1725              		.loc 1 172 0
 1726 003e FFF7FEFF 		bl	dcdcInit
 1727              	.LVL131:
 173:Core/Src/main.c ****   wpInit();
 1728              		.loc 1 173 0
 1729 0042 FFF7FEFF 		bl	vcuInit
 1730              	.LVL132:
 174:Core/Src/main.c **** 
 1731              		.loc 1 174 0
 1732 0046 FFF7FEFF 		bl	wpInit
 1733              	.LVL133:
 176:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); //water pump pwm
 1734              		.loc 1 176 0
 1735 004a 2C4C     		ldr	r4, .L140
 1736 004c 2046     		mov	r0, r4
 1737 004e FFF7FEFF 		bl	HAL_TIM_Base_Start
 1738              	.LVL134:
 177:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1739              		.loc 1 177 0
 1740 0052 2B4D     		ldr	r5, .L140+4
ARM GAS  /tmp/ccGfBWxb.s 			page 55


 1741 0054 6423     		movs	r3, #100
 1742 0056 2A46     		mov	r2, r5
 1743 0058 2A49     		ldr	r1, .L140+8
 1744 005a 2B48     		ldr	r0, .L140+12
 1745 005c FFF7FEFF 		bl	HAL_DMA_Start
 1746              	.LVL135:
 178:Core/Src/main.c **** 
 1747              		.loc 1 178 0
 1748 0060 2268     		ldr	r2, [r4]
 1749 0062 D368     		ldr	r3, [r2, #12]
 1750 0064 43F40073 		orr	r3, r3, #512
 1751 0068 D360     		str	r3, [r2, #12]
 180:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 1752              		.loc 1 180 0
 1753 006a 284C     		ldr	r4, .L140+16
 1754 006c 2046     		mov	r0, r4
 1755 006e FFF7FEFF 		bl	HAL_TIM_Base_Start
 1756              	.LVL136:
 181:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 1757              		.loc 1 181 0
 1758 0072 6423     		movs	r3, #100
 1759 0074 2A46     		mov	r2, r5
 1760 0076 2649     		ldr	r1, .L140+20
 1761 0078 2648     		ldr	r0, .L140+24
 1762 007a FFF7FEFF 		bl	HAL_DMA_Start
 1763              	.LVL137:
 182:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 1764              		.loc 1 182 0
 1765 007e 2268     		ldr	r2, [r4]
 1766 0080 D368     		ldr	r3, [r2, #12]
 1767 0082 43F40073 		orr	r3, r3, #512
 1768 0086 D360     		str	r3, [r2, #12]
 183:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 1769              		.loc 1 183 0
 1770 0088 4FF47A73 		mov	r3, #1000
 1771 008c 2A46     		mov	r2, r5
 1772 008e 2249     		ldr	r1, .L140+28
 1773 0090 2248     		ldr	r0, .L140+32
 1774 0092 FFF7FEFF 		bl	HAL_DMA_Start
 1775              	.LVL138:
 184:Core/Src/main.c **** 
 1776              		.loc 1 184 0
 1777 0096 2268     		ldr	r2, [r4]
 1778 0098 D368     		ldr	r3, [r2, #12]
 1779 009a 43F48063 		orr	r3, r3, #1024
 1780 009e D360     		str	r3, [r2, #12]
 186:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 1781              		.loc 1 186 0
 1782 00a0 0021     		movs	r1, #0
 1783 00a2 1F48     		ldr	r0, .L140+36
 1784 00a4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1785              	.LVL139:
 187:Core/Src/main.c **** 
 1786              		.loc 1 187 0
 1787 00a8 0821     		movs	r1, #8
 1788 00aa 1E48     		ldr	r0, .L140+40
 1789 00ac FFF7FEFF 		bl	HAL_TIM_PWM_Start
ARM GAS  /tmp/ccGfBWxb.s 			page 56


 1790              	.LVL140:
 189:Core/Src/main.c **** 
 1791              		.loc 1 189 0
 1792 00b0 0322     		movs	r2, #3
 1793 00b2 1D49     		ldr	r1, .L140+44
 1794 00b4 1D48     		ldr	r0, .L140+48
 1795 00b6 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1796              	.LVL141:
 194:Core/Src/main.c **** 
 1797              		.loc 1 194 0
 1798 00ba FFF7FEFF 		bl	osKernelInitialize
 1799              	.LVL142:
 214:Core/Src/main.c **** 
 1800              		.loc 1 214 0
 1801 00be 1C4A     		ldr	r2, .L140+52
 1802 00c0 0021     		movs	r1, #0
 1803 00c2 1C48     		ldr	r0, .L140+56
 1804 00c4 FFF7FEFF 		bl	osThreadNew
 1805              	.LVL143:
 1806 00c8 1B4B     		ldr	r3, .L140+60
 1807 00ca 1860     		str	r0, [r3]
 217:Core/Src/main.c **** 
 1808              		.loc 1 217 0
 1809 00cc 1B4A     		ldr	r2, .L140+64
 1810 00ce 0021     		movs	r1, #0
 1811 00d0 1B48     		ldr	r0, .L140+68
 1812 00d2 FFF7FEFF 		bl	osThreadNew
 1813              	.LVL144:
 1814 00d6 1B4B     		ldr	r3, .L140+72
 1815 00d8 1860     		str	r0, [r3]
 220:Core/Src/main.c **** 
 1816              		.loc 1 220 0
 1817 00da 1B4A     		ldr	r2, .L140+76
 1818 00dc 0021     		movs	r1, #0
 1819 00de 1B48     		ldr	r0, .L140+80
 1820 00e0 FFF7FEFF 		bl	osThreadNew
 1821              	.LVL145:
 1822 00e4 1A4B     		ldr	r3, .L140+84
 1823 00e6 1860     		str	r0, [r3]
 223:Core/Src/main.c **** 
 1824              		.loc 1 223 0
 1825 00e8 1A4A     		ldr	r2, .L140+88
 1826 00ea 0021     		movs	r1, #0
 1827 00ec 1A48     		ldr	r0, .L140+92
 1828 00ee FFF7FEFF 		bl	osThreadNew
 1829              	.LVL146:
 1830 00f2 1A4B     		ldr	r3, .L140+96
 1831 00f4 1860     		str	r0, [r3]
 234:Core/Src/main.c **** 
 1832              		.loc 1 234 0
 1833 00f6 FFF7FEFF 		bl	osKernelStart
 1834              	.LVL147:
 1835              	.L138:
 1836 00fa FEE7     		b	.L138
 1837              	.L141:
 1838              		.align	2
 1839              	.L140:
ARM GAS  /tmp/ccGfBWxb.s 			page 57


 1840 00fc 00000000 		.word	htim2
 1841 0100 10100140 		.word	1073811472
 1842 0104 00000000 		.word	waterPWM
 1843 0108 00000000 		.word	hdma_tim2_ch1
 1844 010c 00000000 		.word	htim5
 1845 0110 00000000 		.word	tempPWM
 1846 0114 00000000 		.word	hdma_tim5_ch1
 1847 0118 00000000 		.word	socPWM
 1848 011c 00000000 		.word	hdma_tim5_ch2
 1849 0120 00000000 		.word	htim1
 1850 0124 00000000 		.word	htim3
 1851 0128 00000000 		.word	ADC_data
 1852 012c 00000000 		.word	hadc1
 1853 0130 00000000 		.word	.LANCHOR0
 1854 0134 00000000 		.word	StartTaskLoop
 1855 0138 00000000 		.word	TaskLoopHandle
 1856 013c 00000000 		.word	.LANCHOR1
 1857 0140 00000000 		.word	StartTask10ms
 1858 0144 00000000 		.word	Task10msHandle
 1859 0148 00000000 		.word	.LANCHOR2
 1860 014c 00000000 		.word	StartTask100ms
 1861 0150 00000000 		.word	Task100msHandle
 1862 0154 00000000 		.word	.LANCHOR3
 1863 0158 00000000 		.word	StartTask250ms
 1864 015c 00000000 		.word	Task250msHandle
 1865              		.cfi_endproc
 1866              	.LFE72:
 1868              		.global	Task250ms_attributes
 1869              		.comm	Task250msHandle,4,4
 1870              		.global	Task100ms_attributes
 1871              		.comm	Task100msHandle,4,4
 1872              		.global	Task10ms_attributes
 1873              		.comm	Task10msHandle,4,4
 1874              		.global	TaskLoop_attributes
 1875              		.comm	TaskLoopHandle,4,4
 1876              		.comm	huart4,64,4
 1877              		.comm	hdma_tim5_ch2,68,4
 1878              		.comm	hdma_tim5_ch1,68,4
 1879              		.comm	hdma_tim2_ch1,68,4
 1880              		.comm	htim5,72,4
 1881              		.comm	htim3,72,4
 1882              		.comm	htim2,72,4
 1883              		.comm	htim1,72,4
 1884              		.comm	hdma_adc1,68,4
 1885              		.comm	hadc1,48,4
 1886              		.comm	waterPWM,400,4
 1887              		.comm	socPWM,4000,4
 1888              		.comm	tempPWM,400,4
 1889              		.comm	canDebug,4,4
 1890              		.comm	txCycle2,4,4
 1891              		.comm	txCycle,4,4
 1892              		.comm	canTx2,8,4
 1893              		.comm	canTx,8,4
 1894              		.comm	canMailbox2,4,4
 1895              		.comm	canMailbox,4,4
 1896              		.comm	canRx2,8,4
 1897              		.comm	canRx,8,4
ARM GAS  /tmp/ccGfBWxb.s 			page 58


 1898              		.comm	txMsgExt2,24,4
 1899              		.comm	txMsg2,24,4
 1900              		.comm	rxMsg2,28,4
 1901              		.comm	txMsgExt,24,4
 1902              		.comm	txMsg,24,4
 1903              		.comm	rxMsg,28,4
 1904              		.comm	sf5,40,4
 1905              		.comm	sf4,40,4
 1906              		.comm	sf3,40,4
 1907              		.comm	sf2,40,4
 1908              		.comm	sf,40,4
 1909              		.comm	hcan2,40,4
 1910              		.comm	hcan1,40,4
 1911              		.comm	setPrevState,1,1
 1912              		.comm	te,12,4
 1913              		.comm	BMS,20,4
 1914              		.comm	charger,2,4
 1915              		.comm	vcu,16,4
 1916              		.comm	iboost,2,4
 1917              		.comm	ldu,18,4
 1918              		.comm	tempdata,4,4
 1919              		.comm	ADC_data,12,4
 1920              		.comm	tenderActive,1,1
 1921              		.comm	time_now,4,4
 1922              		.comm	period,4,4
 1923              		.comm	DCDC,4,4
 1924              		.comm	huart1,64,4
 1925              		.section	.rodata.Task100ms_attributes,"a",%progbits
 1926              		.align	2
 1927              		.set	.LANCHOR2,. + 0
 1930              	Task100ms_attributes:
 1931 0000 0C000000 		.word	.LC1
 1932 0004 00000000 		.space	16
 1932      00000000 
 1932      00000000 
 1932      00000000 
 1933 0014 00020000 		.word	512
 1934 0018 30000000 		.word	48
 1935 001c 00000000 		.space	8
 1935      00000000 
 1936              		.section	.rodata.Task10ms_attributes,"a",%progbits
 1937              		.align	2
 1938              		.set	.LANCHOR1,. + 0
 1941              	Task10ms_attributes:
 1942 0000 18000000 		.word	.LC2
 1943 0004 00000000 		.space	16
 1943      00000000 
 1943      00000000 
 1943      00000000 
 1944 0014 00020000 		.word	512
 1945 0018 30000000 		.word	48
 1946 001c 00000000 		.space	8
 1946      00000000 
 1947              		.section	.rodata.Task250ms_attributes,"a",%progbits
 1948              		.align	2
 1949              		.set	.LANCHOR3,. + 0
 1952              	Task250ms_attributes:
ARM GAS  /tmp/ccGfBWxb.s 			page 59


 1953 0000 00000000 		.word	.LC0
 1954 0004 00000000 		.space	16
 1954      00000000 
 1954      00000000 
 1954      00000000 
 1955 0014 00020000 		.word	512
 1956 0018 30000000 		.word	48
 1957 001c 00000000 		.space	8
 1957      00000000 
 1958              		.section	.rodata.TaskLoop_attributes,"a",%progbits
 1959              		.align	2
 1960              		.set	.LANCHOR0,. + 0
 1963              	TaskLoop_attributes:
 1964 0000 24000000 		.word	.LC3
 1965 0004 00000000 		.space	16
 1965      00000000 
 1965      00000000 
 1965      00000000 
 1966 0014 00020000 		.word	512
 1967 0018 18000000 		.word	24
 1968 001c 00000000 		.space	8
 1968      00000000 
 1969              		.section	.rodata.str1.4,"aMS",%progbits,1
 1970              		.align	2
 1971              	.LC0:
 1972 0000 5461736B 		.ascii	"Task250ms\000"
 1972      3235306D 
 1972      7300
 1973 000a 0000     		.space	2
 1974              	.LC1:
 1975 000c 5461736B 		.ascii	"Task100ms\000"
 1975      3130306D 
 1975      7300
 1976 0016 0000     		.space	2
 1977              	.LC2:
 1978 0018 5461736B 		.ascii	"Task10ms\000"
 1978      31306D73 
 1978      00
 1979 0021 000000   		.space	3
 1980              	.LC3:
 1981 0024 5461736B 		.ascii	"TaskLoop\000"
 1981      4C6F6F70 
 1981      00
 1982              		.text
 1983              	.Letext0:
 1984              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1985              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 1986              		.file 6 "Drivers/CMSIS/Include/core_cm3.h"
 1987              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1988              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 1989              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1990              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1991              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1992              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1993              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1994              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1995              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
ARM GAS  /tmp/ccGfBWxb.s 			page 60


 1996              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1997              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1998              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1999              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2000              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 2001              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 2002              		.file 22 "/usr/include/newlib/sys/lock.h"
 2003              		.file 23 "/usr/include/newlib/sys/_types.h"
 2004              		.file 24 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2005              		.file 25 "/usr/include/newlib/sys/reent.h"
 2006              		.file 26 "Core/Inc/dcdc.h"
 2007              		.file 27 "Core/Inc/vcu.h"
 2008              		.file 28 "Core/Inc/encoder.h"
 2009              		.file 29 "Core/Inc/can_setup.h"
 2010              		.file 30 "Core/Inc/gauges.h"
 2011              		.file 31 "Core/Inc/water_pump.h"
 2012              		.file 32 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2013              		.file 33 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 2014              		.file 34 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2015              		.file 35 "Core/Inc/main.h"
ARM GAS  /tmp/ccGfBWxb.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccGfBWxb.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccGfBWxb.s:168    .text.MX_GPIO_Init:00000000000000d4 $d
     /tmp/ccGfBWxb.s:175    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:181    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccGfBWxb.s:264    .text.MX_DMA_Init:0000000000000070 $d
     /tmp/ccGfBWxb.s:269    .text.StartTaskLoop:0000000000000000 $t
     /tmp/ccGfBWxb.s:276    .text.StartTaskLoop:0000000000000000 StartTaskLoop
     /tmp/ccGfBWxb.s:309    .text.StartTask10ms:0000000000000000 $t
     /tmp/ccGfBWxb.s:316    .text.StartTask10ms:0000000000000000 StartTask10ms
     /tmp/ccGfBWxb.s:359    .text.StartTask10ms:0000000000000028 $d
                            *COM*:0000000000000010 vcu
     /tmp/ccGfBWxb.s:364    .text.StartTask100ms:0000000000000000 $t
     /tmp/ccGfBWxb.s:371    .text.StartTask100ms:0000000000000000 StartTask100ms
     /tmp/ccGfBWxb.s:412    .text.StartTask100ms:0000000000000028 $d
                            *COM*:0000000000000012 ldu
     /tmp/ccGfBWxb.s:417    .text.StartTask250ms:0000000000000000 $t
     /tmp/ccGfBWxb.s:424    .text.StartTask250ms:0000000000000000 StartTask250ms
     /tmp/ccGfBWxb.s:472    .text.StartTask250ms:0000000000000034 $d
                            *COM*:0000000000000014 BMS
     /tmp/ccGfBWxb.s:479    .text.__io_putchar:0000000000000000 $t
     /tmp/ccGfBWxb.s:486    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/ccGfBWxb.s:524    .text.__io_putchar:000000000000001c $d
                            *COM*:0000000000000040 huart1
     /tmp/ccGfBWxb.s:529    .text._write:0000000000000000 $t
     /tmp/ccGfBWxb.s:536    .text._write:0000000000000000 _write
     /tmp/ccGfBWxb.s:580    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccGfBWxb.s:587    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccGfBWxb.s:617    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccGfBWxb.s:622    .text.Error_Handler:0000000000000000 $t
     /tmp/ccGfBWxb.s:629    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccGfBWxb.s:655    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:661    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/ccGfBWxb.s:714    .text.MX_CAN2_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan2
     /tmp/ccGfBWxb.s:720    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:726    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccGfBWxb.s:838    .text.MX_ADC1_Init:0000000000000088 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccGfBWxb.s:844    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:850    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccGfBWxb.s:903    .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccGfBWxb.s:909    .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:915    .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccGfBWxb.s:959    .text.MX_UART4_Init:000000000000002c $d
                            *COM*:0000000000000040 huart4
     /tmp/ccGfBWxb.s:965    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:971    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccGfBWxb.s:1015   .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccGfBWxb.s:1021   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:1027   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccGfBWxb.s:1155   .text.MX_TIM3_Init:00000000000000a0 $d
                            *COM*:0000000000000048 htim3
     /tmp/ccGfBWxb.s:1161   .text.MX_TIM1_Init:0000000000000000 $t
ARM GAS  /tmp/ccGfBWxb.s 			page 62


     /tmp/ccGfBWxb.s:1167   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccGfBWxb.s:1309   .text.MX_TIM1_Init:00000000000000a8 $d
                            *COM*:0000000000000048 htim1
     /tmp/ccGfBWxb.s:1315   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:1321   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccGfBWxb.s:1427   .text.MX_TIM5_Init:000000000000007c $d
                            *COM*:0000000000000048 htim5
     /tmp/ccGfBWxb.s:1433   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccGfBWxb.s:1439   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccGfBWxb.s:1534   .text.MX_TIM2_Init:000000000000006c $d
                            *COM*:0000000000000048 htim2
     /tmp/ccGfBWxb.s:1539   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccGfBWxb.s:1546   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccGfBWxb.s:1656   .text.SystemClock_Config:000000000000008c $d
     /tmp/ccGfBWxb.s:1661   .text.main:0000000000000000 $t
     /tmp/ccGfBWxb.s:1668   .text.main:0000000000000000 main
     /tmp/ccGfBWxb.s:1840   .text.main:00000000000000fc $d
                            *COM*:0000000000000190 waterPWM
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000190 tempPWM
                            *COM*:0000000000000044 hdma_tim5_ch1
                            *COM*:0000000000000fa0 socPWM
                            *COM*:0000000000000044 hdma_tim5_ch2
                            *COM*:000000000000000c ADC_data
                            *COM*:0000000000000004 TaskLoopHandle
                            *COM*:0000000000000004 Task10msHandle
                            *COM*:0000000000000004 Task100msHandle
                            *COM*:0000000000000004 Task250msHandle
     /tmp/ccGfBWxb.s:1952   .rodata.Task250ms_attributes:0000000000000000 Task250ms_attributes
     /tmp/ccGfBWxb.s:1930   .rodata.Task100ms_attributes:0000000000000000 Task100ms_attributes
     /tmp/ccGfBWxb.s:1941   .rodata.Task10ms_attributes:0000000000000000 Task10ms_attributes
     /tmp/ccGfBWxb.s:1963   .rodata.TaskLoop_attributes:0000000000000000 TaskLoop_attributes
                            *COM*:0000000000000044 hdma_adc1
                            *COM*:0000000000000004 canDebug
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000008 canTx2
                            *COM*:0000000000000008 canTx
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
                            *COM*:0000000000000001 setPrevState
                            *COM*:000000000000000c te
                            *COM*:0000000000000002 charger
                            *COM*:0000000000000002 iboost
ARM GAS  /tmp/ccGfBWxb.s 			page 63


                            *COM*:0000000000000004 tempdata
                            *COM*:0000000000000001 tenderActive
                            *COM*:0000000000000004 time_now
                            *COM*:0000000000000004 period
                            *COM*:0000000000000004 DCDC
     /tmp/ccGfBWxb.s:1926   .rodata.Task100ms_attributes:0000000000000000 $d
     /tmp/ccGfBWxb.s:1937   .rodata.Task10ms_attributes:0000000000000000 $d
     /tmp/ccGfBWxb.s:1948   .rodata.Task250ms_attributes:0000000000000000 $d
     /tmp/ccGfBWxb.s:1959   .rodata.TaskLoop_attributes:0000000000000000 $d
     /tmp/ccGfBWxb.s:1970   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
wpHandler
vcuState
ioHandler
osDelay
xTaskGetTickCount
vTaskDelayUntil
throttleHandler
canIOsend
regenHandler
dcdcHandler
updateSpeed
updateTach
HAL_GPIO_TogglePin
updateTemp
updateSOC
encoderHandler
HAL_UART_Transmit
HAL_IncTick
HAL_CAN_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
memset
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_OC_Init
HAL_TIM_OC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
canSettings
gaugeInit
dcdcInit
vcuInit
ARM GAS  /tmp/ccGfBWxb.s 			page 64


wpInit
HAL_TIM_Base_Start
HAL_DMA_Start
HAL_TIM_PWM_Start
HAL_ADC_Start_DMA
osKernelInitialize
osThreadNew
osKernelStart
