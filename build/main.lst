ARM GAS  /tmp/ccSIEGwI.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB86:
  24              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.</center></h2>
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****  * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****  * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****  *                             www.st.com/SLA0044
  16:Core/Src/main.c ****  *
  17:Core/Src/main.c ****  ******************************************************************************
  18:Core/Src/main.c ****  */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** #include "print_uart.h"
  28:Core/Src/main.c **** #include "can_setup.h"
  29:Core/Src/main.c **** #include "FreeRTOS.h"
  30:Core/Src/main.c **** #include "task.h" //needed for delayuntil
  31:Core/Src/main.c **** #include "gauges.h"
  32:Core/Src/main.c **** #include "vcu.h"
  33:Core/Src/main.c **** #include "test.h"
  34:Core/Src/main.c **** #include "water_pump.h"
ARM GAS  /tmp/ccSIEGwI.s 			page 2


  35:Core/Src/main.c **** #include "dcdc.h"
  36:Core/Src/main.c **** /* USER CODE END Includes */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PTD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PD */
  45:Core/Src/main.c **** /* USER CODE END PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  53:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  54:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  57:Core/Src/main.c **** CAN_HandleTypeDef hcan2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** IWDG_HandleTypeDef hiwdg;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  62:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  63:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  64:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  65:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_ch1;
  66:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch1;
  67:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch2;
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** UART_HandleTypeDef huart4;
  70:Core/Src/main.c **** UART_HandleTypeDef huart1;
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* Definitions for TaskLoop */
  73:Core/Src/main.c **** osThreadId_t TaskLoopHandle;
  74:Core/Src/main.c **** const osThreadAttr_t TaskLoop_attributes = {
  75:Core/Src/main.c ****     .name = "TaskLoop",
  76:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  77:Core/Src/main.c ****     .stack_size = 128 * 4};
  78:Core/Src/main.c **** /* Definitions for Task10ms */
  79:Core/Src/main.c **** osThreadId_t Task10msHandle;
  80:Core/Src/main.c **** const osThreadAttr_t Task10ms_attributes = {
  81:Core/Src/main.c ****     .name = "Task10ms",
  82:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  83:Core/Src/main.c ****     .stack_size = 128 * 4};
  84:Core/Src/main.c **** /* Definitions for Task100ms */
  85:Core/Src/main.c **** osThreadId_t Task100msHandle;
  86:Core/Src/main.c **** const osThreadAttr_t Task100ms_attributes = {
  87:Core/Src/main.c ****     .name = "Task100ms",
  88:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  89:Core/Src/main.c ****     .stack_size = 128 * 4};
  90:Core/Src/main.c **** /* Definitions for Task250ms */
  91:Core/Src/main.c **** osThreadId_t Task250msHandle;
ARM GAS  /tmp/ccSIEGwI.s 			page 3


  92:Core/Src/main.c **** const osThreadAttr_t Task250ms_attributes = {
  93:Core/Src/main.c ****     .name = "Task250ms",
  94:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  95:Core/Src/main.c ****     .stack_size = 128 * 4};
  96:Core/Src/main.c **** /* USER CODE BEGIN PV */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /* USER CODE END PV */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 101:Core/Src/main.c **** void SystemClock_Config(void);
 102:Core/Src/main.c **** static void MX_GPIO_Init(void);
 103:Core/Src/main.c **** static void MX_DMA_Init(void);
 104:Core/Src/main.c **** static void MX_CAN2_Init(void);
 105:Core/Src/main.c **** static void MX_ADC1_Init(void);
 106:Core/Src/main.c **** static void MX_CAN1_Init(void);
 107:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void);
 108:Core/Src/main.c **** static void MX_UART4_Init(void);
 109:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 110:Core/Src/main.c **** static void MX_TIM3_Init(void);
 111:Core/Src/main.c **** static void MX_TIM1_Init(void);
 112:Core/Src/main.c **** static void MX_TIM5_Init(void);
 113:Core/Src/main.c **** static void MX_TIM2_Init(void);
 114:Core/Src/main.c **** static void MX_IWDG_Init(void);
 115:Core/Src/main.c **** void StartTaskLoop(void *argument);
 116:Core/Src/main.c **** void StartTask10ms(void *argument);
 117:Core/Src/main.c **** void StartTask100ms(void *argument);
 118:Core/Src/main.c **** void StartTask250ms(void *argument);
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /* USER CODE END PFP */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 125:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /* USER CODE END 0 */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /**
 130:Core/Src/main.c ****  * @brief  The application entry point.
 131:Core/Src/main.c ****  * @retval int
 132:Core/Src/main.c ****  */
 133:Core/Src/main.c **** int main(void)
 134:Core/Src/main.c **** {
 135:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****   /* USER CODE END 1 */
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 142:Core/Src/main.c ****   HAL_Init();
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   /* USER CODE END Init */
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* Configure the system clock */
ARM GAS  /tmp/ccSIEGwI.s 			page 4


 149:Core/Src/main.c ****   SystemClock_Config();
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* USER CODE END SysInit */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /* Initialize all configured peripherals */
 156:Core/Src/main.c ****   MX_GPIO_Init();
 157:Core/Src/main.c ****   MX_DMA_Init();
 158:Core/Src/main.c ****   MX_CAN2_Init();
 159:Core/Src/main.c ****   MX_ADC1_Init();
 160:Core/Src/main.c ****   MX_CAN1_Init();
 161:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 162:Core/Src/main.c ****   MX_UART4_Init();
 163:Core/Src/main.c ****   MX_USART1_UART_Init();
 164:Core/Src/main.c ****   MX_TIM3_Init();
 165:Core/Src/main.c ****   MX_TIM1_Init();
 166:Core/Src/main.c ****   MX_TIM5_Init();
 167:Core/Src/main.c ****   MX_TIM2_Init();
 168:Core/Src/main.c ****   MX_IWDG_Init();
 169:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 170:Core/Src/main.c ****   canSettings();
 171:Core/Src/main.c ****   gaugeInit();
 172:Core/Src/main.c ****   dcdcInit();
 173:Core/Src/main.c ****   vcuInit();
 174:Core/Src/main.c ****   wpInit();
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 177:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); // water pump pw
 178:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim5);
 181:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 182:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 183:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 184:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Tach pwm start
 187:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, ADC_data, 3);
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END 2 */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* Init scheduler */
 194:Core/Src/main.c ****   osKernelInitialize();
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 197:Core/Src/main.c ****   /* add mutexes, ... */
 198:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 201:Core/Src/main.c ****   /* add semaphores, ... */
 202:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 205:Core/Src/main.c ****   /* start timers, add new ones, ... */
ARM GAS  /tmp/ccSIEGwI.s 			page 5


 206:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 209:Core/Src/main.c ****   /* add queues, ... */
 210:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Create the thread(s) */
 213:Core/Src/main.c ****   /* creation of TaskLoop */
 214:Core/Src/main.c ****   TaskLoopHandle = osThreadNew(StartTaskLoop, NULL, &TaskLoop_attributes);
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /* creation of Task10ms */
 217:Core/Src/main.c ****   Task10msHandle = osThreadNew(StartTask10ms, NULL, &Task10ms_attributes);
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* creation of Task100ms */
 220:Core/Src/main.c ****   Task100msHandle = osThreadNew(StartTask100ms, NULL, &Task100ms_attributes);
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /* creation of Task250ms */
 223:Core/Src/main.c ****   Task250msHandle = osThreadNew(StartTask250ms, NULL, &Task250ms_attributes);
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 226:Core/Src/main.c ****   /* add threads, ... */
 227:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 230:Core/Src/main.c ****   /* add events, ... */
 231:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* Start scheduler */
 234:Core/Src/main.c ****   osKernelStart();
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 237:Core/Src/main.c ****   /* Infinite loop */
 238:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 239:Core/Src/main.c ****   while (1)
 240:Core/Src/main.c ****   {
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****     /* USER CODE END WHILE */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 245:Core/Src/main.c ****   }
 246:Core/Src/main.c ****   /* USER CODE END 3 */
 247:Core/Src/main.c **** }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** /**
 250:Core/Src/main.c ****  * @brief System Clock Configuration
 251:Core/Src/main.c ****  * @retval None
 252:Core/Src/main.c ****  */
 253:Core/Src/main.c **** void SystemClock_Config(void)
 254:Core/Src/main.c **** {
 255:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 256:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 257:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 260:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 261:Core/Src/main.c ****    */
 262:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
ARM GAS  /tmp/ccSIEGwI.s 			page 6


 263:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 265:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 266:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 267:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 272:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 277:Core/Src/main.c ****    */
 278:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 279:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 280:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 282:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 285:Core/Src/main.c ****   {
 286:Core/Src/main.c ****     Error_Handler();
 287:Core/Src/main.c ****   }
 288:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 289:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 290:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****     Error_Handler();
 293:Core/Src/main.c ****   }
 294:Core/Src/main.c ****   /** Configure the Systick interrupt time
 295:Core/Src/main.c ****    */
 296:Core/Src/main.c ****   __HAL_RCC_PLLI2S_ENABLE();
 297:Core/Src/main.c **** }
 298:Core/Src/main.c **** 
 299:Core/Src/main.c **** /**
 300:Core/Src/main.c ****  * @brief ADC1 Initialization Function
 301:Core/Src/main.c ****  * @param None
 302:Core/Src/main.c ****  * @retval None
 303:Core/Src/main.c ****  */
 304:Core/Src/main.c **** static void MX_ADC1_Init(void)
 305:Core/Src/main.c **** {
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 316:Core/Src/main.c ****   /** Common config
 317:Core/Src/main.c ****    */
 318:Core/Src/main.c ****   hadc1.Instance = ADC1;
 319:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
ARM GAS  /tmp/ccSIEGwI.s 			page 7


 320:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 321:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 322:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 323:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 324:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 325:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 326:Core/Src/main.c ****   {
 327:Core/Src/main.c ****     Error_Handler();
 328:Core/Src/main.c ****   }
 329:Core/Src/main.c ****   /** Configure Regular Channel
 330:Core/Src/main.c ****    */
 331:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_11;
 332:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 333:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 334:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 335:Core/Src/main.c ****   {
 336:Core/Src/main.c ****     Error_Handler();
 337:Core/Src/main.c ****   }
 338:Core/Src/main.c ****   /** Configure Regular Channel
 339:Core/Src/main.c ****    */
 340:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 341:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 342:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 343:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 344:Core/Src/main.c ****   {
 345:Core/Src/main.c ****     Error_Handler();
 346:Core/Src/main.c ****   }
 347:Core/Src/main.c ****   /** Configure Regular Channel
 348:Core/Src/main.c ****    */
 349:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 350:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 351:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 358:Core/Src/main.c **** }
 359:Core/Src/main.c **** 
 360:Core/Src/main.c **** /**
 361:Core/Src/main.c ****  * @brief CAN1 Initialization Function
 362:Core/Src/main.c ****  * @param None
 363:Core/Src/main.c ****  * @retval None
 364:Core/Src/main.c ****  */
 365:Core/Src/main.c **** static void MX_CAN1_Init(void)
 366:Core/Src/main.c **** {
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 373:Core/Src/main.c **** 
 374:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 375:Core/Src/main.c ****   hcan1.Instance = CAN1;
 376:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
ARM GAS  /tmp/ccSIEGwI.s 			page 8


 377:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 378:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 379:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 380:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 381:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 382:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 383:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 384:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 385:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 386:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 387:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 388:Core/Src/main.c ****   {
 389:Core/Src/main.c ****     Error_Handler();
 390:Core/Src/main.c ****   }
 391:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 392:Core/Src/main.c **** 
 393:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 394:Core/Src/main.c **** }
 395:Core/Src/main.c **** 
 396:Core/Src/main.c **** /**
 397:Core/Src/main.c ****  * @brief CAN2 Initialization Function
 398:Core/Src/main.c ****  * @param None
 399:Core/Src/main.c ****  * @retval None
 400:Core/Src/main.c ****  */
 401:Core/Src/main.c **** static void MX_CAN2_Init(void)
 402:Core/Src/main.c **** {
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 0 */
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /* USER CODE END CAN2_Init 0 */
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 1 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* USER CODE END CAN2_Init 1 */
 411:Core/Src/main.c ****   hcan2.Instance = CAN2;
 412:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 413:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 414:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 415:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 416:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 417:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 418:Core/Src/main.c ****   hcan2.Init.AutoBusOff = ENABLE;
 419:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 420:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 421:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 422:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 423:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 424:Core/Src/main.c ****   {
 425:Core/Src/main.c ****     Error_Handler();
 426:Core/Src/main.c ****   }
 427:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 2 */
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /* USER CODE END CAN2_Init 2 */
 430:Core/Src/main.c **** }
 431:Core/Src/main.c **** 
 432:Core/Src/main.c **** /**
 433:Core/Src/main.c ****  * @brief I2C1 Initialization Function
ARM GAS  /tmp/ccSIEGwI.s 			page 9


 434:Core/Src/main.c ****  * @param None
 435:Core/Src/main.c ****  * @retval None
 436:Core/Src/main.c ****  */
 437:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void)
 438:Core/Src/main.c **** {
 439:Core/Src/main.c **** 
 440:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 443:Core/Src/main.c **** 
 444:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 445:Core/Src/main.c **** 
 446:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 447:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 450:Core/Src/main.c **** }
 451:Core/Src/main.c **** 
 452:Core/Src/main.c **** /**
 453:Core/Src/main.c ****  * @brief IWDG Initialization Function
 454:Core/Src/main.c ****  * @param None
 455:Core/Src/main.c ****  * @retval None
 456:Core/Src/main.c ****  */
 457:Core/Src/main.c **** static void MX_IWDG_Init(void)
 458:Core/Src/main.c **** {
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 0 */
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****   /* USER CODE END IWDG_Init 0 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 1 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE END IWDG_Init 1 */
 467:Core/Src/main.c ****   hiwdg.Instance = IWDG;
 468:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 469:Core/Src/main.c ****   hiwdg.Init.Reload = 1000; //439
 470:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 471:Core/Src/main.c ****   {
 472:Core/Src/main.c ****     Error_Handler();
 473:Core/Src/main.c ****   }
 474:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 2 */
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /* USER CODE END IWDG_Init 2 */
 477:Core/Src/main.c **** }
 478:Core/Src/main.c **** 
 479:Core/Src/main.c **** /**
 480:Core/Src/main.c ****  * @brief TIM1 Initialization Function
 481:Core/Src/main.c ****  * @param None
 482:Core/Src/main.c ****  * @retval None
 483:Core/Src/main.c ****  */
 484:Core/Src/main.c **** static void MX_TIM1_Init(void)
 485:Core/Src/main.c **** {
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 488:Core/Src/main.c **** 
 489:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 490:Core/Src/main.c **** 
ARM GAS  /tmp/ccSIEGwI.s 			page 10


 491:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 492:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 493:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 494:Core/Src/main.c **** 
 495:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 498:Core/Src/main.c ****   htim1.Instance = TIM1;
 499:Core/Src/main.c ****   htim1.Init.Prescaler = 240;
 500:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 501:Core/Src/main.c ****   htim1.Init.Period = 65535;
 502:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 503:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 504:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 505:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 506:Core/Src/main.c ****   {
 507:Core/Src/main.c ****     Error_Handler();
 508:Core/Src/main.c ****   }
 509:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 510:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 511:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 512:Core/Src/main.c ****   {
 513:Core/Src/main.c ****     Error_Handler();
 514:Core/Src/main.c ****   }
 515:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 516:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 517:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 518:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 519:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 520:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 521:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 522:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 523:Core/Src/main.c ****   {
 524:Core/Src/main.c ****     Error_Handler();
 525:Core/Src/main.c ****   }
 526:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 527:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 528:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 529:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 530:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 531:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 532:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 533:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 534:Core/Src/main.c ****   {
 535:Core/Src/main.c ****     Error_Handler();
 536:Core/Src/main.c ****   }
 537:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 540:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 541:Core/Src/main.c **** }
 542:Core/Src/main.c **** 
 543:Core/Src/main.c **** /**
 544:Core/Src/main.c ****  * @brief TIM2 Initialization Function
 545:Core/Src/main.c ****  * @param None
 546:Core/Src/main.c ****  * @retval None
 547:Core/Src/main.c ****  */
ARM GAS  /tmp/ccSIEGwI.s 			page 11


 548:Core/Src/main.c **** static void MX_TIM2_Init(void)
 549:Core/Src/main.c **** {
 550:Core/Src/main.c **** 
 551:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 552:Core/Src/main.c **** 
 553:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 554:Core/Src/main.c **** 
 555:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 556:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 557:Core/Src/main.c **** 
 558:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 559:Core/Src/main.c ****   // Water pump pwm emulation
 560:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 561:Core/Src/main.c ****   htim2.Instance = TIM2;
 562:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 563:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 564:Core/Src/main.c ****   htim2.Init.Period = 600;
 565:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 566:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 567:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 568:Core/Src/main.c ****   {
 569:Core/Src/main.c ****     Error_Handler();
 570:Core/Src/main.c ****   }
 571:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 572:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 573:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 574:Core/Src/main.c ****   {
 575:Core/Src/main.c ****     Error_Handler();
 576:Core/Src/main.c ****   }
 577:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 578:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 579:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 580:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 581:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 582:Core/Src/main.c ****   {
 583:Core/Src/main.c ****     Error_Handler();
 584:Core/Src/main.c ****   }
 585:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 586:Core/Src/main.c **** 
 587:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 588:Core/Src/main.c **** }
 589:Core/Src/main.c **** 
 590:Core/Src/main.c **** /**
 591:Core/Src/main.c ****  * @brief TIM3 Initialization Function
 592:Core/Src/main.c ****  * @param None
 593:Core/Src/main.c ****  * @retval None
 594:Core/Src/main.c ****  */
 595:Core/Src/main.c **** static void MX_TIM3_Init(void)
 596:Core/Src/main.c **** {
 597:Core/Src/main.c **** 
 598:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 599:Core/Src/main.c **** 
 600:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 601:Core/Src/main.c **** 
 602:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 603:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 604:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
ARM GAS  /tmp/ccSIEGwI.s 			page 12


 605:Core/Src/main.c **** 
 606:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 607:Core/Src/main.c **** 
 608:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 609:Core/Src/main.c ****   htim3.Instance = TIM3;
 610:Core/Src/main.c ****   htim3.Init.Prescaler = 120;
 611:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 612:Core/Src/main.c ****   htim3.Init.Period = 600;
 613:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 614:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 615:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 616:Core/Src/main.c ****   {
 617:Core/Src/main.c ****     Error_Handler();
 618:Core/Src/main.c ****   }
 619:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 620:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 621:Core/Src/main.c ****   {
 622:Core/Src/main.c ****     Error_Handler();
 623:Core/Src/main.c ****   }
 624:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 625:Core/Src/main.c ****   {
 626:Core/Src/main.c ****     Error_Handler();
 627:Core/Src/main.c ****   }
 628:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 629:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 630:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 631:Core/Src/main.c ****   {
 632:Core/Src/main.c ****     Error_Handler();
 633:Core/Src/main.c ****   }
 634:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 635:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 636:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 637:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 638:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 639:Core/Src/main.c ****   {
 640:Core/Src/main.c ****     Error_Handler();
 641:Core/Src/main.c ****   }
 642:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 643:Core/Src/main.c **** 
 644:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 645:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 646:Core/Src/main.c **** }
 647:Core/Src/main.c **** 
 648:Core/Src/main.c **** /**
 649:Core/Src/main.c ****  * @brief TIM5 Initialization Function
 650:Core/Src/main.c ****  * @param None
 651:Core/Src/main.c ****  * @retval None
 652:Core/Src/main.c ****  */
 653:Core/Src/main.c **** static void MX_TIM5_Init(void)
 654:Core/Src/main.c **** {
 655:Core/Src/main.c **** 
 656:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
 657:Core/Src/main.c **** 
 658:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
 659:Core/Src/main.c **** 
 660:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 661:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
ARM GAS  /tmp/ccSIEGwI.s 			page 13


 662:Core/Src/main.c **** 
 663:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
 664:Core/Src/main.c **** 
 665:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
 666:Core/Src/main.c ****   htim5.Instance = TIM5;
 667:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 668:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 669:Core/Src/main.c ****   htim5.Init.Period = 10;
 670:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 671:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 672:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 673:Core/Src/main.c ****   {
 674:Core/Src/main.c ****     Error_Handler();
 675:Core/Src/main.c ****   }
 676:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 677:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 678:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 679:Core/Src/main.c ****   {
 680:Core/Src/main.c ****     Error_Handler();
 681:Core/Src/main.c ****   }
 682:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 683:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 684:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 685:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 686:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 687:Core/Src/main.c ****   {
 688:Core/Src/main.c ****     Error_Handler();
 689:Core/Src/main.c ****   }
 690:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 691:Core/Src/main.c ****   {
 692:Core/Src/main.c ****     Error_Handler();
 693:Core/Src/main.c ****   }
 694:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
 695:Core/Src/main.c **** 
 696:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
 697:Core/Src/main.c **** }
 698:Core/Src/main.c **** 
 699:Core/Src/main.c **** /**
 700:Core/Src/main.c ****  * @brief UART4 Initialization Function
 701:Core/Src/main.c ****  * @param None
 702:Core/Src/main.c ****  * @retval None
 703:Core/Src/main.c ****  */
 704:Core/Src/main.c **** static void MX_UART4_Init(void)
 705:Core/Src/main.c **** {
 706:Core/Src/main.c **** 
 707:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 0 */
 708:Core/Src/main.c **** 
 709:Core/Src/main.c ****   /* USER CODE END UART4_Init 0 */
 710:Core/Src/main.c **** 
 711:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 1 */
 712:Core/Src/main.c **** 
 713:Core/Src/main.c ****   /* USER CODE END UART4_Init 1 */
 714:Core/Src/main.c ****   huart4.Instance = UART4;
 715:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 716:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 717:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 718:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/ccSIEGwI.s 			page 14


 719:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 720:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 721:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 722:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 723:Core/Src/main.c ****   {
 724:Core/Src/main.c ****     Error_Handler();
 725:Core/Src/main.c ****   }
 726:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 2 */
 727:Core/Src/main.c **** 
 728:Core/Src/main.c ****   /* USER CODE END UART4_Init 2 */
 729:Core/Src/main.c **** }
 730:Core/Src/main.c **** 
 731:Core/Src/main.c **** /**
 732:Core/Src/main.c ****  * @brief USART1 Initialization Function
 733:Core/Src/main.c ****  * @param None
 734:Core/Src/main.c ****  * @retval None
 735:Core/Src/main.c ****  */
 736:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 737:Core/Src/main.c **** {
 738:Core/Src/main.c **** 
 739:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 740:Core/Src/main.c **** 
 741:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 742:Core/Src/main.c **** 
 743:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 744:Core/Src/main.c **** 
 745:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 746:Core/Src/main.c ****   huart1.Instance = USART1;
 747:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 748:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 749:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 750:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 751:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 752:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 753:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 754:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 755:Core/Src/main.c ****   {
 756:Core/Src/main.c ****     Error_Handler();
 757:Core/Src/main.c ****   }
 758:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 759:Core/Src/main.c **** 
 760:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 761:Core/Src/main.c **** }
 762:Core/Src/main.c **** 
 763:Core/Src/main.c **** /**
 764:Core/Src/main.c ****  * Enable DMA controller clock
 765:Core/Src/main.c ****  */
 766:Core/Src/main.c **** static void MX_DMA_Init(void)
 767:Core/Src/main.c **** {
 768:Core/Src/main.c **** 
 769:Core/Src/main.c ****   /* DMA controller clock enable */
 770:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 771:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 772:Core/Src/main.c **** 
 773:Core/Src/main.c ****   /* DMA interrupt init */
 774:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 775:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
ARM GAS  /tmp/ccSIEGwI.s 			page 15


 776:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 777:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 778:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 779:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 780:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 781:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 782:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 783:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 784:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 785:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 786:Core/Src/main.c **** }
 787:Core/Src/main.c **** 
 788:Core/Src/main.c **** /**
 789:Core/Src/main.c ****  * @brief GPIO Initialization Function
 790:Core/Src/main.c ****  * @param None
 791:Core/Src/main.c ****  * @retval None
 792:Core/Src/main.c ****  */
 793:Core/Src/main.c **** static void MX_GPIO_Init(void)
 794:Core/Src/main.c **** {
  25              		.loc 1 794 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              		.cfi_def_cfa_offset 24
  31              		.cfi_offset 4, -24
  32              		.cfi_offset 5, -20
  33              		.cfi_offset 6, -16
  34              		.cfi_offset 7, -12
  35              		.cfi_offset 8, -8
  36              		.cfi_offset 14, -4
  37 0004 88B0     		sub	sp, sp, #32
  38              		.cfi_def_cfa_offset 56
 795:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 795 0
  40 0006 0024     		movs	r4, #0
  41 0008 0494     		str	r4, [sp, #16]
  42 000a 0594     		str	r4, [sp, #20]
  43 000c 0694     		str	r4, [sp, #24]
  44 000e 0794     		str	r4, [sp, #28]
  45              	.LBB4:
 796:Core/Src/main.c **** 
 797:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 798:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  46              		.loc 1 798 0
  47 0010 304B     		ldr	r3, .L3
  48 0012 9A69     		ldr	r2, [r3, #24]
  49 0014 42F01002 		orr	r2, r2, #16
  50 0018 9A61     		str	r2, [r3, #24]
  51 001a 9A69     		ldr	r2, [r3, #24]
  52 001c 02F01002 		and	r2, r2, #16
  53 0020 0092     		str	r2, [sp]
  54 0022 009A     		ldr	r2, [sp]
  55              	.LBE4:
  56              	.LBB5:
 799:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  57              		.loc 1 799 0
ARM GAS  /tmp/ccSIEGwI.s 			page 16


  58 0024 9A69     		ldr	r2, [r3, #24]
  59 0026 42F02002 		orr	r2, r2, #32
  60 002a 9A61     		str	r2, [r3, #24]
  61 002c 9A69     		ldr	r2, [r3, #24]
  62 002e 02F02002 		and	r2, r2, #32
  63 0032 0192     		str	r2, [sp, #4]
  64 0034 019A     		ldr	r2, [sp, #4]
  65              	.LBE5:
  66              	.LBB6:
 800:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  67              		.loc 1 800 0
  68 0036 9A69     		ldr	r2, [r3, #24]
  69 0038 42F00402 		orr	r2, r2, #4
  70 003c 9A61     		str	r2, [r3, #24]
  71 003e 9A69     		ldr	r2, [r3, #24]
  72 0040 02F00402 		and	r2, r2, #4
  73 0044 0292     		str	r2, [sp, #8]
  74 0046 029A     		ldr	r2, [sp, #8]
  75              	.LBE6:
  76              	.LBB7:
 801:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  77              		.loc 1 801 0
  78 0048 9A69     		ldr	r2, [r3, #24]
  79 004a 42F00802 		orr	r2, r2, #8
  80 004e 9A61     		str	r2, [r3, #24]
  81 0050 9B69     		ldr	r3, [r3, #24]
  82 0052 03F00803 		and	r3, r3, #8
  83 0056 0393     		str	r3, [sp, #12]
  84 0058 039B     		ldr	r3, [sp, #12]
  85              	.LBE7:
 802:Core/Src/main.c **** 
 803:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 804:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, LED_Pin | WP_Pin | TEMP_Pin | SOC_Pin, GPIO_PIN_RESET);
  86              		.loc 1 804 0
  87 005a 1F4E     		ldr	r6, .L3+4
  88 005c 2246     		mov	r2, r4
  89 005e 4FF40B51 		mov	r1, #8896
  90 0062 3046     		mov	r0, r6
  91 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  92              	.LVL0:
 805:Core/Src/main.c **** 
 806:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 807:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, PS_INIT_Pin | HEAT_OUT_Pin, GPIO_PIN_RESET);
  93              		.loc 1 807 0
  94 0068 1C4D     		ldr	r5, .L3+8
  95 006a 2246     		mov	r2, r4
  96 006c 4FF44041 		mov	r1, #49152
  97 0070 2846     		mov	r0, r5
  98 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
  99              	.LVL1:
 808:Core/Src/main.c **** 
 809:Core/Src/main.c ****   /*Configure GPIO pins : LED_Pin WP_Pin */
 810:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin | WP_Pin;
 100              		.loc 1 810 0
 101 0076 4FF40153 		mov	r3, #8256
 102 007a 0493     		str	r3, [sp, #16]
 811:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  /tmp/ccSIEGwI.s 			page 17


 103              		.loc 1 811 0
 104 007c 0127     		movs	r7, #1
 105 007e 0597     		str	r7, [sp, #20]
 812:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 106              		.loc 1 812 0
 107 0080 0694     		str	r4, [sp, #24]
 813:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 108              		.loc 1 813 0
 109 0082 4FF00208 		mov	r8, #2
 110 0086 CDF81C80 		str	r8, [sp, #28]
 814:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 111              		.loc 1 814 0
 112 008a 04A9     		add	r1, sp, #16
 113 008c 3046     		mov	r0, r6
 114 008e FFF7FEFF 		bl	HAL_GPIO_Init
 115              	.LVL2:
 815:Core/Src/main.c **** 
 816:Core/Src/main.c ****   /*Configure GPIO pins : PS_INIT_Pin HEAT_OUT_Pin */
 817:Core/Src/main.c ****   GPIO_InitStruct.Pin = PS_INIT_Pin | HEAT_OUT_Pin;
 116              		.loc 1 817 0
 117 0092 4FF44043 		mov	r3, #49152
 118 0096 0493     		str	r3, [sp, #16]
 818:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 119              		.loc 1 818 0
 120 0098 0597     		str	r7, [sp, #20]
 819:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 121              		.loc 1 819 0
 122 009a 0694     		str	r4, [sp, #24]
 820:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 123              		.loc 1 820 0
 124 009c CDF81C80 		str	r8, [sp, #28]
 821:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 125              		.loc 1 821 0
 126 00a0 04A9     		add	r1, sp, #16
 127 00a2 2846     		mov	r0, r5
 128 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL3:
 822:Core/Src/main.c **** 
 823:Core/Src/main.c ****   /*Configure GPIO pins : TEMP_Pin SOC_Pin */
 824:Core/Src/main.c ****   GPIO_InitStruct.Pin = TEMP_Pin | SOC_Pin;
 130              		.loc 1 824 0
 131 00a8 4FF42073 		mov	r3, #640
 132 00ac 0493     		str	r3, [sp, #16]
 825:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 133              		.loc 1 825 0
 134 00ae 0597     		str	r7, [sp, #20]
 826:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 135              		.loc 1 826 0
 136 00b0 0694     		str	r4, [sp, #24]
 827:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 137              		.loc 1 827 0
 138 00b2 0323     		movs	r3, #3
 139 00b4 0793     		str	r3, [sp, #28]
 828:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 140              		.loc 1 828 0
 141 00b6 04A9     		add	r1, sp, #16
 142 00b8 3046     		mov	r0, r6
ARM GAS  /tmp/ccSIEGwI.s 			page 18


 143 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 144              	.LVL4:
 829:Core/Src/main.c **** 
 830:Core/Src/main.c ****   /*Configure GPIO pins : SW12_Pin HEAT_REQ_Pin */
 831:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW12_Pin | HEAT_REQ_Pin;
 145              		.loc 1 831 0
 146 00be 3023     		movs	r3, #48
 147 00c0 0493     		str	r3, [sp, #16]
 832:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 148              		.loc 1 832 0
 149 00c2 0594     		str	r4, [sp, #20]
 833:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 150              		.loc 1 833 0
 151 00c4 0694     		str	r4, [sp, #24]
 834:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 152              		.loc 1 834 0
 153 00c6 04A9     		add	r1, sp, #16
 154 00c8 2846     		mov	r0, r5
 155 00ca FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL5:
 835:Core/Src/main.c **** }
 157              		.loc 1 835 0
 158 00ce 08B0     		add	sp, sp, #32
 159              		.cfi_def_cfa_offset 24
 160              		@ sp needed
 161 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 162              	.L4:
 163              		.align	2
 164              	.L3:
 165 00d4 00100240 		.word	1073876992
 166 00d8 00100140 		.word	1073811456
 167 00dc 000C0140 		.word	1073810432
 168              		.cfi_endproc
 169              	.LFE86:
 171              		.section	.text.MX_DMA_Init,"ax",%progbits
 172              		.align	1
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu softvfp
 178              	MX_DMA_Init:
 179              	.LFB85:
 767:Core/Src/main.c **** 
 180              		.loc 1 767 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 8
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184 0000 00B5     		push	{lr}
 185              		.cfi_def_cfa_offset 4
 186              		.cfi_offset 14, -4
 187 0002 83B0     		sub	sp, sp, #12
 188              		.cfi_def_cfa_offset 16
 189              	.LBB8:
 770:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 190              		.loc 1 770 0
 191 0004 1A4B     		ldr	r3, .L7
 192 0006 5A69     		ldr	r2, [r3, #20]
ARM GAS  /tmp/ccSIEGwI.s 			page 19


 193 0008 42F00202 		orr	r2, r2, #2
 194 000c 5A61     		str	r2, [r3, #20]
 195 000e 5A69     		ldr	r2, [r3, #20]
 196 0010 02F00202 		and	r2, r2, #2
 197 0014 0092     		str	r2, [sp]
 198 0016 009A     		ldr	r2, [sp]
 199              	.LBE8:
 200              	.LBB9:
 771:Core/Src/main.c **** 
 201              		.loc 1 771 0
 202 0018 5A69     		ldr	r2, [r3, #20]
 203 001a 42F00102 		orr	r2, r2, #1
 204 001e 5A61     		str	r2, [r3, #20]
 205 0020 5B69     		ldr	r3, [r3, #20]
 206 0022 03F00103 		and	r3, r3, #1
 207 0026 0193     		str	r3, [sp, #4]
 208 0028 019B     		ldr	r3, [sp, #4]
 209              	.LBE9:
 775:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 210              		.loc 1 775 0
 211 002a 0022     		movs	r2, #0
 212 002c 0521     		movs	r1, #5
 213 002e 0B20     		movs	r0, #11
 214 0030 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 215              	.LVL6:
 776:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 216              		.loc 1 776 0
 217 0034 0B20     		movs	r0, #11
 218 0036 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 219              	.LVL7:
 778:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 220              		.loc 1 778 0
 221 003a 0022     		movs	r2, #0
 222 003c 0521     		movs	r1, #5
 223 003e 0F20     		movs	r0, #15
 224 0040 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 225              	.LVL8:
 779:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 226              		.loc 1 779 0
 227 0044 0F20     		movs	r0, #15
 228 0046 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 229              	.LVL9:
 781:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 230              		.loc 1 781 0
 231 004a 0022     		movs	r2, #0
 232 004c 0521     		movs	r1, #5
 233 004e 3B20     		movs	r0, #59
 234 0050 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 235              	.LVL10:
 782:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 236              		.loc 1 782 0
 237 0054 3B20     		movs	r0, #59
 238 0056 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 239              	.LVL11:
 784:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 240              		.loc 1 784 0
 241 005a 0022     		movs	r2, #0
ARM GAS  /tmp/ccSIEGwI.s 			page 20


 242 005c 0521     		movs	r1, #5
 243 005e 3C20     		movs	r0, #60
 244 0060 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 245              	.LVL12:
 785:Core/Src/main.c **** }
 246              		.loc 1 785 0
 247 0064 3C20     		movs	r0, #60
 248 0066 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 249              	.LVL13:
 786:Core/Src/main.c **** 
 250              		.loc 1 786 0
 251 006a 03B0     		add	sp, sp, #12
 252              		.cfi_def_cfa_offset 4
 253              		@ sp needed
 254 006c 5DF804FB 		ldr	pc, [sp], #4
 255              	.L8:
 256              		.align	2
 257              	.L7:
 258 0070 00100240 		.word	1073876992
 259              		.cfi_endproc
 260              	.LFE85:
 262              		.section	.text.StartTaskLoop,"ax",%progbits
 263              		.align	1
 264              		.global	StartTaskLoop
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
 268              		.fpu softvfp
 270              	StartTaskLoop:
 271              	.LFB87:
 836:Core/Src/main.c **** 
 837:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 838:Core/Src/main.c **** // Callback: timer has rolled over
 839:Core/Src/main.c **** 
 840:Core/Src/main.c **** /* USER CODE END 4 */
 841:Core/Src/main.c **** 
 842:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTaskLoop */
 843:Core/Src/main.c **** /**
 844:Core/Src/main.c ****  * @brief  Function implementing the TaskLoop thread.
 845:Core/Src/main.c ****  * @param  argument: Not used
 846:Core/Src/main.c ****  * @retval None
 847:Core/Src/main.c ****  */
 848:Core/Src/main.c **** /* USER CODE END Header_StartTaskLoop */
 849:Core/Src/main.c **** void StartTaskLoop(void *argument)
 850:Core/Src/main.c **** {
 272              		.loc 1 850 0
 273              		.cfi_startproc
 274              		@ Volatile: function does not return.
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              	.LVL14:
 278 0000 08B5     		push	{r3, lr}
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 3, -8
 281              		.cfi_offset 14, -4
 282              	.LVL15:
 283              	.L10:
ARM GAS  /tmp/ccSIEGwI.s 			page 21


 851:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 852:Core/Src/main.c ****   /* Infinite loop */
 853:Core/Src/main.c ****   for (;;)
 854:Core/Src/main.c ****   {
 855:Core/Src/main.c ****     wpHandler();
 284              		.loc 1 855 0 discriminator 1
 285 0002 FFF7FEFF 		bl	wpHandler
 286              	.LVL16:
 856:Core/Src/main.c ****     vcuState();
 287              		.loc 1 856 0 discriminator 1
 288 0006 FFF7FEFF 		bl	vcuState
 289              	.LVL17:
 857:Core/Src/main.c ****     ioHandler();
 290              		.loc 1 857 0 discriminator 1
 291 000a FFF7FEFF 		bl	ioHandler
 292              	.LVL18:
 858:Core/Src/main.c **** 
 859:Core/Src/main.c ****     osDelay(1);
 293              		.loc 1 859 0 discriminator 1
 294 000e 0120     		movs	r0, #1
 295 0010 FFF7FEFF 		bl	osDelay
 296              	.LVL19:
 297 0014 F5E7     		b	.L10
 298              		.cfi_endproc
 299              	.LFE87:
 301              		.section	.text.StartTask10ms,"ax",%progbits
 302              		.align	1
 303              		.global	StartTask10ms
 304              		.syntax unified
 305              		.thumb
 306              		.thumb_func
 307              		.fpu softvfp
 309              	StartTask10ms:
 310              	.LFB88:
 860:Core/Src/main.c ****   }
 861:Core/Src/main.c ****   /* USER CODE END 5 */
 862:Core/Src/main.c **** }
 863:Core/Src/main.c **** 
 864:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask10ms */
 865:Core/Src/main.c **** /**
 866:Core/Src/main.c ****  * @brief Function implementing the Task10ms thread.
 867:Core/Src/main.c ****  * @param argument: Not used
 868:Core/Src/main.c ****  * @retval None
 869:Core/Src/main.c ****  */
 870:Core/Src/main.c **** /* USER CODE END Header_StartTask10ms */
 871:Core/Src/main.c **** void StartTask10ms(void *argument)
 872:Core/Src/main.c **** {
 311              		.loc 1 872 0
 312              		.cfi_startproc
 313              		@ Volatile: function does not return.
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              	.LVL20:
 317 0000 08B5     		push	{r3, lr}
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 3, -8
 320              		.cfi_offset 14, -4
ARM GAS  /tmp/ccSIEGwI.s 			page 22


 321              	.LVL21:
 322              	.L13:
 873:Core/Src/main.c ****   /* USER CODE BEGIN StartTask10ms */
 874:Core/Src/main.c ****   // TickType_t lastWakeTime;
 875:Core/Src/main.c ****   // const TickType_t frequency = 20;
 876:Core/Src/main.c ****   // lastWakeTime = xTaskGetTickCount();
 877:Core/Src/main.c ****   /* Infinite loop */
 878:Core/Src/main.c ****   for (;;)
 879:Core/Src/main.c ****   {
 880:Core/Src/main.c ****     // vTaskDelayUntil(&lastWakeTime, frequency);
 881:Core/Src/main.c ****     throttleHandler();
 323              		.loc 1 881 0 discriminator 1
 324 0002 FFF7FEFF 		bl	throttleHandler
 325              	.LVL22:
 882:Core/Src/main.c ****     canIOsend();
 326              		.loc 1 882 0 discriminator 1
 327 0006 FFF7FEFF 		bl	canIOsend
 328              	.LVL23:
 883:Core/Src/main.c ****     regenHandler();
 329              		.loc 1 883 0 discriminator 1
 330 000a FFF7FEFF 		bl	regenHandler
 331              	.LVL24:
 884:Core/Src/main.c ****     brakeHandler();
 332              		.loc 1 884 0 discriminator 1
 333 000e FFF7FEFF 		bl	brakeHandler
 334              	.LVL25:
 885:Core/Src/main.c ****     dcdcHandler(vcu.state);
 335              		.loc 1 885 0 discriminator 1
 336 0012 044B     		ldr	r3, .L15
 337 0014 1879     		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 338 0016 FFF7FEFF 		bl	dcdcHandler
 339              	.LVL26:
 886:Core/Src/main.c **** 
 887:Core/Src/main.c ****     osDelay(20);
 340              		.loc 1 887 0 discriminator 1
 341 001a 1420     		movs	r0, #20
 342 001c FFF7FEFF 		bl	osDelay
 343              	.LVL27:
 344 0020 EFE7     		b	.L13
 345              	.L16:
 346 0022 00BF     		.align	2
 347              	.L15:
 348 0024 00000000 		.word	vcu
 349              		.cfi_endproc
 350              	.LFE88:
 352              		.section	.text.StartTask100ms,"ax",%progbits
 353              		.align	1
 354              		.global	StartTask100ms
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu softvfp
 360              	StartTask100ms:
 361              	.LFB89:
 888:Core/Src/main.c ****   }
 889:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 890:Core/Src/main.c ****   osThreadTerminate(NULL);
ARM GAS  /tmp/ccSIEGwI.s 			page 23


 891:Core/Src/main.c ****   /* USER CODE END StartTask10ms */
 892:Core/Src/main.c **** }
 893:Core/Src/main.c **** 
 894:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask100ms */
 895:Core/Src/main.c **** /**
 896:Core/Src/main.c ****  * @brief Function implementing the Task100ms thread.
 897:Core/Src/main.c ****  * @param argument: Not used
 898:Core/Src/main.c ****  * @retval None
 899:Core/Src/main.c ****  */
 900:Core/Src/main.c **** /* USER CODE END Header_StartTask100ms */
 901:Core/Src/main.c **** void StartTask100ms(void *argument)
 902:Core/Src/main.c **** {
 362              		.loc 1 902 0
 363              		.cfi_startproc
 364              		@ Volatile: function does not return.
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367              	.LVL28:
 368 0000 08B5     		push	{r3, lr}
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 3, -8
 371              		.cfi_offset 14, -4
 372              	.LVL29:
 373              	.L18:
 903:Core/Src/main.c ****   /* USER CODE BEGIN StartTask100ms */
 904:Core/Src/main.c ****   // TickType_t lastWakeTime;
 905:Core/Src/main.c ****   // const TickType_t frequency = 100;
 906:Core/Src/main.c ****   // lastWakeTime = xTaskGetTickCount();
 907:Core/Src/main.c **** 
 908:Core/Src/main.c ****   /* Infinite loop */
 909:Core/Src/main.c **** 
 910:Core/Src/main.c ****   for (;;)
 911:Core/Src/main.c ****   {
 912:Core/Src/main.c ****     // vTaskDelayUntil(&lastWakeTime, frequency);
 913:Core/Src/main.c **** 
 914:Core/Src/main.c ****     updateSpeed(ldu.rpm);
 374              		.loc 1 914 0 discriminator 1
 375 0002 084C     		ldr	r4, .L20
 376 0004 2088     		ldrh	r0, [r4]
 377 0006 80B2     		uxth	r0, r0
 378 0008 FFF7FEFF 		bl	updateSpeed
 379              	.LVL30:
 915:Core/Src/main.c ****     updateTach(ldu.amps);
 380              		.loc 1 915 0 discriminator 1
 381 000c 6089     		ldrh	r0, [r4, #10]
 382 000e 80B2     		uxth	r0, r0
 383 0010 FFF7FEFF 		bl	updateTach
 384              	.LVL31:
 916:Core/Src/main.c ****     HAL_IWDG_Refresh(&hiwdg);
 385              		.loc 1 916 0 discriminator 1
 386 0014 0448     		ldr	r0, .L20+4
 387 0016 FFF7FEFF 		bl	HAL_IWDG_Refresh
 388              	.LVL32:
 917:Core/Src/main.c ****     // testVal();
 918:Core/Src/main.c **** 
 919:Core/Src/main.c ****     osDelay(100);
 389              		.loc 1 919 0 discriminator 1
ARM GAS  /tmp/ccSIEGwI.s 			page 24


 390 001a 6420     		movs	r0, #100
 391 001c FFF7FEFF 		bl	osDelay
 392              	.LVL33:
 393 0020 EFE7     		b	.L18
 394              	.L21:
 395 0022 00BF     		.align	2
 396              	.L20:
 397 0024 00000000 		.word	ldu
 398 0028 00000000 		.word	hiwdg
 399              		.cfi_endproc
 400              	.LFE89:
 402              		.section	.text.StartTask250ms,"ax",%progbits
 403              		.align	1
 404              		.global	StartTask250ms
 405              		.syntax unified
 406              		.thumb
 407              		.thumb_func
 408              		.fpu softvfp
 410              	StartTask250ms:
 411              	.LFB90:
 920:Core/Src/main.c ****   }
 921:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 922:Core/Src/main.c ****   osThreadTerminate(NULL);
 923:Core/Src/main.c ****   /* USER CODE END StartTask100ms */
 924:Core/Src/main.c **** }
 925:Core/Src/main.c **** 
 926:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask250ms */
 927:Core/Src/main.c **** /**
 928:Core/Src/main.c ****  * @brief Function implementing the Task250ms thread.
 929:Core/Src/main.c ****  * @param argument: Not used
 930:Core/Src/main.c ****  * @retval None
 931:Core/Src/main.c ****  */
 932:Core/Src/main.c **** /* USER CODE END Header_StartTask250ms */
 933:Core/Src/main.c **** void StartTask250ms(void *argument)
 934:Core/Src/main.c **** {
 412              		.loc 1 934 0
 413              		.cfi_startproc
 414              		@ Volatile: function does not return.
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              	.LVL34:
 418 0000 08B5     		push	{r3, lr}
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 3, -8
 421              		.cfi_offset 14, -4
 422              	.LVL35:
 423              	.L23:
 935:Core/Src/main.c ****   /* USER CODE BEGIN StartTask250ms */
 936:Core/Src/main.c ****   // TickType_t lastWakeTime;
 937:Core/Src/main.c ****   // const TickType_t frequency = 250;
 938:Core/Src/main.c ****   // lastWakeTime = xTaskGetTickCount();
 939:Core/Src/main.c ****   /* Infinite loop */
 940:Core/Src/main.c **** 
 941:Core/Src/main.c ****   for (;;)
 942:Core/Src/main.c **** 
 943:Core/Src/main.c ****   {
 944:Core/Src/main.c ****     // vTaskDelayUntil(&lastWakeTime, frequency);
ARM GAS  /tmp/ccSIEGwI.s 			page 25


 945:Core/Src/main.c ****     HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 424              		.loc 1 945 0 discriminator 1
 425 0002 4FF40051 		mov	r1, #8192
 426 0006 0A48     		ldr	r0, .L25
 427 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 428              	.LVL36:
 946:Core/Src/main.c **** 
 947:Core/Src/main.c ****     updateTemp(ldu.hsTemp);
 429              		.loc 1 947 0 discriminator 1
 430 000c 094B     		ldr	r3, .L25+4
 431 000e 9888     		ldrh	r0, [r3, #4]
 432 0010 80B2     		uxth	r0, r0
 433 0012 FFF7FEFF 		bl	updateTemp
 434              	.LVL37:
 948:Core/Src/main.c ****     updateSOC(BMS[0].chargeState);
 435              		.loc 1 948 0 discriminator 1
 436 0016 084B     		ldr	r3, .L25+8
 437 0018 187A     		ldrb	r0, [r3, #8]	@ zero_extendqisi2
 438 001a FFF7FEFF 		bl	updateSOC
 439              	.LVL38:
 949:Core/Src/main.c ****     vehicleComms();
 440              		.loc 1 949 0 discriminator 1
 441 001e FFF7FEFF 		bl	vehicleComms
 442              	.LVL39:
 950:Core/Src/main.c ****     encoderHandler();
 443              		.loc 1 950 0 discriminator 1
 444 0022 FFF7FEFF 		bl	encoderHandler
 445              	.LVL40:
 951:Core/Src/main.c **** 
 952:Core/Src/main.c ****     osDelay(250);
 446              		.loc 1 952 0 discriminator 1
 447 0026 FA20     		movs	r0, #250
 448 0028 FFF7FEFF 		bl	osDelay
 449              	.LVL41:
 450 002c E9E7     		b	.L23
 451              	.L26:
 452 002e 00BF     		.align	2
 453              	.L25:
 454 0030 00100140 		.word	1073811456
 455 0034 00000000 		.word	ldu
 456 0038 00000000 		.word	BMS
 457              		.cfi_endproc
 458              	.LFE90:
 460              		.section	.text.__io_putchar,"ax",%progbits
 461              		.align	1
 462              		.global	__io_putchar
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu softvfp
 468              	__io_putchar:
 469              	.LFB70:
 470              		.file 2 "Core/Inc/print_uart.h"
   1:Core/Inc/print_uart.h **** #ifndef __PRINT_UART_H
   2:Core/Inc/print_uart.h **** #define __PRINT_UART_H
   3:Core/Inc/print_uart.h **** 
   4:Core/Inc/print_uart.h **** 
ARM GAS  /tmp/ccSIEGwI.s 			page 26


   5:Core/Inc/print_uart.h **** #include <stdio.h>
   6:Core/Inc/print_uart.h **** #include "stm32f1xx_hal.h"
   7:Core/Inc/print_uart.h **** 
   8:Core/Inc/print_uart.h **** UART_HandleTypeDef huart1;
   9:Core/Inc/print_uart.h **** 
  10:Core/Inc/print_uart.h **** //////////////////////////// Begin UART Magic ////////////////////////
  11:Core/Inc/print_uart.h **** int __io_putchar(int ch)
  12:Core/Inc/print_uart.h **** {
 471              		.loc 2 12 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 8
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475              	.LVL42:
 476 0000 10B5     		push	{r4, lr}
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 4, -8
 479              		.cfi_offset 14, -4
 480 0002 82B0     		sub	sp, sp, #8
 481              		.cfi_def_cfa_offset 16
 482 0004 0446     		mov	r4, r0
  13:Core/Inc/print_uart.h ****  uint8_t c[1];
  14:Core/Inc/print_uart.h ****  c[0] = ch & 0x00FF;
 483              		.loc 2 14 0
 484 0006 02A9     		add	r1, sp, #8
 485 0008 01F8040D 		strb	r0, [r1, #-4]!
  15:Core/Inc/print_uart.h ****  HAL_UART_Transmit(&huart1, &*c, 1, 10);
 486              		.loc 2 15 0
 487 000c 0A23     		movs	r3, #10
 488 000e 0122     		movs	r2, #1
 489 0010 0248     		ldr	r0, .L29
 490              	.LVL43:
 491 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 492              	.LVL44:
  16:Core/Inc/print_uart.h ****  return ch;
  17:Core/Inc/print_uart.h **** }
 493              		.loc 2 17 0
 494 0016 2046     		mov	r0, r4
 495 0018 02B0     		add	sp, sp, #8
 496              		.cfi_def_cfa_offset 8
 497              		@ sp needed
 498 001a 10BD     		pop	{r4, pc}
 499              	.LVL45:
 500              	.L30:
 501              		.align	2
 502              	.L29:
 503 001c 00000000 		.word	huart1
 504              		.cfi_endproc
 505              	.LFE70:
 507              		.section	.text._write,"ax",%progbits
 508              		.align	1
 509              		.global	_write
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu softvfp
 515              	_write:
 516              	.LFB71:
ARM GAS  /tmp/ccSIEGwI.s 			page 27


  18:Core/Inc/print_uart.h **** 
  19:Core/Inc/print_uart.h **** int _write(int file,char *ptr, int len)
  20:Core/Inc/print_uart.h **** {
 517              		.loc 2 20 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              	.LVL46:
 522 0000 70B5     		push	{r4, r5, r6, lr}
 523              		.cfi_def_cfa_offset 16
 524              		.cfi_offset 4, -16
 525              		.cfi_offset 5, -12
 526              		.cfi_offset 6, -8
 527              		.cfi_offset 14, -4
 528 0002 1646     		mov	r6, r2
 529              	.LVL47:
  21:Core/Inc/print_uart.h ****  int DataIdx;
  22:Core/Inc/print_uart.h ****  for(DataIdx= 0; DataIdx< len; DataIdx++)
 530              		.loc 2 22 0
 531 0004 0024     		movs	r4, #0
 532 0006 05E0     		b	.L32
 533              	.LVL48:
 534              	.L33:
  23:Core/Inc/print_uart.h ****  {
  24:Core/Inc/print_uart.h ****  __io_putchar(*ptr++);
 535              		.loc 2 24 0 discriminator 3
 536 0008 4D1C     		adds	r5, r1, #1
 537              	.LVL49:
 538 000a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 539 000c FFF7FEFF 		bl	__io_putchar
 540              	.LVL50:
  22:Core/Inc/print_uart.h ****  {
 541              		.loc 2 22 0 discriminator 3
 542 0010 0134     		adds	r4, r4, #1
 543              	.LVL51:
 544              		.loc 2 24 0 discriminator 3
 545 0012 2946     		mov	r1, r5
 546              	.LVL52:
 547              	.L32:
  22:Core/Inc/print_uart.h ****  {
 548              		.loc 2 22 0 discriminator 1
 549 0014 B442     		cmp	r4, r6
 550 0016 F7DB     		blt	.L33
  25:Core/Inc/print_uart.h ****  }
  26:Core/Inc/print_uart.h **** return len;
  27:Core/Inc/print_uart.h **** }
 551              		.loc 2 27 0
 552 0018 3046     		mov	r0, r6
 553 001a 70BD     		pop	{r4, r5, r6, pc}
 554              		.cfi_endproc
 555              	.LFE71:
 557              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 558              		.align	1
 559              		.global	HAL_TIM_PeriodElapsedCallback
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
ARM GAS  /tmp/ccSIEGwI.s 			page 28


 563              		.fpu softvfp
 565              	HAL_TIM_PeriodElapsedCallback:
 566              	.LFB91:
 953:Core/Src/main.c ****     // testVal();
 954:Core/Src/main.c ****   }
 955:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 956:Core/Src/main.c ****   osThreadTerminate(NULL);
 957:Core/Src/main.c ****   /* USER CODE END StartTask250ms */
 958:Core/Src/main.c **** }
 959:Core/Src/main.c **** 
 960:Core/Src/main.c **** /**
 961:Core/Src/main.c ****  * @brief  Period elapsed callback in non blocking mode
 962:Core/Src/main.c ****  * @note   This function is called  when TIM7 interrupt took place, inside
 963:Core/Src/main.c ****  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 964:Core/Src/main.c ****  * a global variable "uwTick" used as application time base.
 965:Core/Src/main.c ****  * @param  htim : TIM handle
 966:Core/Src/main.c ****  * @retval None
 967:Core/Src/main.c ****  */
 968:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 969:Core/Src/main.c **** {
 567              		.loc 1 969 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              	.LVL53:
 572 0000 08B5     		push	{r3, lr}
 573              		.cfi_def_cfa_offset 8
 574              		.cfi_offset 3, -8
 575              		.cfi_offset 14, -4
 970:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 971:Core/Src/main.c **** 
 972:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 973:Core/Src/main.c ****   if (htim->Instance == TIM7)
 576              		.loc 1 973 0
 577 0002 0268     		ldr	r2, [r0]
 578 0004 034B     		ldr	r3, .L39
 579 0006 9A42     		cmp	r2, r3
 580 0008 00D0     		beq	.L38
 581              	.LVL54:
 582              	.L35:
 583 000a 08BD     		pop	{r3, pc}
 584              	.LVL55:
 585              	.L38:
 974:Core/Src/main.c ****   {
 975:Core/Src/main.c ****     HAL_IncTick();
 586              		.loc 1 975 0
 587 000c FFF7FEFF 		bl	HAL_IncTick
 588              	.LVL56:
 976:Core/Src/main.c ****   }
 977:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 978:Core/Src/main.c **** 
 979:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 980:Core/Src/main.c **** }
 589              		.loc 1 980 0
 590 0010 FBE7     		b	.L35
 591              	.L40:
 592 0012 00BF     		.align	2
ARM GAS  /tmp/ccSIEGwI.s 			page 29


 593              	.L39:
 594 0014 00140040 		.word	1073746944
 595              		.cfi_endproc
 596              	.LFE91:
 598              		.section	.text.Error_Handler,"ax",%progbits
 599              		.align	1
 600              		.global	Error_Handler
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 604              		.fpu softvfp
 606              	Error_Handler:
 607              	.LFB92:
 981:Core/Src/main.c **** 
 982:Core/Src/main.c **** /**
 983:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 984:Core/Src/main.c ****  * @retval None
 985:Core/Src/main.c ****  */
 986:Core/Src/main.c **** void Error_Handler(void)
 987:Core/Src/main.c **** {
 608              		.loc 1 987 0
 609              		.cfi_startproc
 610              		@ Volatile: function does not return.
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614              	.LBB10:
 615              	.LBB11:
 616              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /tmp/ccSIEGwI.s 			page 30


  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccSIEGwI.s 			page 31


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
ARM GAS  /tmp/ccSIEGwI.s 			page 32


 617              		.loc 3 142 0
 618              		.syntax unified
 619              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 620 0000 72B6     		cpsid i
 621              	@ 0 "" 2
 622              		.thumb
 623              		.syntax unified
 624              	.L42:
 625 0002 FEE7     		b	.L42
 626              	.LBE11:
 627              	.LBE10:
 628              		.cfi_endproc
 629              	.LFE92:
 631              		.section	.text.MX_CAN2_Init,"ax",%progbits
 632              		.align	1
 633              		.syntax unified
 634              		.thumb
 635              		.thumb_func
 636              		.fpu softvfp
 638              	MX_CAN2_Init:
 639              	.LFB76:
 402:Core/Src/main.c **** 
 640              		.loc 1 402 0
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 0
 643              		@ frame_needed = 0, uses_anonymous_args = 0
 644 0000 08B5     		push	{r3, lr}
 645              		.cfi_def_cfa_offset 8
 646              		.cfi_offset 3, -8
 647              		.cfi_offset 14, -4
 411:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 648              		.loc 1 411 0
 649 0002 0D48     		ldr	r0, .L47
 650 0004 0D4B     		ldr	r3, .L47+4
 651 0006 0360     		str	r3, [r0]
 412:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 652              		.loc 1 412 0
 653 0008 0C23     		movs	r3, #12
 654 000a 4360     		str	r3, [r0, #4]
 413:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 655              		.loc 1 413 0
 656 000c 0023     		movs	r3, #0
 657 000e 8360     		str	r3, [r0, #8]
 414:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 658              		.loc 1 414 0
 659 0010 C360     		str	r3, [r0, #12]
 415:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 660              		.loc 1 415 0
 661 0012 4FF48032 		mov	r2, #65536
 662 0016 0261     		str	r2, [r0, #16]
 416:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 663              		.loc 1 416 0
 664 0018 4FF40012 		mov	r2, #2097152
 665 001c 4261     		str	r2, [r0, #20]
 417:Core/Src/main.c ****   hcan2.Init.AutoBusOff = ENABLE;
 666              		.loc 1 417 0
 667 001e 0376     		strb	r3, [r0, #24]
ARM GAS  /tmp/ccSIEGwI.s 			page 33


 418:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 668              		.loc 1 418 0
 669 0020 0122     		movs	r2, #1
 670 0022 4276     		strb	r2, [r0, #25]
 419:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 671              		.loc 1 419 0
 672 0024 8376     		strb	r3, [r0, #26]
 420:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 673              		.loc 1 420 0
 674 0026 C376     		strb	r3, [r0, #27]
 421:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 675              		.loc 1 421 0
 676 0028 0377     		strb	r3, [r0, #28]
 422:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 677              		.loc 1 422 0
 678 002a 4377     		strb	r3, [r0, #29]
 423:Core/Src/main.c ****   {
 679              		.loc 1 423 0
 680 002c FFF7FEFF 		bl	HAL_CAN_Init
 681              	.LVL57:
 682 0030 00B9     		cbnz	r0, .L46
 683 0032 08BD     		pop	{r3, pc}
 684              	.L46:
 425:Core/Src/main.c ****   }
 685              		.loc 1 425 0
 686 0034 FFF7FEFF 		bl	Error_Handler
 687              	.LVL58:
 688              	.L48:
 689              		.align	2
 690              	.L47:
 691 0038 00000000 		.word	hcan2
 692 003c 00680040 		.word	1073768448
 693              		.cfi_endproc
 694              	.LFE76:
 696              		.section	.text.MX_ADC1_Init,"ax",%progbits
 697              		.align	1
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 701              		.fpu softvfp
 703              	MX_ADC1_Init:
 704              	.LFB74:
 305:Core/Src/main.c **** 
 705              		.loc 1 305 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 16
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709 0000 00B5     		push	{lr}
 710              		.cfi_def_cfa_offset 4
 711              		.cfi_offset 14, -4
 712 0002 85B0     		sub	sp, sp, #20
 713              		.cfi_def_cfa_offset 24
 311:Core/Src/main.c **** 
 714              		.loc 1 311 0
 715 0004 0023     		movs	r3, #0
 716 0006 0193     		str	r3, [sp, #4]
 717 0008 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccSIEGwI.s 			page 34


 718 000a 0393     		str	r3, [sp, #12]
 318:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 719              		.loc 1 318 0
 720 000c 1E48     		ldr	r0, .L59
 721 000e 1F4A     		ldr	r2, .L59+4
 722 0010 0260     		str	r2, [r0]
 319:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 723              		.loc 1 319 0
 724 0012 4FF48072 		mov	r2, #256
 725 0016 8260     		str	r2, [r0, #8]
 320:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 726              		.loc 1 320 0
 727 0018 0122     		movs	r2, #1
 728 001a 0273     		strb	r2, [r0, #12]
 321:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 729              		.loc 1 321 0
 730 001c 0375     		strb	r3, [r0, #20]
 322:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 731              		.loc 1 322 0
 732 001e 4FF46022 		mov	r2, #917504
 733 0022 C261     		str	r2, [r0, #28]
 323:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 734              		.loc 1 323 0
 735 0024 4360     		str	r3, [r0, #4]
 324:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 736              		.loc 1 324 0
 737 0026 0323     		movs	r3, #3
 738 0028 0361     		str	r3, [r0, #16]
 325:Core/Src/main.c ****   {
 739              		.loc 1 325 0
 740 002a FFF7FEFF 		bl	HAL_ADC_Init
 741              	.LVL59:
 742 002e 10BB     		cbnz	r0, .L55
 331:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 743              		.loc 1 331 0
 744 0030 0B23     		movs	r3, #11
 745 0032 0193     		str	r3, [sp, #4]
 332:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 746              		.loc 1 332 0
 747 0034 0123     		movs	r3, #1
 748 0036 0293     		str	r3, [sp, #8]
 333:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 749              		.loc 1 333 0
 750 0038 0723     		movs	r3, #7
 751 003a 0393     		str	r3, [sp, #12]
 334:Core/Src/main.c ****   {
 752              		.loc 1 334 0
 753 003c 01A9     		add	r1, sp, #4
 754 003e 1248     		ldr	r0, .L59
 755 0040 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 756              	.LVL60:
 757 0044 C8B9     		cbnz	r0, .L56
 340:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 758              		.loc 1 340 0
 759 0046 0523     		movs	r3, #5
 760 0048 0193     		str	r3, [sp, #4]
 341:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
ARM GAS  /tmp/ccSIEGwI.s 			page 35


 761              		.loc 1 341 0
 762 004a 0223     		movs	r3, #2
 763 004c 0293     		str	r3, [sp, #8]
 342:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 764              		.loc 1 342 0
 765 004e 0423     		movs	r3, #4
 766 0050 0393     		str	r3, [sp, #12]
 343:Core/Src/main.c ****   {
 767              		.loc 1 343 0
 768 0052 0DEB0301 		add	r1, sp, r3
 769 0056 0C48     		ldr	r0, .L59
 770 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 771              	.LVL61:
 772 005c 78B9     		cbnz	r0, .L57
 349:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 773              		.loc 1 349 0
 774 005e 0623     		movs	r3, #6
 775 0060 0193     		str	r3, [sp, #4]
 350:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 776              		.loc 1 350 0
 777 0062 0323     		movs	r3, #3
 778 0064 0293     		str	r3, [sp, #8]
 351:Core/Src/main.c ****   {
 779              		.loc 1 351 0
 780 0066 01A9     		add	r1, sp, #4
 781 0068 0748     		ldr	r0, .L59
 782 006a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 783              	.LVL62:
 784 006e 40B9     		cbnz	r0, .L58
 358:Core/Src/main.c **** 
 785              		.loc 1 358 0
 786 0070 05B0     		add	sp, sp, #20
 787              		.cfi_remember_state
 788              		.cfi_def_cfa_offset 4
 789              		@ sp needed
 790 0072 5DF804FB 		ldr	pc, [sp], #4
 791              	.L55:
 792              		.cfi_restore_state
 327:Core/Src/main.c ****   }
 793              		.loc 1 327 0
 794 0076 FFF7FEFF 		bl	Error_Handler
 795              	.LVL63:
 796              	.L56:
 336:Core/Src/main.c ****   }
 797              		.loc 1 336 0
 798 007a FFF7FEFF 		bl	Error_Handler
 799              	.LVL64:
 800              	.L57:
 345:Core/Src/main.c ****   }
 801              		.loc 1 345 0
 802 007e FFF7FEFF 		bl	Error_Handler
 803              	.LVL65:
 804              	.L58:
 353:Core/Src/main.c ****   }
 805              		.loc 1 353 0
 806 0082 FFF7FEFF 		bl	Error_Handler
 807              	.LVL66:
ARM GAS  /tmp/ccSIEGwI.s 			page 36


 808              	.L60:
 809 0086 00BF     		.align	2
 810              	.L59:
 811 0088 00000000 		.word	hadc1
 812 008c 00240140 		.word	1073816576
 813              		.cfi_endproc
 814              	.LFE74:
 816              		.section	.text.MX_CAN1_Init,"ax",%progbits
 817              		.align	1
 818              		.syntax unified
 819              		.thumb
 820              		.thumb_func
 821              		.fpu softvfp
 823              	MX_CAN1_Init:
 824              	.LFB75:
 366:Core/Src/main.c **** 
 825              		.loc 1 366 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829 0000 08B5     		push	{r3, lr}
 830              		.cfi_def_cfa_offset 8
 831              		.cfi_offset 3, -8
 832              		.cfi_offset 14, -4
 375:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 833              		.loc 1 375 0
 834 0002 0D48     		ldr	r0, .L65
 835 0004 0D4B     		ldr	r3, .L65+4
 836 0006 0360     		str	r3, [r0]
 376:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 837              		.loc 1 376 0
 838 0008 0C23     		movs	r3, #12
 839 000a 4360     		str	r3, [r0, #4]
 377:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 840              		.loc 1 377 0
 841 000c 0023     		movs	r3, #0
 842 000e 8360     		str	r3, [r0, #8]
 378:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 843              		.loc 1 378 0
 844 0010 C360     		str	r3, [r0, #12]
 379:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 845              		.loc 1 379 0
 846 0012 4FF48032 		mov	r2, #65536
 847 0016 0261     		str	r2, [r0, #16]
 380:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 848              		.loc 1 380 0
 849 0018 4FF40012 		mov	r2, #2097152
 850 001c 4261     		str	r2, [r0, #20]
 381:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 851              		.loc 1 381 0
 852 001e 0376     		strb	r3, [r0, #24]
 382:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 853              		.loc 1 382 0
 854 0020 0122     		movs	r2, #1
 855 0022 4276     		strb	r2, [r0, #25]
 383:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 856              		.loc 1 383 0
ARM GAS  /tmp/ccSIEGwI.s 			page 37


 857 0024 8376     		strb	r3, [r0, #26]
 384:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 858              		.loc 1 384 0
 859 0026 C376     		strb	r3, [r0, #27]
 385:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 860              		.loc 1 385 0
 861 0028 0377     		strb	r3, [r0, #28]
 386:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 862              		.loc 1 386 0
 863 002a 4377     		strb	r3, [r0, #29]
 387:Core/Src/main.c ****   {
 864              		.loc 1 387 0
 865 002c FFF7FEFF 		bl	HAL_CAN_Init
 866              	.LVL67:
 867 0030 00B9     		cbnz	r0, .L64
 868 0032 08BD     		pop	{r3, pc}
 869              	.L64:
 389:Core/Src/main.c ****   }
 870              		.loc 1 389 0
 871 0034 FFF7FEFF 		bl	Error_Handler
 872              	.LVL68:
 873              	.L66:
 874              		.align	2
 875              	.L65:
 876 0038 00000000 		.word	hcan1
 877 003c 00640040 		.word	1073767424
 878              		.cfi_endproc
 879              	.LFE75:
 881              		.section	.text.MX_UART4_Init,"ax",%progbits
 882              		.align	1
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu softvfp
 888              	MX_UART4_Init:
 889              	.LFB83:
 705:Core/Src/main.c **** 
 890              		.loc 1 705 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894 0000 08B5     		push	{r3, lr}
 895              		.cfi_def_cfa_offset 8
 896              		.cfi_offset 3, -8
 897              		.cfi_offset 14, -4
 714:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 898              		.loc 1 714 0
 899 0002 0A48     		ldr	r0, .L71
 900 0004 0A4B     		ldr	r3, .L71+4
 901 0006 0360     		str	r3, [r0]
 715:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 902              		.loc 1 715 0
 903 0008 4FF4E133 		mov	r3, #115200
 904 000c 4360     		str	r3, [r0, #4]
 716:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 905              		.loc 1 716 0
 906 000e 0023     		movs	r3, #0
ARM GAS  /tmp/ccSIEGwI.s 			page 38


 907 0010 8360     		str	r3, [r0, #8]
 717:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 908              		.loc 1 717 0
 909 0012 C360     		str	r3, [r0, #12]
 718:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 910              		.loc 1 718 0
 911 0014 0361     		str	r3, [r0, #16]
 719:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 912              		.loc 1 719 0
 913 0016 0C22     		movs	r2, #12
 914 0018 4261     		str	r2, [r0, #20]
 720:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 915              		.loc 1 720 0
 916 001a 8361     		str	r3, [r0, #24]
 721:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 917              		.loc 1 721 0
 918 001c C361     		str	r3, [r0, #28]
 722:Core/Src/main.c ****   {
 919              		.loc 1 722 0
 920 001e FFF7FEFF 		bl	HAL_UART_Init
 921              	.LVL69:
 922 0022 00B9     		cbnz	r0, .L70
 923 0024 08BD     		pop	{r3, pc}
 924              	.L70:
 724:Core/Src/main.c ****   }
 925              		.loc 1 724 0
 926 0026 FFF7FEFF 		bl	Error_Handler
 927              	.LVL70:
 928              	.L72:
 929 002a 00BF     		.align	2
 930              	.L71:
 931 002c 00000000 		.word	huart4
 932 0030 004C0040 		.word	1073761280
 933              		.cfi_endproc
 934              	.LFE83:
 936              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 937              		.align	1
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 941              		.fpu softvfp
 943              	MX_USART1_UART_Init:
 944              	.LFB84:
 737:Core/Src/main.c **** 
 945              		.loc 1 737 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 0
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949 0000 08B5     		push	{r3, lr}
 950              		.cfi_def_cfa_offset 8
 951              		.cfi_offset 3, -8
 952              		.cfi_offset 14, -4
 746:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 953              		.loc 1 746 0
 954 0002 0A48     		ldr	r0, .L77
 955 0004 0A4B     		ldr	r3, .L77+4
 956 0006 0360     		str	r3, [r0]
ARM GAS  /tmp/ccSIEGwI.s 			page 39


 747:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 957              		.loc 1 747 0
 958 0008 4FF4E133 		mov	r3, #115200
 959 000c 4360     		str	r3, [r0, #4]
 748:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 960              		.loc 1 748 0
 961 000e 0023     		movs	r3, #0
 962 0010 8360     		str	r3, [r0, #8]
 749:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 963              		.loc 1 749 0
 964 0012 C360     		str	r3, [r0, #12]
 750:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 965              		.loc 1 750 0
 966 0014 0361     		str	r3, [r0, #16]
 751:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 967              		.loc 1 751 0
 968 0016 0C22     		movs	r2, #12
 969 0018 4261     		str	r2, [r0, #20]
 752:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 970              		.loc 1 752 0
 971 001a 8361     		str	r3, [r0, #24]
 753:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 972              		.loc 1 753 0
 973 001c C361     		str	r3, [r0, #28]
 754:Core/Src/main.c ****   {
 974              		.loc 1 754 0
 975 001e FFF7FEFF 		bl	HAL_UART_Init
 976              	.LVL71:
 977 0022 00B9     		cbnz	r0, .L76
 978 0024 08BD     		pop	{r3, pc}
 979              	.L76:
 756:Core/Src/main.c ****   }
 980              		.loc 1 756 0
 981 0026 FFF7FEFF 		bl	Error_Handler
 982              	.LVL72:
 983              	.L78:
 984 002a 00BF     		.align	2
 985              	.L77:
 986 002c 00000000 		.word	huart1
 987 0030 00380140 		.word	1073821696
 988              		.cfi_endproc
 989              	.LFE84:
 991              		.section	.text.MX_TIM3_Init,"ax",%progbits
 992              		.align	1
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 996              		.fpu softvfp
 998              	MX_TIM3_Init:
 999              	.LFB81:
 596:Core/Src/main.c **** 
 1000              		.loc 1 596 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 56
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 1004 0000 00B5     		push	{lr}
 1005              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccSIEGwI.s 			page 40


 1006              		.cfi_offset 14, -4
 1007 0002 8FB0     		sub	sp, sp, #60
 1008              		.cfi_def_cfa_offset 64
 602:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1009              		.loc 1 602 0
 1010 0004 0023     		movs	r3, #0
 1011 0006 0A93     		str	r3, [sp, #40]
 1012 0008 0B93     		str	r3, [sp, #44]
 1013 000a 0C93     		str	r3, [sp, #48]
 1014 000c 0D93     		str	r3, [sp, #52]
 603:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1015              		.loc 1 603 0
 1016 000e 0893     		str	r3, [sp, #32]
 1017 0010 0993     		str	r3, [sp, #36]
 604:Core/Src/main.c **** 
 1018              		.loc 1 604 0
 1019 0012 0193     		str	r3, [sp, #4]
 1020 0014 0293     		str	r3, [sp, #8]
 1021 0016 0393     		str	r3, [sp, #12]
 1022 0018 0493     		str	r3, [sp, #16]
 1023 001a 0593     		str	r3, [sp, #20]
 1024 001c 0693     		str	r3, [sp, #24]
 1025 001e 0793     		str	r3, [sp, #28]
 609:Core/Src/main.c ****   htim3.Init.Prescaler = 120;
 1026              		.loc 1 609 0
 1027 0020 1F48     		ldr	r0, .L91
 1028 0022 204A     		ldr	r2, .L91+4
 1029 0024 0260     		str	r2, [r0]
 610:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1030              		.loc 1 610 0
 1031 0026 7822     		movs	r2, #120
 1032 0028 4260     		str	r2, [r0, #4]
 611:Core/Src/main.c ****   htim3.Init.Period = 600;
 1033              		.loc 1 611 0
 1034 002a 8360     		str	r3, [r0, #8]
 612:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1035              		.loc 1 612 0
 1036 002c 4FF41672 		mov	r2, #600
 1037 0030 C260     		str	r2, [r0, #12]
 613:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1038              		.loc 1 613 0
 1039 0032 0361     		str	r3, [r0, #16]
 614:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1040              		.loc 1 614 0
 1041 0034 8361     		str	r3, [r0, #24]
 615:Core/Src/main.c ****   {
 1042              		.loc 1 615 0
 1043 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1044              	.LVL73:
 1045 003a 30BB     		cbnz	r0, .L86
 619:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1046              		.loc 1 619 0
 1047 003c 0EA9     		add	r1, sp, #56
 1048 003e 4FF48053 		mov	r3, #4096
 1049 0042 41F8103D 		str	r3, [r1, #-16]!
 620:Core/Src/main.c ****   {
 1050              		.loc 1 620 0
ARM GAS  /tmp/ccSIEGwI.s 			page 41


 1051 0046 1648     		ldr	r0, .L91
 1052 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1053              	.LVL74:
 1054 004c F8B9     		cbnz	r0, .L87
 624:Core/Src/main.c ****   {
 1055              		.loc 1 624 0
 1056 004e 1448     		ldr	r0, .L91
 1057 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1058              	.LVL75:
 1059 0054 E8B9     		cbnz	r0, .L88
 628:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1060              		.loc 1 628 0
 1061 0056 0023     		movs	r3, #0
 1062 0058 0893     		str	r3, [sp, #32]
 629:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1063              		.loc 1 629 0
 1064 005a 0993     		str	r3, [sp, #36]
 630:Core/Src/main.c ****   {
 1065              		.loc 1 630 0
 1066 005c 08A9     		add	r1, sp, #32
 1067 005e 1048     		ldr	r0, .L91
 1068 0060 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1069              	.LVL76:
 1070 0064 B8B9     		cbnz	r0, .L89
 634:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1071              		.loc 1 634 0
 1072 0066 6023     		movs	r3, #96
 1073 0068 0193     		str	r3, [sp, #4]
 635:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1074              		.loc 1 635 0
 1075 006a 0023     		movs	r3, #0
 1076 006c 0293     		str	r3, [sp, #8]
 636:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1077              		.loc 1 636 0
 1078 006e 0393     		str	r3, [sp, #12]
 637:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1079              		.loc 1 637 0
 1080 0070 0593     		str	r3, [sp, #20]
 638:Core/Src/main.c ****   {
 1081              		.loc 1 638 0
 1082 0072 0822     		movs	r2, #8
 1083 0074 01A9     		add	r1, sp, #4
 1084 0076 0A48     		ldr	r0, .L91
 1085 0078 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1086              	.LVL77:
 1087 007c 68B9     		cbnz	r0, .L90
 645:Core/Src/main.c **** }
 1088              		.loc 1 645 0
 1089 007e 0848     		ldr	r0, .L91
 1090 0080 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1091              	.LVL78:
 646:Core/Src/main.c **** 
 1092              		.loc 1 646 0
 1093 0084 0FB0     		add	sp, sp, #60
 1094              		.cfi_remember_state
 1095              		.cfi_def_cfa_offset 4
 1096              		@ sp needed
ARM GAS  /tmp/ccSIEGwI.s 			page 42


 1097 0086 5DF804FB 		ldr	pc, [sp], #4
 1098              	.L86:
 1099              		.cfi_restore_state
 617:Core/Src/main.c ****   }
 1100              		.loc 1 617 0
 1101 008a FFF7FEFF 		bl	Error_Handler
 1102              	.LVL79:
 1103              	.L87:
 622:Core/Src/main.c ****   }
 1104              		.loc 1 622 0
 1105 008e FFF7FEFF 		bl	Error_Handler
 1106              	.LVL80:
 1107              	.L88:
 626:Core/Src/main.c ****   }
 1108              		.loc 1 626 0
 1109 0092 FFF7FEFF 		bl	Error_Handler
 1110              	.LVL81:
 1111              	.L89:
 632:Core/Src/main.c ****   }
 1112              		.loc 1 632 0
 1113 0096 FFF7FEFF 		bl	Error_Handler
 1114              	.LVL82:
 1115              	.L90:
 640:Core/Src/main.c ****   }
 1116              		.loc 1 640 0
 1117 009a FFF7FEFF 		bl	Error_Handler
 1118              	.LVL83:
 1119              	.L92:
 1120 009e 00BF     		.align	2
 1121              	.L91:
 1122 00a0 00000000 		.word	htim3
 1123 00a4 00040040 		.word	1073742848
 1124              		.cfi_endproc
 1125              	.LFE81:
 1127              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1128              		.align	1
 1129              		.syntax unified
 1130              		.thumb
 1131              		.thumb_func
 1132              		.fpu softvfp
 1134              	MX_TIM1_Init:
 1135              	.LFB79:
 485:Core/Src/main.c **** 
 1136              		.loc 1 485 0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 72
 1139              		@ frame_needed = 0, uses_anonymous_args = 0
 1140 0000 10B5     		push	{r4, lr}
 1141              		.cfi_def_cfa_offset 8
 1142              		.cfi_offset 4, -8
 1143              		.cfi_offset 14, -4
 1144 0002 92B0     		sub	sp, sp, #72
 1145              		.cfi_def_cfa_offset 80
 491:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1146              		.loc 1 491 0
 1147 0004 0024     		movs	r4, #0
 1148 0006 1094     		str	r4, [sp, #64]
ARM GAS  /tmp/ccSIEGwI.s 			page 43


 1149 0008 1194     		str	r4, [sp, #68]
 492:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1150              		.loc 1 492 0
 1151 000a 0994     		str	r4, [sp, #36]
 1152 000c 0A94     		str	r4, [sp, #40]
 1153 000e 0B94     		str	r4, [sp, #44]
 1154 0010 0C94     		str	r4, [sp, #48]
 1155 0012 0D94     		str	r4, [sp, #52]
 1156 0014 0E94     		str	r4, [sp, #56]
 1157 0016 0F94     		str	r4, [sp, #60]
 493:Core/Src/main.c **** 
 1158              		.loc 1 493 0
 1159 0018 2022     		movs	r2, #32
 1160 001a 2146     		mov	r1, r4
 1161 001c 01A8     		add	r0, sp, #4
 1162 001e FFF7FEFF 		bl	memset
 1163              	.LVL84:
 498:Core/Src/main.c ****   htim1.Init.Prescaler = 240;
 1164              		.loc 1 498 0
 1165 0022 2148     		ldr	r0, .L103
 1166 0024 214B     		ldr	r3, .L103+4
 1167 0026 0360     		str	r3, [r0]
 499:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1168              		.loc 1 499 0
 1169 0028 F023     		movs	r3, #240
 1170 002a 4360     		str	r3, [r0, #4]
 500:Core/Src/main.c ****   htim1.Init.Period = 65535;
 1171              		.loc 1 500 0
 1172 002c 8460     		str	r4, [r0, #8]
 501:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1173              		.loc 1 501 0
 1174 002e 4FF6FF73 		movw	r3, #65535
 1175 0032 C360     		str	r3, [r0, #12]
 502:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1176              		.loc 1 502 0
 1177 0034 0461     		str	r4, [r0, #16]
 503:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1178              		.loc 1 503 0
 1179 0036 4461     		str	r4, [r0, #20]
 504:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1180              		.loc 1 504 0
 1181 0038 8461     		str	r4, [r0, #24]
 505:Core/Src/main.c ****   {
 1182              		.loc 1 505 0
 1183 003a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1184              	.LVL85:
 1185 003e 0028     		cmp	r0, #0
 1186 0040 29D1     		bne	.L99
 509:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1187              		.loc 1 509 0
 1188 0042 0023     		movs	r3, #0
 1189 0044 1093     		str	r3, [sp, #64]
 510:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1190              		.loc 1 510 0
 1191 0046 1193     		str	r3, [sp, #68]
 511:Core/Src/main.c ****   {
 1192              		.loc 1 511 0
ARM GAS  /tmp/ccSIEGwI.s 			page 44


 1193 0048 10A9     		add	r1, sp, #64
 1194 004a 1748     		ldr	r0, .L103
 1195 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1196              	.LVL86:
 1197 0050 18BB     		cbnz	r0, .L100
 515:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1198              		.loc 1 515 0
 1199 0052 6023     		movs	r3, #96
 1200 0054 0993     		str	r3, [sp, #36]
 516:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1201              		.loc 1 516 0
 1202 0056 0022     		movs	r2, #0
 1203 0058 0A92     		str	r2, [sp, #40]
 517:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1204              		.loc 1 517 0
 1205 005a 0B92     		str	r2, [sp, #44]
 518:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1206              		.loc 1 518 0
 1207 005c 0C92     		str	r2, [sp, #48]
 519:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1208              		.loc 1 519 0
 1209 005e 0D92     		str	r2, [sp, #52]
 520:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1210              		.loc 1 520 0
 1211 0060 0E92     		str	r2, [sp, #56]
 521:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1212              		.loc 1 521 0
 1213 0062 0F92     		str	r2, [sp, #60]
 522:Core/Src/main.c ****   {
 1214              		.loc 1 522 0
 1215 0064 09A9     		add	r1, sp, #36
 1216 0066 1048     		ldr	r0, .L103
 1217 0068 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1218              	.LVL87:
 1219 006c B8B9     		cbnz	r0, .L101
 526:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1220              		.loc 1 526 0
 1221 006e 0023     		movs	r3, #0
 1222 0070 0193     		str	r3, [sp, #4]
 527:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1223              		.loc 1 527 0
 1224 0072 0293     		str	r3, [sp, #8]
 528:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1225              		.loc 1 528 0
 1226 0074 0393     		str	r3, [sp, #12]
 529:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1227              		.loc 1 529 0
 1228 0076 0493     		str	r3, [sp, #16]
 530:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1229              		.loc 1 530 0
 1230 0078 0593     		str	r3, [sp, #20]
 531:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1231              		.loc 1 531 0
 1232 007a 4FF40052 		mov	r2, #8192
 1233 007e 0692     		str	r2, [sp, #24]
 532:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1234              		.loc 1 532 0
ARM GAS  /tmp/ccSIEGwI.s 			page 45


 1235 0080 0893     		str	r3, [sp, #32]
 533:Core/Src/main.c ****   {
 1236              		.loc 1 533 0
 1237 0082 01A9     		add	r1, sp, #4
 1238 0084 0848     		ldr	r0, .L103
 1239 0086 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1240              	.LVL88:
 1241 008a 50B9     		cbnz	r0, .L102
 540:Core/Src/main.c **** }
 1242              		.loc 1 540 0
 1243 008c 0648     		ldr	r0, .L103
 1244 008e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1245              	.LVL89:
 541:Core/Src/main.c **** 
 1246              		.loc 1 541 0
 1247 0092 12B0     		add	sp, sp, #72
 1248              		.cfi_remember_state
 1249              		.cfi_def_cfa_offset 8
 1250              		@ sp needed
 1251 0094 10BD     		pop	{r4, pc}
 1252              	.L99:
 1253              		.cfi_restore_state
 507:Core/Src/main.c ****   }
 1254              		.loc 1 507 0
 1255 0096 FFF7FEFF 		bl	Error_Handler
 1256              	.LVL90:
 1257              	.L100:
 513:Core/Src/main.c ****   }
 1258              		.loc 1 513 0
 1259 009a FFF7FEFF 		bl	Error_Handler
 1260              	.LVL91:
 1261              	.L101:
 524:Core/Src/main.c ****   }
 1262              		.loc 1 524 0
 1263 009e FFF7FEFF 		bl	Error_Handler
 1264              	.LVL92:
 1265              	.L102:
 535:Core/Src/main.c ****   }
 1266              		.loc 1 535 0
 1267 00a2 FFF7FEFF 		bl	Error_Handler
 1268              	.LVL93:
 1269              	.L104:
 1270 00a6 00BF     		.align	2
 1271              	.L103:
 1272 00a8 00000000 		.word	htim1
 1273 00ac 002C0140 		.word	1073818624
 1274              		.cfi_endproc
 1275              	.LFE79:
 1277              		.section	.text.MX_TIM5_Init,"ax",%progbits
 1278              		.align	1
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1282              		.fpu softvfp
 1284              	MX_TIM5_Init:
 1285              	.LFB82:
 654:Core/Src/main.c **** 
ARM GAS  /tmp/ccSIEGwI.s 			page 46


 1286              		.loc 1 654 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 40
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290 0000 00B5     		push	{lr}
 1291              		.cfi_def_cfa_offset 4
 1292              		.cfi_offset 14, -4
 1293 0002 8BB0     		sub	sp, sp, #44
 1294              		.cfi_def_cfa_offset 48
 660:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1295              		.loc 1 660 0
 1296 0004 0023     		movs	r3, #0
 1297 0006 0893     		str	r3, [sp, #32]
 1298 0008 0993     		str	r3, [sp, #36]
 661:Core/Src/main.c **** 
 1299              		.loc 1 661 0
 1300 000a 0193     		str	r3, [sp, #4]
 1301 000c 0293     		str	r3, [sp, #8]
 1302 000e 0393     		str	r3, [sp, #12]
 1303 0010 0493     		str	r3, [sp, #16]
 1304 0012 0593     		str	r3, [sp, #20]
 1305 0014 0693     		str	r3, [sp, #24]
 1306 0016 0793     		str	r3, [sp, #28]
 666:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 1307              		.loc 1 666 0
 1308 0018 1848     		ldr	r0, .L115
 1309 001a 194A     		ldr	r2, .L115+4
 1310 001c 0260     		str	r2, [r0]
 667:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1311              		.loc 1 667 0
 1312 001e 6422     		movs	r2, #100
 1313 0020 4260     		str	r2, [r0, #4]
 668:Core/Src/main.c ****   htim5.Init.Period = 10;
 1314              		.loc 1 668 0
 1315 0022 8360     		str	r3, [r0, #8]
 669:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1316              		.loc 1 669 0
 1317 0024 0A22     		movs	r2, #10
 1318 0026 C260     		str	r2, [r0, #12]
 670:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1319              		.loc 1 670 0
 1320 0028 0361     		str	r3, [r0, #16]
 671:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 1321              		.loc 1 671 0
 1322 002a 8361     		str	r3, [r0, #24]
 672:Core/Src/main.c ****   {
 1323              		.loc 1 672 0
 1324 002c FFF7FEFF 		bl	HAL_TIM_OC_Init
 1325              	.LVL94:
 1326 0030 D8B9     		cbnz	r0, .L111
 676:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1327              		.loc 1 676 0
 1328 0032 0023     		movs	r3, #0
 1329 0034 0893     		str	r3, [sp, #32]
 677:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1330              		.loc 1 677 0
 1331 0036 0993     		str	r3, [sp, #36]
ARM GAS  /tmp/ccSIEGwI.s 			page 47


 678:Core/Src/main.c ****   {
 1332              		.loc 1 678 0
 1333 0038 08A9     		add	r1, sp, #32
 1334 003a 1048     		ldr	r0, .L115
 1335 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1336              	.LVL95:
 1337 0040 A8B9     		cbnz	r0, .L112
 682:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1338              		.loc 1 682 0
 1339 0042 0022     		movs	r2, #0
 1340 0044 0192     		str	r2, [sp, #4]
 683:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1341              		.loc 1 683 0
 1342 0046 0292     		str	r2, [sp, #8]
 684:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1343              		.loc 1 684 0
 1344 0048 0392     		str	r2, [sp, #12]
 685:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1345              		.loc 1 685 0
 1346 004a 0592     		str	r2, [sp, #20]
 686:Core/Src/main.c ****   {
 1347              		.loc 1 686 0
 1348 004c 01A9     		add	r1, sp, #4
 1349 004e 0B48     		ldr	r0, .L115
 1350 0050 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1351              	.LVL96:
 1352 0054 68B9     		cbnz	r0, .L113
 690:Core/Src/main.c ****   {
 1353              		.loc 1 690 0
 1354 0056 0422     		movs	r2, #4
 1355 0058 0DEB0201 		add	r1, sp, r2
 1356 005c 0748     		ldr	r0, .L115
 1357 005e FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1358              	.LVL97:
 1359 0062 40B9     		cbnz	r0, .L114
 697:Core/Src/main.c **** 
 1360              		.loc 1 697 0
 1361 0064 0BB0     		add	sp, sp, #44
 1362              		.cfi_remember_state
 1363              		.cfi_def_cfa_offset 4
 1364              		@ sp needed
 1365 0066 5DF804FB 		ldr	pc, [sp], #4
 1366              	.L111:
 1367              		.cfi_restore_state
 674:Core/Src/main.c ****   }
 1368              		.loc 1 674 0
 1369 006a FFF7FEFF 		bl	Error_Handler
 1370              	.LVL98:
 1371              	.L112:
 680:Core/Src/main.c ****   }
 1372              		.loc 1 680 0
 1373 006e FFF7FEFF 		bl	Error_Handler
 1374              	.LVL99:
 1375              	.L113:
 688:Core/Src/main.c ****   }
 1376              		.loc 1 688 0
 1377 0072 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccSIEGwI.s 			page 48


 1378              	.LVL100:
 1379              	.L114:
 692:Core/Src/main.c ****   }
 1380              		.loc 1 692 0
 1381 0076 FFF7FEFF 		bl	Error_Handler
 1382              	.LVL101:
 1383              	.L116:
 1384 007a 00BF     		.align	2
 1385              	.L115:
 1386 007c 00000000 		.word	htim5
 1387 0080 000C0040 		.word	1073744896
 1388              		.cfi_endproc
 1389              	.LFE82:
 1391              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1392              		.align	1
 1393              		.syntax unified
 1394              		.thumb
 1395              		.thumb_func
 1396              		.fpu softvfp
 1398              	MX_TIM2_Init:
 1399              	.LFB80:
 549:Core/Src/main.c **** 
 1400              		.loc 1 549 0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 40
 1403              		@ frame_needed = 0, uses_anonymous_args = 0
 1404 0000 00B5     		push	{lr}
 1405              		.cfi_def_cfa_offset 4
 1406              		.cfi_offset 14, -4
 1407 0002 8BB0     		sub	sp, sp, #44
 1408              		.cfi_def_cfa_offset 48
 555:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1409              		.loc 1 555 0
 1410 0004 0023     		movs	r3, #0
 1411 0006 0893     		str	r3, [sp, #32]
 1412 0008 0993     		str	r3, [sp, #36]
 556:Core/Src/main.c **** 
 1413              		.loc 1 556 0
 1414 000a 0193     		str	r3, [sp, #4]
 1415 000c 0293     		str	r3, [sp, #8]
 1416 000e 0393     		str	r3, [sp, #12]
 1417 0010 0493     		str	r3, [sp, #16]
 1418 0012 0593     		str	r3, [sp, #20]
 1419 0014 0693     		str	r3, [sp, #24]
 1420 0016 0793     		str	r3, [sp, #28]
 561:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 1421              		.loc 1 561 0
 1422 0018 1448     		ldr	r0, .L125
 1423 001a 4FF08042 		mov	r2, #1073741824
 1424 001e 0260     		str	r2, [r0]
 562:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1425              		.loc 1 562 0
 1426 0020 0A22     		movs	r2, #10
 1427 0022 4260     		str	r2, [r0, #4]
 563:Core/Src/main.c ****   htim2.Init.Period = 600;
 1428              		.loc 1 563 0
 1429 0024 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccSIEGwI.s 			page 49


 564:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1430              		.loc 1 564 0
 1431 0026 4FF41672 		mov	r2, #600
 1432 002a C260     		str	r2, [r0, #12]
 565:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1433              		.loc 1 565 0
 1434 002c 0361     		str	r3, [r0, #16]
 566:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 1435              		.loc 1 566 0
 1436 002e 8361     		str	r3, [r0, #24]
 567:Core/Src/main.c ****   {
 1437              		.loc 1 567 0
 1438 0030 FFF7FEFF 		bl	HAL_TIM_OC_Init
 1439              	.LVL102:
 1440 0034 A0B9     		cbnz	r0, .L122
 571:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1441              		.loc 1 571 0
 1442 0036 0023     		movs	r3, #0
 1443 0038 0893     		str	r3, [sp, #32]
 572:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1444              		.loc 1 572 0
 1445 003a 0993     		str	r3, [sp, #36]
 573:Core/Src/main.c ****   {
 1446              		.loc 1 573 0
 1447 003c 08A9     		add	r1, sp, #32
 1448 003e 0B48     		ldr	r0, .L125
 1449 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1450              	.LVL103:
 1451 0044 70B9     		cbnz	r0, .L123
 577:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1452              		.loc 1 577 0
 1453 0046 0022     		movs	r2, #0
 1454 0048 0192     		str	r2, [sp, #4]
 578:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1455              		.loc 1 578 0
 1456 004a 0292     		str	r2, [sp, #8]
 579:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1457              		.loc 1 579 0
 1458 004c 0392     		str	r2, [sp, #12]
 580:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1459              		.loc 1 580 0
 1460 004e 0592     		str	r2, [sp, #20]
 581:Core/Src/main.c ****   {
 1461              		.loc 1 581 0
 1462 0050 01A9     		add	r1, sp, #4
 1463 0052 0648     		ldr	r0, .L125
 1464 0054 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1465              	.LVL104:
 1466 0058 30B9     		cbnz	r0, .L124
 588:Core/Src/main.c **** 
 1467              		.loc 1 588 0
 1468 005a 0BB0     		add	sp, sp, #44
 1469              		.cfi_remember_state
 1470              		.cfi_def_cfa_offset 4
 1471              		@ sp needed
 1472 005c 5DF804FB 		ldr	pc, [sp], #4
 1473              	.L122:
ARM GAS  /tmp/ccSIEGwI.s 			page 50


 1474              		.cfi_restore_state
 569:Core/Src/main.c ****   }
 1475              		.loc 1 569 0
 1476 0060 FFF7FEFF 		bl	Error_Handler
 1477              	.LVL105:
 1478              	.L123:
 575:Core/Src/main.c ****   }
 1479              		.loc 1 575 0
 1480 0064 FFF7FEFF 		bl	Error_Handler
 1481              	.LVL106:
 1482              	.L124:
 583:Core/Src/main.c ****   }
 1483              		.loc 1 583 0
 1484 0068 FFF7FEFF 		bl	Error_Handler
 1485              	.LVL107:
 1486              	.L126:
 1487              		.align	2
 1488              	.L125:
 1489 006c 00000000 		.word	htim2
 1490              		.cfi_endproc
 1491              	.LFE80:
 1493              		.section	.text.MX_IWDG_Init,"ax",%progbits
 1494              		.align	1
 1495              		.syntax unified
 1496              		.thumb
 1497              		.thumb_func
 1498              		.fpu softvfp
 1500              	MX_IWDG_Init:
 1501              	.LFB78:
 458:Core/Src/main.c **** 
 1502              		.loc 1 458 0
 1503              		.cfi_startproc
 1504              		@ args = 0, pretend = 0, frame = 0
 1505              		@ frame_needed = 0, uses_anonymous_args = 0
 1506 0000 08B5     		push	{r3, lr}
 1507              		.cfi_def_cfa_offset 8
 1508              		.cfi_offset 3, -8
 1509              		.cfi_offset 14, -4
 467:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 1510              		.loc 1 467 0
 1511 0002 0748     		ldr	r0, .L131
 1512 0004 074B     		ldr	r3, .L131+4
 1513 0006 0360     		str	r3, [r0]
 468:Core/Src/main.c ****   hiwdg.Init.Reload = 1000; //439
 1514              		.loc 1 468 0
 1515 0008 0123     		movs	r3, #1
 1516 000a 4360     		str	r3, [r0, #4]
 469:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 1517              		.loc 1 469 0
 1518 000c 4FF47A73 		mov	r3, #1000
 1519 0010 8360     		str	r3, [r0, #8]
 470:Core/Src/main.c ****   {
 1520              		.loc 1 470 0
 1521 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 1522              	.LVL108:
 1523 0016 00B9     		cbnz	r0, .L130
 1524 0018 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccSIEGwI.s 			page 51


 1525              	.L130:
 472:Core/Src/main.c ****   }
 1526              		.loc 1 472 0
 1527 001a FFF7FEFF 		bl	Error_Handler
 1528              	.LVL109:
 1529              	.L132:
 1530 001e 00BF     		.align	2
 1531              	.L131:
 1532 0020 00000000 		.word	hiwdg
 1533 0024 00300040 		.word	1073754112
 1534              		.cfi_endproc
 1535              	.LFE78:
 1537              		.section	.text.SystemClock_Config,"ax",%progbits
 1538              		.align	1
 1539              		.global	SystemClock_Config
 1540              		.syntax unified
 1541              		.thumb
 1542              		.thumb_func
 1543              		.fpu softvfp
 1545              	SystemClock_Config:
 1546              	.LFB73:
 254:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1547              		.loc 1 254 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 112
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551 0000 00B5     		push	{lr}
 1552              		.cfi_def_cfa_offset 4
 1553              		.cfi_offset 14, -4
 1554 0002 9DB0     		sub	sp, sp, #116
 1555              		.cfi_def_cfa_offset 120
 255:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1556              		.loc 1 255 0
 1557 0004 3822     		movs	r2, #56
 1558 0006 0021     		movs	r1, #0
 1559 0008 0DEB0200 		add	r0, sp, r2
 1560 000c FFF7FEFF 		bl	memset
 1561              	.LVL110:
 256:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1562              		.loc 1 256 0
 1563 0010 0021     		movs	r1, #0
 1564 0012 0991     		str	r1, [sp, #36]
 1565 0014 0A91     		str	r1, [sp, #40]
 1566 0016 0B91     		str	r1, [sp, #44]
 1567 0018 0C91     		str	r1, [sp, #48]
 1568 001a 0D91     		str	r1, [sp, #52]
 257:Core/Src/main.c **** 
 1569              		.loc 1 257 0
 1570 001c 2022     		movs	r2, #32
 1571 001e 01A8     		add	r0, sp, #4
 1572 0020 FFF7FEFF 		bl	memset
 1573              	.LVL111:
 262:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1574              		.loc 1 262 0
 1575 0024 0923     		movs	r3, #9
 1576 0026 0E93     		str	r3, [sp, #56]
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
ARM GAS  /tmp/ccSIEGwI.s 			page 52


 1577              		.loc 1 263 0
 1578 0028 4FF48033 		mov	r3, #65536
 1579 002c 1093     		str	r3, [sp, #64]
 265:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 1580              		.loc 1 265 0
 1581 002e 0122     		movs	r2, #1
 1582 0030 1392     		str	r2, [sp, #76]
 266:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 1583              		.loc 1 266 0
 1584 0032 1592     		str	r2, [sp, #84]
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1585              		.loc 1 268 0
 1586 0034 0222     		movs	r2, #2
 1587 0036 1692     		str	r2, [sp, #88]
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1588              		.loc 1 269 0
 1589 0038 1793     		str	r3, [sp, #92]
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 1590              		.loc 1 270 0
 1591 003a 4FF4E013 		mov	r3, #1835008
 1592 003e 1893     		str	r3, [sp, #96]
 272:Core/Src/main.c ****   {
 1593              		.loc 1 272 0
 1594 0040 0EA8     		add	r0, sp, #56
 1595 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1596              	.LVL112:
 1597 0046 E0B9     		cbnz	r0, .L138
 278:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1598              		.loc 1 278 0
 1599 0048 0F23     		movs	r3, #15
 1600 004a 0993     		str	r3, [sp, #36]
 279:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1601              		.loc 1 279 0
 1602 004c 0221     		movs	r1, #2
 1603 004e 0A91     		str	r1, [sp, #40]
 280:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1604              		.loc 1 280 0
 1605 0050 0023     		movs	r3, #0
 1606 0052 0B93     		str	r3, [sp, #44]
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1607              		.loc 1 281 0
 1608 0054 4FF48062 		mov	r2, #1024
 1609 0058 0C92     		str	r2, [sp, #48]
 282:Core/Src/main.c **** 
 1610              		.loc 1 282 0
 1611 005a 0D93     		str	r3, [sp, #52]
 284:Core/Src/main.c ****   {
 1612              		.loc 1 284 0
 1613 005c 09A8     		add	r0, sp, #36
 1614 005e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1615              	.LVL113:
 1616 0062 80B9     		cbnz	r0, .L139
 288:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1617              		.loc 1 288 0
 1618 0064 0223     		movs	r3, #2
 1619 0066 0193     		str	r3, [sp, #4]
 289:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
ARM GAS  /tmp/ccSIEGwI.s 			page 53


 1620              		.loc 1 289 0
 1621 0068 4FF40043 		mov	r3, #32768
 1622 006c 0393     		str	r3, [sp, #12]
 290:Core/Src/main.c ****   {
 1623              		.loc 1 290 0
 1624 006e 01A8     		add	r0, sp, #4
 1625 0070 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1626              	.LVL114:
 1627 0074 48B9     		cbnz	r0, .L140
 296:Core/Src/main.c **** }
 1628              		.loc 1 296 0
 1629 0076 0122     		movs	r2, #1
 1630 0078 054B     		ldr	r3, .L141
 1631 007a 1A60     		str	r2, [r3]
 297:Core/Src/main.c **** 
 1632              		.loc 1 297 0
 1633 007c 1DB0     		add	sp, sp, #116
 1634              		.cfi_remember_state
 1635              		.cfi_def_cfa_offset 4
 1636              		@ sp needed
 1637 007e 5DF804FB 		ldr	pc, [sp], #4
 1638              	.L138:
 1639              		.cfi_restore_state
 274:Core/Src/main.c ****   }
 1640              		.loc 1 274 0
 1641 0082 FFF7FEFF 		bl	Error_Handler
 1642              	.LVL115:
 1643              	.L139:
 286:Core/Src/main.c ****   }
 1644              		.loc 1 286 0
 1645 0086 FFF7FEFF 		bl	Error_Handler
 1646              	.LVL116:
 1647              	.L140:
 292:Core/Src/main.c ****   }
 1648              		.loc 1 292 0
 1649 008a FFF7FEFF 		bl	Error_Handler
 1650              	.LVL117:
 1651              	.L142:
 1652 008e 00BF     		.align	2
 1653              	.L141:
 1654 0090 70004242 		.word	1111621744
 1655              		.cfi_endproc
 1656              	.LFE73:
 1658              		.section	.text.main,"ax",%progbits
 1659              		.align	1
 1660              		.global	main
 1661              		.syntax unified
 1662              		.thumb
 1663              		.thumb_func
 1664              		.fpu softvfp
 1666              	main:
 1667              	.LFB72:
 134:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1668              		.loc 1 134 0
 1669              		.cfi_startproc
 1670              		@ Volatile: function does not return.
 1671              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccSIEGwI.s 			page 54


 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 1673 0000 08B5     		push	{r3, lr}
 1674              		.cfi_def_cfa_offset 8
 1675              		.cfi_offset 3, -8
 1676              		.cfi_offset 14, -4
 142:Core/Src/main.c **** 
 1677              		.loc 1 142 0
 1678 0002 FFF7FEFF 		bl	HAL_Init
 1679              	.LVL118:
 149:Core/Src/main.c **** 
 1680              		.loc 1 149 0
 1681 0006 FFF7FEFF 		bl	SystemClock_Config
 1682              	.LVL119:
 156:Core/Src/main.c ****   MX_DMA_Init();
 1683              		.loc 1 156 0
 1684 000a FFF7FEFF 		bl	MX_GPIO_Init
 1685              	.LVL120:
 157:Core/Src/main.c ****   MX_CAN2_Init();
 1686              		.loc 1 157 0
 1687 000e FFF7FEFF 		bl	MX_DMA_Init
 1688              	.LVL121:
 158:Core/Src/main.c ****   MX_ADC1_Init();
 1689              		.loc 1 158 0
 1690 0012 FFF7FEFF 		bl	MX_CAN2_Init
 1691              	.LVL122:
 159:Core/Src/main.c ****   MX_CAN1_Init();
 1692              		.loc 1 159 0
 1693 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1694              	.LVL123:
 160:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 1695              		.loc 1 160 0
 1696 001a FFF7FEFF 		bl	MX_CAN1_Init
 1697              	.LVL124:
 162:Core/Src/main.c ****   MX_USART1_UART_Init();
 1698              		.loc 1 162 0
 1699 001e FFF7FEFF 		bl	MX_UART4_Init
 1700              	.LVL125:
 163:Core/Src/main.c ****   MX_TIM3_Init();
 1701              		.loc 1 163 0
 1702 0022 FFF7FEFF 		bl	MX_USART1_UART_Init
 1703              	.LVL126:
 164:Core/Src/main.c ****   MX_TIM1_Init();
 1704              		.loc 1 164 0
 1705 0026 FFF7FEFF 		bl	MX_TIM3_Init
 1706              	.LVL127:
 165:Core/Src/main.c ****   MX_TIM5_Init();
 1707              		.loc 1 165 0
 1708 002a FFF7FEFF 		bl	MX_TIM1_Init
 1709              	.LVL128:
 166:Core/Src/main.c ****   MX_TIM2_Init();
 1710              		.loc 1 166 0
 1711 002e FFF7FEFF 		bl	MX_TIM5_Init
 1712              	.LVL129:
 167:Core/Src/main.c ****   MX_IWDG_Init();
 1713              		.loc 1 167 0
 1714 0032 FFF7FEFF 		bl	MX_TIM2_Init
 1715              	.LVL130:
ARM GAS  /tmp/ccSIEGwI.s 			page 55


 168:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1716              		.loc 1 168 0
 1717 0036 FFF7FEFF 		bl	MX_IWDG_Init
 1718              	.LVL131:
 170:Core/Src/main.c ****   gaugeInit();
 1719              		.loc 1 170 0
 1720 003a FFF7FEFF 		bl	canSettings
 1721              	.LVL132:
 171:Core/Src/main.c ****   dcdcInit();
 1722              		.loc 1 171 0
 1723 003e FFF7FEFF 		bl	gaugeInit
 1724              	.LVL133:
 172:Core/Src/main.c ****   vcuInit();
 1725              		.loc 1 172 0
 1726 0042 FFF7FEFF 		bl	dcdcInit
 1727              	.LVL134:
 173:Core/Src/main.c ****   wpInit();
 1728              		.loc 1 173 0
 1729 0046 FFF7FEFF 		bl	vcuInit
 1730              	.LVL135:
 174:Core/Src/main.c **** 
 1731              		.loc 1 174 0
 1732 004a FFF7FEFF 		bl	wpInit
 1733              	.LVL136:
 176:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); // water pump pw
 1734              		.loc 1 176 0
 1735 004e 2C4C     		ldr	r4, .L146
 1736 0050 2046     		mov	r0, r4
 1737 0052 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1738              	.LVL137:
 177:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1739              		.loc 1 177 0
 1740 0056 2B4D     		ldr	r5, .L146+4
 1741 0058 6423     		movs	r3, #100
 1742 005a 2A46     		mov	r2, r5
 1743 005c 2A49     		ldr	r1, .L146+8
 1744 005e 2B48     		ldr	r0, .L146+12
 1745 0060 FFF7FEFF 		bl	HAL_DMA_Start
 1746              	.LVL138:
 178:Core/Src/main.c **** 
 1747              		.loc 1 178 0
 1748 0064 2268     		ldr	r2, [r4]
 1749 0066 D368     		ldr	r3, [r2, #12]
 1750 0068 43F40073 		orr	r3, r3, #512
 1751 006c D360     		str	r3, [r2, #12]
 180:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 1752              		.loc 1 180 0
 1753 006e 284C     		ldr	r4, .L146+16
 1754 0070 2046     		mov	r0, r4
 1755 0072 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1756              	.LVL139:
 181:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 1757              		.loc 1 181 0
 1758 0076 6423     		movs	r3, #100
 1759 0078 2A46     		mov	r2, r5
 1760 007a 2649     		ldr	r1, .L146+20
 1761 007c 2648     		ldr	r0, .L146+24
ARM GAS  /tmp/ccSIEGwI.s 			page 56


 1762 007e FFF7FEFF 		bl	HAL_DMA_Start
 1763              	.LVL140:
 182:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 1764              		.loc 1 182 0
 1765 0082 2268     		ldr	r2, [r4]
 1766 0084 D368     		ldr	r3, [r2, #12]
 1767 0086 43F40073 		orr	r3, r3, #512
 1768 008a D360     		str	r3, [r2, #12]
 183:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 1769              		.loc 1 183 0
 1770 008c 4FF47A73 		mov	r3, #1000
 1771 0090 2A46     		mov	r2, r5
 1772 0092 2249     		ldr	r1, .L146+28
 1773 0094 2248     		ldr	r0, .L146+32
 1774 0096 FFF7FEFF 		bl	HAL_DMA_Start
 1775              	.LVL141:
 184:Core/Src/main.c **** 
 1776              		.loc 1 184 0
 1777 009a 2268     		ldr	r2, [r4]
 1778 009c D368     		ldr	r3, [r2, #12]
 1779 009e 43F48063 		orr	r3, r3, #1024
 1780 00a2 D360     		str	r3, [r2, #12]
 186:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 1781              		.loc 1 186 0
 1782 00a4 0021     		movs	r1, #0
 1783 00a6 1F48     		ldr	r0, .L146+36
 1784 00a8 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1785              	.LVL142:
 187:Core/Src/main.c **** 
 1786              		.loc 1 187 0
 1787 00ac 0821     		movs	r1, #8
 1788 00ae 1E48     		ldr	r0, .L146+40
 1789 00b0 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1790              	.LVL143:
 189:Core/Src/main.c **** 
 1791              		.loc 1 189 0
 1792 00b4 0322     		movs	r2, #3
 1793 00b6 1D49     		ldr	r1, .L146+44
 1794 00b8 1D48     		ldr	r0, .L146+48
 1795 00ba FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1796              	.LVL144:
 194:Core/Src/main.c **** 
 1797              		.loc 1 194 0
 1798 00be FFF7FEFF 		bl	osKernelInitialize
 1799              	.LVL145:
 214:Core/Src/main.c **** 
 1800              		.loc 1 214 0
 1801 00c2 1C4A     		ldr	r2, .L146+52
 1802 00c4 0021     		movs	r1, #0
 1803 00c6 1C48     		ldr	r0, .L146+56
 1804 00c8 FFF7FEFF 		bl	osThreadNew
 1805              	.LVL146:
 1806 00cc 1B4B     		ldr	r3, .L146+60
 1807 00ce 1860     		str	r0, [r3]
 217:Core/Src/main.c **** 
 1808              		.loc 1 217 0
 1809 00d0 1B4A     		ldr	r2, .L146+64
ARM GAS  /tmp/ccSIEGwI.s 			page 57


 1810 00d2 0021     		movs	r1, #0
 1811 00d4 1B48     		ldr	r0, .L146+68
 1812 00d6 FFF7FEFF 		bl	osThreadNew
 1813              	.LVL147:
 1814 00da 1B4B     		ldr	r3, .L146+72
 1815 00dc 1860     		str	r0, [r3]
 220:Core/Src/main.c **** 
 1816              		.loc 1 220 0
 1817 00de 1B4A     		ldr	r2, .L146+76
 1818 00e0 0021     		movs	r1, #0
 1819 00e2 1B48     		ldr	r0, .L146+80
 1820 00e4 FFF7FEFF 		bl	osThreadNew
 1821              	.LVL148:
 1822 00e8 1A4B     		ldr	r3, .L146+84
 1823 00ea 1860     		str	r0, [r3]
 223:Core/Src/main.c **** 
 1824              		.loc 1 223 0
 1825 00ec 1A4A     		ldr	r2, .L146+88
 1826 00ee 0021     		movs	r1, #0
 1827 00f0 1A48     		ldr	r0, .L146+92
 1828 00f2 FFF7FEFF 		bl	osThreadNew
 1829              	.LVL149:
 1830 00f6 1A4B     		ldr	r3, .L146+96
 1831 00f8 1860     		str	r0, [r3]
 234:Core/Src/main.c **** 
 1832              		.loc 1 234 0
 1833 00fa FFF7FEFF 		bl	osKernelStart
 1834              	.LVL150:
 1835              	.L144:
 1836 00fe FEE7     		b	.L144
 1837              	.L147:
 1838              		.align	2
 1839              	.L146:
 1840 0100 00000000 		.word	htim2
 1841 0104 10100140 		.word	1073811472
 1842 0108 00000000 		.word	waterPWM
 1843 010c 00000000 		.word	hdma_tim2_ch1
 1844 0110 00000000 		.word	htim5
 1845 0114 00000000 		.word	tempPWM
 1846 0118 00000000 		.word	hdma_tim5_ch1
 1847 011c 00000000 		.word	socPWM
 1848 0120 00000000 		.word	hdma_tim5_ch2
 1849 0124 00000000 		.word	htim1
 1850 0128 00000000 		.word	htim3
 1851 012c 00000000 		.word	ADC_data
 1852 0130 00000000 		.word	hadc1
 1853 0134 00000000 		.word	.LANCHOR0
 1854 0138 00000000 		.word	StartTaskLoop
 1855 013c 00000000 		.word	TaskLoopHandle
 1856 0140 00000000 		.word	.LANCHOR1
 1857 0144 00000000 		.word	StartTask10ms
 1858 0148 00000000 		.word	Task10msHandle
 1859 014c 00000000 		.word	.LANCHOR2
 1860 0150 00000000 		.word	StartTask100ms
 1861 0154 00000000 		.word	Task100msHandle
 1862 0158 00000000 		.word	.LANCHOR3
 1863 015c 00000000 		.word	StartTask250ms
ARM GAS  /tmp/ccSIEGwI.s 			page 58


 1864 0160 00000000 		.word	Task250msHandle
 1865              		.cfi_endproc
 1866              	.LFE72:
 1868              		.global	Task250ms_attributes
 1869              		.comm	Task250msHandle,4,4
 1870              		.global	Task100ms_attributes
 1871              		.comm	Task100msHandle,4,4
 1872              		.global	Task10ms_attributes
 1873              		.comm	Task10msHandle,4,4
 1874              		.global	TaskLoop_attributes
 1875              		.comm	TaskLoopHandle,4,4
 1876              		.comm	huart4,64,4
 1877              		.comm	hdma_tim5_ch2,68,4
 1878              		.comm	hdma_tim5_ch1,68,4
 1879              		.comm	hdma_tim2_ch1,68,4
 1880              		.comm	htim5,72,4
 1881              		.comm	htim3,72,4
 1882              		.comm	htim2,72,4
 1883              		.comm	htim1,72,4
 1884              		.comm	hiwdg,12,4
 1885              		.comm	hdma_adc1,68,4
 1886              		.comm	hadc1,48,4
 1887              		.comm	waterPWM,400,4
 1888              		.comm	socPWM,4000,4
 1889              		.comm	tempPWM,400,4
 1890              		.comm	canDebug,4,4
 1891              		.comm	txCycle2,4,4
 1892              		.comm	txCycle,4,4
 1893              		.comm	canTx2,8,4
 1894              		.comm	canTx,8,4
 1895              		.comm	canMailbox2,4,4
 1896              		.comm	canMailbox,4,4
 1897              		.comm	canRx2,8,4
 1898              		.comm	canRx,8,4
 1899              		.comm	txMsgExt2,24,4
 1900              		.comm	txMsg2,24,4
 1901              		.comm	rxMsg2,28,4
 1902              		.comm	txMsgExt,24,4
 1903              		.comm	txMsg,24,4
 1904              		.comm	rxMsg,28,4
 1905              		.comm	sf5,40,4
 1906              		.comm	sf4,40,4
 1907              		.comm	sf3,40,4
 1908              		.comm	sf2,40,4
 1909              		.comm	sf,40,4
 1910              		.comm	hcan2,40,4
 1911              		.comm	hcan1,40,4
 1912              		.comm	LIDAR,8,4
 1913              		.comm	te,12,4
 1914              		.comm	BMS,20,4
 1915              		.comm	charger,3,4
 1916              		.comm	vcu,7,4
 1917              		.comm	iboost,2,4
 1918              		.comm	ldu,18,4
 1919              		.comm	tempdata,4,4
 1920              		.comm	ADC_data,12,4
 1921              		.comm	tenderActive,1,1
ARM GAS  /tmp/ccSIEGwI.s 			page 59


 1922              		.comm	time_now,4,4
 1923              		.comm	period,4,4
 1924              		.comm	DCDC,4,4
 1925              		.comm	huart1,64,4
 1926              		.section	.rodata.Task100ms_attributes,"a",%progbits
 1927              		.align	2
 1928              		.set	.LANCHOR2,. + 0
 1931              	Task100ms_attributes:
 1932 0000 0C000000 		.word	.LC1
 1933 0004 00000000 		.space	16
 1933      00000000 
 1933      00000000 
 1933      00000000 
 1934 0014 00020000 		.word	512
 1935 0018 18000000 		.word	24
 1936 001c 00000000 		.space	8
 1936      00000000 
 1937              		.section	.rodata.Task10ms_attributes,"a",%progbits
 1938              		.align	2
 1939              		.set	.LANCHOR1,. + 0
 1942              	Task10ms_attributes:
 1943 0000 18000000 		.word	.LC2
 1944 0004 00000000 		.space	16
 1944      00000000 
 1944      00000000 
 1944      00000000 
 1945 0014 00020000 		.word	512
 1946 0018 18000000 		.word	24
 1947 001c 00000000 		.space	8
 1947      00000000 
 1948              		.section	.rodata.Task250ms_attributes,"a",%progbits
 1949              		.align	2
 1950              		.set	.LANCHOR3,. + 0
 1953              	Task250ms_attributes:
 1954 0000 00000000 		.word	.LC0
 1955 0004 00000000 		.space	16
 1955      00000000 
 1955      00000000 
 1955      00000000 
 1956 0014 00020000 		.word	512
 1957 0018 18000000 		.word	24
 1958 001c 00000000 		.space	8
 1958      00000000 
 1959              		.section	.rodata.TaskLoop_attributes,"a",%progbits
 1960              		.align	2
 1961              		.set	.LANCHOR0,. + 0
 1964              	TaskLoop_attributes:
 1965 0000 24000000 		.word	.LC3
 1966 0004 00000000 		.space	16
 1966      00000000 
 1966      00000000 
 1966      00000000 
 1967 0014 00020000 		.word	512
 1968 0018 18000000 		.word	24
 1969 001c 00000000 		.space	8
 1969      00000000 
 1970              		.section	.rodata.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccSIEGwI.s 			page 60


 1971              		.align	2
 1972              	.LC0:
 1973 0000 5461736B 		.ascii	"Task250ms\000"
 1973      3235306D 
 1973      7300
 1974 000a 0000     		.space	2
 1975              	.LC1:
 1976 000c 5461736B 		.ascii	"Task100ms\000"
 1976      3130306D 
 1976      7300
 1977 0016 0000     		.space	2
 1978              	.LC2:
 1979 0018 5461736B 		.ascii	"Task10ms\000"
 1979      31306D73 
 1979      00
 1980 0021 000000   		.space	3
 1981              	.LC3:
 1982 0024 5461736B 		.ascii	"TaskLoop\000"
 1982      4C6F6F70 
 1982      00
 1983              		.text
 1984              	.Letext0:
 1985              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1986              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 1987              		.file 6 "Drivers/CMSIS/Include/core_cm3.h"
 1988              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1989              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 1990              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1991              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1992              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1993              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1994              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1995              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1996              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1997              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1998              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 1999              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2000              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 2001              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2002              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 2003              		.file 22 "/usr/include/newlib/sys/lock.h"
 2004              		.file 23 "/usr/include/newlib/sys/_types.h"
 2005              		.file 24 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2006              		.file 25 "/usr/include/newlib/sys/reent.h"
 2007              		.file 26 "Core/Inc/dcdc.h"
 2008              		.file 27 "Core/Inc/vcu.h"
 2009              		.file 28 "Core/Inc/encoder.h"
 2010              		.file 29 "Core/Inc/lidar.h"
 2011              		.file 30 "Core/Inc/can_setup.h"
 2012              		.file 31 "Core/Inc/gauges.h"
 2013              		.file 32 "Core/Inc/water_pump.h"
 2014              		.file 33 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 2015              		.file 34 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2016              		.file 35 "Core/Inc/main.h"
ARM GAS  /tmp/ccSIEGwI.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccSIEGwI.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccSIEGwI.s:165    .text.MX_GPIO_Init:00000000000000d4 $d
     /tmp/ccSIEGwI.s:172    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:178    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccSIEGwI.s:258    .text.MX_DMA_Init:0000000000000070 $d
     /tmp/ccSIEGwI.s:263    .text.StartTaskLoop:0000000000000000 $t
     /tmp/ccSIEGwI.s:270    .text.StartTaskLoop:0000000000000000 StartTaskLoop
     /tmp/ccSIEGwI.s:302    .text.StartTask10ms:0000000000000000 $t
     /tmp/ccSIEGwI.s:309    .text.StartTask10ms:0000000000000000 StartTask10ms
     /tmp/ccSIEGwI.s:348    .text.StartTask10ms:0000000000000024 $d
                            *COM*:0000000000000007 vcu
     /tmp/ccSIEGwI.s:353    .text.StartTask100ms:0000000000000000 $t
     /tmp/ccSIEGwI.s:360    .text.StartTask100ms:0000000000000000 StartTask100ms
     /tmp/ccSIEGwI.s:397    .text.StartTask100ms:0000000000000024 $d
                            *COM*:0000000000000012 ldu
                            *COM*:000000000000000c hiwdg
     /tmp/ccSIEGwI.s:403    .text.StartTask250ms:0000000000000000 $t
     /tmp/ccSIEGwI.s:410    .text.StartTask250ms:0000000000000000 StartTask250ms
     /tmp/ccSIEGwI.s:454    .text.StartTask250ms:0000000000000030 $d
                            *COM*:0000000000000014 BMS
     /tmp/ccSIEGwI.s:461    .text.__io_putchar:0000000000000000 $t
     /tmp/ccSIEGwI.s:468    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/ccSIEGwI.s:503    .text.__io_putchar:000000000000001c $d
                            *COM*:0000000000000040 huart1
     /tmp/ccSIEGwI.s:508    .text._write:0000000000000000 $t
     /tmp/ccSIEGwI.s:515    .text._write:0000000000000000 _write
     /tmp/ccSIEGwI.s:558    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccSIEGwI.s:565    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccSIEGwI.s:594    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccSIEGwI.s:599    .text.Error_Handler:0000000000000000 $t
     /tmp/ccSIEGwI.s:606    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccSIEGwI.s:632    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:638    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/ccSIEGwI.s:691    .text.MX_CAN2_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan2
     /tmp/ccSIEGwI.s:697    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:703    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccSIEGwI.s:811    .text.MX_ADC1_Init:0000000000000088 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccSIEGwI.s:817    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:823    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccSIEGwI.s:876    .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccSIEGwI.s:882    .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:888    .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccSIEGwI.s:931    .text.MX_UART4_Init:000000000000002c $d
                            *COM*:0000000000000040 huart4
     /tmp/ccSIEGwI.s:937    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:943    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccSIEGwI.s:986    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccSIEGwI.s:992    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:998    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccSIEGwI.s:1122   .text.MX_TIM3_Init:00000000000000a0 $d
                            *COM*:0000000000000048 htim3
ARM GAS  /tmp/ccSIEGwI.s 			page 62


     /tmp/ccSIEGwI.s:1128   .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:1134   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccSIEGwI.s:1272   .text.MX_TIM1_Init:00000000000000a8 $d
                            *COM*:0000000000000048 htim1
     /tmp/ccSIEGwI.s:1278   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:1284   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccSIEGwI.s:1386   .text.MX_TIM5_Init:000000000000007c $d
                            *COM*:0000000000000048 htim5
     /tmp/ccSIEGwI.s:1392   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:1398   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccSIEGwI.s:1489   .text.MX_TIM2_Init:000000000000006c $d
                            *COM*:0000000000000048 htim2
     /tmp/ccSIEGwI.s:1494   .text.MX_IWDG_Init:0000000000000000 $t
     /tmp/ccSIEGwI.s:1500   .text.MX_IWDG_Init:0000000000000000 MX_IWDG_Init
     /tmp/ccSIEGwI.s:1532   .text.MX_IWDG_Init:0000000000000020 $d
     /tmp/ccSIEGwI.s:1538   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccSIEGwI.s:1545   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccSIEGwI.s:1654   .text.SystemClock_Config:0000000000000090 $d
     /tmp/ccSIEGwI.s:1659   .text.main:0000000000000000 $t
     /tmp/ccSIEGwI.s:1666   .text.main:0000000000000000 main
     /tmp/ccSIEGwI.s:1840   .text.main:0000000000000100 $d
                            *COM*:0000000000000190 waterPWM
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000190 tempPWM
                            *COM*:0000000000000044 hdma_tim5_ch1
                            *COM*:0000000000000fa0 socPWM
                            *COM*:0000000000000044 hdma_tim5_ch2
                            *COM*:000000000000000c ADC_data
                            *COM*:0000000000000004 TaskLoopHandle
                            *COM*:0000000000000004 Task10msHandle
                            *COM*:0000000000000004 Task100msHandle
                            *COM*:0000000000000004 Task250msHandle
     /tmp/ccSIEGwI.s:1953   .rodata.Task250ms_attributes:0000000000000000 Task250ms_attributes
     /tmp/ccSIEGwI.s:1931   .rodata.Task100ms_attributes:0000000000000000 Task100ms_attributes
     /tmp/ccSIEGwI.s:1942   .rodata.Task10ms_attributes:0000000000000000 Task10ms_attributes
     /tmp/ccSIEGwI.s:1964   .rodata.TaskLoop_attributes:0000000000000000 TaskLoop_attributes
                            *COM*:0000000000000044 hdma_adc1
                            *COM*:0000000000000004 canDebug
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000008 canTx2
                            *COM*:0000000000000008 canTx
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
ARM GAS  /tmp/ccSIEGwI.s 			page 63


                            *COM*:0000000000000008 LIDAR
                            *COM*:000000000000000c te
                            *COM*:0000000000000003 charger
                            *COM*:0000000000000002 iboost
                            *COM*:0000000000000004 tempdata
                            *COM*:0000000000000001 tenderActive
                            *COM*:0000000000000004 time_now
                            *COM*:0000000000000004 period
                            *COM*:0000000000000004 DCDC
     /tmp/ccSIEGwI.s:1927   .rodata.Task100ms_attributes:0000000000000000 $d
     /tmp/ccSIEGwI.s:1938   .rodata.Task10ms_attributes:0000000000000000 $d
     /tmp/ccSIEGwI.s:1949   .rodata.Task250ms_attributes:0000000000000000 $d
     /tmp/ccSIEGwI.s:1960   .rodata.TaskLoop_attributes:0000000000000000 $d
     /tmp/ccSIEGwI.s:1971   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
wpHandler
vcuState
ioHandler
osDelay
throttleHandler
canIOsend
regenHandler
brakeHandler
dcdcHandler
updateSpeed
updateTach
HAL_IWDG_Refresh
HAL_GPIO_TogglePin
updateTemp
updateSOC
vehicleComms
encoderHandler
HAL_UART_Transmit
HAL_IncTick
HAL_CAN_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
memset
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_OC_Init
HAL_TIM_OC_ConfigChannel
HAL_IWDG_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /tmp/ccSIEGwI.s 			page 64


HAL_RCCEx_PeriphCLKConfig
HAL_Init
canSettings
gaugeInit
dcdcInit
vcuInit
wpInit
HAL_TIM_Base_Start
HAL_DMA_Start
HAL_TIM_PWM_Start
HAL_ADC_Start_DMA
osKernelInitialize
osThreadNew
osKernelStart
