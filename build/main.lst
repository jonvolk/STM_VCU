ARM GAS  /tmp/ccXFel8e.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB85:
  24              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** #include "print_uart.h"
  28:Core/Src/main.c **** #include "can_setup.h"
  29:Core/Src/main.c **** #include "FreeRTOS.h"
  30:Core/Src/main.c **** #include "task.h" //needed for delayuntil
  31:Core/Src/main.c **** #include "gauges.h"
  32:Core/Src/main.c **** #include "vcu.h"
  33:Core/Src/main.c **** #include "test.h"
  34:Core/Src/main.c **** #include "water_pump.h"
ARM GAS  /tmp/ccXFel8e.s 			page 2


  35:Core/Src/main.c **** #include "dcdc.h"
  36:Core/Src/main.c **** /* USER CODE END Includes */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PTD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PD */
  45:Core/Src/main.c **** /* USER CODE END PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  53:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  54:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  57:Core/Src/main.c **** CAN_HandleTypeDef hcan2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  60:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  61:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  62:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  63:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_ch1;
  64:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch1;
  65:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim5_ch2;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** UART_HandleTypeDef huart4;
  68:Core/Src/main.c **** UART_HandleTypeDef huart1;
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Definitions for TaskLoop */
  71:Core/Src/main.c **** osThreadId_t TaskLoopHandle;
  72:Core/Src/main.c **** const osThreadAttr_t TaskLoop_attributes = {
  73:Core/Src/main.c ****     .name = "TaskLoop",
  74:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  75:Core/Src/main.c ****     .stack_size = 128 * 4};
  76:Core/Src/main.c **** /* Definitions for Task10ms */
  77:Core/Src/main.c **** osThreadId_t Task10msHandle;
  78:Core/Src/main.c **** const osThreadAttr_t Task10ms_attributes = {
  79:Core/Src/main.c ****     .name = "Task10ms",
  80:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityRealtime7,
  81:Core/Src/main.c ****     .stack_size = 128 * 4};
  82:Core/Src/main.c **** /* Definitions for Task100ms */
  83:Core/Src/main.c **** osThreadId_t Task100msHandle;
  84:Core/Src/main.c **** const osThreadAttr_t Task100ms_attributes = {
  85:Core/Src/main.c ****     .name = "Task100ms",
  86:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityRealtime,
  87:Core/Src/main.c ****     .stack_size = 128 * 4};
  88:Core/Src/main.c **** /* Definitions for Task250ms */
  89:Core/Src/main.c **** osThreadId_t Task250msHandle;
  90:Core/Src/main.c **** const osThreadAttr_t Task250ms_attributes = {
  91:Core/Src/main.c ****     .name = "Task250ms",
ARM GAS  /tmp/ccXFel8e.s 			page 3


  92:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityHigh,
  93:Core/Src/main.c ****     .stack_size = 128 * 4};
  94:Core/Src/main.c **** /* USER CODE BEGIN PV */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** /* USER CODE END PV */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  99:Core/Src/main.c **** void SystemClock_Config(void);
 100:Core/Src/main.c **** static void MX_GPIO_Init(void);
 101:Core/Src/main.c **** static void MX_DMA_Init(void);
 102:Core/Src/main.c **** static void MX_CAN2_Init(void);
 103:Core/Src/main.c **** static void MX_ADC1_Init(void);
 104:Core/Src/main.c **** static void MX_CAN1_Init(void);
 105:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void);
 106:Core/Src/main.c **** static void MX_UART4_Init(void);
 107:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 108:Core/Src/main.c **** static void MX_TIM3_Init(void);
 109:Core/Src/main.c **** static void MX_TIM1_Init(void);
 110:Core/Src/main.c **** static void MX_TIM5_Init(void);
 111:Core/Src/main.c **** static void MX_TIM2_Init(void);
 112:Core/Src/main.c **** void StartTaskLoop(void *argument);
 113:Core/Src/main.c **** void StartTask10ms(void *argument);
 114:Core/Src/main.c **** void StartTask100ms(void *argument);
 115:Core/Src/main.c **** void StartTask250ms(void *argument);
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /* USER CODE END PFP */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 122:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /* USER CODE END 0 */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** /**
 127:Core/Src/main.c ****   * @brief  The application entry point.
 128:Core/Src/main.c ****   * @retval int
 129:Core/Src/main.c ****   */
 130:Core/Src/main.c **** int main(void)
 131:Core/Src/main.c **** {
 132:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /* USER CODE END 1 */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 139:Core/Src/main.c ****   HAL_Init();
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* USER CODE END Init */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* Configure the system clock */
 146:Core/Src/main.c ****   SystemClock_Config();
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
ARM GAS  /tmp/ccXFel8e.s 			page 4


 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /* USER CODE END SysInit */
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* Initialize all configured peripherals */
 153:Core/Src/main.c ****   MX_GPIO_Init();
 154:Core/Src/main.c ****   MX_DMA_Init();
 155:Core/Src/main.c ****   MX_CAN2_Init();
 156:Core/Src/main.c ****   MX_ADC1_Init();
 157:Core/Src/main.c ****   MX_CAN1_Init();
 158:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 159:Core/Src/main.c ****   MX_UART4_Init();
 160:Core/Src/main.c ****   MX_USART1_UART_Init();
 161:Core/Src/main.c ****   MX_TIM3_Init();
 162:Core/Src/main.c ****   MX_TIM1_Init();
 163:Core/Src/main.c ****   MX_TIM5_Init();
 164:Core/Src/main.c ****   MX_TIM2_Init();
 165:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 166:Core/Src/main.c ****   canSettings();
 167:Core/Src/main.c ****   gaugeInit();
 168:Core/Src/main.c ****   dcdcInit();
 169:Core/Src/main.c ****   vcuInit();
 170:Core/Src/main.c ****   wpInit();
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 173:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); //water pump pwm
 174:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim5);
 177:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 178:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 179:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 180:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Tach pwm start
 183:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, ADC_data, 3);
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /* USER CODE END 2 */
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* Init scheduler */
 190:Core/Src/main.c ****   osKernelInitialize();
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 193:Core/Src/main.c ****   /* add mutexes, ... */
 194:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 197:Core/Src/main.c ****   /* add semaphores, ... */
 198:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 201:Core/Src/main.c ****   /* start timers, add new ones, ... */
 202:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 205:Core/Src/main.c ****   /* add queues, ... */
ARM GAS  /tmp/ccXFel8e.s 			page 5


 206:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* Create the thread(s) */
 209:Core/Src/main.c ****   /* creation of TaskLoop */
 210:Core/Src/main.c ****   TaskLoopHandle = osThreadNew(StartTaskLoop, NULL, &TaskLoop_attributes);
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* creation of Task10ms */
 213:Core/Src/main.c ****   Task10msHandle = osThreadNew(StartTask10ms, NULL, &Task10ms_attributes);
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* creation of Task100ms */
 216:Core/Src/main.c ****   Task100msHandle = osThreadNew(StartTask100ms, NULL, &Task100ms_attributes);
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* creation of Task250ms */
 219:Core/Src/main.c ****   Task250msHandle = osThreadNew(StartTask250ms, NULL, &Task250ms_attributes);
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 222:Core/Src/main.c ****   /* add threads, ... */
 223:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 226:Core/Src/main.c ****   /* add events, ... */
 227:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* Start scheduler */
 230:Core/Src/main.c ****   osKernelStart();
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 233:Core/Src/main.c ****   /* Infinite loop */
 234:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 235:Core/Src/main.c ****   while (1)
 236:Core/Src/main.c ****   {
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****     /* USER CODE END WHILE */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 241:Core/Src/main.c ****   }
 242:Core/Src/main.c ****   /* USER CODE END 3 */
 243:Core/Src/main.c **** }
 244:Core/Src/main.c **** 
 245:Core/Src/main.c **** /**
 246:Core/Src/main.c ****   * @brief System Clock Configuration
 247:Core/Src/main.c ****   * @retval None
 248:Core/Src/main.c ****   */
 249:Core/Src/main.c **** void SystemClock_Config(void)
 250:Core/Src/main.c **** {
 251:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 252:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 253:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 256:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 257:Core/Src/main.c ****   */
 258:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 259:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 260:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 261:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 262:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
ARM GAS  /tmp/ccXFel8e.s 			page 6


 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 267:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 268:Core/Src/main.c ****   {
 269:Core/Src/main.c ****     Error_Handler();
 270:Core/Src/main.c ****   }
 271:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 272:Core/Src/main.c ****   */
 273:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 274:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 275:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 276:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 277:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 280:Core/Src/main.c ****   {
 281:Core/Src/main.c ****     Error_Handler();
 282:Core/Src/main.c ****   }
 283:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 284:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 285:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 286:Core/Src/main.c ****   {
 287:Core/Src/main.c ****     Error_Handler();
 288:Core/Src/main.c ****   }
 289:Core/Src/main.c ****   /** Configure the Systick interrupt time
 290:Core/Src/main.c ****   */
 291:Core/Src/main.c ****   __HAL_RCC_PLLI2S_ENABLE();
 292:Core/Src/main.c **** }
 293:Core/Src/main.c **** 
 294:Core/Src/main.c **** /**
 295:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 296:Core/Src/main.c ****   * @param None
 297:Core/Src/main.c ****   * @retval None
 298:Core/Src/main.c ****   */
 299:Core/Src/main.c **** static void MX_ADC1_Init(void)
 300:Core/Src/main.c **** {
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 311:Core/Src/main.c ****   /** Common config
 312:Core/Src/main.c ****   */
 313:Core/Src/main.c ****   hadc1.Instance = ADC1;
 314:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 315:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 316:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 317:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 318:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 319:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
ARM GAS  /tmp/ccXFel8e.s 			page 7


 320:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 321:Core/Src/main.c ****   {
 322:Core/Src/main.c ****     Error_Handler();
 323:Core/Src/main.c ****   }
 324:Core/Src/main.c ****   /** Configure Regular Channel
 325:Core/Src/main.c ****   */
 326:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_11;
 327:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 328:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 329:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 330:Core/Src/main.c ****   {
 331:Core/Src/main.c ****     Error_Handler();
 332:Core/Src/main.c ****   }
 333:Core/Src/main.c ****   /** Configure Regular Channel
 334:Core/Src/main.c ****   */
 335:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 336:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 337:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 338:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 339:Core/Src/main.c ****   {
 340:Core/Src/main.c ****     Error_Handler();
 341:Core/Src/main.c ****   }
 342:Core/Src/main.c ****   /** Configure Regular Channel
 343:Core/Src/main.c ****   */
 344:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 345:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 346:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 347:Core/Src/main.c ****   {
 348:Core/Src/main.c ****     Error_Handler();
 349:Core/Src/main.c ****   }
 350:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 353:Core/Src/main.c **** }
 354:Core/Src/main.c **** 
 355:Core/Src/main.c **** /**
 356:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 357:Core/Src/main.c ****   * @param None
 358:Core/Src/main.c ****   * @retval None
 359:Core/Src/main.c ****   */
 360:Core/Src/main.c **** static void MX_CAN1_Init(void)
 361:Core/Src/main.c **** {
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 370:Core/Src/main.c ****   hcan1.Instance = CAN1;
 371:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 372:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 373:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 374:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 375:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 376:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
ARM GAS  /tmp/ccXFel8e.s 			page 8


 377:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 378:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 379:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 380:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 381:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 382:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 383:Core/Src/main.c ****   {
 384:Core/Src/main.c ****     Error_Handler();
 385:Core/Src/main.c ****   }
 386:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 387:Core/Src/main.c **** 
 388:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 389:Core/Src/main.c **** }
 390:Core/Src/main.c **** 
 391:Core/Src/main.c **** /**
 392:Core/Src/main.c ****   * @brief CAN2 Initialization Function
 393:Core/Src/main.c ****   * @param None
 394:Core/Src/main.c ****   * @retval None
 395:Core/Src/main.c ****   */
 396:Core/Src/main.c **** static void MX_CAN2_Init(void)
 397:Core/Src/main.c **** {
 398:Core/Src/main.c **** 
 399:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 0 */
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /* USER CODE END CAN2_Init 0 */
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 1 */
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /* USER CODE END CAN2_Init 1 */
 406:Core/Src/main.c ****   hcan2.Instance = CAN2;
 407:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 408:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 409:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 410:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 411:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 412:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 413:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 414:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 415:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 416:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 417:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 418:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 419:Core/Src/main.c ****   {
 420:Core/Src/main.c ****     Error_Handler();
 421:Core/Src/main.c ****   }
 422:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 2 */
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /* USER CODE END CAN2_Init 2 */
 425:Core/Src/main.c **** }
 426:Core/Src/main.c **** 
 427:Core/Src/main.c **** /**
 428:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 429:Core/Src/main.c ****   * @param None
 430:Core/Src/main.c ****   * @retval None
 431:Core/Src/main.c ****   */
 432:Core/Src/main.c **** static void MX_I2C1_SMBUS_Init(void)
 433:Core/Src/main.c **** {
ARM GAS  /tmp/ccXFel8e.s 			page 9


 434:Core/Src/main.c **** 
 435:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 436:Core/Src/main.c **** 
 437:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 438:Core/Src/main.c **** 
 439:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 442:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 443:Core/Src/main.c **** 
 444:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 445:Core/Src/main.c **** }
 446:Core/Src/main.c **** 
 447:Core/Src/main.c **** /**
 448:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 449:Core/Src/main.c ****   * @param None
 450:Core/Src/main.c ****   * @retval None
 451:Core/Src/main.c ****   */
 452:Core/Src/main.c **** static void MX_TIM1_Init(void)
 453:Core/Src/main.c **** {
 454:Core/Src/main.c **** 
 455:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 456:Core/Src/main.c **** 
 457:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 460:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 461:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 466:Core/Src/main.c ****   htim1.Instance = TIM1;
 467:Core/Src/main.c ****   htim1.Init.Prescaler = 240;
 468:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 469:Core/Src/main.c ****   htim1.Init.Period = 65535;
 470:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 471:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 472:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 473:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 474:Core/Src/main.c ****   {
 475:Core/Src/main.c ****     Error_Handler();
 476:Core/Src/main.c ****   }
 477:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 478:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 479:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 480:Core/Src/main.c ****   {
 481:Core/Src/main.c ****     Error_Handler();
 482:Core/Src/main.c ****   }
 483:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 484:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 485:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 486:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 487:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 488:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 489:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 490:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
ARM GAS  /tmp/ccXFel8e.s 			page 10


 491:Core/Src/main.c ****   {
 492:Core/Src/main.c ****     Error_Handler();
 493:Core/Src/main.c ****   }
 494:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 495:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 496:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 497:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 498:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 499:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 500:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 501:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 502:Core/Src/main.c ****   {
 503:Core/Src/main.c ****     Error_Handler();
 504:Core/Src/main.c ****   }
 505:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 506:Core/Src/main.c **** 
 507:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 508:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 509:Core/Src/main.c **** }
 510:Core/Src/main.c **** 
 511:Core/Src/main.c **** /**
 512:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 513:Core/Src/main.c ****   * @param None
 514:Core/Src/main.c ****   * @retval None
 515:Core/Src/main.c ****   */
 516:Core/Src/main.c **** static void MX_TIM2_Init(void)
 517:Core/Src/main.c **** {
 518:Core/Src/main.c **** 
 519:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 520:Core/Src/main.c **** 
 521:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 522:Core/Src/main.c **** 
 523:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 524:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 525:Core/Src/main.c **** 
 526:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 527:Core/Src/main.c ****   // Water pump pwm emulation
 528:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 529:Core/Src/main.c ****   htim2.Instance = TIM2;
 530:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 531:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 532:Core/Src/main.c ****   htim2.Init.Period = 600;
 533:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 534:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 535:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 536:Core/Src/main.c ****   {
 537:Core/Src/main.c ****     Error_Handler();
 538:Core/Src/main.c ****   }
 539:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 540:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 541:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 542:Core/Src/main.c ****   {
 543:Core/Src/main.c ****     Error_Handler();
 544:Core/Src/main.c ****   }
 545:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 546:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 547:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
ARM GAS  /tmp/ccXFel8e.s 			page 11


 548:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 549:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 550:Core/Src/main.c ****   {
 551:Core/Src/main.c ****     Error_Handler();
 552:Core/Src/main.c ****   }
 553:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 554:Core/Src/main.c **** 
 555:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 556:Core/Src/main.c **** }
 557:Core/Src/main.c **** 
 558:Core/Src/main.c **** /**
 559:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 560:Core/Src/main.c ****   * @param None
 561:Core/Src/main.c ****   * @retval None
 562:Core/Src/main.c ****   */
 563:Core/Src/main.c **** static void MX_TIM3_Init(void)
 564:Core/Src/main.c **** {
 565:Core/Src/main.c **** 
 566:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 567:Core/Src/main.c **** 
 568:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 569:Core/Src/main.c **** 
 570:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 571:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 572:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 573:Core/Src/main.c **** 
 574:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 575:Core/Src/main.c **** 
 576:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 577:Core/Src/main.c ****   htim3.Instance = TIM3;
 578:Core/Src/main.c ****   htim3.Init.Prescaler = 120;
 579:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 580:Core/Src/main.c ****   htim3.Init.Period = 600;
 581:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 582:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 583:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 584:Core/Src/main.c ****   {
 585:Core/Src/main.c ****     Error_Handler();
 586:Core/Src/main.c ****   }
 587:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 588:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 589:Core/Src/main.c ****   {
 590:Core/Src/main.c ****     Error_Handler();
 591:Core/Src/main.c ****   }
 592:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 593:Core/Src/main.c ****   {
 594:Core/Src/main.c ****     Error_Handler();
 595:Core/Src/main.c ****   }
 596:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 597:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 598:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 599:Core/Src/main.c ****   {
 600:Core/Src/main.c ****     Error_Handler();
 601:Core/Src/main.c ****   }
 602:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 603:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 604:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
ARM GAS  /tmp/ccXFel8e.s 			page 12


 605:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 606:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 607:Core/Src/main.c ****   {
 608:Core/Src/main.c ****     Error_Handler();
 609:Core/Src/main.c ****   }
 610:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 611:Core/Src/main.c **** 
 612:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 613:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 614:Core/Src/main.c **** }
 615:Core/Src/main.c **** 
 616:Core/Src/main.c **** /**
 617:Core/Src/main.c ****   * @brief TIM5 Initialization Function
 618:Core/Src/main.c ****   * @param None
 619:Core/Src/main.c ****   * @retval None
 620:Core/Src/main.c ****   */
 621:Core/Src/main.c **** static void MX_TIM5_Init(void)
 622:Core/Src/main.c **** {
 623:Core/Src/main.c **** 
 624:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
 625:Core/Src/main.c **** 
 626:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
 627:Core/Src/main.c **** 
 628:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 629:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 630:Core/Src/main.c **** 
 631:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
 632:Core/Src/main.c **** 
 633:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
 634:Core/Src/main.c ****   htim5.Instance = TIM5;
 635:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 636:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 637:Core/Src/main.c ****   htim5.Init.Period = 10;
 638:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 639:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 640:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 641:Core/Src/main.c ****   {
 642:Core/Src/main.c ****     Error_Handler();
 643:Core/Src/main.c ****   }
 644:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 645:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 646:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 647:Core/Src/main.c ****   {
 648:Core/Src/main.c ****     Error_Handler();
 649:Core/Src/main.c ****   }
 650:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 651:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 652:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 653:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 654:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 655:Core/Src/main.c ****   {
 656:Core/Src/main.c ****     Error_Handler();
 657:Core/Src/main.c ****   }
 658:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 659:Core/Src/main.c ****   {
 660:Core/Src/main.c ****     Error_Handler();
 661:Core/Src/main.c ****   }
ARM GAS  /tmp/ccXFel8e.s 			page 13


 662:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
 663:Core/Src/main.c **** 
 664:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
 665:Core/Src/main.c **** }
 666:Core/Src/main.c **** 
 667:Core/Src/main.c **** /**
 668:Core/Src/main.c ****   * @brief UART4 Initialization Function
 669:Core/Src/main.c ****   * @param None
 670:Core/Src/main.c ****   * @retval None
 671:Core/Src/main.c ****   */
 672:Core/Src/main.c **** static void MX_UART4_Init(void)
 673:Core/Src/main.c **** {
 674:Core/Src/main.c **** 
 675:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 0 */
 676:Core/Src/main.c **** 
 677:Core/Src/main.c ****   /* USER CODE END UART4_Init 0 */
 678:Core/Src/main.c **** 
 679:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 1 */
 680:Core/Src/main.c **** 
 681:Core/Src/main.c ****   /* USER CODE END UART4_Init 1 */
 682:Core/Src/main.c ****   huart4.Instance = UART4;
 683:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 684:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 685:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 686:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 687:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 688:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 689:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 690:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 691:Core/Src/main.c ****   {
 692:Core/Src/main.c ****     Error_Handler();
 693:Core/Src/main.c ****   }
 694:Core/Src/main.c ****   /* USER CODE BEGIN UART4_Init 2 */
 695:Core/Src/main.c **** 
 696:Core/Src/main.c ****   /* USER CODE END UART4_Init 2 */
 697:Core/Src/main.c **** }
 698:Core/Src/main.c **** 
 699:Core/Src/main.c **** /**
 700:Core/Src/main.c ****   * @brief USART1 Initialization Function
 701:Core/Src/main.c ****   * @param None
 702:Core/Src/main.c ****   * @retval None
 703:Core/Src/main.c ****   */
 704:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 705:Core/Src/main.c **** {
 706:Core/Src/main.c **** 
 707:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 708:Core/Src/main.c **** 
 709:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 710:Core/Src/main.c **** 
 711:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 712:Core/Src/main.c **** 
 713:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 714:Core/Src/main.c ****   huart1.Instance = USART1;
 715:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 716:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 717:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 718:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/ccXFel8e.s 			page 14


 719:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 720:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 721:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 722:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 723:Core/Src/main.c ****   {
 724:Core/Src/main.c ****     Error_Handler();
 725:Core/Src/main.c ****   }
 726:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 727:Core/Src/main.c **** 
 728:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 729:Core/Src/main.c **** }
 730:Core/Src/main.c **** 
 731:Core/Src/main.c **** /**
 732:Core/Src/main.c ****   * Enable DMA controller clock
 733:Core/Src/main.c ****   */
 734:Core/Src/main.c **** static void MX_DMA_Init(void)
 735:Core/Src/main.c **** {
 736:Core/Src/main.c **** 
 737:Core/Src/main.c ****   /* DMA controller clock enable */
 738:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 739:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 740:Core/Src/main.c **** 
 741:Core/Src/main.c ****   /* DMA interrupt init */
 742:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 743:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 744:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 745:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 746:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 747:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 748:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 749:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 750:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 751:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 752:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 753:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 754:Core/Src/main.c **** }
 755:Core/Src/main.c **** 
 756:Core/Src/main.c **** /**
 757:Core/Src/main.c ****   * @brief GPIO Initialization Function
 758:Core/Src/main.c ****   * @param None
 759:Core/Src/main.c ****   * @retval None
 760:Core/Src/main.c ****   */
 761:Core/Src/main.c **** static void MX_GPIO_Init(void)
 762:Core/Src/main.c **** {
  25              		.loc 1 762 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
ARM GAS  /tmp/ccXFel8e.s 			page 15


  38 0004 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 763:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 763 0
  42 0006 0024     		movs	r4, #0
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB4:
 764:Core/Src/main.c **** 
 765:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 766:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 766 0
  49 0010 304B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F01002 		orr	r2, r2, #16
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F01002 		and	r2, r2, #16
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE4:
  58              	.LBB5:
 767:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  59              		.loc 1 767 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F02002 		orr	r2, r2, #32
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9A69     		ldr	r2, [r3, #24]
  64 002e 02F02002 		and	r2, r2, #32
  65 0032 0192     		str	r2, [sp, #4]
  66 0034 019A     		ldr	r2, [sp, #4]
  67              	.LBE5:
  68              	.LBB6:
 768:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 768 0
  70 0036 9A69     		ldr	r2, [r3, #24]
  71 0038 42F00402 		orr	r2, r2, #4
  72 003c 9A61     		str	r2, [r3, #24]
  73 003e 9A69     		ldr	r2, [r3, #24]
  74 0040 02F00402 		and	r2, r2, #4
  75 0044 0292     		str	r2, [sp, #8]
  76 0046 029A     		ldr	r2, [sp, #8]
  77              	.LBE6:
  78              	.LBB7:
 769:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  79              		.loc 1 769 0
  80 0048 9A69     		ldr	r2, [r3, #24]
  81 004a 42F00802 		orr	r2, r2, #8
  82 004e 9A61     		str	r2, [r3, #24]
  83 0050 9B69     		ldr	r3, [r3, #24]
  84 0052 03F00803 		and	r3, r3, #8
  85 0056 0393     		str	r3, [sp, #12]
  86 0058 039B     		ldr	r3, [sp, #12]
  87              	.LBE7:
ARM GAS  /tmp/ccXFel8e.s 			page 16


 770:Core/Src/main.c **** 
 771:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 772:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, LED_Pin | WP_Pin | TEMP_Pin | SOC_Pin, GPIO_PIN_RESET);
  88              		.loc 1 772 0
  89 005a 1F4E     		ldr	r6, .L3+4
  90 005c 2246     		mov	r2, r4
  91 005e 4FF40B51 		mov	r1, #8896
  92 0062 3046     		mov	r0, r6
  93 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL0:
 773:Core/Src/main.c **** 
 774:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 775:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, PS_INIT_Pin | HEAT_OUT_Pin, GPIO_PIN_RESET);
  95              		.loc 1 775 0
  96 0068 1C4D     		ldr	r5, .L3+8
  97 006a 2246     		mov	r2, r4
  98 006c 4FF44041 		mov	r1, #49152
  99 0070 2846     		mov	r0, r5
 100 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL1:
 776:Core/Src/main.c **** 
 777:Core/Src/main.c ****   /*Configure GPIO pins : LED_Pin WP_Pin */
 778:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin | WP_Pin;
 102              		.loc 1 778 0
 103 0076 4FF40153 		mov	r3, #8256
 104 007a 0493     		str	r3, [sp, #16]
 779:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 105              		.loc 1 779 0
 106 007c 0127     		movs	r7, #1
 107 007e 0597     		str	r7, [sp, #20]
 780:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 108              		.loc 1 780 0
 109 0080 0694     		str	r4, [sp, #24]
 781:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 110              		.loc 1 781 0
 111 0082 4FF00208 		mov	r8, #2
 112 0086 CDF81C80 		str	r8, [sp, #28]
 782:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 113              		.loc 1 782 0
 114 008a 04A9     		add	r1, sp, #16
 115 008c 3046     		mov	r0, r6
 116 008e FFF7FEFF 		bl	HAL_GPIO_Init
 117              	.LVL2:
 783:Core/Src/main.c **** 
 784:Core/Src/main.c ****   /*Configure GPIO pins : PS_INIT_Pin HEAT_OUT_Pin */
 785:Core/Src/main.c ****   GPIO_InitStruct.Pin = PS_INIT_Pin | HEAT_OUT_Pin;
 118              		.loc 1 785 0
 119 0092 4FF44043 		mov	r3, #49152
 120 0096 0493     		str	r3, [sp, #16]
 786:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 121              		.loc 1 786 0
 122 0098 0597     		str	r7, [sp, #20]
 787:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 123              		.loc 1 787 0
 124 009a 0694     		str	r4, [sp, #24]
 788:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 788 0
ARM GAS  /tmp/ccXFel8e.s 			page 17


 126 009c CDF81C80 		str	r8, [sp, #28]
 789:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 127              		.loc 1 789 0
 128 00a0 04A9     		add	r1, sp, #16
 129 00a2 2846     		mov	r0, r5
 130 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL3:
 790:Core/Src/main.c **** 
 791:Core/Src/main.c ****   /*Configure GPIO pins : TEMP_Pin SOC_Pin */
 792:Core/Src/main.c ****   GPIO_InitStruct.Pin = TEMP_Pin | SOC_Pin;
 132              		.loc 1 792 0
 133 00a8 4FF42073 		mov	r3, #640
 134 00ac 0493     		str	r3, [sp, #16]
 793:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 135              		.loc 1 793 0
 136 00ae 0597     		str	r7, [sp, #20]
 794:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 137              		.loc 1 794 0
 138 00b0 0694     		str	r4, [sp, #24]
 795:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 139              		.loc 1 795 0
 140 00b2 0323     		movs	r3, #3
 141 00b4 0793     		str	r3, [sp, #28]
 796:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 142              		.loc 1 796 0
 143 00b6 04A9     		add	r1, sp, #16
 144 00b8 3046     		mov	r0, r6
 145 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL4:
 797:Core/Src/main.c **** 
 798:Core/Src/main.c ****   /*Configure GPIO pins : SW12_Pin HEAT_REQ_Pin */
 799:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW12_Pin | HEAT_REQ_Pin;
 147              		.loc 1 799 0
 148 00be 3023     		movs	r3, #48
 149 00c0 0493     		str	r3, [sp, #16]
 800:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 150              		.loc 1 800 0
 151 00c2 0594     		str	r4, [sp, #20]
 801:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 801 0
 153 00c4 0694     		str	r4, [sp, #24]
 802:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 154              		.loc 1 802 0
 155 00c6 04A9     		add	r1, sp, #16
 156 00c8 2846     		mov	r0, r5
 157 00ca FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL5:
 803:Core/Src/main.c **** }
 159              		.loc 1 803 0
 160 00ce 08B0     		add	sp, sp, #32
 161              	.LCFI2:
 162              		.cfi_def_cfa_offset 24
 163              		@ sp needed
 164 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 165              	.L4:
 166              		.align	2
 167              	.L3:
ARM GAS  /tmp/ccXFel8e.s 			page 18


 168 00d4 00100240 		.word	1073876992
 169 00d8 00100140 		.word	1073811456
 170 00dc 000C0140 		.word	1073810432
 171              		.cfi_endproc
 172              	.LFE85:
 174              		.section	.text.MX_DMA_Init,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	MX_DMA_Init:
 182              	.LFB84:
 735:Core/Src/main.c **** 
 183              		.loc 1 735 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 8
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187 0000 00B5     		push	{lr}
 188              	.LCFI3:
 189              		.cfi_def_cfa_offset 4
 190              		.cfi_offset 14, -4
 191 0002 83B0     		sub	sp, sp, #12
 192              	.LCFI4:
 193              		.cfi_def_cfa_offset 16
 194              	.LBB8:
 738:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 195              		.loc 1 738 0
 196 0004 1A4B     		ldr	r3, .L7
 197 0006 5A69     		ldr	r2, [r3, #20]
 198 0008 42F00202 		orr	r2, r2, #2
 199 000c 5A61     		str	r2, [r3, #20]
 200 000e 5A69     		ldr	r2, [r3, #20]
 201 0010 02F00202 		and	r2, r2, #2
 202 0014 0092     		str	r2, [sp]
 203 0016 009A     		ldr	r2, [sp]
 204              	.LBE8:
 205              	.LBB9:
 739:Core/Src/main.c **** 
 206              		.loc 1 739 0
 207 0018 5A69     		ldr	r2, [r3, #20]
 208 001a 42F00102 		orr	r2, r2, #1
 209 001e 5A61     		str	r2, [r3, #20]
 210 0020 5B69     		ldr	r3, [r3, #20]
 211 0022 03F00103 		and	r3, r3, #1
 212 0026 0193     		str	r3, [sp, #4]
 213 0028 019B     		ldr	r3, [sp, #4]
 214              	.LBE9:
 743:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 215              		.loc 1 743 0
 216 002a 0022     		movs	r2, #0
 217 002c 0521     		movs	r1, #5
 218 002e 0B20     		movs	r0, #11
 219 0030 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 220              	.LVL6:
 744:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 221              		.loc 1 744 0
ARM GAS  /tmp/ccXFel8e.s 			page 19


 222 0034 0B20     		movs	r0, #11
 223 0036 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 224              	.LVL7:
 746:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 225              		.loc 1 746 0
 226 003a 0022     		movs	r2, #0
 227 003c 0521     		movs	r1, #5
 228 003e 0F20     		movs	r0, #15
 229 0040 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 230              	.LVL8:
 747:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 231              		.loc 1 747 0
 232 0044 0F20     		movs	r0, #15
 233 0046 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 234              	.LVL9:
 749:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 235              		.loc 1 749 0
 236 004a 0022     		movs	r2, #0
 237 004c 0521     		movs	r1, #5
 238 004e 3B20     		movs	r0, #59
 239 0050 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 240              	.LVL10:
 750:Core/Src/main.c ****   /* DMA2_Channel5_IRQn interrupt configuration */
 241              		.loc 1 750 0
 242 0054 3B20     		movs	r0, #59
 243 0056 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 244              	.LVL11:
 752:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 245              		.loc 1 752 0
 246 005a 0022     		movs	r2, #0
 247 005c 0521     		movs	r1, #5
 248 005e 3C20     		movs	r0, #60
 249 0060 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 250              	.LVL12:
 753:Core/Src/main.c **** }
 251              		.loc 1 753 0
 252 0064 3C20     		movs	r0, #60
 253 0066 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 254              	.LVL13:
 754:Core/Src/main.c **** 
 255              		.loc 1 754 0
 256 006a 03B0     		add	sp, sp, #12
 257              	.LCFI5:
 258              		.cfi_def_cfa_offset 4
 259              		@ sp needed
 260 006c 5DF804FB 		ldr	pc, [sp], #4
 261              	.L8:
 262              		.align	2
 263              	.L7:
 264 0070 00100240 		.word	1073876992
 265              		.cfi_endproc
 266              	.LFE84:
 268              		.section	.text.StartTaskLoop,"ax",%progbits
 269              		.align	1
 270              		.global	StartTaskLoop
 271              		.syntax unified
 272              		.thumb
ARM GAS  /tmp/ccXFel8e.s 			page 20


 273              		.thumb_func
 274              		.fpu softvfp
 276              	StartTaskLoop:
 277              	.LFB86:
 804:Core/Src/main.c **** 
 805:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 806:Core/Src/main.c **** // Callback: timer has rolled over
 807:Core/Src/main.c **** 
 808:Core/Src/main.c **** /* USER CODE END 4 */
 809:Core/Src/main.c **** 
 810:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTaskLoop */
 811:Core/Src/main.c **** /**
 812:Core/Src/main.c ****   * @brief  Function implementing the TaskLoop thread.
 813:Core/Src/main.c ****   * @param  argument: Not used
 814:Core/Src/main.c ****   * @retval None
 815:Core/Src/main.c ****   */
 816:Core/Src/main.c **** /* USER CODE END Header_StartTaskLoop */
 817:Core/Src/main.c **** void StartTaskLoop(void *argument)
 818:Core/Src/main.c **** {
 278              		.loc 1 818 0
 279              		.cfi_startproc
 280              		@ Volatile: function does not return.
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL14:
 284 0000 08B5     		push	{r3, lr}
 285              	.LCFI6:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 289              	.LVL15:
 290              	.L10:
 819:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 820:Core/Src/main.c ****   /* Infinite loop */
 821:Core/Src/main.c ****   for (;;)
 822:Core/Src/main.c ****   {
 823:Core/Src/main.c ****     wpHandler();
 291              		.loc 1 823 0 discriminator 1
 292 0002 FFF7FEFF 		bl	wpHandler
 293              	.LVL16:
 824:Core/Src/main.c ****     vcuState();
 294              		.loc 1 824 0 discriminator 1
 295 0006 FFF7FEFF 		bl	vcuState
 296              	.LVL17:
 825:Core/Src/main.c ****     ioHandler();
 297              		.loc 1 825 0 discriminator 1
 298 000a FFF7FEFF 		bl	ioHandler
 299              	.LVL18:
 826:Core/Src/main.c **** 
 827:Core/Src/main.c ****     osDelay(1);
 300              		.loc 1 827 0 discriminator 1
 301 000e 0120     		movs	r0, #1
 302 0010 FFF7FEFF 		bl	osDelay
 303              	.LVL19:
 304 0014 F5E7     		b	.L10
 305              		.cfi_endproc
 306              	.LFE86:
ARM GAS  /tmp/ccXFel8e.s 			page 21


 308              		.section	.text.StartTask10ms,"ax",%progbits
 309              		.align	1
 310              		.global	StartTask10ms
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu softvfp
 316              	StartTask10ms:
 317              	.LFB87:
 828:Core/Src/main.c ****   }
 829:Core/Src/main.c ****   /* USER CODE END 5 */
 830:Core/Src/main.c **** }
 831:Core/Src/main.c **** 
 832:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask10ms */
 833:Core/Src/main.c **** /**
 834:Core/Src/main.c **** * @brief Function implementing the Task10ms thread.
 835:Core/Src/main.c **** * @param argument: Not used
 836:Core/Src/main.c **** * @retval None
 837:Core/Src/main.c **** */
 838:Core/Src/main.c **** /* USER CODE END Header_StartTask10ms */
 839:Core/Src/main.c **** void StartTask10ms(void *argument)
 840:Core/Src/main.c **** {
 318              		.loc 1 840 0
 319              		.cfi_startproc
 320              		@ Volatile: function does not return.
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              	.LVL20:
 324 0000 08B5     		push	{r3, lr}
 325              	.LCFI7:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 3, -8
 328              		.cfi_offset 14, -4
 329              	.LVL21:
 330              	.L13:
 841:Core/Src/main.c ****   /* USER CODE BEGIN StartTask10ms */
 842:Core/Src/main.c ****   //TickType_t lastWakeTime;
 843:Core/Src/main.c ****   //const TickType_t frequency = 20;
 844:Core/Src/main.c ****   //lastWakeTime = xTaskGetTickCount();
 845:Core/Src/main.c ****   /* Infinite loop */
 846:Core/Src/main.c ****   for (;;)
 847:Core/Src/main.c ****   {
 848:Core/Src/main.c ****     //vTaskDelayUntil(&lastWakeTime, frequency);
 849:Core/Src/main.c ****     throttleHandler();
 331              		.loc 1 849 0 discriminator 1
 332 0002 FFF7FEFF 		bl	throttleHandler
 333              	.LVL22:
 850:Core/Src/main.c ****     canIOsend();
 334              		.loc 1 850 0 discriminator 1
 335 0006 FFF7FEFF 		bl	canIOsend
 336              	.LVL23:
 851:Core/Src/main.c ****     regenHandler();
 337              		.loc 1 851 0 discriminator 1
 338 000a FFF7FEFF 		bl	regenHandler
 339              	.LVL24:
 852:Core/Src/main.c ****     brakeHandler();
 340              		.loc 1 852 0 discriminator 1
ARM GAS  /tmp/ccXFel8e.s 			page 22


 341 000e FFF7FEFF 		bl	brakeHandler
 342              	.LVL25:
 853:Core/Src/main.c ****     dcdcHandler(vcu.state);
 343              		.loc 1 853 0 discriminator 1
 344 0012 044B     		ldr	r3, .L15
 345 0014 1879     		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 346 0016 FFF7FEFF 		bl	dcdcHandler
 347              	.LVL26:
 854:Core/Src/main.c **** 
 855:Core/Src/main.c ****     osDelay(20);
 348              		.loc 1 855 0 discriminator 1
 349 001a 1420     		movs	r0, #20
 350 001c FFF7FEFF 		bl	osDelay
 351              	.LVL27:
 352 0020 EFE7     		b	.L13
 353              	.L16:
 354 0022 00BF     		.align	2
 355              	.L15:
 356 0024 00000000 		.word	vcu
 357              		.cfi_endproc
 358              	.LFE87:
 360              		.section	.text.StartTask100ms,"ax",%progbits
 361              		.align	1
 362              		.global	StartTask100ms
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 366              		.fpu softvfp
 368              	StartTask100ms:
 369              	.LFB88:
 856:Core/Src/main.c ****   }
 857:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 858:Core/Src/main.c ****   osThreadTerminate(NULL);
 859:Core/Src/main.c ****   /* USER CODE END StartTask10ms */
 860:Core/Src/main.c **** }
 861:Core/Src/main.c **** 
 862:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask100ms */
 863:Core/Src/main.c **** /**
 864:Core/Src/main.c **** * @brief Function implementing the Task100ms thread.
 865:Core/Src/main.c **** * @param argument: Not used
 866:Core/Src/main.c **** * @retval None
 867:Core/Src/main.c **** */
 868:Core/Src/main.c **** /* USER CODE END Header_StartTask100ms */
 869:Core/Src/main.c **** void StartTask100ms(void *argument)
 870:Core/Src/main.c **** {
 370              		.loc 1 870 0
 371              		.cfi_startproc
 372              		@ Volatile: function does not return.
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              	.LVL28:
 376 0000 08B5     		push	{r3, lr}
 377              	.LCFI8:
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 3, -8
 380              		.cfi_offset 14, -4
 381              	.LVL29:
ARM GAS  /tmp/ccXFel8e.s 			page 23


 382              	.L18:
 871:Core/Src/main.c ****   /* USER CODE BEGIN StartTask100ms */
 872:Core/Src/main.c ****   //TickType_t lastWakeTime;
 873:Core/Src/main.c ****   //const TickType_t frequency = 100;
 874:Core/Src/main.c ****   //lastWakeTime = xTaskGetTickCount();
 875:Core/Src/main.c **** 
 876:Core/Src/main.c ****   /* Infinite loop */
 877:Core/Src/main.c **** 
 878:Core/Src/main.c ****   for (;;)
 879:Core/Src/main.c ****   {
 880:Core/Src/main.c ****     //vTaskDelayUntil(&lastWakeTime, frequency);
 881:Core/Src/main.c **** 
 882:Core/Src/main.c ****     updateSpeed(ldu.rpm);
 383              		.loc 1 882 0 discriminator 1
 384 0002 064C     		ldr	r4, .L20
 385 0004 2088     		ldrh	r0, [r4]
 386 0006 80B2     		uxth	r0, r0
 387 0008 FFF7FEFF 		bl	updateSpeed
 388              	.LVL30:
 883:Core/Src/main.c ****     updateTach(ldu.amps);
 389              		.loc 1 883 0 discriminator 1
 390 000c 6089     		ldrh	r0, [r4, #10]
 391 000e 80B2     		uxth	r0, r0
 392 0010 FFF7FEFF 		bl	updateTach
 393              	.LVL31:
 884:Core/Src/main.c ****     //testVal();
 885:Core/Src/main.c **** 
 886:Core/Src/main.c ****     osDelay(100);
 394              		.loc 1 886 0 discriminator 1
 395 0014 6420     		movs	r0, #100
 396 0016 FFF7FEFF 		bl	osDelay
 397              	.LVL32:
 398 001a F2E7     		b	.L18
 399              	.L21:
 400              		.align	2
 401              	.L20:
 402 001c 00000000 		.word	ldu
 403              		.cfi_endproc
 404              	.LFE88:
 406              		.section	.text.StartTask250ms,"ax",%progbits
 407              		.align	1
 408              		.global	StartTask250ms
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu softvfp
 414              	StartTask250ms:
 415              	.LFB89:
 887:Core/Src/main.c ****   }
 888:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 889:Core/Src/main.c ****   osThreadTerminate(NULL);
 890:Core/Src/main.c ****   /* USER CODE END StartTask100ms */
 891:Core/Src/main.c **** }
 892:Core/Src/main.c **** 
 893:Core/Src/main.c **** /* USER CODE BEGIN Header_StartTask250ms */
 894:Core/Src/main.c **** /**
 895:Core/Src/main.c **** * @brief Function implementing the Task250ms thread.
ARM GAS  /tmp/ccXFel8e.s 			page 24


 896:Core/Src/main.c **** * @param argument: Not used
 897:Core/Src/main.c **** * @retval None
 898:Core/Src/main.c **** */
 899:Core/Src/main.c **** /* USER CODE END Header_StartTask250ms */
 900:Core/Src/main.c **** void StartTask250ms(void *argument)
 901:Core/Src/main.c **** {
 416              		.loc 1 901 0
 417              		.cfi_startproc
 418              		@ Volatile: function does not return.
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              	.LVL33:
 422 0000 08B5     		push	{r3, lr}
 423              	.LCFI9:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
 427              	.LVL34:
 428              	.L23:
 902:Core/Src/main.c ****   /* USER CODE BEGIN StartTask250ms */
 903:Core/Src/main.c ****   //TickType_t lastWakeTime;
 904:Core/Src/main.c ****   //const TickType_t frequency = 250;
 905:Core/Src/main.c ****   //lastWakeTime = xTaskGetTickCount();
 906:Core/Src/main.c ****   /* Infinite loop */
 907:Core/Src/main.c **** 
 908:Core/Src/main.c ****   for (;;)
 909:Core/Src/main.c **** 
 910:Core/Src/main.c ****   {
 911:Core/Src/main.c ****     //vTaskDelayUntil(&lastWakeTime, frequency);
 912:Core/Src/main.c ****     HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 429              		.loc 1 912 0 discriminator 1
 430 0002 4FF40051 		mov	r1, #8192
 431 0006 0948     		ldr	r0, .L25
 432 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 433              	.LVL35:
 913:Core/Src/main.c **** 
 914:Core/Src/main.c ****     updateTemp(ldu.hsTemp);
 434              		.loc 1 914 0 discriminator 1
 435 000c 084B     		ldr	r3, .L25+4
 436 000e 9888     		ldrh	r0, [r3, #4]
 437 0010 80B2     		uxth	r0, r0
 438 0012 FFF7FEFF 		bl	updateTemp
 439              	.LVL36:
 915:Core/Src/main.c ****     updateSOC(BMS[0].chargeState);
 440              		.loc 1 915 0 discriminator 1
 441 0016 074B     		ldr	r3, .L25+8
 442 0018 187A     		ldrb	r0, [r3, #8]	@ zero_extendqisi2
 443 001a FFF7FEFF 		bl	updateSOC
 444              	.LVL37:
 916:Core/Src/main.c ****     encoderHandler();
 445              		.loc 1 916 0 discriminator 1
 446 001e FFF7FEFF 		bl	encoderHandler
 447              	.LVL38:
 917:Core/Src/main.c **** 
 918:Core/Src/main.c ****     osDelay(250);
 448              		.loc 1 918 0 discriminator 1
 449 0022 FA20     		movs	r0, #250
ARM GAS  /tmp/ccXFel8e.s 			page 25


 450 0024 FFF7FEFF 		bl	osDelay
 451              	.LVL39:
 452 0028 EBE7     		b	.L23
 453              	.L26:
 454 002a 00BF     		.align	2
 455              	.L25:
 456 002c 00100140 		.word	1073811456
 457 0030 00000000 		.word	ldu
 458 0034 00000000 		.word	BMS
 459              		.cfi_endproc
 460              	.LFE89:
 462              		.section	.text.__io_putchar,"ax",%progbits
 463              		.align	1
 464              		.global	__io_putchar
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu softvfp
 470              	__io_putchar:
 471              	.LFB70:
 472              		.file 2 "Core/Inc/print_uart.h"
   1:Core/Inc/print_uart.h **** #ifndef __PRINT_UART_H
   2:Core/Inc/print_uart.h **** #define __PRINT_UART_H
   3:Core/Inc/print_uart.h **** 
   4:Core/Inc/print_uart.h **** 
   5:Core/Inc/print_uart.h **** #include <stdio.h>
   6:Core/Inc/print_uart.h **** #include "stm32f1xx_hal.h"
   7:Core/Inc/print_uart.h **** 
   8:Core/Inc/print_uart.h **** UART_HandleTypeDef huart1;
   9:Core/Inc/print_uart.h **** 
  10:Core/Inc/print_uart.h **** //////////////////////////// Begin UART Magic ////////////////////////
  11:Core/Inc/print_uart.h **** int __io_putchar(int ch)
  12:Core/Inc/print_uart.h **** {
 473              		.loc 2 12 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 8
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              	.LVL40:
 478 0000 10B5     		push	{r4, lr}
 479              	.LCFI10:
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 4, -8
 482              		.cfi_offset 14, -4
 483 0002 82B0     		sub	sp, sp, #8
 484              	.LCFI11:
 485              		.cfi_def_cfa_offset 16
 486 0004 0446     		mov	r4, r0
  13:Core/Inc/print_uart.h ****  uint8_t c[1];
  14:Core/Inc/print_uart.h ****  c[0] = ch & 0x00FF;
 487              		.loc 2 14 0
 488 0006 02A9     		add	r1, sp, #8
 489 0008 01F8040D 		strb	r0, [r1, #-4]!
  15:Core/Inc/print_uart.h ****  HAL_UART_Transmit(&huart1, &*c, 1, 10);
 490              		.loc 2 15 0
 491 000c 0A23     		movs	r3, #10
 492 000e 0122     		movs	r2, #1
 493 0010 0248     		ldr	r0, .L29
ARM GAS  /tmp/ccXFel8e.s 			page 26


 494              	.LVL41:
 495 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 496              	.LVL42:
  16:Core/Inc/print_uart.h ****  return ch;
  17:Core/Inc/print_uart.h **** }
 497              		.loc 2 17 0
 498 0016 2046     		mov	r0, r4
 499 0018 02B0     		add	sp, sp, #8
 500              	.LCFI12:
 501              		.cfi_def_cfa_offset 8
 502              		@ sp needed
 503 001a 10BD     		pop	{r4, pc}
 504              	.LVL43:
 505              	.L30:
 506              		.align	2
 507              	.L29:
 508 001c 00000000 		.word	huart1
 509              		.cfi_endproc
 510              	.LFE70:
 512              		.section	.text._write,"ax",%progbits
 513              		.align	1
 514              		.global	_write
 515              		.syntax unified
 516              		.thumb
 517              		.thumb_func
 518              		.fpu softvfp
 520              	_write:
 521              	.LFB71:
  18:Core/Inc/print_uart.h **** 
  19:Core/Inc/print_uart.h **** int _write(int file,char *ptr, int len)
  20:Core/Inc/print_uart.h **** {
 522              		.loc 2 20 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 526              	.LVL44:
 527 0000 70B5     		push	{r4, r5, r6, lr}
 528              	.LCFI13:
 529              		.cfi_def_cfa_offset 16
 530              		.cfi_offset 4, -16
 531              		.cfi_offset 5, -12
 532              		.cfi_offset 6, -8
 533              		.cfi_offset 14, -4
 534 0002 1646     		mov	r6, r2
 535              	.LVL45:
  21:Core/Inc/print_uart.h ****  int DataIdx;
  22:Core/Inc/print_uart.h ****  for(DataIdx= 0; DataIdx< len; DataIdx++)
 536              		.loc 2 22 0
 537 0004 0024     		movs	r4, #0
 538 0006 05E0     		b	.L32
 539              	.LVL46:
 540              	.L33:
  23:Core/Inc/print_uart.h ****  {
  24:Core/Inc/print_uart.h ****  __io_putchar(*ptr++);
 541              		.loc 2 24 0 discriminator 3
 542 0008 4D1C     		adds	r5, r1, #1
 543              	.LVL47:
ARM GAS  /tmp/ccXFel8e.s 			page 27


 544 000a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 545 000c FFF7FEFF 		bl	__io_putchar
 546              	.LVL48:
  22:Core/Inc/print_uart.h ****  {
 547              		.loc 2 22 0 discriminator 3
 548 0010 0134     		adds	r4, r4, #1
 549              	.LVL49:
 550              		.loc 2 24 0 discriminator 3
 551 0012 2946     		mov	r1, r5
 552              	.LVL50:
 553              	.L32:
  22:Core/Inc/print_uart.h ****  {
 554              		.loc 2 22 0 discriminator 1
 555 0014 B442     		cmp	r4, r6
 556 0016 F7DB     		blt	.L33
  25:Core/Inc/print_uart.h ****  }
  26:Core/Inc/print_uart.h **** return len;
  27:Core/Inc/print_uart.h **** }
 557              		.loc 2 27 0
 558 0018 3046     		mov	r0, r6
 559 001a 70BD     		pop	{r4, r5, r6, pc}
 560              		.cfi_endproc
 561              	.LFE71:
 563              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 564              		.align	1
 565              		.global	HAL_TIM_PeriodElapsedCallback
 566              		.syntax unified
 567              		.thumb
 568              		.thumb_func
 569              		.fpu softvfp
 571              	HAL_TIM_PeriodElapsedCallback:
 572              	.LFB90:
 919:Core/Src/main.c ****     //testVal();
 920:Core/Src/main.c ****   }
 921:Core/Src/main.c ****   // Add termination if exit the loop accidentally
 922:Core/Src/main.c ****   osThreadTerminate(NULL);
 923:Core/Src/main.c ****   /* USER CODE END StartTask250ms */
 924:Core/Src/main.c **** }
 925:Core/Src/main.c **** 
 926:Core/Src/main.c **** /**
 927:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 928:Core/Src/main.c ****   * @note   This function is called  when TIM7 interrupt took place, inside
 929:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 930:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 931:Core/Src/main.c ****   * @param  htim : TIM handle
 932:Core/Src/main.c ****   * @retval None
 933:Core/Src/main.c ****   */
 934:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 935:Core/Src/main.c **** {
 573              		.loc 1 935 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 0
 576              		@ frame_needed = 0, uses_anonymous_args = 0
 577              	.LVL51:
 578 0000 08B5     		push	{r3, lr}
 579              	.LCFI14:
 580              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccXFel8e.s 			page 28


 581              		.cfi_offset 3, -8
 582              		.cfi_offset 14, -4
 936:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 937:Core/Src/main.c **** 
 938:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 939:Core/Src/main.c ****   if (htim->Instance == TIM7)
 583              		.loc 1 939 0
 584 0002 0268     		ldr	r2, [r0]
 585 0004 034B     		ldr	r3, .L39
 586 0006 9A42     		cmp	r2, r3
 587 0008 00D0     		beq	.L38
 588              	.LVL52:
 589              	.L35:
 590 000a 08BD     		pop	{r3, pc}
 591              	.LVL53:
 592              	.L38:
 940:Core/Src/main.c ****   {
 941:Core/Src/main.c ****     HAL_IncTick();
 593              		.loc 1 941 0
 594 000c FFF7FEFF 		bl	HAL_IncTick
 595              	.LVL54:
 942:Core/Src/main.c ****   }
 943:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 944:Core/Src/main.c **** 
 945:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 946:Core/Src/main.c **** }
 596              		.loc 1 946 0
 597 0010 FBE7     		b	.L35
 598              	.L40:
 599 0012 00BF     		.align	2
 600              	.L39:
 601 0014 00140040 		.word	1073746944
 602              		.cfi_endproc
 603              	.LFE90:
 605              		.section	.text.Error_Handler,"ax",%progbits
 606              		.align	1
 607              		.global	Error_Handler
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 611              		.fpu softvfp
 613              	Error_Handler:
 614              	.LFB91:
 947:Core/Src/main.c **** 
 948:Core/Src/main.c **** /**
 949:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 950:Core/Src/main.c ****   * @retval None
 951:Core/Src/main.c ****   */
 952:Core/Src/main.c **** void Error_Handler(void)
 953:Core/Src/main.c **** {
 615              		.loc 1 953 0
 616              		.cfi_startproc
 617              		@ Volatile: function does not return.
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              		@ link register save eliminated.
 621              	.LBB10:
ARM GAS  /tmp/ccXFel8e.s 			page 29


 622              	.LBB11:
 623              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
ARM GAS  /tmp/ccXFel8e.s 			page 30


  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccXFel8e.s 			page 31


 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 624              		.loc 3 142 0
 625              		.syntax unified
 626              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 627 0000 72B6     		cpsid i
 628              	@ 0 "" 2
 629              		.thumb
 630              		.syntax unified
 631              	.L42:
 632 0002 FEE7     		b	.L42
 633              	.LBE11:
 634              	.LBE10:
 635              		.cfi_endproc
 636              	.LFE91:
 638              		.section	.text.MX_CAN2_Init,"ax",%progbits
 639              		.align	1
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 643              		.fpu softvfp
 645              	MX_CAN2_Init:
 646              	.LFB76:
 397:Core/Src/main.c **** 
 647              		.loc 1 397 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccXFel8e.s 			page 32


 652              	.LCFI15:
 653              		.cfi_def_cfa_offset 8
 654              		.cfi_offset 3, -8
 655              		.cfi_offset 14, -4
 406:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 656              		.loc 1 406 0
 657 0002 0D48     		ldr	r0, .L47
 658 0004 0D4B     		ldr	r3, .L47+4
 659 0006 0360     		str	r3, [r0]
 407:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 660              		.loc 1 407 0
 661 0008 0C23     		movs	r3, #12
 662 000a 4360     		str	r3, [r0, #4]
 408:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 663              		.loc 1 408 0
 664 000c 0023     		movs	r3, #0
 665 000e 8360     		str	r3, [r0, #8]
 409:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 666              		.loc 1 409 0
 667 0010 C360     		str	r3, [r0, #12]
 410:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 668              		.loc 1 410 0
 669 0012 4FF48032 		mov	r2, #65536
 670 0016 0261     		str	r2, [r0, #16]
 411:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 671              		.loc 1 411 0
 672 0018 4FF40012 		mov	r2, #2097152
 673 001c 4261     		str	r2, [r0, #20]
 412:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 674              		.loc 1 412 0
 675 001e 0376     		strb	r3, [r0, #24]
 413:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 676              		.loc 1 413 0
 677 0020 4376     		strb	r3, [r0, #25]
 414:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 678              		.loc 1 414 0
 679 0022 8376     		strb	r3, [r0, #26]
 415:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 680              		.loc 1 415 0
 681 0024 C376     		strb	r3, [r0, #27]
 416:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 682              		.loc 1 416 0
 683 0026 0377     		strb	r3, [r0, #28]
 417:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 684              		.loc 1 417 0
 685 0028 4377     		strb	r3, [r0, #29]
 418:Core/Src/main.c ****   {
 686              		.loc 1 418 0
 687 002a FFF7FEFF 		bl	HAL_CAN_Init
 688              	.LVL55:
 689 002e 00B9     		cbnz	r0, .L46
 690 0030 08BD     		pop	{r3, pc}
 691              	.L46:
 420:Core/Src/main.c ****   }
 692              		.loc 1 420 0
 693 0032 FFF7FEFF 		bl	Error_Handler
 694              	.LVL56:
ARM GAS  /tmp/ccXFel8e.s 			page 33


 695              	.L48:
 696 0036 00BF     		.align	2
 697              	.L47:
 698 0038 00000000 		.word	hcan2
 699 003c 00680040 		.word	1073768448
 700              		.cfi_endproc
 701              	.LFE76:
 703              		.section	.text.MX_ADC1_Init,"ax",%progbits
 704              		.align	1
 705              		.syntax unified
 706              		.thumb
 707              		.thumb_func
 708              		.fpu softvfp
 710              	MX_ADC1_Init:
 711              	.LFB74:
 300:Core/Src/main.c **** 
 712              		.loc 1 300 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 16
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 716 0000 00B5     		push	{lr}
 717              	.LCFI16:
 718              		.cfi_def_cfa_offset 4
 719              		.cfi_offset 14, -4
 720 0002 85B0     		sub	sp, sp, #20
 721              	.LCFI17:
 722              		.cfi_def_cfa_offset 24
 306:Core/Src/main.c **** 
 723              		.loc 1 306 0
 724 0004 0023     		movs	r3, #0
 725 0006 0193     		str	r3, [sp, #4]
 726 0008 0293     		str	r3, [sp, #8]
 727 000a 0393     		str	r3, [sp, #12]
 313:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 728              		.loc 1 313 0
 729 000c 1E48     		ldr	r0, .L59
 730 000e 1F4A     		ldr	r2, .L59+4
 731 0010 0260     		str	r2, [r0]
 314:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 732              		.loc 1 314 0
 733 0012 4FF48072 		mov	r2, #256
 734 0016 8260     		str	r2, [r0, #8]
 315:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 735              		.loc 1 315 0
 736 0018 0122     		movs	r2, #1
 737 001a 0273     		strb	r2, [r0, #12]
 316:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 738              		.loc 1 316 0
 739 001c 0375     		strb	r3, [r0, #20]
 317:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 740              		.loc 1 317 0
 741 001e 4FF46022 		mov	r2, #917504
 742 0022 C261     		str	r2, [r0, #28]
 318:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 3;
 743              		.loc 1 318 0
 744 0024 4360     		str	r3, [r0, #4]
 319:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
ARM GAS  /tmp/ccXFel8e.s 			page 34


 745              		.loc 1 319 0
 746 0026 0323     		movs	r3, #3
 747 0028 0361     		str	r3, [r0, #16]
 320:Core/Src/main.c ****   {
 748              		.loc 1 320 0
 749 002a FFF7FEFF 		bl	HAL_ADC_Init
 750              	.LVL57:
 751 002e 10BB     		cbnz	r0, .L55
 326:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 752              		.loc 1 326 0
 753 0030 0B23     		movs	r3, #11
 754 0032 0193     		str	r3, [sp, #4]
 327:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 755              		.loc 1 327 0
 756 0034 0123     		movs	r3, #1
 757 0036 0293     		str	r3, [sp, #8]
 328:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 758              		.loc 1 328 0
 759 0038 0723     		movs	r3, #7
 760 003a 0393     		str	r3, [sp, #12]
 329:Core/Src/main.c ****   {
 761              		.loc 1 329 0
 762 003c 01A9     		add	r1, sp, #4
 763 003e 1248     		ldr	r0, .L59
 764 0040 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 765              	.LVL58:
 766 0044 C8B9     		cbnz	r0, .L56
 335:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 767              		.loc 1 335 0
 768 0046 0523     		movs	r3, #5
 769 0048 0193     		str	r3, [sp, #4]
 336:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 770              		.loc 1 336 0
 771 004a 0223     		movs	r3, #2
 772 004c 0293     		str	r3, [sp, #8]
 337:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 773              		.loc 1 337 0
 774 004e 0423     		movs	r3, #4
 775 0050 0393     		str	r3, [sp, #12]
 338:Core/Src/main.c ****   {
 776              		.loc 1 338 0
 777 0052 0DEB0301 		add	r1, sp, r3
 778 0056 0C48     		ldr	r0, .L59
 779 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 780              	.LVL59:
 781 005c 78B9     		cbnz	r0, .L57
 344:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 782              		.loc 1 344 0
 783 005e 0623     		movs	r3, #6
 784 0060 0193     		str	r3, [sp, #4]
 345:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 785              		.loc 1 345 0
 786 0062 0323     		movs	r3, #3
 787 0064 0293     		str	r3, [sp, #8]
 346:Core/Src/main.c ****   {
 788              		.loc 1 346 0
 789 0066 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccXFel8e.s 			page 35


 790 0068 0748     		ldr	r0, .L59
 791 006a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 792              	.LVL60:
 793 006e 40B9     		cbnz	r0, .L58
 353:Core/Src/main.c **** 
 794              		.loc 1 353 0
 795 0070 05B0     		add	sp, sp, #20
 796              	.LCFI18:
 797              		.cfi_remember_state
 798              		.cfi_def_cfa_offset 4
 799              		@ sp needed
 800 0072 5DF804FB 		ldr	pc, [sp], #4
 801              	.L55:
 802              	.LCFI19:
 803              		.cfi_restore_state
 322:Core/Src/main.c ****   }
 804              		.loc 1 322 0
 805 0076 FFF7FEFF 		bl	Error_Handler
 806              	.LVL61:
 807              	.L56:
 331:Core/Src/main.c ****   }
 808              		.loc 1 331 0
 809 007a FFF7FEFF 		bl	Error_Handler
 810              	.LVL62:
 811              	.L57:
 340:Core/Src/main.c ****   }
 812              		.loc 1 340 0
 813 007e FFF7FEFF 		bl	Error_Handler
 814              	.LVL63:
 815              	.L58:
 348:Core/Src/main.c ****   }
 816              		.loc 1 348 0
 817 0082 FFF7FEFF 		bl	Error_Handler
 818              	.LVL64:
 819              	.L60:
 820 0086 00BF     		.align	2
 821              	.L59:
 822 0088 00000000 		.word	hadc1
 823 008c 00240140 		.word	1073816576
 824              		.cfi_endproc
 825              	.LFE74:
 827              		.section	.text.MX_CAN1_Init,"ax",%progbits
 828              		.align	1
 829              		.syntax unified
 830              		.thumb
 831              		.thumb_func
 832              		.fpu softvfp
 834              	MX_CAN1_Init:
 835              	.LFB75:
 361:Core/Src/main.c **** 
 836              		.loc 1 361 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 0
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840 0000 08B5     		push	{r3, lr}
 841              	.LCFI20:
 842              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccXFel8e.s 			page 36


 843              		.cfi_offset 3, -8
 844              		.cfi_offset 14, -4
 370:Core/Src/main.c ****   hcan1.Init.Prescaler = 12;
 845              		.loc 1 370 0
 846 0002 0D48     		ldr	r0, .L65
 847 0004 0D4B     		ldr	r3, .L65+4
 848 0006 0360     		str	r3, [r0]
 371:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 849              		.loc 1 371 0
 850 0008 0C23     		movs	r3, #12
 851 000a 4360     		str	r3, [r0, #4]
 372:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 852              		.loc 1 372 0
 853 000c 0023     		movs	r3, #0
 854 000e 8360     		str	r3, [r0, #8]
 373:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 855              		.loc 1 373 0
 856 0010 C360     		str	r3, [r0, #12]
 374:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 857              		.loc 1 374 0
 858 0012 4FF48032 		mov	r2, #65536
 859 0016 0261     		str	r2, [r0, #16]
 375:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 860              		.loc 1 375 0
 861 0018 4FF40012 		mov	r2, #2097152
 862 001c 4261     		str	r2, [r0, #20]
 376:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 863              		.loc 1 376 0
 864 001e 0376     		strb	r3, [r0, #24]
 377:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 865              		.loc 1 377 0
 866 0020 4376     		strb	r3, [r0, #25]
 378:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 867              		.loc 1 378 0
 868 0022 8376     		strb	r3, [r0, #26]
 379:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 869              		.loc 1 379 0
 870 0024 C376     		strb	r3, [r0, #27]
 380:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 871              		.loc 1 380 0
 872 0026 0377     		strb	r3, [r0, #28]
 381:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 873              		.loc 1 381 0
 874 0028 4377     		strb	r3, [r0, #29]
 382:Core/Src/main.c ****   {
 875              		.loc 1 382 0
 876 002a FFF7FEFF 		bl	HAL_CAN_Init
 877              	.LVL65:
 878 002e 00B9     		cbnz	r0, .L64
 879 0030 08BD     		pop	{r3, pc}
 880              	.L64:
 384:Core/Src/main.c ****   }
 881              		.loc 1 384 0
 882 0032 FFF7FEFF 		bl	Error_Handler
 883              	.LVL66:
 884              	.L66:
 885 0036 00BF     		.align	2
ARM GAS  /tmp/ccXFel8e.s 			page 37


 886              	.L65:
 887 0038 00000000 		.word	hcan1
 888 003c 00640040 		.word	1073767424
 889              		.cfi_endproc
 890              	.LFE75:
 892              		.section	.text.MX_UART4_Init,"ax",%progbits
 893              		.align	1
 894              		.syntax unified
 895              		.thumb
 896              		.thumb_func
 897              		.fpu softvfp
 899              	MX_UART4_Init:
 900              	.LFB82:
 673:Core/Src/main.c **** 
 901              		.loc 1 673 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905 0000 08B5     		push	{r3, lr}
 906              	.LCFI21:
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 3, -8
 909              		.cfi_offset 14, -4
 682:Core/Src/main.c ****   huart4.Init.BaudRate = 115200;
 910              		.loc 1 682 0
 911 0002 0A48     		ldr	r0, .L71
 912 0004 0A4B     		ldr	r3, .L71+4
 913 0006 0360     		str	r3, [r0]
 683:Core/Src/main.c ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 914              		.loc 1 683 0
 915 0008 4FF4E133 		mov	r3, #115200
 916 000c 4360     		str	r3, [r0, #4]
 684:Core/Src/main.c ****   huart4.Init.StopBits = UART_STOPBITS_1;
 917              		.loc 1 684 0
 918 000e 0023     		movs	r3, #0
 919 0010 8360     		str	r3, [r0, #8]
 685:Core/Src/main.c ****   huart4.Init.Parity = UART_PARITY_NONE;
 920              		.loc 1 685 0
 921 0012 C360     		str	r3, [r0, #12]
 686:Core/Src/main.c ****   huart4.Init.Mode = UART_MODE_TX_RX;
 922              		.loc 1 686 0
 923 0014 0361     		str	r3, [r0, #16]
 687:Core/Src/main.c ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 924              		.loc 1 687 0
 925 0016 0C22     		movs	r2, #12
 926 0018 4261     		str	r2, [r0, #20]
 688:Core/Src/main.c ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 927              		.loc 1 688 0
 928 001a 8361     		str	r3, [r0, #24]
 689:Core/Src/main.c ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 929              		.loc 1 689 0
 930 001c C361     		str	r3, [r0, #28]
 690:Core/Src/main.c ****   {
 931              		.loc 1 690 0
 932 001e FFF7FEFF 		bl	HAL_UART_Init
 933              	.LVL67:
 934 0022 00B9     		cbnz	r0, .L70
ARM GAS  /tmp/ccXFel8e.s 			page 38


 935 0024 08BD     		pop	{r3, pc}
 936              	.L70:
 692:Core/Src/main.c ****   }
 937              		.loc 1 692 0
 938 0026 FFF7FEFF 		bl	Error_Handler
 939              	.LVL68:
 940              	.L72:
 941 002a 00BF     		.align	2
 942              	.L71:
 943 002c 00000000 		.word	huart4
 944 0030 004C0040 		.word	1073761280
 945              		.cfi_endproc
 946              	.LFE82:
 948              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 949              		.align	1
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu softvfp
 955              	MX_USART1_UART_Init:
 956              	.LFB83:
 705:Core/Src/main.c **** 
 957              		.loc 1 705 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961 0000 08B5     		push	{r3, lr}
 962              	.LCFI22:
 963              		.cfi_def_cfa_offset 8
 964              		.cfi_offset 3, -8
 965              		.cfi_offset 14, -4
 714:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 966              		.loc 1 714 0
 967 0002 0A48     		ldr	r0, .L77
 968 0004 0A4B     		ldr	r3, .L77+4
 969 0006 0360     		str	r3, [r0]
 715:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 970              		.loc 1 715 0
 971 0008 4FF4E133 		mov	r3, #115200
 972 000c 4360     		str	r3, [r0, #4]
 716:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 973              		.loc 1 716 0
 974 000e 0023     		movs	r3, #0
 975 0010 8360     		str	r3, [r0, #8]
 717:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 976              		.loc 1 717 0
 977 0012 C360     		str	r3, [r0, #12]
 718:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 978              		.loc 1 718 0
 979 0014 0361     		str	r3, [r0, #16]
 719:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 980              		.loc 1 719 0
 981 0016 0C22     		movs	r2, #12
 982 0018 4261     		str	r2, [r0, #20]
 720:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 983              		.loc 1 720 0
 984 001a 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/ccXFel8e.s 			page 39


 721:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 985              		.loc 1 721 0
 986 001c C361     		str	r3, [r0, #28]
 722:Core/Src/main.c ****   {
 987              		.loc 1 722 0
 988 001e FFF7FEFF 		bl	HAL_UART_Init
 989              	.LVL69:
 990 0022 00B9     		cbnz	r0, .L76
 991 0024 08BD     		pop	{r3, pc}
 992              	.L76:
 724:Core/Src/main.c ****   }
 993              		.loc 1 724 0
 994 0026 FFF7FEFF 		bl	Error_Handler
 995              	.LVL70:
 996              	.L78:
 997 002a 00BF     		.align	2
 998              	.L77:
 999 002c 00000000 		.word	huart1
 1000 0030 00380140 		.word	1073821696
 1001              		.cfi_endproc
 1002              	.LFE83:
 1004              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1005              		.align	1
 1006              		.syntax unified
 1007              		.thumb
 1008              		.thumb_func
 1009              		.fpu softvfp
 1011              	MX_TIM3_Init:
 1012              	.LFB80:
 564:Core/Src/main.c **** 
 1013              		.loc 1 564 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 56
 1016              		@ frame_needed = 0, uses_anonymous_args = 0
 1017 0000 00B5     		push	{lr}
 1018              	.LCFI23:
 1019              		.cfi_def_cfa_offset 4
 1020              		.cfi_offset 14, -4
 1021 0002 8FB0     		sub	sp, sp, #60
 1022              	.LCFI24:
 1023              		.cfi_def_cfa_offset 64
 570:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1024              		.loc 1 570 0
 1025 0004 0023     		movs	r3, #0
 1026 0006 0A93     		str	r3, [sp, #40]
 1027 0008 0B93     		str	r3, [sp, #44]
 1028 000a 0C93     		str	r3, [sp, #48]
 1029 000c 0D93     		str	r3, [sp, #52]
 571:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1030              		.loc 1 571 0
 1031 000e 0893     		str	r3, [sp, #32]
 1032 0010 0993     		str	r3, [sp, #36]
 572:Core/Src/main.c **** 
 1033              		.loc 1 572 0
 1034 0012 0193     		str	r3, [sp, #4]
 1035 0014 0293     		str	r3, [sp, #8]
 1036 0016 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccXFel8e.s 			page 40


 1037 0018 0493     		str	r3, [sp, #16]
 1038 001a 0593     		str	r3, [sp, #20]
 1039 001c 0693     		str	r3, [sp, #24]
 1040 001e 0793     		str	r3, [sp, #28]
 577:Core/Src/main.c ****   htim3.Init.Prescaler = 120;
 1041              		.loc 1 577 0
 1042 0020 1F48     		ldr	r0, .L91
 1043 0022 204A     		ldr	r2, .L91+4
 1044 0024 0260     		str	r2, [r0]
 578:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1045              		.loc 1 578 0
 1046 0026 7822     		movs	r2, #120
 1047 0028 4260     		str	r2, [r0, #4]
 579:Core/Src/main.c ****   htim3.Init.Period = 600;
 1048              		.loc 1 579 0
 1049 002a 8360     		str	r3, [r0, #8]
 580:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1050              		.loc 1 580 0
 1051 002c 4FF41672 		mov	r2, #600
 1052 0030 C260     		str	r2, [r0, #12]
 581:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1053              		.loc 1 581 0
 1054 0032 0361     		str	r3, [r0, #16]
 582:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1055              		.loc 1 582 0
 1056 0034 8361     		str	r3, [r0, #24]
 583:Core/Src/main.c ****   {
 1057              		.loc 1 583 0
 1058 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1059              	.LVL71:
 1060 003a 30BB     		cbnz	r0, .L86
 587:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1061              		.loc 1 587 0
 1062 003c 0EA9     		add	r1, sp, #56
 1063 003e 4FF48053 		mov	r3, #4096
 1064 0042 41F8103D 		str	r3, [r1, #-16]!
 588:Core/Src/main.c ****   {
 1065              		.loc 1 588 0
 1066 0046 1648     		ldr	r0, .L91
 1067 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1068              	.LVL72:
 1069 004c F8B9     		cbnz	r0, .L87
 592:Core/Src/main.c ****   {
 1070              		.loc 1 592 0
 1071 004e 1448     		ldr	r0, .L91
 1072 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1073              	.LVL73:
 1074 0054 E8B9     		cbnz	r0, .L88
 596:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1075              		.loc 1 596 0
 1076 0056 0023     		movs	r3, #0
 1077 0058 0893     		str	r3, [sp, #32]
 597:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1078              		.loc 1 597 0
 1079 005a 0993     		str	r3, [sp, #36]
 598:Core/Src/main.c ****   {
 1080              		.loc 1 598 0
ARM GAS  /tmp/ccXFel8e.s 			page 41


 1081 005c 08A9     		add	r1, sp, #32
 1082 005e 1048     		ldr	r0, .L91
 1083 0060 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1084              	.LVL74:
 1085 0064 B8B9     		cbnz	r0, .L89
 602:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1086              		.loc 1 602 0
 1087 0066 6023     		movs	r3, #96
 1088 0068 0193     		str	r3, [sp, #4]
 603:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1089              		.loc 1 603 0
 1090 006a 0023     		movs	r3, #0
 1091 006c 0293     		str	r3, [sp, #8]
 604:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1092              		.loc 1 604 0
 1093 006e 0393     		str	r3, [sp, #12]
 605:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1094              		.loc 1 605 0
 1095 0070 0593     		str	r3, [sp, #20]
 606:Core/Src/main.c ****   {
 1096              		.loc 1 606 0
 1097 0072 0822     		movs	r2, #8
 1098 0074 01A9     		add	r1, sp, #4
 1099 0076 0A48     		ldr	r0, .L91
 1100 0078 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1101              	.LVL75:
 1102 007c 68B9     		cbnz	r0, .L90
 613:Core/Src/main.c **** }
 1103              		.loc 1 613 0
 1104 007e 0848     		ldr	r0, .L91
 1105 0080 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1106              	.LVL76:
 614:Core/Src/main.c **** 
 1107              		.loc 1 614 0
 1108 0084 0FB0     		add	sp, sp, #60
 1109              	.LCFI25:
 1110              		.cfi_remember_state
 1111              		.cfi_def_cfa_offset 4
 1112              		@ sp needed
 1113 0086 5DF804FB 		ldr	pc, [sp], #4
 1114              	.L86:
 1115              	.LCFI26:
 1116              		.cfi_restore_state
 585:Core/Src/main.c ****   }
 1117              		.loc 1 585 0
 1118 008a FFF7FEFF 		bl	Error_Handler
 1119              	.LVL77:
 1120              	.L87:
 590:Core/Src/main.c ****   }
 1121              		.loc 1 590 0
 1122 008e FFF7FEFF 		bl	Error_Handler
 1123              	.LVL78:
 1124              	.L88:
 594:Core/Src/main.c ****   }
 1125              		.loc 1 594 0
 1126 0092 FFF7FEFF 		bl	Error_Handler
 1127              	.LVL79:
ARM GAS  /tmp/ccXFel8e.s 			page 42


 1128              	.L89:
 600:Core/Src/main.c ****   }
 1129              		.loc 1 600 0
 1130 0096 FFF7FEFF 		bl	Error_Handler
 1131              	.LVL80:
 1132              	.L90:
 608:Core/Src/main.c ****   }
 1133              		.loc 1 608 0
 1134 009a FFF7FEFF 		bl	Error_Handler
 1135              	.LVL81:
 1136              	.L92:
 1137 009e 00BF     		.align	2
 1138              	.L91:
 1139 00a0 00000000 		.word	htim3
 1140 00a4 00040040 		.word	1073742848
 1141              		.cfi_endproc
 1142              	.LFE80:
 1144              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1145              		.align	1
 1146              		.syntax unified
 1147              		.thumb
 1148              		.thumb_func
 1149              		.fpu softvfp
 1151              	MX_TIM1_Init:
 1152              	.LFB78:
 453:Core/Src/main.c **** 
 1153              		.loc 1 453 0
 1154              		.cfi_startproc
 1155              		@ args = 0, pretend = 0, frame = 72
 1156              		@ frame_needed = 0, uses_anonymous_args = 0
 1157 0000 10B5     		push	{r4, lr}
 1158              	.LCFI27:
 1159              		.cfi_def_cfa_offset 8
 1160              		.cfi_offset 4, -8
 1161              		.cfi_offset 14, -4
 1162 0002 92B0     		sub	sp, sp, #72
 1163              	.LCFI28:
 1164              		.cfi_def_cfa_offset 80
 459:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1165              		.loc 1 459 0
 1166 0004 0024     		movs	r4, #0
 1167 0006 1094     		str	r4, [sp, #64]
 1168 0008 1194     		str	r4, [sp, #68]
 460:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1169              		.loc 1 460 0
 1170 000a 0994     		str	r4, [sp, #36]
 1171 000c 0A94     		str	r4, [sp, #40]
 1172 000e 0B94     		str	r4, [sp, #44]
 1173 0010 0C94     		str	r4, [sp, #48]
 1174 0012 0D94     		str	r4, [sp, #52]
 1175 0014 0E94     		str	r4, [sp, #56]
 1176 0016 0F94     		str	r4, [sp, #60]
 461:Core/Src/main.c **** 
 1177              		.loc 1 461 0
 1178 0018 2022     		movs	r2, #32
 1179 001a 2146     		mov	r1, r4
 1180 001c 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccXFel8e.s 			page 43


 1181 001e FFF7FEFF 		bl	memset
 1182              	.LVL82:
 466:Core/Src/main.c ****   htim1.Init.Prescaler = 240;
 1183              		.loc 1 466 0
 1184 0022 2148     		ldr	r0, .L103
 1185 0024 214B     		ldr	r3, .L103+4
 1186 0026 0360     		str	r3, [r0]
 467:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1187              		.loc 1 467 0
 1188 0028 F023     		movs	r3, #240
 1189 002a 4360     		str	r3, [r0, #4]
 468:Core/Src/main.c ****   htim1.Init.Period = 65535;
 1190              		.loc 1 468 0
 1191 002c 8460     		str	r4, [r0, #8]
 469:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1192              		.loc 1 469 0
 1193 002e 4FF6FF73 		movw	r3, #65535
 1194 0032 C360     		str	r3, [r0, #12]
 470:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1195              		.loc 1 470 0
 1196 0034 0461     		str	r4, [r0, #16]
 471:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1197              		.loc 1 471 0
 1198 0036 4461     		str	r4, [r0, #20]
 472:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1199              		.loc 1 472 0
 1200 0038 8461     		str	r4, [r0, #24]
 473:Core/Src/main.c ****   {
 1201              		.loc 1 473 0
 1202 003a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1203              	.LVL83:
 1204 003e 0028     		cmp	r0, #0
 1205 0040 29D1     		bne	.L99
 477:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1206              		.loc 1 477 0
 1207 0042 0023     		movs	r3, #0
 1208 0044 1093     		str	r3, [sp, #64]
 478:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1209              		.loc 1 478 0
 1210 0046 1193     		str	r3, [sp, #68]
 479:Core/Src/main.c ****   {
 1211              		.loc 1 479 0
 1212 0048 10A9     		add	r1, sp, #64
 1213 004a 1748     		ldr	r0, .L103
 1214 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1215              	.LVL84:
 1216 0050 18BB     		cbnz	r0, .L100
 483:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1217              		.loc 1 483 0
 1218 0052 6023     		movs	r3, #96
 1219 0054 0993     		str	r3, [sp, #36]
 484:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1220              		.loc 1 484 0
 1221 0056 0022     		movs	r2, #0
 1222 0058 0A92     		str	r2, [sp, #40]
 485:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1223              		.loc 1 485 0
ARM GAS  /tmp/ccXFel8e.s 			page 44


 1224 005a 0B92     		str	r2, [sp, #44]
 486:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1225              		.loc 1 486 0
 1226 005c 0C92     		str	r2, [sp, #48]
 487:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1227              		.loc 1 487 0
 1228 005e 0D92     		str	r2, [sp, #52]
 488:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1229              		.loc 1 488 0
 1230 0060 0E92     		str	r2, [sp, #56]
 489:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1231              		.loc 1 489 0
 1232 0062 0F92     		str	r2, [sp, #60]
 490:Core/Src/main.c ****   {
 1233              		.loc 1 490 0
 1234 0064 09A9     		add	r1, sp, #36
 1235 0066 1048     		ldr	r0, .L103
 1236 0068 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1237              	.LVL85:
 1238 006c B8B9     		cbnz	r0, .L101
 494:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1239              		.loc 1 494 0
 1240 006e 0023     		movs	r3, #0
 1241 0070 0193     		str	r3, [sp, #4]
 495:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1242              		.loc 1 495 0
 1243 0072 0293     		str	r3, [sp, #8]
 496:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1244              		.loc 1 496 0
 1245 0074 0393     		str	r3, [sp, #12]
 497:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1246              		.loc 1 497 0
 1247 0076 0493     		str	r3, [sp, #16]
 498:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1248              		.loc 1 498 0
 1249 0078 0593     		str	r3, [sp, #20]
 499:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1250              		.loc 1 499 0
 1251 007a 4FF40052 		mov	r2, #8192
 1252 007e 0692     		str	r2, [sp, #24]
 500:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1253              		.loc 1 500 0
 1254 0080 0893     		str	r3, [sp, #32]
 501:Core/Src/main.c ****   {
 1255              		.loc 1 501 0
 1256 0082 01A9     		add	r1, sp, #4
 1257 0084 0848     		ldr	r0, .L103
 1258 0086 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1259              	.LVL86:
 1260 008a 50B9     		cbnz	r0, .L102
 508:Core/Src/main.c **** }
 1261              		.loc 1 508 0
 1262 008c 0648     		ldr	r0, .L103
 1263 008e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1264              	.LVL87:
 509:Core/Src/main.c **** 
 1265              		.loc 1 509 0
ARM GAS  /tmp/ccXFel8e.s 			page 45


 1266 0092 12B0     		add	sp, sp, #72
 1267              	.LCFI29:
 1268              		.cfi_remember_state
 1269              		.cfi_def_cfa_offset 8
 1270              		@ sp needed
 1271 0094 10BD     		pop	{r4, pc}
 1272              	.L99:
 1273              	.LCFI30:
 1274              		.cfi_restore_state
 475:Core/Src/main.c ****   }
 1275              		.loc 1 475 0
 1276 0096 FFF7FEFF 		bl	Error_Handler
 1277              	.LVL88:
 1278              	.L100:
 481:Core/Src/main.c ****   }
 1279              		.loc 1 481 0
 1280 009a FFF7FEFF 		bl	Error_Handler
 1281              	.LVL89:
 1282              	.L101:
 492:Core/Src/main.c ****   }
 1283              		.loc 1 492 0
 1284 009e FFF7FEFF 		bl	Error_Handler
 1285              	.LVL90:
 1286              	.L102:
 503:Core/Src/main.c ****   }
 1287              		.loc 1 503 0
 1288 00a2 FFF7FEFF 		bl	Error_Handler
 1289              	.LVL91:
 1290              	.L104:
 1291 00a6 00BF     		.align	2
 1292              	.L103:
 1293 00a8 00000000 		.word	htim1
 1294 00ac 002C0140 		.word	1073818624
 1295              		.cfi_endproc
 1296              	.LFE78:
 1298              		.section	.text.MX_TIM5_Init,"ax",%progbits
 1299              		.align	1
 1300              		.syntax unified
 1301              		.thumb
 1302              		.thumb_func
 1303              		.fpu softvfp
 1305              	MX_TIM5_Init:
 1306              	.LFB81:
 622:Core/Src/main.c **** 
 1307              		.loc 1 622 0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 40
 1310              		@ frame_needed = 0, uses_anonymous_args = 0
 1311 0000 00B5     		push	{lr}
 1312              	.LCFI31:
 1313              		.cfi_def_cfa_offset 4
 1314              		.cfi_offset 14, -4
 1315 0002 8BB0     		sub	sp, sp, #44
 1316              	.LCFI32:
 1317              		.cfi_def_cfa_offset 48
 628:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1318              		.loc 1 628 0
ARM GAS  /tmp/ccXFel8e.s 			page 46


 1319 0004 0023     		movs	r3, #0
 1320 0006 0893     		str	r3, [sp, #32]
 1321 0008 0993     		str	r3, [sp, #36]
 629:Core/Src/main.c **** 
 1322              		.loc 1 629 0
 1323 000a 0193     		str	r3, [sp, #4]
 1324 000c 0293     		str	r3, [sp, #8]
 1325 000e 0393     		str	r3, [sp, #12]
 1326 0010 0493     		str	r3, [sp, #16]
 1327 0012 0593     		str	r3, [sp, #20]
 1328 0014 0693     		str	r3, [sp, #24]
 1329 0016 0793     		str	r3, [sp, #28]
 634:Core/Src/main.c ****   htim5.Init.Prescaler = 100;
 1330              		.loc 1 634 0
 1331 0018 1848     		ldr	r0, .L115
 1332 001a 194A     		ldr	r2, .L115+4
 1333 001c 0260     		str	r2, [r0]
 635:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1334              		.loc 1 635 0
 1335 001e 6422     		movs	r2, #100
 1336 0020 4260     		str	r2, [r0, #4]
 636:Core/Src/main.c ****   htim5.Init.Period = 10;
 1337              		.loc 1 636 0
 1338 0022 8360     		str	r3, [r0, #8]
 637:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1339              		.loc 1 637 0
 1340 0024 0A22     		movs	r2, #10
 1341 0026 C260     		str	r2, [r0, #12]
 638:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1342              		.loc 1 638 0
 1343 0028 0361     		str	r3, [r0, #16]
 639:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 1344              		.loc 1 639 0
 1345 002a 8361     		str	r3, [r0, #24]
 640:Core/Src/main.c ****   {
 1346              		.loc 1 640 0
 1347 002c FFF7FEFF 		bl	HAL_TIM_OC_Init
 1348              	.LVL92:
 1349 0030 D8B9     		cbnz	r0, .L111
 644:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1350              		.loc 1 644 0
 1351 0032 0023     		movs	r3, #0
 1352 0034 0893     		str	r3, [sp, #32]
 645:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1353              		.loc 1 645 0
 1354 0036 0993     		str	r3, [sp, #36]
 646:Core/Src/main.c ****   {
 1355              		.loc 1 646 0
 1356 0038 08A9     		add	r1, sp, #32
 1357 003a 1048     		ldr	r0, .L115
 1358 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1359              	.LVL93:
 1360 0040 A8B9     		cbnz	r0, .L112
 650:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1361              		.loc 1 650 0
 1362 0042 0022     		movs	r2, #0
 1363 0044 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/ccXFel8e.s 			page 47


 651:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1364              		.loc 1 651 0
 1365 0046 0292     		str	r2, [sp, #8]
 652:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1366              		.loc 1 652 0
 1367 0048 0392     		str	r2, [sp, #12]
 653:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1368              		.loc 1 653 0
 1369 004a 0592     		str	r2, [sp, #20]
 654:Core/Src/main.c ****   {
 1370              		.loc 1 654 0
 1371 004c 01A9     		add	r1, sp, #4
 1372 004e 0B48     		ldr	r0, .L115
 1373 0050 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1374              	.LVL94:
 1375 0054 68B9     		cbnz	r0, .L113
 658:Core/Src/main.c ****   {
 1376              		.loc 1 658 0
 1377 0056 0422     		movs	r2, #4
 1378 0058 0DEB0201 		add	r1, sp, r2
 1379 005c 0748     		ldr	r0, .L115
 1380 005e FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1381              	.LVL95:
 1382 0062 40B9     		cbnz	r0, .L114
 665:Core/Src/main.c **** 
 1383              		.loc 1 665 0
 1384 0064 0BB0     		add	sp, sp, #44
 1385              	.LCFI33:
 1386              		.cfi_remember_state
 1387              		.cfi_def_cfa_offset 4
 1388              		@ sp needed
 1389 0066 5DF804FB 		ldr	pc, [sp], #4
 1390              	.L111:
 1391              	.LCFI34:
 1392              		.cfi_restore_state
 642:Core/Src/main.c ****   }
 1393              		.loc 1 642 0
 1394 006a FFF7FEFF 		bl	Error_Handler
 1395              	.LVL96:
 1396              	.L112:
 648:Core/Src/main.c ****   }
 1397              		.loc 1 648 0
 1398 006e FFF7FEFF 		bl	Error_Handler
 1399              	.LVL97:
 1400              	.L113:
 656:Core/Src/main.c ****   }
 1401              		.loc 1 656 0
 1402 0072 FFF7FEFF 		bl	Error_Handler
 1403              	.LVL98:
 1404              	.L114:
 660:Core/Src/main.c ****   }
 1405              		.loc 1 660 0
 1406 0076 FFF7FEFF 		bl	Error_Handler
 1407              	.LVL99:
 1408              	.L116:
 1409 007a 00BF     		.align	2
 1410              	.L115:
ARM GAS  /tmp/ccXFel8e.s 			page 48


 1411 007c 00000000 		.word	htim5
 1412 0080 000C0040 		.word	1073744896
 1413              		.cfi_endproc
 1414              	.LFE81:
 1416              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1417              		.align	1
 1418              		.syntax unified
 1419              		.thumb
 1420              		.thumb_func
 1421              		.fpu softvfp
 1423              	MX_TIM2_Init:
 1424              	.LFB79:
 517:Core/Src/main.c **** 
 1425              		.loc 1 517 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 40
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429 0000 00B5     		push	{lr}
 1430              	.LCFI35:
 1431              		.cfi_def_cfa_offset 4
 1432              		.cfi_offset 14, -4
 1433 0002 8BB0     		sub	sp, sp, #44
 1434              	.LCFI36:
 1435              		.cfi_def_cfa_offset 48
 523:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1436              		.loc 1 523 0
 1437 0004 0023     		movs	r3, #0
 1438 0006 0893     		str	r3, [sp, #32]
 1439 0008 0993     		str	r3, [sp, #36]
 524:Core/Src/main.c **** 
 1440              		.loc 1 524 0
 1441 000a 0193     		str	r3, [sp, #4]
 1442 000c 0293     		str	r3, [sp, #8]
 1443 000e 0393     		str	r3, [sp, #12]
 1444 0010 0493     		str	r3, [sp, #16]
 1445 0012 0593     		str	r3, [sp, #20]
 1446 0014 0693     		str	r3, [sp, #24]
 1447 0016 0793     		str	r3, [sp, #28]
 529:Core/Src/main.c ****   htim2.Init.Prescaler = 10;
 1448              		.loc 1 529 0
 1449 0018 1448     		ldr	r0, .L125
 1450 001a 4FF08042 		mov	r2, #1073741824
 1451 001e 0260     		str	r2, [r0]
 530:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1452              		.loc 1 530 0
 1453 0020 0A22     		movs	r2, #10
 1454 0022 4260     		str	r2, [r0, #4]
 531:Core/Src/main.c ****   htim2.Init.Period = 600;
 1455              		.loc 1 531 0
 1456 0024 8360     		str	r3, [r0, #8]
 532:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1457              		.loc 1 532 0
 1458 0026 4FF41672 		mov	r2, #600
 1459 002a C260     		str	r2, [r0, #12]
 533:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1460              		.loc 1 533 0
 1461 002c 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/ccXFel8e.s 			page 49


 534:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 1462              		.loc 1 534 0
 1463 002e 8361     		str	r3, [r0, #24]
 535:Core/Src/main.c ****   {
 1464              		.loc 1 535 0
 1465 0030 FFF7FEFF 		bl	HAL_TIM_OC_Init
 1466              	.LVL100:
 1467 0034 A0B9     		cbnz	r0, .L122
 539:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1468              		.loc 1 539 0
 1469 0036 0023     		movs	r3, #0
 1470 0038 0893     		str	r3, [sp, #32]
 540:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1471              		.loc 1 540 0
 1472 003a 0993     		str	r3, [sp, #36]
 541:Core/Src/main.c ****   {
 1473              		.loc 1 541 0
 1474 003c 08A9     		add	r1, sp, #32
 1475 003e 0B48     		ldr	r0, .L125
 1476 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1477              	.LVL101:
 1478 0044 70B9     		cbnz	r0, .L123
 545:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1479              		.loc 1 545 0
 1480 0046 0022     		movs	r2, #0
 1481 0048 0192     		str	r2, [sp, #4]
 546:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1482              		.loc 1 546 0
 1483 004a 0292     		str	r2, [sp, #8]
 547:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1484              		.loc 1 547 0
 1485 004c 0392     		str	r2, [sp, #12]
 548:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1486              		.loc 1 548 0
 1487 004e 0592     		str	r2, [sp, #20]
 549:Core/Src/main.c ****   {
 1488              		.loc 1 549 0
 1489 0050 01A9     		add	r1, sp, #4
 1490 0052 0648     		ldr	r0, .L125
 1491 0054 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 1492              	.LVL102:
 1493 0058 30B9     		cbnz	r0, .L124
 556:Core/Src/main.c **** 
 1494              		.loc 1 556 0
 1495 005a 0BB0     		add	sp, sp, #44
 1496              	.LCFI37:
 1497              		.cfi_remember_state
 1498              		.cfi_def_cfa_offset 4
 1499              		@ sp needed
 1500 005c 5DF804FB 		ldr	pc, [sp], #4
 1501              	.L122:
 1502              	.LCFI38:
 1503              		.cfi_restore_state
 537:Core/Src/main.c ****   }
 1504              		.loc 1 537 0
 1505 0060 FFF7FEFF 		bl	Error_Handler
 1506              	.LVL103:
ARM GAS  /tmp/ccXFel8e.s 			page 50


 1507              	.L123:
 543:Core/Src/main.c ****   }
 1508              		.loc 1 543 0
 1509 0064 FFF7FEFF 		bl	Error_Handler
 1510              	.LVL104:
 1511              	.L124:
 551:Core/Src/main.c ****   }
 1512              		.loc 1 551 0
 1513 0068 FFF7FEFF 		bl	Error_Handler
 1514              	.LVL105:
 1515              	.L126:
 1516              		.align	2
 1517              	.L125:
 1518 006c 00000000 		.word	htim2
 1519              		.cfi_endproc
 1520              	.LFE79:
 1522              		.section	.text.SystemClock_Config,"ax",%progbits
 1523              		.align	1
 1524              		.global	SystemClock_Config
 1525              		.syntax unified
 1526              		.thumb
 1527              		.thumb_func
 1528              		.fpu softvfp
 1530              	SystemClock_Config:
 1531              	.LFB73:
 250:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1532              		.loc 1 250 0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 112
 1535              		@ frame_needed = 0, uses_anonymous_args = 0
 1536 0000 00B5     		push	{lr}
 1537              	.LCFI39:
 1538              		.cfi_def_cfa_offset 4
 1539              		.cfi_offset 14, -4
 1540 0002 9DB0     		sub	sp, sp, #116
 1541              	.LCFI40:
 1542              		.cfi_def_cfa_offset 120
 251:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1543              		.loc 1 251 0
 1544 0004 3822     		movs	r2, #56
 1545 0006 0021     		movs	r1, #0
 1546 0008 0DEB0200 		add	r0, sp, r2
 1547 000c FFF7FEFF 		bl	memset
 1548              	.LVL106:
 252:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1549              		.loc 1 252 0
 1550 0010 0021     		movs	r1, #0
 1551 0012 0991     		str	r1, [sp, #36]
 1552 0014 0A91     		str	r1, [sp, #40]
 1553 0016 0B91     		str	r1, [sp, #44]
 1554 0018 0C91     		str	r1, [sp, #48]
 1555 001a 0D91     		str	r1, [sp, #52]
 253:Core/Src/main.c **** 
 1556              		.loc 1 253 0
 1557 001c 2022     		movs	r2, #32
 1558 001e 01A8     		add	r0, sp, #4
 1559 0020 FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccXFel8e.s 			page 51


 1560              	.LVL107:
 258:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1561              		.loc 1 258 0
 1562 0024 0122     		movs	r2, #1
 1563 0026 0E92     		str	r2, [sp, #56]
 259:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1564              		.loc 1 259 0
 1565 0028 4FF48033 		mov	r3, #65536
 1566 002c 1093     		str	r3, [sp, #64]
 261:Core/Src/main.c ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 1567              		.loc 1 261 0
 1568 002e 1392     		str	r2, [sp, #76]
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1569              		.loc 1 263 0
 1570 0030 0222     		movs	r2, #2
 1571 0032 1692     		str	r2, [sp, #88]
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1572              		.loc 1 264 0
 1573 0034 1793     		str	r3, [sp, #92]
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 1574              		.loc 1 265 0
 1575 0036 4FF4E013 		mov	r3, #1835008
 1576 003a 1893     		str	r3, [sp, #96]
 267:Core/Src/main.c ****   {
 1577              		.loc 1 267 0
 1578 003c 0EA8     		add	r0, sp, #56
 1579 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1580              	.LVL108:
 1581 0042 E0B9     		cbnz	r0, .L132
 273:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1582              		.loc 1 273 0
 1583 0044 0F23     		movs	r3, #15
 1584 0046 0993     		str	r3, [sp, #36]
 274:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1585              		.loc 1 274 0
 1586 0048 0221     		movs	r1, #2
 1587 004a 0A91     		str	r1, [sp, #40]
 275:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1588              		.loc 1 275 0
 1589 004c 0023     		movs	r3, #0
 1590 004e 0B93     		str	r3, [sp, #44]
 276:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1591              		.loc 1 276 0
 1592 0050 4FF48062 		mov	r2, #1024
 1593 0054 0C92     		str	r2, [sp, #48]
 277:Core/Src/main.c **** 
 1594              		.loc 1 277 0
 1595 0056 0D93     		str	r3, [sp, #52]
 279:Core/Src/main.c ****   {
 1596              		.loc 1 279 0
 1597 0058 09A8     		add	r0, sp, #36
 1598 005a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1599              	.LVL109:
 1600 005e 80B9     		cbnz	r0, .L133
 283:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1601              		.loc 1 283 0
 1602 0060 0223     		movs	r3, #2
ARM GAS  /tmp/ccXFel8e.s 			page 52


 1603 0062 0193     		str	r3, [sp, #4]
 284:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1604              		.loc 1 284 0
 1605 0064 4FF40043 		mov	r3, #32768
 1606 0068 0393     		str	r3, [sp, #12]
 285:Core/Src/main.c ****   {
 1607              		.loc 1 285 0
 1608 006a 01A8     		add	r0, sp, #4
 1609 006c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1610              	.LVL110:
 1611 0070 48B9     		cbnz	r0, .L134
 291:Core/Src/main.c **** }
 1612              		.loc 1 291 0
 1613 0072 0122     		movs	r2, #1
 1614 0074 054B     		ldr	r3, .L135
 1615 0076 1A60     		str	r2, [r3]
 292:Core/Src/main.c **** 
 1616              		.loc 1 292 0
 1617 0078 1DB0     		add	sp, sp, #116
 1618              	.LCFI41:
 1619              		.cfi_remember_state
 1620              		.cfi_def_cfa_offset 4
 1621              		@ sp needed
 1622 007a 5DF804FB 		ldr	pc, [sp], #4
 1623              	.L132:
 1624              	.LCFI42:
 1625              		.cfi_restore_state
 269:Core/Src/main.c ****   }
 1626              		.loc 1 269 0
 1627 007e FFF7FEFF 		bl	Error_Handler
 1628              	.LVL111:
 1629              	.L133:
 281:Core/Src/main.c ****   }
 1630              		.loc 1 281 0
 1631 0082 FFF7FEFF 		bl	Error_Handler
 1632              	.LVL112:
 1633              	.L134:
 287:Core/Src/main.c ****   }
 1634              		.loc 1 287 0
 1635 0086 FFF7FEFF 		bl	Error_Handler
 1636              	.LVL113:
 1637              	.L136:
 1638 008a 00BF     		.align	2
 1639              	.L135:
 1640 008c 70004242 		.word	1111621744
 1641              		.cfi_endproc
 1642              	.LFE73:
 1644              		.section	.text.main,"ax",%progbits
 1645              		.align	1
 1646              		.global	main
 1647              		.syntax unified
 1648              		.thumb
 1649              		.thumb_func
 1650              		.fpu softvfp
 1652              	main:
 1653              	.LFB72:
 131:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
ARM GAS  /tmp/ccXFel8e.s 			page 53


 1654              		.loc 1 131 0
 1655              		.cfi_startproc
 1656              		@ Volatile: function does not return.
 1657              		@ args = 0, pretend = 0, frame = 0
 1658              		@ frame_needed = 0, uses_anonymous_args = 0
 1659 0000 08B5     		push	{r3, lr}
 1660              	.LCFI43:
 1661              		.cfi_def_cfa_offset 8
 1662              		.cfi_offset 3, -8
 1663              		.cfi_offset 14, -4
 139:Core/Src/main.c **** 
 1664              		.loc 1 139 0
 1665 0002 FFF7FEFF 		bl	HAL_Init
 1666              	.LVL114:
 146:Core/Src/main.c **** 
 1667              		.loc 1 146 0
 1668 0006 FFF7FEFF 		bl	SystemClock_Config
 1669              	.LVL115:
 153:Core/Src/main.c ****   MX_DMA_Init();
 1670              		.loc 1 153 0
 1671 000a FFF7FEFF 		bl	MX_GPIO_Init
 1672              	.LVL116:
 154:Core/Src/main.c ****   MX_CAN2_Init();
 1673              		.loc 1 154 0
 1674 000e FFF7FEFF 		bl	MX_DMA_Init
 1675              	.LVL117:
 155:Core/Src/main.c ****   MX_ADC1_Init();
 1676              		.loc 1 155 0
 1677 0012 FFF7FEFF 		bl	MX_CAN2_Init
 1678              	.LVL118:
 156:Core/Src/main.c ****   MX_CAN1_Init();
 1679              		.loc 1 156 0
 1680 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1681              	.LVL119:
 157:Core/Src/main.c ****   MX_I2C1_SMBUS_Init();
 1682              		.loc 1 157 0
 1683 001a FFF7FEFF 		bl	MX_CAN1_Init
 1684              	.LVL120:
 159:Core/Src/main.c ****   MX_USART1_UART_Init();
 1685              		.loc 1 159 0
 1686 001e FFF7FEFF 		bl	MX_UART4_Init
 1687              	.LVL121:
 160:Core/Src/main.c ****   MX_TIM3_Init();
 1688              		.loc 1 160 0
 1689 0022 FFF7FEFF 		bl	MX_USART1_UART_Init
 1690              	.LVL122:
 161:Core/Src/main.c ****   MX_TIM1_Init();
 1691              		.loc 1 161 0
 1692 0026 FFF7FEFF 		bl	MX_TIM3_Init
 1693              	.LVL123:
 162:Core/Src/main.c ****   MX_TIM5_Init();
 1694              		.loc 1 162 0
 1695 002a FFF7FEFF 		bl	MX_TIM1_Init
 1696              	.LVL124:
 163:Core/Src/main.c ****   MX_TIM2_Init();
 1697              		.loc 1 163 0
 1698 002e FFF7FEFF 		bl	MX_TIM5_Init
ARM GAS  /tmp/ccXFel8e.s 			page 54


 1699              	.LVL125:
 164:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1700              		.loc 1 164 0
 1701 0032 FFF7FEFF 		bl	MX_TIM2_Init
 1702              	.LVL126:
 166:Core/Src/main.c ****   gaugeInit();
 1703              		.loc 1 166 0
 1704 0036 FFF7FEFF 		bl	canSettings
 1705              	.LVL127:
 167:Core/Src/main.c ****   dcdcInit();
 1706              		.loc 1 167 0
 1707 003a FFF7FEFF 		bl	gaugeInit
 1708              	.LVL128:
 168:Core/Src/main.c ****   vcuInit();
 1709              		.loc 1 168 0
 1710 003e FFF7FEFF 		bl	dcdcInit
 1711              	.LVL129:
 169:Core/Src/main.c ****   wpInit();
 1712              		.loc 1 169 0
 1713 0042 FFF7FEFF 		bl	vcuInit
 1714              	.LVL130:
 170:Core/Src/main.c **** 
 1715              		.loc 1 170 0
 1716 0046 FFF7FEFF 		bl	wpInit
 1717              	.LVL131:
 172:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t) & (waterPWM[0]), GPIOC_BASE + 16, 100); //water pump pwm
 1718              		.loc 1 172 0
 1719 004a 2C4C     		ldr	r4, .L140
 1720 004c 2046     		mov	r0, r4
 1721 004e FFF7FEFF 		bl	HAL_TIM_Base_Start
 1722              	.LVL132:
 173:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1723              		.loc 1 173 0
 1724 0052 2B4D     		ldr	r5, .L140+4
 1725 0054 6423     		movs	r3, #100
 1726 0056 2A46     		mov	r2, r5
 1727 0058 2A49     		ldr	r1, .L140+8
 1728 005a 2B48     		ldr	r0, .L140+12
 1729 005c FFF7FEFF 		bl	HAL_DMA_Start
 1730              	.LVL133:
 174:Core/Src/main.c **** 
 1731              		.loc 1 174 0
 1732 0060 2268     		ldr	r2, [r4]
 1733 0062 D368     		ldr	r3, [r2, #12]
 1734 0064 43F40073 		orr	r3, r3, #512
 1735 0068 D360     		str	r3, [r2, #12]
 176:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch1, (uint32_t) & (tempPWM[0]), GPIOC_BASE + 16, 100); // temp gauge PWM
 1736              		.loc 1 176 0
 1737 006a 284C     		ldr	r4, .L140+16
 1738 006c 2046     		mov	r0, r4
 1739 006e FFF7FEFF 		bl	HAL_TIM_Base_Start
 1740              	.LVL134:
 177:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC1);
 1741              		.loc 1 177 0
 1742 0072 6423     		movs	r3, #100
 1743 0074 2A46     		mov	r2, r5
 1744 0076 2649     		ldr	r1, .L140+20
ARM GAS  /tmp/ccXFel8e.s 			page 55


 1745 0078 2648     		ldr	r0, .L140+24
 1746 007a FFF7FEFF 		bl	HAL_DMA_Start
 1747              	.LVL135:
 178:Core/Src/main.c ****   HAL_DMA_Start(&hdma_tim5_ch2, (uint32_t) & (socPWM[0]), GPIOC_BASE + 16, 1000); // SOC gauge PWM
 1748              		.loc 1 178 0
 1749 007e 2268     		ldr	r2, [r4]
 1750 0080 D368     		ldr	r3, [r2, #12]
 1751 0082 43F40073 		orr	r3, r3, #512
 1752 0086 D360     		str	r3, [r2, #12]
 179:Core/Src/main.c ****   __HAL_TIM_ENABLE_DMA(&htim5, TIM_DMA_CC2);
 1753              		.loc 1 179 0
 1754 0088 4FF47A73 		mov	r3, #1000
 1755 008c 2A46     		mov	r2, r5
 1756 008e 2249     		ldr	r1, .L140+28
 1757 0090 2248     		ldr	r0, .L140+32
 1758 0092 FFF7FEFF 		bl	HAL_DMA_Start
 1759              	.LVL136:
 180:Core/Src/main.c **** 
 1760              		.loc 1 180 0
 1761 0096 2268     		ldr	r2, [r4]
 1762 0098 D368     		ldr	r3, [r2, #12]
 1763 009a 43F48063 		orr	r3, r3, #1024
 1764 009e D360     		str	r3, [r2, #12]
 182:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Speedo pwm start
 1765              		.loc 1 182 0
 1766 00a0 0021     		movs	r1, #0
 1767 00a2 1F48     		ldr	r0, .L140+36
 1768 00a4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1769              	.LVL137:
 183:Core/Src/main.c **** 
 1770              		.loc 1 183 0
 1771 00a8 0821     		movs	r1, #8
 1772 00aa 1E48     		ldr	r0, .L140+40
 1773 00ac FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1774              	.LVL138:
 185:Core/Src/main.c **** 
 1775              		.loc 1 185 0
 1776 00b0 0322     		movs	r2, #3
 1777 00b2 1D49     		ldr	r1, .L140+44
 1778 00b4 1D48     		ldr	r0, .L140+48
 1779 00b6 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1780              	.LVL139:
 190:Core/Src/main.c **** 
 1781              		.loc 1 190 0
 1782 00ba FFF7FEFF 		bl	osKernelInitialize
 1783              	.LVL140:
 210:Core/Src/main.c **** 
 1784              		.loc 1 210 0
 1785 00be 1C4A     		ldr	r2, .L140+52
 1786 00c0 0021     		movs	r1, #0
 1787 00c2 1C48     		ldr	r0, .L140+56
 1788 00c4 FFF7FEFF 		bl	osThreadNew
 1789              	.LVL141:
 1790 00c8 1B4B     		ldr	r3, .L140+60
 1791 00ca 1860     		str	r0, [r3]
 213:Core/Src/main.c **** 
 1792              		.loc 1 213 0
ARM GAS  /tmp/ccXFel8e.s 			page 56


 1793 00cc 1B4A     		ldr	r2, .L140+64
 1794 00ce 0021     		movs	r1, #0
 1795 00d0 1B48     		ldr	r0, .L140+68
 1796 00d2 FFF7FEFF 		bl	osThreadNew
 1797              	.LVL142:
 1798 00d6 1B4B     		ldr	r3, .L140+72
 1799 00d8 1860     		str	r0, [r3]
 216:Core/Src/main.c **** 
 1800              		.loc 1 216 0
 1801 00da 1B4A     		ldr	r2, .L140+76
 1802 00dc 0021     		movs	r1, #0
 1803 00de 1B48     		ldr	r0, .L140+80
 1804 00e0 FFF7FEFF 		bl	osThreadNew
 1805              	.LVL143:
 1806 00e4 1A4B     		ldr	r3, .L140+84
 1807 00e6 1860     		str	r0, [r3]
 219:Core/Src/main.c **** 
 1808              		.loc 1 219 0
 1809 00e8 1A4A     		ldr	r2, .L140+88
 1810 00ea 0021     		movs	r1, #0
 1811 00ec 1A48     		ldr	r0, .L140+92
 1812 00ee FFF7FEFF 		bl	osThreadNew
 1813              	.LVL144:
 1814 00f2 1A4B     		ldr	r3, .L140+96
 1815 00f4 1860     		str	r0, [r3]
 230:Core/Src/main.c **** 
 1816              		.loc 1 230 0
 1817 00f6 FFF7FEFF 		bl	osKernelStart
 1818              	.LVL145:
 1819              	.L138:
 1820 00fa FEE7     		b	.L138
 1821              	.L141:
 1822              		.align	2
 1823              	.L140:
 1824 00fc 00000000 		.word	htim2
 1825 0100 10100140 		.word	1073811472
 1826 0104 00000000 		.word	waterPWM
 1827 0108 00000000 		.word	hdma_tim2_ch1
 1828 010c 00000000 		.word	htim5
 1829 0110 00000000 		.word	tempPWM
 1830 0114 00000000 		.word	hdma_tim5_ch1
 1831 0118 00000000 		.word	socPWM
 1832 011c 00000000 		.word	hdma_tim5_ch2
 1833 0120 00000000 		.word	htim1
 1834 0124 00000000 		.word	htim3
 1835 0128 00000000 		.word	ADC_data
 1836 012c 00000000 		.word	hadc1
 1837 0130 00000000 		.word	.LANCHOR0
 1838 0134 00000000 		.word	StartTaskLoop
 1839 0138 00000000 		.word	TaskLoopHandle
 1840 013c 00000000 		.word	.LANCHOR1
 1841 0140 00000000 		.word	StartTask10ms
 1842 0144 00000000 		.word	Task10msHandle
 1843 0148 00000000 		.word	.LANCHOR2
 1844 014c 00000000 		.word	StartTask100ms
 1845 0150 00000000 		.word	Task100msHandle
 1846 0154 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccXFel8e.s 			page 57


 1847 0158 00000000 		.word	StartTask250ms
 1848 015c 00000000 		.word	Task250msHandle
 1849              		.cfi_endproc
 1850              	.LFE72:
 1852              		.global	Task250ms_attributes
 1853              		.comm	Task250msHandle,4,4
 1854              		.global	Task100ms_attributes
 1855              		.comm	Task100msHandle,4,4
 1856              		.global	Task10ms_attributes
 1857              		.comm	Task10msHandle,4,4
 1858              		.global	TaskLoop_attributes
 1859              		.comm	TaskLoopHandle,4,4
 1860              		.comm	huart4,64,4
 1861              		.comm	hdma_tim5_ch2,68,4
 1862              		.comm	hdma_tim5_ch1,68,4
 1863              		.comm	hdma_tim2_ch1,68,4
 1864              		.comm	htim5,72,4
 1865              		.comm	htim3,72,4
 1866              		.comm	htim2,72,4
 1867              		.comm	htim1,72,4
 1868              		.comm	hdma_adc1,68,4
 1869              		.comm	hadc1,48,4
 1870              		.comm	waterPWM,400,4
 1871              		.comm	socPWM,4000,4
 1872              		.comm	tempPWM,400,4
 1873              		.comm	canDebug,4,4
 1874              		.comm	txCycle2,4,4
 1875              		.comm	txCycle,4,4
 1876              		.comm	canTx2,8,4
 1877              		.comm	canTx,8,4
 1878              		.comm	canMailbox2,4,4
 1879              		.comm	canMailbox,4,4
 1880              		.comm	canRx2,8,4
 1881              		.comm	canRx,8,4
 1882              		.comm	txMsgExt2,24,4
 1883              		.comm	txMsg2,24,4
 1884              		.comm	rxMsg2,28,4
 1885              		.comm	txMsgExt,24,4
 1886              		.comm	txMsg,24,4
 1887              		.comm	rxMsg,28,4
 1888              		.comm	sf5,40,4
 1889              		.comm	sf4,40,4
 1890              		.comm	sf3,40,4
 1891              		.comm	sf2,40,4
 1892              		.comm	sf,40,4
 1893              		.comm	hcan2,40,4
 1894              		.comm	hcan1,40,4
 1895              		.comm	setPrevState,1,1
 1896              		.comm	te,12,4
 1897              		.comm	BMS,20,4
 1898              		.comm	charger,2,4
 1899              		.comm	vcu,7,4
 1900              		.comm	iboost,2,4
 1901              		.comm	ldu,18,4
 1902              		.comm	tempdata,4,4
 1903              		.comm	ADC_data,12,4
 1904              		.comm	tenderActive,1,1
ARM GAS  /tmp/ccXFel8e.s 			page 58


 1905              		.comm	time_now,4,4
 1906              		.comm	period,4,4
 1907              		.comm	DCDC,4,4
 1908              		.comm	huart1,64,4
 1909              		.section	.rodata.Task100ms_attributes,"a",%progbits
 1910              		.align	2
 1911              		.set	.LANCHOR2,. + 0
 1914              	Task100ms_attributes:
 1915 0000 0C000000 		.word	.LC1
 1916 0004 00000000 		.space	16
 1916      00000000 
 1916      00000000 
 1916      00000000 
 1917 0014 00020000 		.word	512
 1918 0018 30000000 		.word	48
 1919 001c 00000000 		.space	8
 1919      00000000 
 1920              		.section	.rodata.Task10ms_attributes,"a",%progbits
 1921              		.align	2
 1922              		.set	.LANCHOR1,. + 0
 1925              	Task10ms_attributes:
 1926 0000 18000000 		.word	.LC2
 1927 0004 00000000 		.space	16
 1927      00000000 
 1927      00000000 
 1927      00000000 
 1928 0014 00020000 		.word	512
 1929 0018 37000000 		.word	55
 1930 001c 00000000 		.space	8
 1930      00000000 
 1931              		.section	.rodata.Task250ms_attributes,"a",%progbits
 1932              		.align	2
 1933              		.set	.LANCHOR3,. + 0
 1936              	Task250ms_attributes:
 1937 0000 00000000 		.word	.LC0
 1938 0004 00000000 		.space	16
 1938      00000000 
 1938      00000000 
 1938      00000000 
 1939 0014 00020000 		.word	512
 1940 0018 28000000 		.word	40
 1941 001c 00000000 		.space	8
 1941      00000000 
 1942              		.section	.rodata.TaskLoop_attributes,"a",%progbits
 1943              		.align	2
 1944              		.set	.LANCHOR0,. + 0
 1947              	TaskLoop_attributes:
 1948 0000 24000000 		.word	.LC3
 1949 0004 00000000 		.space	16
 1949      00000000 
 1949      00000000 
 1949      00000000 
 1950 0014 00020000 		.word	512
 1951 0018 18000000 		.word	24
 1952 001c 00000000 		.space	8
 1952      00000000 
 1953              		.section	.rodata.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccXFel8e.s 			page 59


 1954              		.align	2
 1955              	.LC0:
 1956 0000 5461736B 		.ascii	"Task250ms\000"
 1956      3235306D 
 1956      7300
 1957 000a 0000     		.space	2
 1958              	.LC1:
 1959 000c 5461736B 		.ascii	"Task100ms\000"
 1959      3130306D 
 1959      7300
 1960 0016 0000     		.space	2
 1961              	.LC2:
 1962 0018 5461736B 		.ascii	"Task10ms\000"
 1962      31306D73 
 1962      00
 1963 0021 000000   		.space	3
 1964              	.LC3:
 1965 0024 5461736B 		.ascii	"TaskLoop\000"
 1965      4C6F6F70 
 1965      00
 1966              		.text
 1967              	.Letext0:
 1968              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1969              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 1970              		.file 6 "Drivers/CMSIS/Include/core_cm3.h"
 1971              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1972              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 1973              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1974              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1975              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1976              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1977              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1978              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1979              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1980              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1981              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1982              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1983              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1984              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1985              		.file 21 "/usr/include/newlib/sys/lock.h"
 1986              		.file 22 "/usr/include/newlib/sys/_types.h"
 1987              		.file 23 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1988              		.file 24 "/usr/include/newlib/sys/reent.h"
 1989              		.file 25 "Core/Inc/dcdc.h"
 1990              		.file 26 "Core/Inc/vcu.h"
 1991              		.file 27 "Core/Inc/encoder.h"
 1992              		.file 28 "Core/Inc/can_setup.h"
 1993              		.file 29 "Core/Inc/gauges.h"
 1994              		.file 30 "Core/Inc/water_pump.h"
 1995              		.file 31 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1996              		.file 32 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 1997              		.file 33 "Core/Inc/main.h"
ARM GAS  /tmp/ccXFel8e.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccXFel8e.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccXFel8e.s:168    .text.MX_GPIO_Init:00000000000000d4 $d
     /tmp/ccXFel8e.s:175    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:181    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccXFel8e.s:264    .text.MX_DMA_Init:0000000000000070 $d
     /tmp/ccXFel8e.s:269    .text.StartTaskLoop:0000000000000000 $t
     /tmp/ccXFel8e.s:276    .text.StartTaskLoop:0000000000000000 StartTaskLoop
     /tmp/ccXFel8e.s:309    .text.StartTask10ms:0000000000000000 $t
     /tmp/ccXFel8e.s:316    .text.StartTask10ms:0000000000000000 StartTask10ms
     /tmp/ccXFel8e.s:356    .text.StartTask10ms:0000000000000024 $d
                            *COM*:0000000000000007 vcu
     /tmp/ccXFel8e.s:361    .text.StartTask100ms:0000000000000000 $t
     /tmp/ccXFel8e.s:368    .text.StartTask100ms:0000000000000000 StartTask100ms
     /tmp/ccXFel8e.s:402    .text.StartTask100ms:000000000000001c $d
                            *COM*:0000000000000012 ldu
     /tmp/ccXFel8e.s:407    .text.StartTask250ms:0000000000000000 $t
     /tmp/ccXFel8e.s:414    .text.StartTask250ms:0000000000000000 StartTask250ms
     /tmp/ccXFel8e.s:456    .text.StartTask250ms:000000000000002c $d
                            *COM*:0000000000000014 BMS
     /tmp/ccXFel8e.s:463    .text.__io_putchar:0000000000000000 $t
     /tmp/ccXFel8e.s:470    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/ccXFel8e.s:508    .text.__io_putchar:000000000000001c $d
                            *COM*:0000000000000040 huart1
     /tmp/ccXFel8e.s:513    .text._write:0000000000000000 $t
     /tmp/ccXFel8e.s:520    .text._write:0000000000000000 _write
     /tmp/ccXFel8e.s:564    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccXFel8e.s:571    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccXFel8e.s:601    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccXFel8e.s:606    .text.Error_Handler:0000000000000000 $t
     /tmp/ccXFel8e.s:613    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccXFel8e.s:639    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:645    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/ccXFel8e.s:698    .text.MX_CAN2_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan2
     /tmp/ccXFel8e.s:704    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:710    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccXFel8e.s:822    .text.MX_ADC1_Init:0000000000000088 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccXFel8e.s:828    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:834    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccXFel8e.s:887    .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccXFel8e.s:893    .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:899    .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccXFel8e.s:943    .text.MX_UART4_Init:000000000000002c $d
                            *COM*:0000000000000040 huart4
     /tmp/ccXFel8e.s:949    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:955    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccXFel8e.s:999    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccXFel8e.s:1005   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:1011   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccXFel8e.s:1139   .text.MX_TIM3_Init:00000000000000a0 $d
                            *COM*:0000000000000048 htim3
     /tmp/ccXFel8e.s:1145   .text.MX_TIM1_Init:0000000000000000 $t
ARM GAS  /tmp/ccXFel8e.s 			page 61


     /tmp/ccXFel8e.s:1151   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccXFel8e.s:1293   .text.MX_TIM1_Init:00000000000000a8 $d
                            *COM*:0000000000000048 htim1
     /tmp/ccXFel8e.s:1299   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:1305   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccXFel8e.s:1411   .text.MX_TIM5_Init:000000000000007c $d
                            *COM*:0000000000000048 htim5
     /tmp/ccXFel8e.s:1417   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccXFel8e.s:1423   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccXFel8e.s:1518   .text.MX_TIM2_Init:000000000000006c $d
                            *COM*:0000000000000048 htim2
     /tmp/ccXFel8e.s:1523   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccXFel8e.s:1530   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccXFel8e.s:1640   .text.SystemClock_Config:000000000000008c $d
     /tmp/ccXFel8e.s:1645   .text.main:0000000000000000 $t
     /tmp/ccXFel8e.s:1652   .text.main:0000000000000000 main
     /tmp/ccXFel8e.s:1824   .text.main:00000000000000fc $d
                            *COM*:0000000000000190 waterPWM
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000190 tempPWM
                            *COM*:0000000000000044 hdma_tim5_ch1
                            *COM*:0000000000000fa0 socPWM
                            *COM*:0000000000000044 hdma_tim5_ch2
                            *COM*:000000000000000c ADC_data
                            *COM*:0000000000000004 TaskLoopHandle
                            *COM*:0000000000000004 Task10msHandle
                            *COM*:0000000000000004 Task100msHandle
                            *COM*:0000000000000004 Task250msHandle
     /tmp/ccXFel8e.s:1936   .rodata.Task250ms_attributes:0000000000000000 Task250ms_attributes
     /tmp/ccXFel8e.s:1914   .rodata.Task100ms_attributes:0000000000000000 Task100ms_attributes
     /tmp/ccXFel8e.s:1925   .rodata.Task10ms_attributes:0000000000000000 Task10ms_attributes
     /tmp/ccXFel8e.s:1947   .rodata.TaskLoop_attributes:0000000000000000 TaskLoop_attributes
                            *COM*:0000000000000044 hdma_adc1
                            *COM*:0000000000000004 canDebug
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000008 canTx2
                            *COM*:0000000000000008 canTx
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
                            *COM*:0000000000000001 setPrevState
                            *COM*:000000000000000c te
                            *COM*:0000000000000002 charger
                            *COM*:0000000000000002 iboost
ARM GAS  /tmp/ccXFel8e.s 			page 62


                            *COM*:0000000000000004 tempdata
                            *COM*:0000000000000001 tenderActive
                            *COM*:0000000000000004 time_now
                            *COM*:0000000000000004 period
                            *COM*:0000000000000004 DCDC
     /tmp/ccXFel8e.s:1910   .rodata.Task100ms_attributes:0000000000000000 $d
     /tmp/ccXFel8e.s:1921   .rodata.Task10ms_attributes:0000000000000000 $d
     /tmp/ccXFel8e.s:1932   .rodata.Task250ms_attributes:0000000000000000 $d
     /tmp/ccXFel8e.s:1943   .rodata.TaskLoop_attributes:0000000000000000 $d
     /tmp/ccXFel8e.s:1954   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
wpHandler
vcuState
ioHandler
osDelay
throttleHandler
canIOsend
regenHandler
brakeHandler
dcdcHandler
updateSpeed
updateTach
HAL_GPIO_TogglePin
updateTemp
updateSOC
encoderHandler
HAL_UART_Transmit
HAL_IncTick
HAL_CAN_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
memset
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_OC_Init
HAL_TIM_OC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
canSettings
gaugeInit
dcdcInit
vcuInit
wpInit
ARM GAS  /tmp/ccXFel8e.s 			page 63


HAL_TIM_Base_Start
HAL_DMA_Start
HAL_TIM_PWM_Start
HAL_ADC_Start_DMA
osKernelInitialize
osThreadNew
osKernelStart
