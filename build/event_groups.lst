ARM GAS  /tmp/ccUGIJ4c.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"event_groups.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTestWaitCondition,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTestWaitCondition:
  23              	.LFB15:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  /tmp/ccUGIJ4c.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
ARM GAS  /tmp/ccUGIJ4c.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccUGIJ4c.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccUGIJ4c.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
ARM GAS  /tmp/ccUGIJ4c.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
ARM GAS  /tmp/ccUGIJ4c.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
ARM GAS  /tmp/ccUGIJ4c.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccUGIJ4c.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/ccUGIJ4c.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
ARM GAS  /tmp/ccUGIJ4c.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
ARM GAS  /tmp/ccUGIJ4c.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  25              		.loc 1 657 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccUGIJ4c.s 			page 13


  29              		@ link register save eliminated.
  30              	.LVL0:
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  31              		.loc 1 660 0
  32 0000 1AB9     		cbnz	r2, .L2
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  33              		.loc 1 664 0
  34 0002 0842     		tst	r0, r1
  35 0004 06D1     		bne	.L4
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  36              		.loc 1 658 0
  37 0006 0020     		movs	r0, #0
  38              	.LVL1:
  39 0008 7047     		bx	lr
  40              	.LVL2:
  41              	.L2:
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  42              		.loc 1 677 0
  43 000a 31EA0003 		bics	r3, r1, r0
  44 000e 03D0     		beq	.L5
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  45              		.loc 1 658 0
  46 0010 0020     		movs	r0, #0
  47              	.LVL3:
  48 0012 7047     		bx	lr
  49              	.LVL4:
  50              	.L4:
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  51              		.loc 1 666 0
  52 0014 0120     		movs	r0, #1
  53              	.LVL5:
  54 0016 7047     		bx	lr
  55              	.LVL6:
  56              	.L5:
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  57              		.loc 1 679 0
  58 0018 0120     		movs	r0, #1
  59              	.LVL7:
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  /tmp/ccUGIJ4c.s 			page 14


 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  60              		.loc 1 688 0
  61 001a 7047     		bx	lr
  62              		.cfi_endproc
  63              	.LFE15:
  65              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  66              		.align	1
  67              		.global	xEventGroupCreateStatic
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	xEventGroupCreateStatic:
  74              	.LFB4:
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  75              		.loc 1 94 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 8
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL8:
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  80              		.loc 1 98 0
  81 0000 80B1     		cbz	r0, .L13
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  82              		.loc 1 94 0
  83 0002 10B5     		push	{r4, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 4, -8
  86              		.cfi_offset 14, -4
  87 0004 82B0     		sub	sp, sp, #8
  88              		.cfi_def_cfa_offset 16
  89 0006 0446     		mov	r4, r0
  90              	.LBB36:
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
  91              		.loc 1 105 0
  92 0008 2023     		movs	r3, #32
  93 000a 0193     		str	r3, [sp, #4]
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  94              		.loc 1 106 0
  95 000c 019B     		ldr	r3, [sp, #4]
  96 000e 202B     		cmp	r3, #32
  97 0010 11D0     		beq	.L9
  98              	.LBB37:
  99              	.LBB38:
 100              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
ARM GAS  /tmp/ccUGIJ4c.s 			page 15


   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
ARM GAS  /tmp/ccUGIJ4c.s 			page 16


  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
ARM GAS  /tmp/ccUGIJ4c.s 			page 17


 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/ccUGIJ4c.s 			page 18


 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 101              		.loc 2 195 0
 102              		.syntax unified
 103              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 104 0012 4FF05003 			mov r3, #80												
 105 0016 83F31188 		msr basepri, r3											
 106 001a BFF36F8F 		isb														
 107 001e BFF34F8F 		dsb														
 108              	
 109              	@ 0 "" 2
 110              	.LVL9:
 111              		.thumb
 112              		.syntax unified
 113              	.L10:
 114 0022 FEE7     		b	.L10
 115              	.L13:
 116              		.cfi_def_cfa_offset 0
 117              		.cfi_restore 4
 118              		.cfi_restore 14
 119              	.LBE38:
 120              	.LBE37:
 121              	.LBE36:
 122              	.LBB39:
 123              	.LBB40:
 124              		.syntax unified
 125              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 126 0024 4FF05003 			mov r3, #80												
 127 0028 83F31188 		msr basepri, r3											
 128 002c BFF36F8F 		isb														
 129 0030 BFF34F8F 		dsb														
 130              	
 131              	@ 0 "" 2
 132              	.LVL10:
 133              		.thumb
 134              		.syntax unified
 135              	.L8:
 136 0034 FEE7     		b	.L8
 137              	.L9:
 138              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccUGIJ4c.s 			page 19


 139              		.cfi_offset 4, -8
 140              		.cfi_offset 14, -4
 141              	.LVL11:
 142              	.LBE40:
 143              	.LBE39:
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 144              		.loc 1 115 0
 145 0036 0023     		movs	r3, #0
 146 0038 40F8043B 		str	r3, [r0], #4
 147              	.LVL12:
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 148              		.loc 1 116 0
 149 003c FFF7FEFF 		bl	vListInitialise
 150              	.LVL13:
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 151              		.loc 1 123 0
 152 0040 0123     		movs	r3, #1
 153 0042 2377     		strb	r3, [r4, #28]
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 154              		.loc 1 135 0
 155 0044 2046     		mov	r0, r4
 156 0046 02B0     		add	sp, sp, #8
 157              		.cfi_def_cfa_offset 8
 158              		@ sp needed
 159 0048 10BD     		pop	{r4, pc}
 160              		.cfi_endproc
 161              	.LFE4:
 163              		.section	.text.xEventGroupCreate,"ax",%progbits
 164              		.align	1
 165              		.global	xEventGroupCreate
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu softvfp
 171              	xEventGroupCreate:
 172              	.LFB5:
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 173              		.loc 1 143 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177 0000 38B5     		push	{r3, r4, r5, lr}
 178              		.cfi_def_cfa_offset 16
 179              		.cfi_offset 3, -16
 180              		.cfi_offset 4, -12
 181              		.cfi_offset 5, -8
 182              		.cfi_offset 14, -4
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 183              		.loc 1 147 0
 184 0002 2020     		movs	r0, #32
 185 0004 FFF7FEFF 		bl	pvPortMalloc
 186              	.LVL14:
 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 187              		.loc 1 149 0
 188 0008 0446     		mov	r4, r0
 189 000a 28B1     		cbz	r0, .L15
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
ARM GAS  /tmp/ccUGIJ4c.s 			page 20


 190              		.loc 1 151 0
 191 000c 0025     		movs	r5, #0
 192 000e 40F8045B 		str	r5, [r0], #4
 193              	.LVL15:
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 194              		.loc 1 152 0
 195 0012 FFF7FEFF 		bl	vListInitialise
 196              	.LVL16:
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 197              		.loc 1 159 0
 198 0016 2577     		strb	r5, [r4, #28]
 199              	.L15:
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 200              		.loc 1 171 0
 201 0018 2046     		mov	r0, r4
 202 001a 38BD     		pop	{r3, r4, r5, pc}
 203              		.cfi_endproc
 204              	.LFE5:
 206              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 207              		.align	1
 208              		.global	xEventGroupWaitBits
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu softvfp
 214              	xEventGroupWaitBits:
 215              	.LFB7:
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 216              		.loc 1 297 0
 217              		.cfi_startproc
 218              		@ args = 4, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              	.LVL17:
 221 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 222              		.cfi_def_cfa_offset 32
 223              		.cfi_offset 4, -32
 224              		.cfi_offset 5, -28
 225              		.cfi_offset 6, -24
 226              		.cfi_offset 7, -20
 227              		.cfi_offset 8, -16
 228              		.cfi_offset 9, -12
 229              		.cfi_offset 10, -8
 230              		.cfi_offset 14, -4
 231 0004 DDF82090 		ldr	r9, [sp, #32]
 232              	.LVL18:
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 233              		.loc 1 305 0
 234 0008 60B1     		cbz	r0, .L41
 235 000a 0646     		mov	r6, r0
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 236              		.loc 1 306 0
 237 000c 11F07F4A 		ands	r10, r1, #-16777216
 238 0010 11D0     		beq	.L20
 239              	.LBB41:
 240              	.LBB42:
 241              		.loc 2 195 0
 242              		.syntax unified
ARM GAS  /tmp/ccUGIJ4c.s 			page 21


 243              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 244 0012 4FF05003 			mov r3, #80												
 245 0016 83F31188 		msr basepri, r3											
 246 001a BFF36F8F 		isb														
 247 001e BFF34F8F 		dsb														
 248              	
 249              	@ 0 "" 2
 250              	.LVL19:
 251              		.thumb
 252              		.syntax unified
 253              	.L21:
 254 0022 FEE7     		b	.L21
 255              	.LVL20:
 256              	.L41:
 257              	.LBE42:
 258              	.LBE41:
 259              	.LBB43:
 260              	.LBB44:
 261              		.syntax unified
 262              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 263 0024 4FF05003 			mov r3, #80												
 264 0028 83F31188 		msr basepri, r3											
 265 002c BFF36F8F 		isb														
 266 0030 BFF34F8F 		dsb														
 267              	
 268              	@ 0 "" 2
 269              	.LVL21:
 270              		.thumb
 271              		.syntax unified
 272              	.L19:
 273 0034 FEE7     		b	.L19
 274              	.LVL22:
 275              	.L20:
 276              	.LBE44:
 277              	.LBE43:
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 278              		.loc 1 307 0
 279 0036 41B9     		cbnz	r1, .L22
 280              	.LBB45:
 281              	.LBB46:
 282              		.loc 2 195 0
 283              		.syntax unified
 284              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 285 0038 4FF05003 			mov r3, #80												
 286 003c 83F31188 		msr basepri, r3											
 287 0040 BFF36F8F 		isb														
 288 0044 BFF34F8F 		dsb														
 289              	
 290              	@ 0 "" 2
 291              	.LVL23:
 292              		.thumb
 293              		.syntax unified
 294              	.L23:
 295 0048 FEE7     		b	.L23
 296              	.LVL24:
 297              	.L22:
 298 004a 9846     		mov	r8, r3
ARM GAS  /tmp/ccUGIJ4c.s 			page 22


 299 004c 1746     		mov	r7, r2
 300 004e 0D46     		mov	r5, r1
 301              	.LBE46:
 302              	.LBE45:
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 303              		.loc 1 310 0
 304 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 305              	.LVL25:
 306 0054 68B9     		cbnz	r0, .L35
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 307              		.loc 1 310 0 is_stmt 0 discriminator 2
 308 0056 B9F1000F 		cmp	r9, #0
 309 005a 0CD1     		bne	.L36
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 310              		.loc 1 310 0
 311 005c 0123     		movs	r3, #1
 312              	.L24:
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 313              		.loc 1 310 0 discriminator 6
 314 005e 63B9     		cbnz	r3, .L25
 315              	.LBB47:
 316              	.LBB48:
 317              		.loc 2 195 0 is_stmt 1
 318              		.syntax unified
 319              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 320 0060 4FF05003 			mov r3, #80												
 321 0064 83F31188 		msr basepri, r3											
 322 0068 BFF36F8F 		isb														
 323 006c BFF34F8F 		dsb														
 324              	
 325              	@ 0 "" 2
 326              	.LVL26:
 327              		.thumb
 328              		.syntax unified
 329              	.L26:
 330 0070 FEE7     		b	.L26
 331              	.L35:
 332              	.LBE48:
 333              	.LBE47:
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 334              		.loc 1 310 0
 335 0072 0123     		movs	r3, #1
 336 0074 F3E7     		b	.L24
 337              	.L36:
 338 0076 0023     		movs	r3, #0
 339 0078 F1E7     		b	.L24
 340              	.L25:
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 341              		.loc 1 314 0
 342 007a FFF7FEFF 		bl	vTaskSuspendAll
 343              	.LVL27:
 344              	.LBB49:
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 345              		.loc 1 316 0
 346 007e 3468     		ldr	r4, [r6]
 347              	.LVL28:
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccUGIJ4c.s 			page 23


 348              		.loc 1 319 0
 349 0080 4246     		mov	r2, r8
 350 0082 2946     		mov	r1, r5
 351 0084 2046     		mov	r0, r4
 352 0086 FFF7FEFF 		bl	prvTestWaitCondition
 353              	.LVL29:
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 354              		.loc 1 321 0
 355 008a 58B3     		cbz	r0, .L27
 356              	.LVL30:
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 357              		.loc 1 329 0
 358 008c 17B1     		cbz	r7, .L28
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 359              		.loc 1 331 0
 360 008e 24EA0503 		bic	r3, r4, r5
 361 0092 3360     		str	r3, [r6]
 362              	.LVL31:
 363              	.L28:
 364              	.LBE49:
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 365              		.loc 1 382 0
 366 0094 FFF7FEFF 		bl	xTaskResumeAll
 367              	.LVL32:
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 368              		.loc 1 384 0
 369 0098 BAF1000F 		cmp	r10, #0
 370 009c 1FD0     		beq	.L17
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 371              		.loc 1 386 0
 372 009e 38B9     		cbnz	r0, .L32
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 373              		.loc 1 388 0
 374 00a0 4FF08052 		mov	r2, #268435456
 375 00a4 1B4B     		ldr	r3, .L42
 376 00a6 1A60     		str	r2, [r3]
 377              		.syntax unified
 378              	@ 388 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 379 00a8 BFF34F8F 		dsb
 380              	@ 0 "" 2
 381              	@ 388 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 382 00ac BFF36F8F 		isb
 383              	@ 0 "" 2
 384              		.thumb
 385              		.syntax unified
 386              	.L32:
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 387              		.loc 1 399 0
 388 00b0 FFF7FEFF 		bl	uxTaskResetEventItemValue
 389              	.LVL33:
 390 00b4 0446     		mov	r4, r0
 391              	.LVL34:
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 392              		.loc 1 401 0
 393 00b6 10F0007F 		tst	r0, #33554432
 394 00ba 0ED1     		bne	.L33
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
ARM GAS  /tmp/ccUGIJ4c.s 			page 24


 395              		.loc 1 403 0
 396 00bc FFF7FEFF 		bl	vPortEnterCritical
 397              	.LVL35:
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 398              		.loc 1 406 0
 399 00c0 3468     		ldr	r4, [r6]
 400              	.LVL36:
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 401              		.loc 1 410 0
 402 00c2 4246     		mov	r2, r8
 403 00c4 2946     		mov	r1, r5
 404 00c6 2046     		mov	r0, r4
 405 00c8 FFF7FEFF 		bl	prvTestWaitCondition
 406              	.LVL37:
 407 00cc 18B1     		cbz	r0, .L34
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 408              		.loc 1 412 0
 409 00ce 17B1     		cbz	r7, .L34
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 410              		.loc 1 414 0
 411 00d0 24EA0505 		bic	r5, r4, r5
 412              	.LVL38:
 413 00d4 3560     		str	r5, [r6]
 414              	.L34:
 415              	.LVL39:
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 416              		.loc 1 427 0
 417 00d6 FFF7FEFF 		bl	vPortExitCritical
 418              	.LVL40:
 419              	.L33:
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 420              		.loc 1 435 0
 421 00da 24F07F44 		bic	r4, r4, #-16777216
 422              	.LVL41:
 423              	.L17:
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 424              		.loc 1 443 0
 425 00de 2046     		mov	r0, r4
 426 00e0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 427              	.LVL42:
 428              	.L27:
 429              	.LBB50:
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 430              		.loc 1 338 0
 431 00e4 B9F1000F 		cmp	r9, #0
 432 00e8 11D0     		beq	.L38
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 433              		.loc 1 351 0
 434 00ea 6FB9     		cbnz	r7, .L39
 435              	.LBE50:
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 436              		.loc 1 299 0
 437 00ec 0021     		movs	r1, #0
 438              	.L29:
 439              	.LVL43:
 440              	.LBB51:
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
ARM GAS  /tmp/ccUGIJ4c.s 			page 25


 441              		.loc 1 360 0
 442 00ee B8F1000F 		cmp	r8, #0
 443 00f2 01D0     		beq	.L30
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 444              		.loc 1 362 0
 445 00f4 41F08061 		orr	r1, r1, #67108864
 446              	.LVL44:
 447              	.L30:
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 448              		.loc 1 372 0
 449 00f8 4A46     		mov	r2, r9
 450 00fa 2943     		orrs	r1, r1, r5
 451              	.LVL45:
 452 00fc 301D     		adds	r0, r6, #4
 453              	.LVL46:
 454 00fe FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 455              	.LVL47:
 456 0102 CA46     		mov	r10, r9
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 457              		.loc 1 377 0
 458 0104 0024     		movs	r4, #0
 459              	.LVL48:
 460 0106 C5E7     		b	.L28
 461              	.LVL49:
 462              	.L39:
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 463              		.loc 1 353 0
 464 0108 4FF08071 		mov	r1, #16777216
 465 010c EFE7     		b	.L29
 466              	.L38:
 467 010e CA46     		mov	r10, r9
 468 0110 C0E7     		b	.L28
 469              	.L43:
 470 0112 00BF     		.align	2
 471              	.L42:
 472 0114 04ED00E0 		.word	-536810236
 473              	.LBE51:
 474              		.cfi_endproc
 475              	.LFE7:
 477              		.section	.text.xEventGroupClearBits,"ax",%progbits
 478              		.align	1
 479              		.global	xEventGroupClearBits
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu softvfp
 485              	xEventGroupClearBits:
 486              	.LFB8:
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 487              		.loc 1 447 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              	.LVL50:
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 492              		.loc 1 453 0
 493 0000 68B1     		cbz	r0, .L51
ARM GAS  /tmp/ccUGIJ4c.s 			page 26


 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 494              		.loc 1 447 0
 495 0002 70B5     		push	{r4, r5, r6, lr}
 496              		.cfi_def_cfa_offset 16
 497              		.cfi_offset 4, -16
 498              		.cfi_offset 5, -12
 499              		.cfi_offset 6, -8
 500              		.cfi_offset 14, -4
 501 0004 0546     		mov	r5, r0
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 502              		.loc 1 454 0
 503 0006 11F07F4F 		tst	r1, #-16777216
 504 000a 11D0     		beq	.L47
 505              	.LBB52:
 506              	.LBB53:
 507              		.loc 2 195 0
 508              		.syntax unified
 509              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 510 000c 4FF05003 			mov r3, #80												
 511 0010 83F31188 		msr basepri, r3											
 512 0014 BFF36F8F 		isb														
 513 0018 BFF34F8F 		dsb														
 514              	
 515              	@ 0 "" 2
 516              	.LVL51:
 517              		.thumb
 518              		.syntax unified
 519              	.L48:
 520 001c FEE7     		b	.L48
 521              	.L51:
 522              		.cfi_def_cfa_offset 0
 523              		.cfi_restore 4
 524              		.cfi_restore 5
 525              		.cfi_restore 6
 526              		.cfi_restore 14
 527              	.LBE53:
 528              	.LBE52:
 529              	.LBB54:
 530              	.LBB55:
 531              		.syntax unified
 532              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 533 001e 4FF05003 			mov r3, #80												
 534 0022 83F31188 		msr basepri, r3											
 535 0026 BFF36F8F 		isb														
 536 002a BFF34F8F 		dsb														
 537              	
 538              	@ 0 "" 2
 539              	.LVL52:
 540              		.thumb
 541              		.syntax unified
 542              	.L46:
 543 002e FEE7     		b	.L46
 544              	.L47:
 545              		.cfi_def_cfa_offset 16
 546              		.cfi_offset 4, -16
 547              		.cfi_offset 5, -12
 548              		.cfi_offset 6, -8
ARM GAS  /tmp/ccUGIJ4c.s 			page 27


 549              		.cfi_offset 14, -4
 550 0030 0C46     		mov	r4, r1
 551              	.LBE55:
 552              	.LBE54:
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 553              		.loc 1 456 0
 554 0032 FFF7FEFF 		bl	vPortEnterCritical
 555              	.LVL53:
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 556              		.loc 1 462 0
 557 0036 2E68     		ldr	r6, [r5]
 558              	.LVL54:
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 559              		.loc 1 465 0
 560 0038 26EA0404 		bic	r4, r6, r4
 561              	.LVL55:
 562 003c 2C60     		str	r4, [r5]
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 563              		.loc 1 467 0
 564 003e FFF7FEFF 		bl	vPortExitCritical
 565              	.LVL56:
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 566              		.loc 1 470 0
 567 0042 3046     		mov	r0, r6
 568 0044 70BD     		pop	{r4, r5, r6, pc}
 569              		.cfi_endproc
 570              	.LFE8:
 572              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 573              		.align	1
 574              		.global	vEventGroupClearBitsCallback
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 578              		.fpu softvfp
 580              	vEventGroupClearBitsCallback:
 581              	.LFB14:
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 582              		.loc 1 651 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL57:
 587 0000 08B5     		push	{r3, lr}
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 3, -8
 590              		.cfi_offset 14, -4
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 591              		.loc 1 652 0
 592 0002 FFF7FEFF 		bl	xEventGroupClearBits
 593              	.LVL58:
 594 0006 08BD     		pop	{r3, pc}
 595              		.cfi_endproc
 596              	.LFE14:
 598              		.section	.text.xEventGroupClearBitsFromISR,"ax",%progbits
 599              		.align	1
 600              		.global	xEventGroupClearBitsFromISR
 601              		.syntax unified
ARM GAS  /tmp/ccUGIJ4c.s 			page 28


 602              		.thumb
 603              		.thumb_func
 604              		.fpu softvfp
 606              	xEventGroupClearBitsFromISR:
 607              	.LFB9:
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 608              		.loc 1 476 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              	.LVL59:
 613 0000 08B5     		push	{r3, lr}
 614              		.cfi_def_cfa_offset 8
 615              		.cfi_offset 3, -8
 616              		.cfi_offset 14, -4
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 617              		.loc 1 480 0
 618 0002 0023     		movs	r3, #0
 619 0004 0A46     		mov	r2, r1
 620 0006 0146     		mov	r1, r0
 621              	.LVL60:
 622 0008 0148     		ldr	r0, .L56
 623              	.LVL61:
 624 000a FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 625              	.LVL62:
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 626              		.loc 1 483 0
 627 000e 08BD     		pop	{r3, pc}
 628              	.L57:
 629              		.align	2
 630              	.L56:
 631 0010 00000000 		.word	vEventGroupClearBitsCallback
 632              		.cfi_endproc
 633              	.LFE9:
 635              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 636              		.align	1
 637              		.global	xEventGroupGetBitsFromISR
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu softvfp
 643              	xEventGroupGetBitsFromISR:
 644              	.LFB10:
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 645              		.loc 1 489 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
 649              		@ link register save eliminated.
 650              	.LVL63:
 651              	.LBB56:
 652              	.LBB57:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
ARM GAS  /tmp/ccUGIJ4c.s 			page 29


 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 653              		.loc 2 211 0
 654              		.syntax unified
 655              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 656 0000 EFF31183 			mrs r3, basepri											
 657 0004 4FF05002 		mov r2, #80												
 658 0008 82F31188 		msr basepri, r2											
 659 000c BFF36F8F 		isb														
 660 0010 BFF34F8F 		dsb														
 661              	
 662              	@ 0 "" 2
 663              		.thumb
 664              		.syntax unified
 665              	.LBE57:
 666              	.LBE56:
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 667              		.loc 1 496 0
 668 0014 0068     		ldr	r0, [r0]
 669              	.LVL64:
 670              	.LBB58:
 671              	.LBB59:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 672              		.loc 2 229 0
 673              		.syntax unified
 674              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 675 0016 83F31188 			msr basepri, r3	
 676              	@ 0 "" 2
 677              		.thumb
 678              		.syntax unified
 679              	.LBE59:
ARM GAS  /tmp/ccUGIJ4c.s 			page 30


 680              	.LBE58:
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 681              		.loc 1 501 0
 682 001a 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE10:
 686              		.section	.text.xEventGroupSetBits,"ax",%progbits
 687              		.align	1
 688              		.global	xEventGroupSetBits
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 692              		.fpu softvfp
 694              	xEventGroupSetBits:
 695              	.LFB11:
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 696              		.loc 1 505 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              	.LVL65:
 701 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 702              		.cfi_def_cfa_offset 24
 703              		.cfi_offset 3, -24
 704              		.cfi_offset 4, -20
 705              		.cfi_offset 5, -16
 706              		.cfi_offset 6, -12
 707              		.cfi_offset 7, -8
 708              		.cfi_offset 14, -4
 709              	.LVL66:
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 710              		.loc 1 515 0
 711 0002 60B1     		cbz	r0, .L73
 712 0004 0446     		mov	r4, r0
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 713              		.loc 1 516 0
 714 0006 11F07F4F 		tst	r1, #-16777216
 715 000a 11D0     		beq	.L62
 716              	.LBB60:
 717              	.LBB61:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 718              		.loc 2 195 0
 719              		.syntax unified
 720              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 721 000c 4FF05003 			mov r3, #80												
 722 0010 83F31188 		msr basepri, r3											
 723 0014 BFF36F8F 		isb														
 724 0018 BFF34F8F 		dsb														
 725              	
 726              	@ 0 "" 2
 727              	.LVL67:
 728              		.thumb
 729              		.syntax unified
 730              	.L63:
 731 001c FEE7     		b	.L63
 732              	.L73:
 733              	.LBE61:
ARM GAS  /tmp/ccUGIJ4c.s 			page 31


 734              	.LBE60:
 735              	.LBB62:
 736              	.LBB63:
 737              		.syntax unified
 738              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 739 001e 4FF05003 			mov r3, #80												
 740 0022 83F31188 		msr basepri, r3											
 741 0026 BFF36F8F 		isb														
 742 002a BFF34F8F 		dsb														
 743              	
 744              	@ 0 "" 2
 745              	.LVL68:
 746              		.thumb
 747              		.syntax unified
 748              	.L61:
 749 002e FEE7     		b	.L61
 750              	.L62:
 751 0030 0D46     		mov	r5, r1
 752              	.LVL69:
 753              	.LBE63:
 754              	.LBE62:
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 755              		.loc 1 519 0
 756 0032 00F10C06 		add	r6, r0, #12
 757              	.LVL70:
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 758              		.loc 1 520 0
 759 0036 FFF7FEFF 		bl	vTaskSuspendAll
 760              	.LVL71:
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 761              		.loc 1 524 0
 762 003a 2069     		ldr	r0, [r4, #16]
 763              	.LVL72:
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 764              		.loc 1 527 0
 765 003c 2368     		ldr	r3, [r4]
 766 003e 2B43     		orrs	r3, r3, r5
 767 0040 2360     		str	r3, [r4]
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 768              		.loc 1 509 0
 769 0042 0025     		movs	r5, #0
 770              	.LVL73:
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 771              		.loc 1 530 0
 772 0044 0FE0     		b	.L64
 773              	.LVL74:
 774              	.L65:
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 775              		.loc 1 552 0
 776 0046 2368     		ldr	r3, [r4]
 777 0048 32EA0303 		bics	r3, r2, r3
 778 004c 03D0     		beq	.L71
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 779              		.loc 1 534 0
 780 004e 0023     		movs	r3, #0
 781 0050 16E0     		b	.L66
 782              	.L70:
ARM GAS  /tmp/ccUGIJ4c.s 			page 32


 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 783              		.loc 1 545 0
 784 0052 0123     		movs	r3, #1
 785 0054 14E0     		b	.L66
 786              	.L71:
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 787              		.loc 1 555 0
 788 0056 0123     		movs	r3, #1
 789 0058 12E0     		b	.L66
 790              	.LVL75:
 791              	.L68:
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 792              		.loc 1 579 0
 793 005a 2168     		ldr	r1, [r4]
 794              	.LVL76:
 795 005c 41F00071 		orr	r1, r1, #33554432
 796 0060 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 797              	.LVL77:
 798              	.L67:
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 799              		.loc 1 534 0
 800 0064 3846     		mov	r0, r7
 801              	.LVL78:
 802              	.L64:
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 803              		.loc 1 530 0
 804 0066 B042     		cmp	r0, r6
 805 0068 11D0     		beq	.L74
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 806              		.loc 1 532 0
 807 006a 4768     		ldr	r7, [r0, #4]
 808              	.LVL79:
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 809              		.loc 1 533 0
 810 006c 0168     		ldr	r1, [r0]
 811              	.LVL80:
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 812              		.loc 1 538 0
 813 006e 21F07F42 		bic	r2, r1, #-16777216
 814              	.LVL81:
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 815              		.loc 1 540 0
 816 0072 11F0806F 		tst	r1, #67108864
 817 0076 E6D1     		bne	.L65
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 818              		.loc 1 543 0
 819 0078 2368     		ldr	r3, [r4]
 820 007a 1A42     		tst	r2, r3
 821 007c E9D1     		bne	.L70
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 822              		.loc 1 534 0
 823 007e 0023     		movs	r3, #0
 824              	.L66:
 825              	.LVL82:
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 826              		.loc 1 562 0
 827 0080 002B     		cmp	r3, #0
ARM GAS  /tmp/ccUGIJ4c.s 			page 33


 828 0082 EFD0     		beq	.L67
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 829              		.loc 1 565 0
 830 0084 11F0807F 		tst	r1, #16777216
 831 0088 E7D0     		beq	.L68
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 832              		.loc 1 567 0
 833 008a 1543     		orrs	r5, r5, r2
 834              	.LVL83:
 835 008c E5E7     		b	.L68
 836              	.LVL84:
 837              	.L74:
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 838              		.loc 1 590 0
 839 008e 2368     		ldr	r3, [r4]
 840 0090 23EA0503 		bic	r3, r3, r5
 841 0094 2360     		str	r3, [r4]
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 842              		.loc 1 592 0
 843 0096 FFF7FEFF 		bl	xTaskResumeAll
 844              	.LVL85:
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 845              		.loc 1 595 0
 846 009a 2068     		ldr	r0, [r4]
 847 009c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 848              		.cfi_endproc
 849              	.LFE11:
 851              		.section	.text.xEventGroupSync,"ax",%progbits
 852              		.align	1
 853              		.global	xEventGroupSync
 854              		.syntax unified
 855              		.thumb
 856              		.thumb_func
 857              		.fpu softvfp
 859              	xEventGroupSync:
 860              	.LFB6:
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 861              		.loc 1 177 0
 862              		.cfi_startproc
 863              		@ args = 0, pretend = 0, frame = 0
 864              		@ frame_needed = 0, uses_anonymous_args = 0
 865              	.LVL86:
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 866              		.loc 1 183 0
 867 0000 12F07F4F 		tst	r2, #-16777216
 868 0004 08D0     		beq	.L76
 869              	.LBB64:
 870              	.LBB65:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 871              		.loc 2 195 0
 872              		.syntax unified
 873              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 874 0006 4FF05003 			mov r3, #80												
 875 000a 83F31188 		msr basepri, r3											
 876 000e BFF36F8F 		isb														
 877 0012 BFF34F8F 		dsb														
 878              	
ARM GAS  /tmp/ccUGIJ4c.s 			page 34


 879              	@ 0 "" 2
 880              	.LVL87:
 881              		.thumb
 882              		.syntax unified
 883              	.L77:
 884 0016 FEE7     		b	.L77
 885              	.LVL88:
 886              	.L76:
 887              	.LBE65:
 888              	.LBE64:
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 889              		.loc 1 177 0
 890 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 891              		.cfi_def_cfa_offset 24
 892              		.cfi_offset 4, -24
 893              		.cfi_offset 5, -20
 894              		.cfi_offset 6, -16
 895              		.cfi_offset 7, -12
 896              		.cfi_offset 8, -8
 897              		.cfi_offset 14, -4
 898 001c 0646     		mov	r6, r0
 899 001e 8846     		mov	r8, r1
 900 0020 1546     		mov	r5, r2
 901 0022 1F46     		mov	r7, r3
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 902              		.loc 1 184 0
 903 0024 42B9     		cbnz	r2, .L78
 904              	.LBB66:
 905              	.LBB67:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 906              		.loc 2 195 0
 907              		.syntax unified
 908              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 909 0026 4FF05003 			mov r3, #80												
 910 002a 83F31188 		msr basepri, r3											
 911 002e BFF36F8F 		isb														
 912 0032 BFF34F8F 		dsb														
 913              	
 914              	@ 0 "" 2
 915              	.LVL89:
 916              		.thumb
 917              		.syntax unified
 918              	.L79:
 919 0036 FEE7     		b	.L79
 920              	.LVL90:
 921              	.L78:
 922              	.LBE67:
 923              	.LBE66:
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 924              		.loc 1 187 0
 925 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 926              	.LVL91:
 927 003c 58B9     		cbnz	r0, .L90
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 928              		.loc 1 187 0 is_stmt 0 discriminator 2
 929 003e 67B9     		cbnz	r7, .L91
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
ARM GAS  /tmp/ccUGIJ4c.s 			page 35


 930              		.loc 1 187 0
 931 0040 0123     		movs	r3, #1
 932              	.L80:
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 933              		.loc 1 187 0 discriminator 6
 934 0042 63B9     		cbnz	r3, .L81
 935              	.LBB68:
 936              	.LBB69:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 937              		.loc 2 195 0 is_stmt 1
 938              		.syntax unified
 939              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 940 0044 4FF05003 			mov r3, #80												
 941 0048 83F31188 		msr basepri, r3											
 942 004c BFF36F8F 		isb														
 943 0050 BFF34F8F 		dsb														
 944              	
 945              	@ 0 "" 2
 946              	.LVL92:
 947              		.thumb
 948              		.syntax unified
 949              	.L82:
 950 0054 FEE7     		b	.L82
 951              	.L90:
 952              	.LBE69:
 953              	.LBE68:
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 954              		.loc 1 187 0
 955 0056 0123     		movs	r3, #1
 956 0058 F3E7     		b	.L80
 957              	.L91:
 958 005a 0023     		movs	r3, #0
 959 005c F1E7     		b	.L80
 960              	.L81:
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 961              		.loc 1 191 0
 962 005e FFF7FEFF 		bl	vTaskSuspendAll
 963              	.LVL93:
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 964              		.loc 1 193 0
 965 0062 3468     		ldr	r4, [r6]
 966              	.LVL94:
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 967              		.loc 1 195 0
 968 0064 4146     		mov	r1, r8
 969 0066 3046     		mov	r0, r6
 970 0068 FFF7FEFF 		bl	xEventGroupSetBits
 971              	.LVL95:
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 972              		.loc 1 197 0
 973 006c 44EA0804 		orr	r4, r4, r8
 974              	.LVL96:
 975 0070 35EA0403 		bics	r3, r5, r4
 976 0074 26D1     		bne	.L83
 977              	.LVL97:
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 978              		.loc 1 204 0
ARM GAS  /tmp/ccUGIJ4c.s 			page 36


 979 0076 3368     		ldr	r3, [r6]
 980 0078 23EA0503 		bic	r3, r3, r5
 981 007c 3360     		str	r3, [r6]
 982              	.LVL98:
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 983              		.loc 1 206 0
 984 007e 0027     		movs	r7, #0
 985              	.LVL99:
 986              	.L84:
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 987              		.loc 1 234 0
 988 0080 FFF7FEFF 		bl	xTaskResumeAll
 989              	.LVL100:
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 990              		.loc 1 236 0
 991 0084 DFB1     		cbz	r7, .L75
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 992              		.loc 1 238 0
 993 0086 38B9     		cbnz	r0, .L87
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 994              		.loc 1 240 0
 995 0088 4FF08052 		mov	r2, #268435456
 996 008c 134B     		ldr	r3, .L94
 997 008e 1A60     		str	r2, [r3]
 998              		.syntax unified
 999              	@ 240 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 1000 0090 BFF34F8F 		dsb
 1001              	@ 0 "" 2
 1002              	@ 240 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 1003 0094 BFF36F8F 		isb
 1004              	@ 0 "" 2
 1005              		.thumb
 1006              		.syntax unified
 1007              	.L87:
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1008              		.loc 1 251 0
 1009 0098 FFF7FEFF 		bl	uxTaskResetEventItemValue
 1010              	.LVL101:
 1011 009c 0446     		mov	r4, r0
 1012              	.LVL102:
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1013              		.loc 1 253 0
 1014 009e 10F0007F 		tst	r0, #33554432
 1015 00a2 0AD1     		bne	.L88
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 1016              		.loc 1 256 0
 1017 00a4 FFF7FEFF 		bl	vPortEnterCritical
 1018              	.LVL103:
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1019              		.loc 1 258 0
 1020 00a8 3468     		ldr	r4, [r6]
 1021              	.LVL104:
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 1022              		.loc 1 264 0
 1023 00aa 35EA0403 		bics	r3, r5, r4
 1024 00ae 02D1     		bne	.L89
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
ARM GAS  /tmp/ccUGIJ4c.s 			page 37


 1025              		.loc 1 266 0
 1026 00b0 24EA0505 		bic	r5, r4, r5
 1027              	.LVL105:
 1028 00b4 3560     		str	r5, [r6]
 1029              	.L89:
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1030              		.loc 1 273 0
 1031 00b6 FFF7FEFF 		bl	vPortExitCritical
 1032              	.LVL106:
 1033              	.L88:
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1034              		.loc 1 284 0
 1035 00ba 24F07F44 		bic	r4, r4, #-16777216
 1036              	.LVL107:
 1037              	.L75:
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1038              		.loc 1 293 0
 1039 00be 2046     		mov	r0, r4
 1040 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1041              	.LVL108:
 1042              	.L83:
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 1043              		.loc 1 210 0
 1044 00c4 3FB1     		cbz	r7, .L85
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1045              		.loc 1 217 0
 1046 00c6 3A46     		mov	r2, r7
 1047 00c8 45F0A061 		orr	r1, r5, #83886080
 1048 00cc 301D     		adds	r0, r6, #4
 1049 00ce FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 1050              	.LVL109:
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 1051              		.loc 1 223 0
 1052 00d2 0024     		movs	r4, #0
 1053 00d4 D4E7     		b	.L84
 1054              	.LVL110:
 1055              	.L85:
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 1056              		.loc 1 229 0
 1057 00d6 3468     		ldr	r4, [r6]
 1058              	.LVL111:
 1059 00d8 D2E7     		b	.L84
 1060              	.L95:
 1061 00da 00BF     		.align	2
 1062              	.L94:
 1063 00dc 04ED00E0 		.word	-536810236
 1064              		.cfi_endproc
 1065              	.LFE6:
 1067              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1068              		.align	1
 1069              		.global	vEventGroupSetBitsCallback
 1070              		.syntax unified
 1071              		.thumb
 1072              		.thumb_func
 1073              		.fpu softvfp
 1075              	vEventGroupSetBitsCallback:
 1076              	.LFB13:
ARM GAS  /tmp/ccUGIJ4c.s 			page 38


 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 1077              		.loc 1 643 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 0
 1080              		@ frame_needed = 0, uses_anonymous_args = 0
 1081              	.LVL112:
 1082 0000 08B5     		push	{r3, lr}
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 3, -8
 1085              		.cfi_offset 14, -4
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1086              		.loc 1 644 0
 1087 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1088              	.LVL113:
 1089 0006 08BD     		pop	{r3, pc}
 1090              		.cfi_endproc
 1091              	.LFE13:
 1093              		.section	.text.vEventGroupDelete,"ax",%progbits
 1094              		.align	1
 1095              		.global	vEventGroupDelete
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu softvfp
 1101              	vEventGroupDelete:
 1102              	.LFB12:
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1103              		.loc 1 599 0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107              	.LVL114:
 1108 0000 10B5     		push	{r4, lr}
 1109              		.cfi_def_cfa_offset 8
 1110              		.cfi_offset 4, -8
 1111              		.cfi_offset 14, -4
 1112 0002 0446     		mov	r4, r0
 1113              	.LVL115:
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1114              		.loc 1 603 0
 1115 0004 FFF7FEFF 		bl	vTaskSuspendAll
 1116              	.LVL116:
 1117              	.L99:
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1118              		.loc 1 607 0
 1119 0008 6368     		ldr	r3, [r4, #4]
 1120 000a 93B1     		cbz	r3, .L105
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1121              		.loc 1 611 0
 1122 000c 2069     		ldr	r0, [r4, #16]
 1123 000e 04F10C03 		add	r3, r4, #12
 1124 0012 9842     		cmp	r0, r3
 1125 0014 04D0     		beq	.L106
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 1126              		.loc 1 612 0
 1127 0016 4FF00071 		mov	r1, #33554432
 1128 001a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
ARM GAS  /tmp/ccUGIJ4c.s 			page 39


 1129              	.LVL117:
 1130 001e F3E7     		b	.L99
 1131              	.L106:
 1132              	.LBB70:
 1133              	.LBB71:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1134              		.loc 2 195 0
 1135              		.syntax unified
 1136              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1137 0020 4FF05003 			mov r3, #80												
 1138 0024 83F31188 		msr basepri, r3											
 1139 0028 BFF36F8F 		isb														
 1140 002c BFF34F8F 		dsb														
 1141              	
 1142              	@ 0 "" 2
 1143              	.LVL118:
 1144              		.thumb
 1145              		.syntax unified
 1146              	.L101:
 1147 0030 FEE7     		b	.L101
 1148              	.L105:
 1149              	.LBE71:
 1150              	.LBE70:
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 1151              		.loc 1 625 0
 1152 0032 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 1153 0034 13B1     		cbz	r3, .L107
 1154              	.L103:
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1155              		.loc 1 636 0
 1156 0036 FFF7FEFF 		bl	xTaskResumeAll
 1157              	.LVL119:
 1158 003a 10BD     		pop	{r4, pc}
 1159              	.LVL120:
 1160              	.L107:
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 1161              		.loc 1 627 0
 1162 003c 2046     		mov	r0, r4
 1163 003e FFF7FEFF 		bl	vPortFree
 1164              	.LVL121:
 1165 0042 F8E7     		b	.L103
 1166              		.cfi_endproc
 1167              	.LFE12:
 1169              		.section	.text.xEventGroupSetBitsFromISR,"ax",%progbits
 1170              		.align	1
 1171              		.global	xEventGroupSetBitsFromISR
 1172              		.syntax unified
 1173              		.thumb
 1174              		.thumb_func
 1175              		.fpu softvfp
 1177              	xEventGroupSetBitsFromISR:
 1178              	.LFB16:
 689:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 690:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSe
ARM GAS  /tmp/ccUGIJ4c.s 			page 40


 694:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1179              		.loc 1 694 0
 1180              		.cfi_startproc
 1181              		@ args = 0, pretend = 0, frame = 0
 1182              		@ frame_needed = 0, uses_anonymous_args = 0
 1183              	.LVL122:
 1184 0000 08B5     		push	{r3, lr}
 1185              		.cfi_def_cfa_offset 8
 1186              		.cfi_offset 3, -8
 1187              		.cfi_offset 14, -4
 695:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xReturn;
 696:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 697:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 698:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( ui
 1188              		.loc 1 698 0
 1189 0002 1346     		mov	r3, r2
 1190 0004 0A46     		mov	r2, r1
 1191              	.LVL123:
 1192 0006 0146     		mov	r1, r0
 1193              	.LVL124:
 1194 0008 0148     		ldr	r0, .L110
 1195              	.LVL125:
 1196 000a FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 1197              	.LVL126:
 699:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 701:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1198              		.loc 1 701 0
 1199 000e 08BD     		pop	{r3, pc}
 1200              	.L111:
 1201              		.align	2
 1202              	.L110:
 1203 0010 00000000 		.word	vEventGroupSetBitsCallback
 1204              		.cfi_endproc
 1205              	.LFE16:
 1207              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1208              		.align	1
 1209              		.global	uxEventGroupGetNumber
 1210              		.syntax unified
 1211              		.thumb
 1212              		.thumb_func
 1213              		.fpu softvfp
 1215              	uxEventGroupGetNumber:
 1216              	.LFB17:
 702:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 704:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 705:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if (configUSE_TRACE_FACILITY == 1)
 707:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 708:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
 709:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1217              		.loc 1 709 0
 1218              		.cfi_startproc
 1219              		@ args = 0, pretend = 0, frame = 0
 1220              		@ frame_needed = 0, uses_anonymous_args = 0
 1221              		@ link register save eliminated.
ARM GAS  /tmp/ccUGIJ4c.s 			page 41


 1222              	.LVL127:
 710:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	UBaseType_t xReturn;
 711:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 712:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xEventGroup == NULL )
 1223              		.loc 1 713 0
 1224 0000 08B1     		cbz	r0, .L114
 714:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 715:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xReturn = 0;
 716:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 717:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 718:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 719:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xReturn = pxEventBits->uxEventGroupNumber;
 1225              		.loc 1 719 0
 1226 0002 8069     		ldr	r0, [r0, #24]
 1227              	.LVL128:
 1228 0004 7047     		bx	lr
 1229              	.LVL129:
 1230              	.L114:
 715:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 1231              		.loc 1 715 0
 1232 0006 0020     		movs	r0, #0
 1233              	.LVL130:
 720:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1234              		.loc 1 723 0
 1235 0008 7047     		bx	lr
 1236              		.cfi_endproc
 1237              	.LFE17:
 1239              		.section	.text.vEventGroupSetNumber,"ax",%progbits
 1240              		.align	1
 1241              		.global	vEventGroupSetNumber
 1242              		.syntax unified
 1243              		.thumb
 1244              		.thumb_func
 1245              		.fpu softvfp
 1247              	vEventGroupSetNumber:
 1248              	.LFB18:
 724:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configUSE_TRACE_FACILITY */
 726:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
 731:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1249              		.loc 1 731 0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253              		@ link register save eliminated.
 1254              	.LVL131:
 732:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber;
 1255              		.loc 1 732 0
 1256 0000 8161     		str	r1, [r0, #24]
ARM GAS  /tmp/ccUGIJ4c.s 			page 42


 1257 0002 7047     		bx	lr
 1258              		.cfi_endproc
 1259              	.LFE18:
 1261              		.text
 1262              	.Letext0:
 1263              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1264              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1265              		.file 5 "/usr/include/newlib/sys/lock.h"
 1266              		.file 6 "/usr/include/newlib/sys/_types.h"
 1267              		.file 7 "/usr/include/newlib/sys/reent.h"
 1268              		.file 8 "/usr/include/newlib/stdlib.h"
 1269              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 1270              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 1271              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1272              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1273              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 1274              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 1275              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1276              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccUGIJ4c.s 			page 43


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccUGIJ4c.s:16     .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/ccUGIJ4c.s:22     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/ccUGIJ4c.s:66     .text.xEventGroupCreateStatic:0000000000000000 $t
     /tmp/ccUGIJ4c.s:73     .text.xEventGroupCreateStatic:0000000000000000 xEventGroupCreateStatic
     /tmp/ccUGIJ4c.s:164    .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccUGIJ4c.s:171    .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccUGIJ4c.s:207    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccUGIJ4c.s:214    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccUGIJ4c.s:472    .text.xEventGroupWaitBits:0000000000000114 $d
     /tmp/ccUGIJ4c.s:478    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccUGIJ4c.s:485    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccUGIJ4c.s:573    .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccUGIJ4c.s:580    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
     /tmp/ccUGIJ4c.s:599    .text.xEventGroupClearBitsFromISR:0000000000000000 $t
     /tmp/ccUGIJ4c.s:606    .text.xEventGroupClearBitsFromISR:0000000000000000 xEventGroupClearBitsFromISR
     /tmp/ccUGIJ4c.s:631    .text.xEventGroupClearBitsFromISR:0000000000000010 $d
     /tmp/ccUGIJ4c.s:636    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccUGIJ4c.s:643    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccUGIJ4c.s:687    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccUGIJ4c.s:694    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccUGIJ4c.s:852    .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccUGIJ4c.s:859    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccUGIJ4c.s:1063   .text.xEventGroupSync:00000000000000dc $d
     /tmp/ccUGIJ4c.s:1068   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccUGIJ4c.s:1075   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccUGIJ4c.s:1094   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccUGIJ4c.s:1101   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccUGIJ4c.s:1170   .text.xEventGroupSetBitsFromISR:0000000000000000 $t
     /tmp/ccUGIJ4c.s:1177   .text.xEventGroupSetBitsFromISR:0000000000000000 xEventGroupSetBitsFromISR
     /tmp/ccUGIJ4c.s:1203   .text.xEventGroupSetBitsFromISR:0000000000000010 $d
     /tmp/ccUGIJ4c.s:1208   .text.uxEventGroupGetNumber:0000000000000000 $t
     /tmp/ccUGIJ4c.s:1215   .text.uxEventGroupGetNumber:0000000000000000 uxEventGroupGetNumber
     /tmp/ccUGIJ4c.s:1240   .text.vEventGroupSetNumber:0000000000000000 $t
     /tmp/ccUGIJ4c.s:1247   .text.vEventGroupSetNumber:0000000000000000 vEventGroupSetNumber
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskPlaceOnUnorderedEventList
xTimerPendFunctionCallFromISR
vTaskRemoveFromUnorderedEventList
vPortFree
