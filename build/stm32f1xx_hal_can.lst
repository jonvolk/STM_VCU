ARM GAS  /tmp/ccZfMRi6.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_can.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_CAN_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_CAN_MspInit:
  24              	.LFB67:
  25              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @file    stm32f1xx_hal_can.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @verbatim
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
ARM GAS  /tmp/ccZfMRi6.s 			page 2


  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           functions:
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           messages.
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           can be used:
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==============================
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ================================
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
ARM GAS  /tmp/ccZfMRi6.s 			page 3


  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           here.
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==================
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           be completed.
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           will be entered.
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *** Callback registration ***
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   =============================================
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   allows the user to configure dynamically the driver callbacks.
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Use Function @ref HAL_CAN_RegisterCallback() to register an interrupt callback.
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Function @ref HAL_CAN_RegisterCallback() allows to register following callbacks:
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
ARM GAS  /tmp/ccZfMRi6.s 			page 4


 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   and a pointer to the user callback function.
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Use function @ref HAL_CAN_UnRegisterCallback() to reset a callback to the default
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   weak function.
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @ref HAL_CAN_UnRegisterCallback takes as parameters the HAL peripheral handle,
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   and the Callback ID.
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   This function allows to reset following callbacks:
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   By default, after the @ref HAL_CAN_Init() and when the state is HAL_CAN_STATE_RESET,
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   all callbacks are set to the corresponding weak functions:
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   example @ref HAL_CAN_ErrorCallback().
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Exception done for MspInit and MspDeInit functions that are
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   reset to the legacy weak function in the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit() only when
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   these callbacks are null (not registered beforehand).
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if not, MspInit or MspDeInit are not null, the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit()
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Callbacks can be registered/unregistered in HAL_CAN_STATE_READY state only.
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   in HAL_CAN_STATE_READY or HAL_CAN_STATE_RESET state,
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   In that case first register the MspInit/MspDeInit user callbacks
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   using @ref HAL_CAN_RegisterCallback() before calling @ref HAL_CAN_DeInit()
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   or @ref HAL_CAN_Init() function.
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   When The compilation define USE_HAL_CAN_REGISTER_CALLBACKS is set to 0 or
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   not defined, the callback registration feature is not available and all callbacks
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   are set to the corresponding weak functions.
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @endverbatim
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @attention
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * All rights reserved.</center></h2>
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * This software component is licensed by ST under BSD 3-Clause license,
ARM GAS  /tmp/ccZfMRi6.s 			page 5


 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * the "License"; You may not use this file except in compliance with the
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * License. You may obtain a copy of the License at:
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *                        opensource.org/licenses/BSD-3-Clause
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #include "stm32f1xx_hal.h"
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @addtogroup STM32F1xx_HAL_Driver
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if defined(CAN1)
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN CAN
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief CAN driver modules
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
ARM GAS  /tmp/ccZfMRi6.s 			page 6


 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset callbacks to legacy functions */
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0M
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0F
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1M
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1F
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbo
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbo
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbo
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbo
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbo
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbo
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCal
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFr
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCal
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (hcan->MspInitCallback == NULL)
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
ARM GAS  /tmp/ccZfMRi6.s 			page 7


 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->MspInitCallback(hcan);
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Exit from sleep mode */
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Request initialisation */
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Wait initialisation acknowledge */
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the time triggered communication mode */
ARM GAS  /tmp/ccZfMRi6.s 			page 8


 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic bus-off management */
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic wake-up mode */
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic retransmission */
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the transmit FIFO priority */
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
ARM GAS  /tmp/ccZfMRi6.s 			page 9


 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the bit timing register */
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the error code */
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the CAN state */
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         reset values.
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Stop the CAN module */
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->MspDeInitCallback == NULL)
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->MspDeInitCallback(hcan);
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN peripheral */
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 10


 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Change CAN state */
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
  26              		.loc 1 507 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE67:
  36              		.section	.text.HAL_CAN_Init,"ax",%progbits
  37              		.align	1
  38              		.global	HAL_CAN_Init
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HAL_CAN_Init:
  45              	.LFB65:
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  46              		.loc 1 275 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              	.LVL1:
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  51              		.loc 1 279 0
  52 0000 0028     		cmp	r0, #0
  53 0002 00F0A180 		beq	.L21
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  54              		.loc 1 275 0
  55 0006 38B5     		push	{r3, r4, r5, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 16
  58              		.cfi_offset 3, -16
  59              		.cfi_offset 4, -12
  60              		.cfi_offset 5, -8
  61              		.cfi_offset 14, -4
  62 0008 0446     		mov	r4, r0
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/ccZfMRi6.s 			page 11


  63              		.loc 1 326 0
  64 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  65 000e D3B1     		cbz	r3, .L26
  66              	.LVL2:
  67              	.L4:
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  68              		.loc 1 334 0
  69 0010 2268     		ldr	r2, [r4]
  70 0012 1368     		ldr	r3, [r2]
  71 0014 23F00203 		bic	r3, r3, #2
  72 0018 1360     		str	r3, [r2]
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  73              		.loc 1 337 0
  74 001a FFF7FEFF 		bl	HAL_GetTick
  75              	.LVL3:
  76 001e 0546     		mov	r5, r0
  77              	.LVL4:
  78              	.L5:
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  79              		.loc 1 340 0
  80 0020 2368     		ldr	r3, [r4]
  81 0022 5A68     		ldr	r2, [r3, #4]
  82 0024 12F0020F 		tst	r2, #2
  83 0028 10D0     		beq	.L27
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
  84              		.loc 1 342 0
  85 002a FFF7FEFF 		bl	HAL_GetTick
  86              	.LVL5:
  87 002e 401B     		subs	r0, r0, r5
  88 0030 0A28     		cmp	r0, #10
  89 0032 F5D9     		bls	.L5
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  90              		.loc 1 345 0
  91 0034 636A     		ldr	r3, [r4, #36]
  92 0036 43F40033 		orr	r3, r3, #131072
  93 003a 6362     		str	r3, [r4, #36]
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  94              		.loc 1 348 0
  95 003c 0523     		movs	r3, #5
  96 003e 84F82030 		strb	r3, [r4, #32]
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
  97              		.loc 1 350 0
  98 0042 0120     		movs	r0, #1
  99 0044 38BD     		pop	{r3, r4, r5, pc}
 100              	.LVL6:
 101              	.L26:
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 102              		.loc 1 329 0
 103 0046 FFF7FEFF 		bl	HAL_CAN_MspInit
 104              	.LVL7:
 105 004a E1E7     		b	.L4
 106              	.LVL8:
 107              	.L27:
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 108              		.loc 1 355 0
 109 004c 1A68     		ldr	r2, [r3]
 110 004e 42F00102 		orr	r2, r2, #1
ARM GAS  /tmp/ccZfMRi6.s 			page 12


 111 0052 1A60     		str	r2, [r3]
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 112              		.loc 1 358 0
 113 0054 FFF7FEFF 		bl	HAL_GetTick
 114              	.LVL9:
 115 0058 0546     		mov	r5, r0
 116              	.LVL10:
 117              	.L7:
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 118              		.loc 1 361 0
 119 005a 2368     		ldr	r3, [r4]
 120 005c 5A68     		ldr	r2, [r3, #4]
 121 005e 12F0010F 		tst	r2, #1
 122 0062 0DD1     		bne	.L28
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 123              		.loc 1 363 0
 124 0064 FFF7FEFF 		bl	HAL_GetTick
 125              	.LVL11:
 126 0068 401B     		subs	r0, r0, r5
 127 006a 0A28     		cmp	r0, #10
 128 006c F5D9     		bls	.L7
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 129              		.loc 1 366 0
 130 006e 636A     		ldr	r3, [r4, #36]
 131 0070 43F40033 		orr	r3, r3, #131072
 132 0074 6362     		str	r3, [r4, #36]
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 133              		.loc 1 369 0
 134 0076 0523     		movs	r3, #5
 135 0078 84F82030 		strb	r3, [r4, #32]
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 136              		.loc 1 371 0
 137 007c 0120     		movs	r0, #1
 138 007e 38BD     		pop	{r3, r4, r5, pc}
 139              	.LVL12:
 140              	.L28:
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 141              		.loc 1 376 0
 142 0080 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 143 0082 012A     		cmp	r2, #1
 144 0084 3DD0     		beq	.L29
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 145              		.loc 1 382 0
 146 0086 1A68     		ldr	r2, [r3]
 147 0088 22F08002 		bic	r2, r2, #128
 148 008c 1A60     		str	r2, [r3]
 149              	.L10:
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 150              		.loc 1 386 0
 151 008e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 152 0090 012B     		cmp	r3, #1
 153 0092 3BD0     		beq	.L30
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 154              		.loc 1 392 0
 155 0094 2268     		ldr	r2, [r4]
 156 0096 1368     		ldr	r3, [r2]
 157 0098 23F04003 		bic	r3, r3, #64
ARM GAS  /tmp/ccZfMRi6.s 			page 13


 158 009c 1360     		str	r3, [r2]
 159              	.L12:
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 160              		.loc 1 396 0
 161 009e A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 162 00a0 012B     		cmp	r3, #1
 163 00a2 39D0     		beq	.L31
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 164              		.loc 1 402 0
 165 00a4 2268     		ldr	r2, [r4]
 166 00a6 1368     		ldr	r3, [r2]
 167 00a8 23F02003 		bic	r3, r3, #32
 168 00ac 1360     		str	r3, [r2]
 169              	.L14:
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 170              		.loc 1 406 0
 171 00ae E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 172 00b0 012B     		cmp	r3, #1
 173 00b2 37D0     		beq	.L32
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 174              		.loc 1 412 0
 175 00b4 2268     		ldr	r2, [r4]
 176 00b6 1368     		ldr	r3, [r2]
 177 00b8 43F01003 		orr	r3, r3, #16
 178 00bc 1360     		str	r3, [r2]
 179              	.L16:
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 180              		.loc 1 416 0
 181 00be 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 182 00c0 012B     		cmp	r3, #1
 183 00c2 35D0     		beq	.L33
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 184              		.loc 1 422 0
 185 00c4 2268     		ldr	r2, [r4]
 186 00c6 1368     		ldr	r3, [r2]
 187 00c8 23F00803 		bic	r3, r3, #8
 188 00cc 1360     		str	r3, [r2]
 189              	.L18:
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 190              		.loc 1 426 0
 191 00ce 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 192 00d0 012B     		cmp	r3, #1
 193 00d2 33D0     		beq	.L34
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 194              		.loc 1 432 0
 195 00d4 2268     		ldr	r2, [r4]
 196 00d6 1368     		ldr	r3, [r2]
 197 00d8 23F00403 		bic	r3, r3, #4
 198 00dc 1360     		str	r3, [r2]
 199              	.L20:
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 200              		.loc 1 436 0
 201 00de 2168     		ldr	r1, [r4]
 202 00e0 A368     		ldr	r3, [r4, #8]
 203 00e2 E268     		ldr	r2, [r4, #12]
 204 00e4 1343     		orrs	r3, r3, r2
 205 00e6 2269     		ldr	r2, [r4, #16]
ARM GAS  /tmp/ccZfMRi6.s 			page 14


 206 00e8 1343     		orrs	r3, r3, r2
 207 00ea 6269     		ldr	r2, [r4, #20]
 208 00ec 1343     		orrs	r3, r3, r2
 209 00ee 6268     		ldr	r2, [r4, #4]
 210 00f0 013A     		subs	r2, r2, #1
 211 00f2 1343     		orrs	r3, r3, r2
 212 00f4 CB61     		str	r3, [r1, #28]
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 213              		.loc 1 443 0
 214 00f6 0020     		movs	r0, #0
 215 00f8 6062     		str	r0, [r4, #36]
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 216              		.loc 1 446 0
 217 00fa 0123     		movs	r3, #1
 218 00fc 84F82030 		strb	r3, [r4, #32]
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 219              		.loc 1 449 0
 220 0100 38BD     		pop	{r3, r4, r5, pc}
 221              	.LVL13:
 222              	.L29:
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 223              		.loc 1 378 0
 224 0102 1A68     		ldr	r2, [r3]
 225 0104 42F08002 		orr	r2, r2, #128
 226 0108 1A60     		str	r2, [r3]
 227 010a C0E7     		b	.L10
 228              	.L30:
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 229              		.loc 1 388 0
 230 010c 2268     		ldr	r2, [r4]
 231 010e 1368     		ldr	r3, [r2]
 232 0110 43F04003 		orr	r3, r3, #64
 233 0114 1360     		str	r3, [r2]
 234 0116 C2E7     		b	.L12
 235              	.L31:
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 236              		.loc 1 398 0
 237 0118 2268     		ldr	r2, [r4]
 238 011a 1368     		ldr	r3, [r2]
 239 011c 43F02003 		orr	r3, r3, #32
 240 0120 1360     		str	r3, [r2]
 241 0122 C4E7     		b	.L14
 242              	.L32:
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 243              		.loc 1 408 0
 244 0124 2268     		ldr	r2, [r4]
 245 0126 1368     		ldr	r3, [r2]
 246 0128 23F01003 		bic	r3, r3, #16
 247 012c 1360     		str	r3, [r2]
 248 012e C6E7     		b	.L16
 249              	.L33:
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 250              		.loc 1 418 0
 251 0130 2268     		ldr	r2, [r4]
 252 0132 1368     		ldr	r3, [r2]
 253 0134 43F00803 		orr	r3, r3, #8
 254 0138 1360     		str	r3, [r2]
ARM GAS  /tmp/ccZfMRi6.s 			page 15


 255 013a C8E7     		b	.L18
 256              	.L34:
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 257              		.loc 1 428 0
 258 013c 2268     		ldr	r2, [r4]
 259 013e 1368     		ldr	r3, [r2]
 260 0140 43F00403 		orr	r3, r3, #4
 261 0144 1360     		str	r3, [r2]
 262 0146 CAE7     		b	.L20
 263              	.LVL14:
 264              	.L21:
 265              	.LCFI1:
 266              		.cfi_def_cfa_offset 0
 267              		.cfi_restore 3
 268              		.cfi_restore 4
 269              		.cfi_restore 5
 270              		.cfi_restore 14
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 271              		.loc 1 281 0
 272 0148 0120     		movs	r0, #1
 273              	.LVL15:
 274 014a 7047     		bx	lr
 275              		.cfi_endproc
 276              	.LFE65:
 278              		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 279              		.align	1
 280              		.weak	HAL_CAN_MspDeInit
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu softvfp
 286              	HAL_CAN_MspDeInit:
 287              	.LFB68:
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 288              		.loc 1 523 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293              	.LVL16:
 294 0000 7047     		bx	lr
 295              		.cfi_endproc
ARM GAS  /tmp/ccZfMRi6.s 			page 16


 296              	.LFE68:
 298              		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 299              		.align	1
 300              		.global	HAL_CAN_ConfigFilter
 301              		.syntax unified
 302              		.thumb
 303              		.thumb_func
 304              		.fpu softvfp
 306              	HAL_CAN_ConfigFilter:
 307              	.LFB69:
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Register a CAN CallBack.
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         To be used instead of the weak predefined callback
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for CAN module
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  CallbackID ID of the callback to be registered
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one of the following values:
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CALLBACK_CB_ID Tx Mailbox 0 Complete callback 
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CALLBACK_CB_ID Tx Mailbox 1 Complete callback 
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CALLBACK_CB_ID Tx Mailbox 2 Complete callback 
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CALLBACK_CB_ID Tx Mailbox 0 Abort callback ID
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CALLBACK_CB_ID Tx Mailbox 1 Abort callback ID
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CALLBACK_CB_ID Tx Mailbox 2 Abort callback ID
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CALLBACK_CB_ID Rx Fifo 0 message pending callb
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CALLBACK_CB_ID Rx Fifo 0 full callback ID
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSGPENDING_CALLBACK_CB_ID Rx Fifo 1 message pending callba
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CALLBACK_CB_ID Rx Fifo 1 full callback ID
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CALLBACK_CB_ID Sleep callback ID
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CALLBACK_CB_ID Wake Up from Rx message callback 
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CALLBACK_CB_ID Error callback ID
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pCallback pointer to the Callback function
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Callb
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (pCallback == NULL)
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update the error code */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
ARM GAS  /tmp/ccZfMRi6.s 			page 17


 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = pCallback;
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = pCallback;
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = pCallback;
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = pCallback;
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = pCallback;
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = pCallback;
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = pCallback;
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0FullCallback = pCallback;
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = pCallback;
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1FullCallback = pCallback;
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->SleepCallback = pCallback;
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = pCallback;
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCallback = pCallback;
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
ARM GAS  /tmp/ccZfMRi6.s 			page 18


 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update the error code */
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return error status */
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status =  HAL_ERROR;
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Unregister a CAN CallBack.
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         CAN callabck is redirected to the weak predefined callback
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for CAN module
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  CallbackID ID of the callback to be unregistered
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one of the following values:
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CALLBACK_CB_ID Tx Mailbox 0 Complete callback 
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CALLBACK_CB_ID Tx Mailbox 1 Complete callback 
ARM GAS  /tmp/ccZfMRi6.s 			page 19


 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CALLBACK_CB_ID Tx Mailbox 2 Complete callback 
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CALLBACK_CB_ID Tx Mailbox 0 Abort callback ID
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CALLBACK_CB_ID Tx Mailbox 1 Abort callback ID
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CALLBACK_CB_ID Tx Mailbox 2 Abort callback ID
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CALLBACK_CB_ID Rx Fifo 0 message pending callb
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CALLBACK_CB_ID Rx Fifo 0 full callback ID
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSGPENDING_CALLBACK_CB_ID Rx Fifo 1 message pending callba
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CALLBACK_CB_ID Rx Fifo 1 full callback ID
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CALLBACK_CB_ID Sleep callback ID
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CALLBACK_CB_ID Wake Up from Rx message callback 
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CALLBACK_CB_ID Error callback ID
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_UnRegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Cal
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = HAL_CAN_TxMailbox0CompleteCallback;
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = HAL_CAN_TxMailbox1CompleteCallback;
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = HAL_CAN_TxMailbox2CompleteCallback;
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = HAL_CAN_TxMailbox0AbortCallback;
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = HAL_CAN_TxMailbox1AbortCallback;
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = HAL_CAN_TxMailbox2AbortCallback;
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = HAL_CAN_RxFifo0MsgPendingCallback;
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0FullCallback = HAL_CAN_RxFifo0FullCallback;
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = HAL_CAN_RxFifo1MsgPendingCallback;
ARM GAS  /tmp/ccZfMRi6.s 			page 20


 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1FullCallback = HAL_CAN_RxFifo1FullCallback;
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->SleepCallback = HAL_CAN_SleepCallback;
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = HAL_CAN_WakeUpFromRxMsgCallback;
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCallback = HAL_CAN_ErrorCallback;
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
ARM GAS  /tmp/ccZfMRi6.s 			page 21


 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update the error code */
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return error status */
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status =  HAL_ERROR;
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Configuration functions.
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Configuration functions #####
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         contains the filter configuration information.
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 308              		.loc 1 839 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313              	.LVL17:
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 314              		.loc 1 842 0
 315 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 316              	.LVL18:
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 317              		.loc 1 844 0
 318 0004 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccZfMRi6.s 			page 22


 319              	.LVL19:
 320 0006 DBB2     		uxtb	r3, r3
 321 0008 012B     		cmp	r3, #1
 322 000a 05D9     		bls	.L50
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select master instance to access the filter banks */
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     can_ip = CAN1;
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Initialisation mode for the filter */
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Convert filter number into bit position */
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Deactivation */
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Scale */
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 16-bit scale for the filter */
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
ARM GAS  /tmp/ccZfMRi6.s 			page 23


 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit scale for the filter */
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Mode */
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Identifier list mode for the filter*/
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter FIFO assignment */
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter activation */
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 24


 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 323              		.loc 1 961 0
 324 000c 436A     		ldr	r3, [r0, #36]
 325 000e 43F48023 		orr	r3, r3, #262144
 326 0012 4362     		str	r3, [r0, #36]
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 327              		.loc 1 963 0
 328 0014 0120     		movs	r0, #1
 329              	.LVL20:
 330 0016 7047     		bx	lr
 331              	.LVL21:
 332              	.L50:
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 333              		.loc 1 839 0
 334 0018 70B4     		push	{r4, r5, r6}
 335              	.LCFI2:
 336              		.cfi_def_cfa_offset 12
 337              		.cfi_offset 4, -12
 338              		.cfi_offset 5, -8
 339              		.cfi_offset 6, -4
 340              	.LVL22:
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 341              		.loc 1 873 0
 342 001a 434B     		ldr	r3, .L53
 343 001c D3F80022 		ldr	r2, [r3, #512]
 344 0020 42F00102 		orr	r2, r2, #1
 345 0024 C3F80022 		str	r2, [r3, #512]
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 346              		.loc 1 877 0
 347 0028 D3F80022 		ldr	r2, [r3, #512]
 348 002c 22F47C52 		bic	r2, r2, #16128
 349 0030 C3F80022 		str	r2, [r3, #512]
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 350              		.loc 1 878 0
 351 0034 D3F80022 		ldr	r2, [r3, #512]
 352 0038 486A     		ldr	r0, [r1, #36]
 353              	.LVL23:
 354 003a 42EA0022 		orr	r2, r2, r0, lsl #8
 355 003e C3F80022 		str	r2, [r3, #512]
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 356              		.loc 1 882 0
 357 0042 4A69     		ldr	r2, [r1, #20]
 358 0044 02F01F02 		and	r2, r2, #31
 359 0048 0120     		movs	r0, #1
 360 004a 00FA02F2 		lsl	r2, r0, r2
 361              	.LVL24:
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 362              		.loc 1 885 0
 363 004e D3F81C42 		ldr	r4, [r3, #540]
 364 0052 D043     		mvns	r0, r2
ARM GAS  /tmp/ccZfMRi6.s 			page 25


 365 0054 0440     		ands	r4, r4, r0
 366 0056 C3F81C42 		str	r4, [r3, #540]
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 367              		.loc 1 888 0
 368 005a CB69     		ldr	r3, [r1, #28]
 369 005c B3B9     		cbnz	r3, .L38
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 370              		.loc 1 891 0
 371 005e 324B     		ldr	r3, .L53
 372 0060 D3F80C42 		ldr	r4, [r3, #524]
 373 0064 0440     		ands	r4, r4, r0
 374 0066 C3F80C42 		str	r4, [r3, #524]
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 375              		.loc 1 895 0
 376 006a 4C69     		ldr	r4, [r1, #20]
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 377              		.loc 1 896 0
 378 006c CE68     		ldr	r6, [r1, #12]
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 379              		.loc 1 897 0
 380 006e 8D88     		ldrh	r5, [r1, #4]
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 381              		.loc 1 896 0
 382 0070 45EA0645 		orr	r5, r5, r6, lsl #16
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 383              		.loc 1 895 0
 384 0074 4834     		adds	r4, r4, #72
 385 0076 43F83450 		str	r5, [r3, r4, lsl #3]
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 386              		.loc 1 901 0
 387 007a 4D69     		ldr	r5, [r1, #20]
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 388              		.loc 1 902 0
 389 007c 8E68     		ldr	r6, [r1, #8]
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 390              		.loc 1 903 0
 391 007e 0C88     		ldrh	r4, [r1]
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 392              		.loc 1 902 0
 393 0080 44EA0644 		orr	r4, r4, r6, lsl #16
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 394              		.loc 1 901 0
 395 0084 4835     		adds	r5, r5, #72
 396 0086 03EBC503 		add	r3, r3, r5, lsl #3
 397 008a 5C60     		str	r4, [r3, #4]
 398              	.L38:
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 399              		.loc 1 906 0
 400 008c CB69     		ldr	r3, [r1, #28]
 401 008e 012B     		cmp	r3, #1
 402 0090 1DD0     		beq	.L51
 403              	.L39:
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 404              		.loc 1 923 0
 405 0092 8B69     		ldr	r3, [r1, #24]
 406 0094 002B     		cmp	r3, #0
 407 0096 32D1     		bne	.L40
ARM GAS  /tmp/ccZfMRi6.s 			page 26


 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 408              		.loc 1 926 0
 409 0098 234C     		ldr	r4, .L53
 410 009a D4F80432 		ldr	r3, [r4, #516]
 411 009e 0340     		ands	r3, r3, r0
 412 00a0 C4F80432 		str	r3, [r4, #516]
 413              	.L41:
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 414              		.loc 1 935 0
 415 00a4 0B69     		ldr	r3, [r1, #16]
 416 00a6 8BBB     		cbnz	r3, .L42
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 417              		.loc 1 938 0
 418 00a8 1F4B     		ldr	r3, .L53
 419 00aa D3F81442 		ldr	r4, [r3, #532]
 420 00ae 2040     		ands	r0, r0, r4
 421 00b0 C3F81402 		str	r0, [r3, #532]
 422              	.L43:
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 423              		.loc 1 947 0
 424 00b4 0B6A     		ldr	r3, [r1, #32]
 425 00b6 012B     		cmp	r3, #1
 426 00b8 2FD0     		beq	.L52
 427              	.LVL25:
 428              	.L44:
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 429              		.loc 1 953 0
 430 00ba 1B4A     		ldr	r2, .L53
 431 00bc D2F80032 		ldr	r3, [r2, #512]
 432 00c0 23F00103 		bic	r3, r3, #1
 433 00c4 C2F80032 		str	r3, [r2, #512]
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 434              		.loc 1 956 0
 435 00c8 0020     		movs	r0, #0
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 436              		.loc 1 965 0
 437 00ca 70BC     		pop	{r4, r5, r6}
 438              	.LCFI3:
 439              		.cfi_remember_state
 440              		.cfi_restore 6
 441              		.cfi_restore 5
 442              		.cfi_restore 4
 443              		.cfi_def_cfa_offset 0
 444 00cc 7047     		bx	lr
 445              	.LVL26:
 446              	.L51:
 447              	.LCFI4:
 448              		.cfi_restore_state
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 449              		.loc 1 909 0
 450 00ce 164B     		ldr	r3, .L53
 451 00d0 D3F80C42 		ldr	r4, [r3, #524]
 452 00d4 1443     		orrs	r4, r4, r2
 453 00d6 C3F80C42 		str	r4, [r3, #524]
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 454              		.loc 1 912 0
ARM GAS  /tmp/ccZfMRi6.s 			page 27


 455 00da 4C69     		ldr	r4, [r1, #20]
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 456              		.loc 1 913 0
 457 00dc 0E68     		ldr	r6, [r1]
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 458              		.loc 1 914 0
 459 00de 8D88     		ldrh	r5, [r1, #4]
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 460              		.loc 1 913 0
 461 00e0 45EA0645 		orr	r5, r5, r6, lsl #16
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 462              		.loc 1 912 0
 463 00e4 4834     		adds	r4, r4, #72
 464 00e6 43F83450 		str	r5, [r3, r4, lsl #3]
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 465              		.loc 1 917 0
 466 00ea 4D69     		ldr	r5, [r1, #20]
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 467              		.loc 1 918 0
 468 00ec 8E68     		ldr	r6, [r1, #8]
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 469              		.loc 1 919 0
 470 00ee 8C89     		ldrh	r4, [r1, #12]
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 471              		.loc 1 918 0
 472 00f0 44EA0644 		orr	r4, r4, r6, lsl #16
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 473              		.loc 1 917 0
 474 00f4 4835     		adds	r5, r5, #72
 475 00f6 03EBC503 		add	r3, r3, r5, lsl #3
 476 00fa 5C60     		str	r4, [r3, #4]
 477 00fc C9E7     		b	.L39
 478              	.L40:
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 479              		.loc 1 931 0
 480 00fe 0A4C     		ldr	r4, .L53
 481 0100 D4F80432 		ldr	r3, [r4, #516]
 482 0104 1343     		orrs	r3, r3, r2
 483 0106 C4F80432 		str	r3, [r4, #516]
 484 010a CBE7     		b	.L41
 485              	.L42:
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 486              		.loc 1 943 0
 487 010c 0648     		ldr	r0, .L53
 488 010e D0F81432 		ldr	r3, [r0, #532]
 489 0112 1343     		orrs	r3, r3, r2
 490 0114 C0F81432 		str	r3, [r0, #532]
 491 0118 CCE7     		b	.L43
 492              	.L52:
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 493              		.loc 1 949 0
 494 011a 034B     		ldr	r3, .L53
 495 011c D3F81C12 		ldr	r1, [r3, #540]
 496              	.LVL27:
 497 0120 0A43     		orrs	r2, r2, r1
 498              	.LVL28:
 499 0122 C3F81C22 		str	r2, [r3, #540]
ARM GAS  /tmp/ccZfMRi6.s 			page 28


 500 0126 C8E7     		b	.L44
 501              	.L54:
 502              		.align	2
 503              	.L53:
 504 0128 00640040 		.word	1073767424
 505              		.cfi_endproc
 506              	.LFE69:
 508              		.section	.text.HAL_CAN_Start,"ax",%progbits
 509              		.align	1
 510              		.global	HAL_CAN_Start
 511              		.syntax unified
 512              		.thumb
 513              		.thumb_func
 514              		.fpu softvfp
 516              	HAL_CAN_Start:
 517              	.LFB70:
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Control functions
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                       ##### Control functions #####
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              and activate the corresponding
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              transmission request
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              pending on the selected Tx mailbox
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Start the CAN module.
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 518              		.loc 1 1005 0
ARM GAS  /tmp/ccZfMRi6.s 			page 29


 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522              	.LVL29:
 523 0000 38B5     		push	{r3, r4, r5, lr}
 524              	.LCFI5:
 525              		.cfi_def_cfa_offset 16
 526              		.cfi_offset 3, -16
 527              		.cfi_offset 4, -12
 528              		.cfi_offset 5, -8
 529              		.cfi_offset 14, -4
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 530              		.loc 1 1008 0
 531 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 532 0006 DBB2     		uxtb	r3, r3
 533 0008 012B     		cmp	r3, #1
 534 000a 05D0     		beq	.L61
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request leave initialisation */
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset the CAN ErrorCode */
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 535              		.loc 1 1044 0
 536 000c 436A     		ldr	r3, [r0, #36]
ARM GAS  /tmp/ccZfMRi6.s 			page 30


 537 000e 43F40023 		orr	r3, r3, #524288
 538 0012 4362     		str	r3, [r0, #36]
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 539              		.loc 1 1046 0
 540 0014 0120     		movs	r0, #1
 541              	.LVL30:
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 542              		.loc 1 1048 0
 543 0016 38BD     		pop	{r3, r4, r5, pc}
 544              	.LVL31:
 545              	.L61:
 546 0018 0446     		mov	r4, r0
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 547              		.loc 1 1011 0
 548 001a 0223     		movs	r3, #2
 549 001c 80F82030 		strb	r3, [r0, #32]
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 550              		.loc 1 1014 0
 551 0020 0268     		ldr	r2, [r0]
 552 0022 1368     		ldr	r3, [r2]
 553 0024 23F00103 		bic	r3, r3, #1
 554 0028 1360     		str	r3, [r2]
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 555              		.loc 1 1017 0
 556 002a FFF7FEFF 		bl	HAL_GetTick
 557              	.LVL32:
 558 002e 0546     		mov	r5, r0
 559              	.LVL33:
 560              	.L57:
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 561              		.loc 1 1020 0
 562 0030 2368     		ldr	r3, [r4]
 563 0032 5B68     		ldr	r3, [r3, #4]
 564 0034 13F0010F 		tst	r3, #1
 565 0038 0DD0     		beq	.L62
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 566              		.loc 1 1023 0
 567 003a FFF7FEFF 		bl	HAL_GetTick
 568              	.LVL34:
 569 003e 401B     		subs	r0, r0, r5
 570 0040 0A28     		cmp	r0, #10
 571 0042 F5D9     		bls	.L57
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 572              		.loc 1 1026 0
 573 0044 636A     		ldr	r3, [r4, #36]
 574 0046 43F40033 		orr	r3, r3, #131072
 575 004a 6362     		str	r3, [r4, #36]
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 576              		.loc 1 1029 0
 577 004c 0523     		movs	r3, #5
 578 004e 84F82030 		strb	r3, [r4, #32]
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 579              		.loc 1 1031 0
 580 0052 0120     		movs	r0, #1
 581 0054 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccZfMRi6.s 			page 31


 582              	.LVL35:
 583              	.L62:
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 584              		.loc 1 1036 0
 585 0056 0020     		movs	r0, #0
 586 0058 6062     		str	r0, [r4, #36]
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 587              		.loc 1 1039 0
 588 005a 38BD     		pop	{r3, r4, r5, pc}
 589              		.cfi_endproc
 590              	.LFE70:
 592              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 593              		.align	1
 594              		.global	HAL_CAN_Stop
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu softvfp
 600              	HAL_CAN_Stop:
 601              	.LFB71:
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 602              		.loc 1 1057 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              	.LVL36:
 607 0000 38B5     		push	{r3, r4, r5, lr}
 608              	.LCFI6:
 609              		.cfi_def_cfa_offset 16
 610              		.cfi_offset 3, -16
 611              		.cfi_offset 4, -12
 612              		.cfi_offset 5, -8
 613              		.cfi_offset 14, -4
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 614              		.loc 1 1060 0
 615 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 616 0006 DBB2     		uxtb	r3, r3
 617 0008 022B     		cmp	r3, #2
 618 000a 05D0     		beq	.L69
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request initialisation */
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
ARM GAS  /tmp/ccZfMRi6.s 			page 32


1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Exit from sleep mode */
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 619              		.loc 1 1096 0
 620 000c 436A     		ldr	r3, [r0, #36]
 621 000e 43F48013 		orr	r3, r3, #1048576
 622 0012 4362     		str	r3, [r0, #36]
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 623              		.loc 1 1098 0
 624 0014 0120     		movs	r0, #1
 625              	.LVL37:
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 626              		.loc 1 1100 0
 627 0016 38BD     		pop	{r3, r4, r5, pc}
 628              	.LVL38:
 629              	.L69:
 630 0018 0446     		mov	r4, r0
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 631              		.loc 1 1063 0
 632 001a 0268     		ldr	r2, [r0]
 633 001c 1368     		ldr	r3, [r2]
 634 001e 43F00103 		orr	r3, r3, #1
 635 0022 1360     		str	r3, [r2]
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 636              		.loc 1 1066 0
 637 0024 FFF7FEFF 		bl	HAL_GetTick
 638              	.LVL39:
 639 0028 0546     		mov	r5, r0
 640              	.LVL40:
 641              	.L65:
ARM GAS  /tmp/ccZfMRi6.s 			page 33


1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 642              		.loc 1 1069 0
 643 002a 2368     		ldr	r3, [r4]
 644 002c 5A68     		ldr	r2, [r3, #4]
 645 002e 12F0010F 		tst	r2, #1
 646 0032 0DD1     		bne	.L70
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 647              		.loc 1 1072 0
 648 0034 FFF7FEFF 		bl	HAL_GetTick
 649              	.LVL41:
 650 0038 401B     		subs	r0, r0, r5
 651 003a 0A28     		cmp	r0, #10
 652 003c F5D9     		bls	.L65
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 653              		.loc 1 1075 0
 654 003e 636A     		ldr	r3, [r4, #36]
 655 0040 43F40033 		orr	r3, r3, #131072
 656 0044 6362     		str	r3, [r4, #36]
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 657              		.loc 1 1078 0
 658 0046 0523     		movs	r3, #5
 659 0048 84F82030 		strb	r3, [r4, #32]
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 660              		.loc 1 1080 0
 661 004c 0120     		movs	r0, #1
 662 004e 38BD     		pop	{r3, r4, r5, pc}
 663              	.LVL42:
 664              	.L70:
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 665              		.loc 1 1085 0
 666 0050 1A68     		ldr	r2, [r3]
 667 0052 22F00202 		bic	r2, r2, #2
 668 0056 1A60     		str	r2, [r3]
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 669              		.loc 1 1088 0
 670 0058 0123     		movs	r3, #1
 671 005a 84F82030 		strb	r3, [r4, #32]
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 672              		.loc 1 1091 0
 673 005e 0020     		movs	r0, #0
 674 0060 38BD     		pop	{r3, r4, r5, pc}
 675              		.cfi_endproc
 676              	.LFE71:
 678              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 679              		.align	1
 680              		.global	HAL_CAN_DeInit
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 684              		.fpu softvfp
 686              	HAL_CAN_DeInit:
 687              	.LFB66:
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 688              		.loc 1 460 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccZfMRi6.s 			page 34


 692              	.LVL43:
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 693              		.loc 1 462 0
 694 0000 80B1     		cbz	r0, .L73
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 695              		.loc 1 460 0
 696 0002 10B5     		push	{r4, lr}
 697              	.LCFI7:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 4, -8
 700              		.cfi_offset 14, -4
 701 0004 0446     		mov	r4, r0
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 702              		.loc 1 471 0
 703 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 704              	.LVL44:
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 705              		.loc 1 484 0
 706 000a 2046     		mov	r0, r4
 707 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 708              	.LVL45:
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 709              		.loc 1 488 0
 710 0010 2268     		ldr	r2, [r4]
 711 0012 1368     		ldr	r3, [r2]
 712 0014 43F40043 		orr	r3, r3, #32768
 713 0018 1360     		str	r3, [r2]
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 714              		.loc 1 491 0
 715 001a 0020     		movs	r0, #0
 716 001c 6062     		str	r0, [r4, #36]
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 717              		.loc 1 494 0
 718 001e 84F82000 		strb	r0, [r4, #32]
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 719              		.loc 1 497 0
 720 0022 10BD     		pop	{r4, pc}
 721              	.LVL46:
 722              	.L73:
 723              	.LCFI8:
 724              		.cfi_def_cfa_offset 0
 725              		.cfi_restore 4
 726              		.cfi_restore 14
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 727              		.loc 1 464 0
 728 0024 0120     		movs	r0, #1
 729              	.LVL47:
 730 0026 7047     		bx	lr
 731              		.cfi_endproc
 732              	.LFE66:
 734              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 735              		.align	1
 736              		.global	HAL_CAN_RequestSleep
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 740              		.fpu softvfp
ARM GAS  /tmp/ccZfMRi6.s 			page 35


 742              	HAL_CAN_RequestSleep:
 743              	.LFB72:
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of a CAN frame) has been completed.
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 744              		.loc 1 1112 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              		@ link register save eliminated.
 749              	.LVL48:
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 750              		.loc 1 1113 0
 751 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 752              	.LVL49:
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 753              		.loc 1 1115 0
 754 0004 013B     		subs	r3, r3, #1
 755              	.LVL50:
 756 0006 DBB2     		uxtb	r3, r3
 757 0008 012B     		cmp	r3, #1
 758 000a 05D9     		bls	.L81
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request Sleep mode */
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 759              		.loc 1 1127 0
 760 000c 436A     		ldr	r3, [r0, #36]
 761 000e 43F48023 		orr	r3, r3, #262144
 762 0012 4362     		str	r3, [r0, #36]
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 763              		.loc 1 1130 0
 764 0014 0120     		movs	r0, #1
 765              	.LVL51:
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 766              		.loc 1 1132 0
ARM GAS  /tmp/ccZfMRi6.s 			page 36


 767 0016 7047     		bx	lr
 768              	.LVL52:
 769              	.L81:
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 770              		.loc 1 1119 0
 771 0018 0268     		ldr	r2, [r0]
 772 001a 1368     		ldr	r3, [r2]
 773 001c 43F00203 		orr	r3, r3, #2
 774 0020 1360     		str	r3, [r2]
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 775              		.loc 1 1122 0
 776 0022 0020     		movs	r0, #0
 777              	.LVL53:
 778 0024 7047     		bx	lr
 779              		.cfi_endproc
 780              	.LFE72:
 782              		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 783              		.align	1
 784              		.global	HAL_CAN_WakeUp
 785              		.syntax unified
 786              		.thumb
 787              		.thumb_func
 788              		.fpu softvfp
 790              	HAL_CAN_WakeUp:
 791              	.LFB73:
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Wake up from sleep mode.
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         is exited.
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 792              		.loc 1 1143 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 8
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 796              		@ link register save eliminated.
 797              	.LVL54:
 798 0000 82B0     		sub	sp, sp, #8
 799              	.LCFI9:
 800              		.cfi_def_cfa_offset 8
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   __IO uint32_t count = 0;
 801              		.loc 1 1144 0
 802 0002 0023     		movs	r3, #0
 803 0004 0193     		str	r3, [sp, #4]
 804              	.LVL55:
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timeout = 1000000U;
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 805              		.loc 1 1146 0
 806 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 807              	.LVL56:
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/ccZfMRi6.s 			page 37


 808              		.loc 1 1148 0
 809 000a 013B     		subs	r3, r3, #1
 810              	.LVL57:
 811 000c DBB2     		uxtb	r3, r3
 812 000e 012B     		cmp	r3, #1
 813 0010 06D9     		bls	.L88
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wake up request */
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait sleep mode is exited */
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     do
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Increment counter */
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       count++;
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check if timeout is reached */
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (count > timeout)
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 814              		.loc 1 1177 0
 815 0012 436A     		ldr	r3, [r0, #36]
 816 0014 43F48023 		orr	r3, r3, #262144
 817 0018 4362     		str	r3, [r0, #36]
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 818              		.loc 1 1179 0
 819 001a 0120     		movs	r0, #1
 820              	.LVL58:
 821              	.L85:
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 822              		.loc 1 1181 0
 823 001c 02B0     		add	sp, sp, #8
 824              	.LCFI10:
 825              		.cfi_remember_state
 826              		.cfi_def_cfa_offset 0
 827              		@ sp needed
 828 001e 7047     		bx	lr
 829              	.LVL59:
 830              	.L88:
 831              	.LCFI11:
ARM GAS  /tmp/ccZfMRi6.s 			page 38


 832              		.cfi_restore_state
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 833              		.loc 1 1152 0
 834 0020 0268     		ldr	r2, [r0]
 835 0022 1368     		ldr	r3, [r2]
 836 0024 23F00203 		bic	r3, r3, #2
 837 0028 1360     		str	r3, [r2]
 838              	.L86:
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 839              		.loc 1 1158 0
 840 002a 019B     		ldr	r3, [sp, #4]
 841 002c 0133     		adds	r3, r3, #1
 842 002e 0193     		str	r3, [sp, #4]
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 843              		.loc 1 1161 0
 844 0030 019A     		ldr	r2, [sp, #4]
 845 0032 084B     		ldr	r3, .L90
 846 0034 9A42     		cmp	r2, r3
 847 0036 06D8     		bhi	.L89
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 848              		.loc 1 1169 0
 849 0038 0368     		ldr	r3, [r0]
 850 003a 5B68     		ldr	r3, [r3, #4]
 851 003c 13F0020F 		tst	r3, #2
 852 0040 F3D1     		bne	.L86
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 853              		.loc 1 1172 0
 854 0042 0020     		movs	r0, #0
 855              	.LVL60:
 856 0044 EAE7     		b	.L85
 857              	.LVL61:
 858              	.L89:
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 859              		.loc 1 1164 0
 860 0046 436A     		ldr	r3, [r0, #36]
 861 0048 43F40033 		orr	r3, r3, #131072
 862 004c 4362     		str	r3, [r0, #36]
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 863              		.loc 1 1166 0
 864 004e 0120     		movs	r0, #1
 865              	.LVL62:
 866 0050 E4E7     		b	.L85
 867              	.L91:
 868 0052 00BF     		.align	2
 869              	.L90:
 870 0054 40420F00 		.word	1000000
 871              		.cfi_endproc
 872              	.LFE73:
 874              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 875              		.align	1
 876              		.global	HAL_CAN_IsSleepActive
 877              		.syntax unified
 878              		.thumb
 879              		.thumb_func
 880              		.fpu softvfp
 882              	HAL_CAN_IsSleepActive:
 883              	.LFB74:
ARM GAS  /tmp/ccZfMRi6.s 			page 39


1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check is sleep mode is active.
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Sleep mode is active.
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 884              		.loc 1 1192 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888              		@ link register save eliminated.
 889              	.LVL63:
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 890              		.loc 1 1194 0
 891 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 892              	.LVL64:
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 893              		.loc 1 1196 0
 894 0004 013B     		subs	r3, r3, #1
 895              	.LVL65:
 896 0006 DBB2     		uxtb	r3, r3
 897 0008 012B     		cmp	r3, #1
 898 000a 01D9     		bls	.L96
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 899              		.loc 1 1193 0
 900 000c 0020     		movs	r0, #0
 901              	.LVL66:
 902 000e 7047     		bx	lr
 903              	.LVL67:
 904              	.L96:
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Sleep mode */
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 905              		.loc 1 1200 0
 906 0010 0368     		ldr	r3, [r0]
 907 0012 5B68     		ldr	r3, [r3, #4]
 908 0014 13F0020F 		tst	r3, #2
 909 0018 01D0     		beq	.L97
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 910              		.loc 1 1202 0
 911 001a 0120     		movs	r0, #1
 912              	.LVL68:
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
ARM GAS  /tmp/ccZfMRi6.s 			page 40


 913              		.loc 1 1208 0
 914 001c 7047     		bx	lr
 915              	.LVL69:
 916              	.L97:
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 917              		.loc 1 1193 0
 918 001e 0020     		movs	r0, #0
 919              	.LVL70:
 920 0020 7047     		bx	lr
 921              		.cfi_endproc
 922              	.LFE74:
 924              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 925              		.align	1
 926              		.global	HAL_CAN_AddTxMessage
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 930              		.fpu softvfp
 932              	HAL_CAN_AddTxMessage:
 933              	.LFB75:
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         corresponding transmission request.
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 934              		.loc 1 1223 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              		@ link register save eliminated.
 939              	.LVL71:
 940 0000 70B4     		push	{r4, r5, r6}
 941              	.LCFI12:
 942              		.cfi_def_cfa_offset 12
 943              		.cfi_offset 4, -12
 944              		.cfi_offset 5, -8
 945              		.cfi_offset 6, -4
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 946              		.loc 1 1225 0
 947 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 948              	.LVL72:
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 949              		.loc 1 1226 0
 950 0006 0568     		ldr	r5, [r0]
 951 0008 AD68     		ldr	r5, [r5, #8]
 952              	.LVL73:
ARM GAS  /tmp/ccZfMRi6.s 			page 41


1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 953              		.loc 1 1242 0
 954 000a 013C     		subs	r4, r4, #1
 955              	.LVL74:
 956 000c E4B2     		uxtb	r4, r4
 957 000e 012C     		cmp	r4, #1
 958 0010 06D9     		bls	.L107
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Select an empty transmit mailbox */
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check transmit mailbox value */
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (transmitmailbox > 2U)
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Store the Tx mailbox */
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Id */
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 42


1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the DLC */
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the data field */
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Request transmission */
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Return function status */
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_OK;
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 959              		.loc 1 1316 0
 960 0012 436A     		ldr	r3, [r0, #36]
 961              	.LVL75:
 962 0014 43F48023 		orr	r3, r3, #262144
 963 0018 4362     		str	r3, [r0, #36]
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 964              		.loc 1 1318 0
 965 001a 0120     		movs	r0, #1
 966              	.LVL76:
 967              	.L102:
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 968              		.loc 1 1320 0
 969 001c 70BC     		pop	{r4, r5, r6}
 970              	.LCFI13:
 971              		.cfi_remember_state
 972              		.cfi_restore 6
ARM GAS  /tmp/ccZfMRi6.s 			page 43


 973              		.cfi_restore 5
 974              		.cfi_restore 4
 975              		.cfi_def_cfa_offset 0
 976 001e 7047     		bx	lr
 977              	.LVL77:
 978              	.L107:
 979              	.LCFI14:
 980              		.cfi_restore_state
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 981              		.loc 1 1246 0
 982 0020 15F0E05F 		tst	r5, #469762048
 983 0024 5BD0     		beq	.L100
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 984              		.loc 1 1251 0
 985 0026 C5F30165 		ubfx	r5, r5, #24, #2
 986              	.LVL78:
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 987              		.loc 1 1254 0
 988 002a 022D     		cmp	r5, #2
 989 002c 3ED8     		bhi	.L108
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 990              		.loc 1 1263 0
 991 002e 0124     		movs	r4, #1
 992 0030 AC40     		lsls	r4, r4, r5
 993 0032 1C60     		str	r4, [r3]
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 994              		.loc 1 1266 0
 995 0034 8B68     		ldr	r3, [r1, #8]
 996              	.LVL79:
 997 0036 002B     		cmp	r3, #0
 998 0038 3ED1     		bne	.L103
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 999              		.loc 1 1268 0
 1000 003a 0468     		ldr	r4, [r0]
 1001 003c 0E68     		ldr	r6, [r1]
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1002              		.loc 1 1269 0
 1003 003e CB68     		ldr	r3, [r1, #12]
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1004              		.loc 1 1268 0
 1005 0040 43EA4656 		orr	r6, r3, r6, lsl #21
 1006 0044 05F11803 		add	r3, r5, #24
 1007 0048 1B01     		lsls	r3, r3, #4
 1008 004a E650     		str	r6, [r4, r3]
 1009              	.L104:
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1010              		.loc 1 1279 0
 1011 004c 0368     		ldr	r3, [r0]
 1012 004e 0C69     		ldr	r4, [r1, #16]
 1013 0050 05F11806 		add	r6, r5, #24
 1014 0054 03EB0613 		add	r3, r3, r6, lsl #4
 1015 0058 5C60     		str	r4, [r3, #4]
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 1016              		.loc 1 1282 0
 1017 005a 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1018 005c 012B     		cmp	r3, #1
 1019 005e 36D0     		beq	.L109
ARM GAS  /tmp/ccZfMRi6.s 			page 44


 1020              	.LVL80:
 1021              	.L105:
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 1022              		.loc 1 1288 0
 1023 0060 0468     		ldr	r4, [r0]
 1024 0062 D179     		ldrb	r1, [r2, #7]	@ zero_extendqisi2
 1025 0064 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1026 0066 1B04     		lsls	r3, r3, #16
 1027 0068 43EA0163 		orr	r3, r3, r1, lsl #24
 1028 006c 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1029 006e 43EA0123 		orr	r3, r3, r1, lsl #8
 1030 0072 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1031 0074 0B43     		orrs	r3, r3, r1
 1032 0076 2E01     		lsls	r6, r5, #4
 1033 0078 3444     		add	r4, r4, r6
 1034 007a C4F88C31 		str	r3, [r4, #396]
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 1035              		.loc 1 1293 0
 1036 007e 0168     		ldr	r1, [r0]
 1037 0080 D478     		ldrb	r4, [r2, #3]	@ zero_extendqisi2
 1038 0082 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1039 0084 1B04     		lsls	r3, r3, #16
 1040 0086 43EA0463 		orr	r3, r3, r4, lsl #24
 1041 008a 5478     		ldrb	r4, [r2, #1]	@ zero_extendqisi2
 1042 008c 43EA0423 		orr	r3, r3, r4, lsl #8
 1043 0090 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1044              	.LVL81:
 1045 0092 1343     		orrs	r3, r3, r2
 1046 0094 3144     		add	r1, r1, r6
 1047 0096 C1F88831 		str	r3, [r1, #392]
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1048              		.loc 1 1300 0
 1049 009a 0268     		ldr	r2, [r0]
 1050 009c 1835     		adds	r5, r5, #24
 1051              	.LVL82:
 1052 009e 2D01     		lsls	r5, r5, #4
 1053              	.LVL83:
 1054 00a0 5359     		ldr	r3, [r2, r5]
 1055 00a2 43F00103 		orr	r3, r3, #1
 1056 00a6 5351     		str	r3, [r2, r5]
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1057              		.loc 1 1303 0
 1058 00a8 0020     		movs	r0, #0
 1059              	.LVL84:
 1060 00aa B7E7     		b	.L102
 1061              	.LVL85:
 1062              	.L108:
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1063              		.loc 1 1257 0
 1064 00ac 436A     		ldr	r3, [r0, #36]
 1065              	.LVL86:
 1066 00ae 43F40003 		orr	r3, r3, #8388608
 1067 00b2 4362     		str	r3, [r0, #36]
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1068              		.loc 1 1259 0
 1069 00b4 0120     		movs	r0, #1
 1070              	.LVL87:
ARM GAS  /tmp/ccZfMRi6.s 			page 45


 1071 00b6 B1E7     		b	.L102
 1072              	.LVL88:
 1073              	.L103:
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1074              		.loc 1 1273 0
 1075 00b8 0468     		ldr	r4, [r0]
 1076 00ba 4E68     		ldr	r6, [r1, #4]
 1077 00bc 43EAC603 		orr	r3, r3, r6, lsl #3
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1078              		.loc 1 1275 0
 1079 00c0 CE68     		ldr	r6, [r1, #12]
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1080              		.loc 1 1274 0
 1081 00c2 3343     		orrs	r3, r3, r6
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1082              		.loc 1 1273 0
 1083 00c4 05F11806 		add	r6, r5, #24
 1084 00c8 3601     		lsls	r6, r6, #4
 1085 00ca A351     		str	r3, [r4, r6]
 1086 00cc BEE7     		b	.L104
 1087              	.L109:
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1088              		.loc 1 1284 0
 1089 00ce 0368     		ldr	r3, [r0]
 1090 00d0 03EB0613 		add	r3, r3, r6, lsl #4
 1091 00d4 5968     		ldr	r1, [r3, #4]
 1092              	.LVL89:
 1093 00d6 41F48071 		orr	r1, r1, #256
 1094 00da 5960     		str	r1, [r3, #4]
 1095 00dc C0E7     		b	.L105
 1096              	.LVL90:
 1097              	.L100:
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1098              		.loc 1 1308 0
 1099 00de 436A     		ldr	r3, [r0, #36]
 1100              	.LVL91:
 1101 00e0 43F40013 		orr	r3, r3, #2097152
 1102 00e4 4362     		str	r3, [r0, #36]
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1103              		.loc 1 1310 0
 1104 00e6 0120     		movs	r0, #1
 1105              	.LVL92:
 1106 00e8 98E7     		b	.L102
 1107              		.cfi_endproc
 1108              	.LFE75:
 1110              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1111              		.align	1
 1112              		.global	HAL_CAN_AbortTxRequest
 1113              		.syntax unified
 1114              		.thumb
 1115              		.thumb_func
 1116              		.fpu softvfp
 1118              	HAL_CAN_AbortTxRequest:
 1119              	.LFB76:
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Abort transmission requests
ARM GAS  /tmp/ccZfMRi6.s 			page 46


1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1120              		.loc 1 1331 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124              		@ link register save eliminated.
 1125              	.LVL93:
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1126              		.loc 1 1332 0
 1127 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1128              	.LVL94:
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1129              		.loc 1 1337 0
 1130 0004 013B     		subs	r3, r3, #1
 1131              	.LVL95:
 1132 0006 DBB2     		uxtb	r3, r3
 1133 0008 012B     		cmp	r3, #1
 1134 000a 05D9     		bls	.L116
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 */
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 */
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 */
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/ccZfMRi6.s 			page 47


1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1135              		.loc 1 1367 0
 1136 000c 436A     		ldr	r3, [r0, #36]
 1137 000e 43F48023 		orr	r3, r3, #262144
 1138 0012 4362     		str	r3, [r0, #36]
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1139              		.loc 1 1369 0
 1140 0014 0120     		movs	r0, #1
 1141              	.LVL96:
 1142 0016 7047     		bx	lr
 1143              	.LVL97:
 1144              	.L116:
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1145              		.loc 1 1341 0
 1146 0018 11F0010F 		tst	r1, #1
 1147 001c 04D0     		beq	.L112
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1148              		.loc 1 1344 0
 1149 001e 0268     		ldr	r2, [r0]
 1150 0020 9368     		ldr	r3, [r2, #8]
 1151 0022 43F08003 		orr	r3, r3, #128
 1152 0026 9360     		str	r3, [r2, #8]
 1153              	.L112:
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1154              		.loc 1 1348 0
 1155 0028 11F0020F 		tst	r1, #2
 1156 002c 04D0     		beq	.L113
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1157              		.loc 1 1351 0
 1158 002e 0268     		ldr	r2, [r0]
 1159 0030 9368     		ldr	r3, [r2, #8]
 1160 0032 43F40043 		orr	r3, r3, #32768
 1161 0036 9360     		str	r3, [r2, #8]
 1162              	.L113:
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1163              		.loc 1 1355 0
 1164 0038 11F0040F 		tst	r1, #4
 1165 003c 06D0     		beq	.L115
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1166              		.loc 1 1358 0
 1167 003e 0268     		ldr	r2, [r0]
 1168 0040 9368     		ldr	r3, [r2, #8]
 1169 0042 43F40003 		orr	r3, r3, #8388608
 1170 0046 9360     		str	r3, [r2, #8]
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1171              		.loc 1 1362 0
 1172 0048 0020     		movs	r0, #0
 1173              	.LVL98:
 1174 004a 7047     		bx	lr
 1175              	.LVL99:
 1176              	.L115:
 1177 004c 0020     		movs	r0, #0
 1178              	.LVL100:
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
ARM GAS  /tmp/ccZfMRi6.s 			page 48


 1179              		.loc 1 1371 0
 1180 004e 7047     		bx	lr
 1181              		.cfi_endproc
 1182              	.LFE76:
 1184              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1185              		.align	1
 1186              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1190              		.fpu softvfp
 1192              	HAL_CAN_GetTxMailboxesFreeLevel:
 1193              	.LFB77:
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1194              		.loc 1 1380 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 1198              		@ link register save eliminated.
 1199              	.LVL101:
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t freelevel = 0U;
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1200              		.loc 1 1382 0
 1201 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1202              	.LVL102:
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1203              		.loc 1 1384 0
 1204 0004 013B     		subs	r3, r3, #1
 1205              	.LVL103:
 1206 0006 DBB2     		uxtb	r3, r3
 1207 0008 012B     		cmp	r3, #1
 1208 000a 01D9     		bls	.L123
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t freelevel = 0U;
 1209              		.loc 1 1381 0
 1210 000c 0020     		movs	r0, #0
 1211              	.LVL104:
 1212              	.L117:
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/ccZfMRi6.s 			page 49


1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return freelevel;
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1213              		.loc 1 1408 0
 1214 000e 7047     		bx	lr
 1215              	.LVL105:
 1216              	.L123:
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1217              		.loc 1 1388 0
 1218 0010 0368     		ldr	r3, [r0]
 1219 0012 9A68     		ldr	r2, [r3, #8]
 1220 0014 12F0806F 		tst	r2, #67108864
 1221 0018 0BD1     		bne	.L122
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1222              		.loc 1 1381 0
 1223 001a 0020     		movs	r0, #0
 1224              	.LVL106:
 1225              	.L119:
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1226              		.loc 1 1394 0
 1227 001c 9A68     		ldr	r2, [r3, #8]
 1228 001e 12F0006F 		tst	r2, #134217728
 1229 0022 00D0     		beq	.L120
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1230              		.loc 1 1396 0
 1231 0024 0130     		adds	r0, r0, #1
 1232              	.LVL107:
 1233              	.L120:
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1234              		.loc 1 1400 0
 1235 0026 9B68     		ldr	r3, [r3, #8]
 1236 0028 13F0805F 		tst	r3, #268435456
 1237 002c EFD0     		beq	.L117
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1238              		.loc 1 1402 0
 1239 002e 0130     		adds	r0, r0, #1
 1240              	.LVL108:
 1241 0030 7047     		bx	lr
 1242              	.LVL109:
 1243              	.L122:
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1244              		.loc 1 1390 0
 1245 0032 0120     		movs	r0, #1
 1246              	.LVL110:
 1247 0034 F2E7     		b	.L119
 1248              		.cfi_endproc
 1249              	.LFE77:
ARM GAS  /tmp/ccZfMRi6.s 			page 50


 1251              		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1252              		.align	1
 1253              		.global	HAL_CAN_IsTxMessagePending
 1254              		.syntax unified
 1255              		.thumb
 1256              		.thumb_func
 1257              		.fpu softvfp
 1259              	HAL_CAN_IsTxMessagePending:
 1260              	.LFB78:
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         Mailboxes.
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *                Tx Mailbox.
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1261              		.loc 1 1423 0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 0
 1264              		@ frame_needed = 0, uses_anonymous_args = 0
 1265              		@ link register save eliminated.
 1266              	.LVL111:
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1267              		.loc 1 1425 0
 1268 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1269              	.LVL112:
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1270              		.loc 1 1430 0
 1271 0004 013B     		subs	r3, r3, #1
 1272              	.LVL113:
 1273 0006 DBB2     		uxtb	r3, r3
 1274 0008 012B     		cmp	r3, #1
 1275 000a 01D9     		bls	.L128
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 1276              		.loc 1 1424 0
 1277 000c 0020     		movs	r0, #0
 1278              	.LVL114:
 1279 000e 7047     		bx	lr
 1280              	.LVL115:
 1281              	.L128:
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
ARM GAS  /tmp/ccZfMRi6.s 			page 51


 1282              		.loc 1 1434 0
 1283 0010 0368     		ldr	r3, [r0]
 1284 0012 9B68     		ldr	r3, [r3, #8]
 1285 0014 8906     		lsls	r1, r1, #26
 1286              	.LVL116:
 1287 0016 31EA0303 		bics	r3, r1, r3
 1288 001a 01D0     		beq	.L129
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 1289              		.loc 1 1436 0
 1290 001c 0120     		movs	r0, #1
 1291              	.LVL117:
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return status */
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1292              		.loc 1 1442 0
 1293 001e 7047     		bx	lr
 1294              	.LVL118:
 1295              	.L129:
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1296              		.loc 1 1424 0
 1297 0020 0020     		movs	r0, #0
 1298              	.LVL119:
 1299 0022 7047     		bx	lr
 1300              		.cfi_endproc
 1301              	.LFE78:
 1303              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1304              		.align	1
 1305              		.global	HAL_CAN_GetTxTimestamp
 1306              		.syntax unified
 1307              		.thumb
 1308              		.thumb_func
 1309              		.fpu softvfp
 1311              	HAL_CAN_GetTxTimestamp:
 1312              	.LFB79:
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             mode is enabled.
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         read.
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1313              		.loc 1 1455 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 1317              		@ link register save eliminated.
 1318              	.LVL120:
ARM GAS  /tmp/ccZfMRi6.s 			page 52


1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timestamp = 0U;
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1319              		.loc 1 1458 0
 1320 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1321              	.LVL121:
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1322              		.loc 1 1463 0
 1323 0004 013B     		subs	r3, r3, #1
 1324              	.LVL122:
 1325 0006 DBB2     		uxtb	r3, r3
 1326 0008 012B     		cmp	r3, #1
 1327 000a 01D9     		bls	.L133
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timestamp = 0U;
 1328              		.loc 1 1456 0
 1329 000c 0020     		movs	r0, #0
 1330              	.LVL123:
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the Tx mailbox */
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get timestamp */
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the timestamp */
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return timestamp;
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1331              		.loc 1 1475 0
 1332 000e 7047     		bx	lr
 1333              	.LVL124:
 1334              	.L133:
 1335              	.LBB4:
 1336              	.LBB5:
 1337              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccZfMRi6.s 			page 53


  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
ARM GAS  /tmp/ccZfMRi6.s 			page 54


  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /tmp/ccZfMRi6.s 			page 55


 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccZfMRi6.s 			page 56


 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
ARM GAS  /tmp/ccZfMRi6.s 			page 57


 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccZfMRi6.s 			page 58


 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 59


 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 60


 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
ARM GAS  /tmp/ccZfMRi6.s 			page 61


 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 62


 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
ARM GAS  /tmp/ccZfMRi6.s 			page 63


 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
ARM GAS  /tmp/ccZfMRi6.s 			page 64


 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccZfMRi6.s 			page 65


 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
ARM GAS  /tmp/ccZfMRi6.s 			page 66


 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
ARM GAS  /tmp/ccZfMRi6.s 			page 67


 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccZfMRi6.s 			page 68


 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  /tmp/ccZfMRi6.s 			page 69


 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /tmp/ccZfMRi6.s 			page 70


 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1338              		.loc 2 988 0
 1339              		.syntax unified
 1340              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1341 0010 91FAA1F1 		rbit r1, r1
 1342              	@ 0 "" 2
 1343              	.LVL125:
 1344              		.thumb
 1345              		.syntax unified
 1346              	.LBE5:
 1347              	.LBE4:
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1348              		.loc 1 1467 0
 1349 0014 B1FA81F1 		clz	r1, r1
 1350              	.LVL126:
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1351              		.loc 1 1470 0
 1352 0018 0368     		ldr	r3, [r0]
 1353 001a 1831     		adds	r1, r1, #24
 1354              	.LVL127:
 1355 001c 03EB0111 		add	r1, r3, r1, lsl #4
 1356              	.LVL128:
 1357 0020 4868     		ldr	r0, [r1, #4]
 1358              	.LVL129:
 1359 0022 000C     		lsrs	r0, r0, #16
 1360              	.LVL130:
 1361 0024 7047     		bx	lr
 1362              		.cfi_endproc
 1363              	.LFE79:
 1365              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1366              		.align	1
 1367              		.global	HAL_CAN_GetRxMessage
 1368              		.syntax unified
 1369              		.thumb
 1370              		.thumb_func
 1371              		.fpu softvfp
 1373              	HAL_CAN_GetRxMessage:
 1374              	.LFB80:
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of the Rx frame will be stored.
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1375              		.loc 1 1489 0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 0
 1378              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccZfMRi6.s 			page 71


 1379              		@ link register save eliminated.
 1380              	.LVL131:
 1381 0000 30B4     		push	{r4, r5}
 1382              	.LCFI15:
 1383              		.cfi_def_cfa_offset 8
 1384              		.cfi_offset 4, -8
 1385              		.cfi_offset 5, -4
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1386              		.loc 1 1490 0
 1387 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1388              	.LVL132:
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1389              		.loc 1 1494 0
 1390 0006 013C     		subs	r4, r4, #1
 1391              	.LVL133:
 1392 0008 E4B2     		uxtb	r4, r4
 1393 000a 012C     		cmp	r4, #1
 1394 000c 06D9     		bls	.L143
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the Rx FIFO */
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the header */
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
ARM GAS  /tmp/ccZfMRi6.s 			page 72


1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the data */
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Release the FIFO */
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 0 */
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 1 */
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1395              		.loc 1 1564 0
 1396 000e 436A     		ldr	r3, [r0, #36]
 1397              	.LVL134:
 1398 0010 43F48023 		orr	r3, r3, #262144
 1399 0014 4362     		str	r3, [r0, #36]
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1400              		.loc 1 1566 0
 1401 0016 0120     		movs	r0, #1
 1402              	.LVL135:
 1403              	.L138:
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1404              		.loc 1 1568 0
 1405 0018 30BC     		pop	{r4, r5}
 1406              	.LCFI16:
 1407              		.cfi_remember_state
 1408              		.cfi_restore 5
 1409              		.cfi_restore 4
 1410              		.cfi_def_cfa_offset 0
 1411 001a 7047     		bx	lr
 1412              	.LVL136:
 1413              	.L143:
ARM GAS  /tmp/ccZfMRi6.s 			page 73


 1414              	.LCFI17:
 1415              		.cfi_restore_state
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1416              		.loc 1 1498 0
 1417 001c 0029     		cmp	r1, #0
 1418 001e 6FD1     		bne	.L136
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 1419              		.loc 1 1501 0
 1420 0020 0468     		ldr	r4, [r0]
 1421 0022 E468     		ldr	r4, [r4, #12]
 1422 0024 14F0030F 		tst	r4, #3
 1423 0028 64D0     		beq	.L144
 1424              	.L137:
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1425              		.loc 1 1522 0
 1426 002a 0568     		ldr	r5, [r0]
 1427 002c 01F11B04 		add	r4, r1, #27
 1428 0030 2401     		lsls	r4, r4, #4
 1429 0032 2C59     		ldr	r4, [r5, r4]
 1430 0034 04F00404 		and	r4, r4, #4
 1431 0038 9460     		str	r4, [r2, #8]
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1432              		.loc 1 1523 0
 1433 003a 002C     		cmp	r4, #0
 1434 003c 6BD1     		bne	.L139
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1435              		.loc 1 1525 0
 1436 003e 0568     		ldr	r5, [r0]
 1437 0040 01F11B04 		add	r4, r1, #27
 1438 0044 2401     		lsls	r4, r4, #4
 1439 0046 2C59     		ldr	r4, [r5, r4]
 1440 0048 640D     		lsrs	r4, r4, #21
 1441 004a 1460     		str	r4, [r2]
 1442              	.L140:
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1443              		.loc 1 1531 0
 1444 004c 0568     		ldr	r5, [r0]
 1445 004e 01F11B04 		add	r4, r1, #27
 1446 0052 2401     		lsls	r4, r4, #4
 1447 0054 2D59     		ldr	r5, [r5, r4]
 1448 0056 05F00205 		and	r5, r5, #2
 1449 005a D560     		str	r5, [r2, #12]
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1450              		.loc 1 1532 0
 1451 005c 0568     		ldr	r5, [r0]
 1452 005e 2544     		add	r5, r5, r4
 1453 0060 6D68     		ldr	r5, [r5, #4]
 1454 0062 05F00F05 		and	r5, r5, #15
 1455 0066 1561     		str	r5, [r2, #16]
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1456              		.loc 1 1533 0
 1457 0068 0568     		ldr	r5, [r0]
 1458 006a 2544     		add	r5, r5, r4
 1459 006c 6D68     		ldr	r5, [r5, #4]
 1460 006e C5F30725 		ubfx	r5, r5, #8, #8
 1461 0072 9561     		str	r5, [r2, #24]
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 74


 1462              		.loc 1 1534 0
 1463 0074 0568     		ldr	r5, [r0]
 1464 0076 2C44     		add	r4, r4, r5
 1465 0078 6468     		ldr	r4, [r4, #4]
 1466 007a 240C     		lsrs	r4, r4, #16
 1467 007c 5461     		str	r4, [r2, #20]
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1468              		.loc 1 1537 0
 1469 007e 0468     		ldr	r4, [r0]
 1470 0080 0A01     		lsls	r2, r1, #4
 1471              	.LVL137:
 1472 0082 1444     		add	r4, r4, r2
 1473 0084 D4F8B841 		ldr	r4, [r4, #440]
 1474 0088 1C70     		strb	r4, [r3]
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1475              		.loc 1 1538 0
 1476 008a 0468     		ldr	r4, [r0]
 1477 008c 1444     		add	r4, r4, r2
 1478 008e D4F8B841 		ldr	r4, [r4, #440]
 1479 0092 C4F30724 		ubfx	r4, r4, #8, #8
 1480 0096 5C70     		strb	r4, [r3, #1]
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1481              		.loc 1 1539 0
 1482 0098 0468     		ldr	r4, [r0]
 1483 009a 1444     		add	r4, r4, r2
 1484 009c D4F8B841 		ldr	r4, [r4, #440]
 1485 00a0 C4F30744 		ubfx	r4, r4, #16, #8
 1486 00a4 9C70     		strb	r4, [r3, #2]
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1487              		.loc 1 1540 0
 1488 00a6 0468     		ldr	r4, [r0]
 1489 00a8 1444     		add	r4, r4, r2
 1490 00aa D4F8B841 		ldr	r4, [r4, #440]
 1491 00ae 240E     		lsrs	r4, r4, #24
 1492 00b0 DC70     		strb	r4, [r3, #3]
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1493              		.loc 1 1541 0
 1494 00b2 0468     		ldr	r4, [r0]
 1495 00b4 1444     		add	r4, r4, r2
 1496 00b6 D4F8BC41 		ldr	r4, [r4, #444]
 1497 00ba 1C71     		strb	r4, [r3, #4]
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1498              		.loc 1 1542 0
 1499 00bc 0468     		ldr	r4, [r0]
 1500 00be 1444     		add	r4, r4, r2
 1501 00c0 D4F8BC41 		ldr	r4, [r4, #444]
 1502 00c4 C4F30724 		ubfx	r4, r4, #8, #8
 1503 00c8 5C71     		strb	r4, [r3, #5]
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1504              		.loc 1 1543 0
 1505 00ca 0468     		ldr	r4, [r0]
 1506 00cc 1444     		add	r4, r4, r2
 1507 00ce D4F8BC41 		ldr	r4, [r4, #444]
 1508 00d2 C4F30744 		ubfx	r4, r4, #16, #8
 1509 00d6 9C71     		strb	r4, [r3, #6]
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1510              		.loc 1 1544 0
ARM GAS  /tmp/ccZfMRi6.s 			page 75


 1511 00d8 0468     		ldr	r4, [r0]
 1512 00da 2244     		add	r2, r2, r4
 1513 00dc D2F8BC21 		ldr	r2, [r2, #444]
 1514 00e0 120E     		lsrs	r2, r2, #24
 1515 00e2 DA71     		strb	r2, [r3, #7]
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1516              		.loc 1 1547 0
 1517 00e4 F9B9     		cbnz	r1, .L141
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1518              		.loc 1 1550 0
 1519 00e6 0268     		ldr	r2, [r0]
 1520 00e8 D368     		ldr	r3, [r2, #12]
 1521              	.LVL138:
 1522 00ea 43F02003 		orr	r3, r3, #32
 1523 00ee D360     		str	r3, [r2, #12]
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1524              		.loc 1 1559 0
 1525 00f0 0020     		movs	r0, #0
 1526              	.LVL139:
 1527 00f2 91E7     		b	.L138
 1528              	.LVL140:
 1529              	.L144:
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1530              		.loc 1 1504 0
 1531 00f4 436A     		ldr	r3, [r0, #36]
 1532              	.LVL141:
 1533 00f6 43F40013 		orr	r3, r3, #2097152
 1534 00fa 4362     		str	r3, [r0, #36]
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1535              		.loc 1 1506 0
 1536 00fc 0120     		movs	r0, #1
 1537              	.LVL142:
 1538 00fe 8BE7     		b	.L138
 1539              	.LVL143:
 1540              	.L136:
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 1541              		.loc 1 1512 0
 1542 0100 0468     		ldr	r4, [r0]
 1543 0102 2469     		ldr	r4, [r4, #16]
 1544 0104 14F0030F 		tst	r4, #3
 1545 0108 8FD1     		bne	.L137
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1546              		.loc 1 1515 0
 1547 010a 436A     		ldr	r3, [r0, #36]
 1548              	.LVL144:
 1549 010c 43F40013 		orr	r3, r3, #2097152
 1550 0110 4362     		str	r3, [r0, #36]
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1551              		.loc 1 1517 0
 1552 0112 0120     		movs	r0, #1
 1553              	.LVL145:
 1554 0114 80E7     		b	.L138
 1555              	.LVL146:
 1556              	.L139:
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1557              		.loc 1 1529 0
 1558 0116 0568     		ldr	r5, [r0]
ARM GAS  /tmp/ccZfMRi6.s 			page 76


 1559 0118 01F11B04 		add	r4, r1, #27
 1560 011c 2401     		lsls	r4, r4, #4
 1561 011e 2C59     		ldr	r4, [r5, r4]
 1562 0120 E408     		lsrs	r4, r4, #3
 1563 0122 5460     		str	r4, [r2, #4]
 1564 0124 92E7     		b	.L140
 1565              	.LVL147:
 1566              	.L141:
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1567              		.loc 1 1555 0
 1568 0126 0268     		ldr	r2, [r0]
 1569 0128 1369     		ldr	r3, [r2, #16]
 1570              	.LVL148:
 1571 012a 43F02003 		orr	r3, r3, #32
 1572 012e 1361     		str	r3, [r2, #16]
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1573              		.loc 1 1559 0
 1574 0130 0020     		movs	r0, #0
 1575              	.LVL149:
 1576 0132 71E7     		b	.L138
 1577              		.cfi_endproc
 1578              	.LFE80:
 1580              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1581              		.align	1
 1582              		.global	HAL_CAN_GetRxFifoFillLevel
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1586              		.fpu softvfp
 1588              	HAL_CAN_GetRxFifoFillLevel:
 1589              	.LFB81:
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1590              		.loc 1 1579 0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 1595              	.LVL150:
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filllevel = 0U;
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1596              		.loc 1 1581 0
 1597 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1598              	.LVL151:
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 77


1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1599              		.loc 1 1586 0
 1600 0004 013B     		subs	r3, r3, #1
 1601              	.LVL152:
 1602 0006 DBB2     		uxtb	r3, r3
 1603 0008 012B     		cmp	r3, #1
 1604 000a 01D9     		bls	.L149
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filllevel = 0U;
 1605              		.loc 1 1580 0
 1606 000c 0020     		movs	r0, #0
 1607              	.LVL153:
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Rx FIFO fill level */
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return filllevel;
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1608              		.loc 1 1601 0
 1609 000e 7047     		bx	lr
 1610              	.LVL154:
 1611              	.L149:
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1612              		.loc 1 1589 0
 1613 0010 21B1     		cbz	r1, .L150
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1614              		.loc 1 1595 0
 1615 0012 0368     		ldr	r3, [r0]
 1616 0014 1869     		ldr	r0, [r3, #16]
 1617              	.LVL155:
 1618 0016 00F00300 		and	r0, r0, #3
 1619              	.LVL156:
 1620 001a 7047     		bx	lr
 1621              	.LVL157:
 1622              	.L150:
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1623              		.loc 1 1591 0
 1624 001c 0368     		ldr	r3, [r0]
 1625 001e D868     		ldr	r0, [r3, #12]
 1626              	.LVL158:
 1627 0020 00F00300 		and	r0, r0, #3
 1628              	.LVL159:
 1629 0024 7047     		bx	lr
 1630              		.cfi_endproc
 1631              	.LFE81:
 1633              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1634              		.align	1
 1635              		.global	HAL_CAN_ActivateNotification
 1636              		.syntax unified
ARM GAS  /tmp/ccZfMRi6.s 			page 78


 1637              		.thumb
 1638              		.thumb_func
 1639              		.fpu softvfp
 1641              	HAL_CAN_ActivateNotification:
 1642              	.LFB82:
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Interrupts management
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                        ##### Interrupts management #####
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Enable interrupts.
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1643              		.loc 1 1632 0
 1644              		.cfi_startproc
 1645              		@ args = 0, pretend = 0, frame = 0
 1646              		@ frame_needed = 0, uses_anonymous_args = 0
 1647              		@ link register save eliminated.
 1648              	.LVL160:
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1649              		.loc 1 1633 0
 1650 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1651              	.LVL161:
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1652              		.loc 1 1638 0
 1653 0004 013B     		subs	r3, r3, #1
 1654              	.LVL162:
 1655 0006 DBB2     		uxtb	r3, r3
 1656 0008 012B     		cmp	r3, #1
 1657 000a 05D9     		bls	.L154
ARM GAS  /tmp/ccZfMRi6.s 			page 79


1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Enable the selected interrupts */
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1658              		.loc 1 1650 0
 1659 000c 436A     		ldr	r3, [r0, #36]
 1660 000e 43F48023 		orr	r3, r3, #262144
 1661 0012 4362     		str	r3, [r0, #36]
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1662              		.loc 1 1652 0
 1663 0014 0120     		movs	r0, #1
 1664              	.LVL163:
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1665              		.loc 1 1654 0
 1666 0016 7047     		bx	lr
 1667              	.LVL164:
 1668              	.L154:
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1669              		.loc 1 1642 0
 1670 0018 0268     		ldr	r2, [r0]
 1671 001a 5369     		ldr	r3, [r2, #20]
 1672 001c 1943     		orrs	r1, r1, r3
 1673              	.LVL165:
 1674 001e 5161     		str	r1, [r2, #20]
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1675              		.loc 1 1645 0
 1676 0020 0020     		movs	r0, #0
 1677              	.LVL166:
 1678 0022 7047     		bx	lr
 1679              		.cfi_endproc
 1680              	.LFE82:
 1682              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 1683              		.align	1
 1684              		.global	HAL_CAN_DeactivateNotification
 1685              		.syntax unified
 1686              		.thumb
 1687              		.thumb_func
 1688              		.fpu softvfp
 1690              	HAL_CAN_DeactivateNotification:
 1691              	.LFB83:
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Disable interrupts.
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
ARM GAS  /tmp/ccZfMRi6.s 			page 80


1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1692              		.loc 1 1665 0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 1696              		@ link register save eliminated.
 1697              	.LVL167:
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1698              		.loc 1 1666 0
 1699 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1700              	.LVL168:
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1701              		.loc 1 1671 0
 1702 0004 013B     		subs	r3, r3, #1
 1703              	.LVL169:
 1704 0006 DBB2     		uxtb	r3, r3
 1705 0008 012B     		cmp	r3, #1
 1706 000a 05D9     		bls	.L158
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Disable the selected interrupts */
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1707              		.loc 1 1683 0
 1708 000c 436A     		ldr	r3, [r0, #36]
 1709 000e 43F48023 		orr	r3, r3, #262144
 1710 0012 4362     		str	r3, [r0, #36]
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1711              		.loc 1 1685 0
 1712 0014 0120     		movs	r0, #1
 1713              	.LVL170:
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1714              		.loc 1 1687 0
 1715 0016 7047     		bx	lr
 1716              	.LVL171:
 1717              	.L158:
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1718              		.loc 1 1675 0
 1719 0018 0268     		ldr	r2, [r0]
 1720 001a 5369     		ldr	r3, [r2, #20]
 1721 001c 23EA0101 		bic	r1, r3, r1
ARM GAS  /tmp/ccZfMRi6.s 			page 81


 1722              	.LVL172:
 1723 0020 5161     		str	r1, [r2, #20]
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1724              		.loc 1 1678 0
 1725 0022 0020     		movs	r0, #0
 1726              	.LVL173:
 1727 0024 7047     		bx	lr
 1728              		.cfi_endproc
 1729              	.LFE83:
 1731              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 1732              		.align	1
 1733              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1734              		.syntax unified
 1735              		.thumb
 1736              		.thumb_func
 1737              		.fpu softvfp
 1739              	HAL_CAN_TxMailbox0CompleteCallback:
 1740              	.LFB85:
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback(hcan);
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
ARM GAS  /tmp/ccZfMRi6.s 			page 82


1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           hcan->TxMailbox0AbortCallback(hcan);
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback(hcan);
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
ARM GAS  /tmp/ccZfMRi6.s 			page 83


1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           hcan->TxMailbox1AbortCallback(hcan);
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback(hcan);
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           hcan->TxMailbox2AbortCallback(hcan);
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/ccZfMRi6.s 			page 84


1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo0FullCallback(hcan);
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo0MsgPendingCallback(hcan);
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
ARM GAS  /tmp/ccZfMRi6.s 			page 85


1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo1FullCallback(hcan);
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo1MsgPendingCallback(hcan);
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep Callback */
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->SleepCallback(hcan);
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 86


1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear WakeUp Flag */
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* WakeUp Callback */
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->WakeUpFromRxMsgCallback(hcan);
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Error interrupts management *********************************************/
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Warning Flag */
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Passive Flag */
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Bus-off Flag */
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Last Error Code Flag */
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
ARM GAS  /tmp/ccZfMRi6.s 			page 87


2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_0):
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Stuff error */
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Form error */
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to CRC error */
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           default:
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Clear Last error code Flag */
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Clear ERRI Flag */
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code in handle */
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call Error callback function */
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call registered callback*/
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCallback(hcan);
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call weak (surcharged) callback */
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 88


2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief   CAN Callback functions
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                           ##### Callback functions #####
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides the following callback functions:
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1741              		.loc 1 2107 0
 1742              		.cfi_startproc
 1743              		@ args = 0, pretend = 0, frame = 0
 1744              		@ frame_needed = 0, uses_anonymous_args = 0
 1745              		@ link register save eliminated.
 1746              	.LVL174:
 1747 0000 7047     		bx	lr
 1748              		.cfi_endproc
 1749              	.LFE85:
 1751              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 1752              		.align	1
 1753              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1754              		.syntax unified
 1755              		.thumb
 1756              		.thumb_func
 1757              		.fpu softvfp
 1759              	HAL_CAN_TxMailbox1CompleteCallback:
 1760              	.LFB86:
ARM GAS  /tmp/ccZfMRi6.s 			page 89


2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1761              		.loc 1 2124 0
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 0
 1764              		@ frame_needed = 0, uses_anonymous_args = 0
 1765              		@ link register save eliminated.
 1766              	.LVL175:
 1767 0000 7047     		bx	lr
 1768              		.cfi_endproc
 1769              	.LFE86:
 1771              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1772              		.align	1
 1773              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1774              		.syntax unified
 1775              		.thumb
 1776              		.thumb_func
 1777              		.fpu softvfp
 1779              	HAL_CAN_TxMailbox2CompleteCallback:
 1780              	.LFB87:
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1781              		.loc 1 2141 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785              		@ link register save eliminated.
ARM GAS  /tmp/ccZfMRi6.s 			page 90


 1786              	.LVL176:
 1787 0000 7047     		bx	lr
 1788              		.cfi_endproc
 1789              	.LFE87:
 1791              		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 1792              		.align	1
 1793              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1794              		.syntax unified
 1795              		.thumb
 1796              		.thumb_func
 1797              		.fpu softvfp
 1799              	HAL_CAN_TxMailbox0AbortCallback:
 1800              	.LFB88:
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1801              		.loc 1 2158 0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805              		@ link register save eliminated.
 1806              	.LVL177:
 1807 0000 7047     		bx	lr
 1808              		.cfi_endproc
 1809              	.LFE88:
 1811              		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 1812              		.align	1
 1813              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1814              		.syntax unified
 1815              		.thumb
 1816              		.thumb_func
 1817              		.fpu softvfp
 1819              	HAL_CAN_TxMailbox1AbortCallback:
 1820              	.LFB89:
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/ccZfMRi6.s 			page 91


2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1821              		.loc 1 2175 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 0, uses_anonymous_args = 0
 1825              		@ link register save eliminated.
 1826              	.LVL178:
 1827 0000 7047     		bx	lr
 1828              		.cfi_endproc
 1829              	.LFE89:
 1831              		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 1832              		.align	1
 1833              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1834              		.syntax unified
 1835              		.thumb
 1836              		.thumb_func
 1837              		.fpu softvfp
 1839              	HAL_CAN_TxMailbox2AbortCallback:
 1840              	.LFB90:
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1841              		.loc 1 2192 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 1845              		@ link register save eliminated.
 1846              	.LVL179:
 1847 0000 7047     		bx	lr
 1848              		.cfi_endproc
 1849              	.LFE90:
 1851              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1852              		.align	1
 1853              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1854              		.syntax unified
 1855              		.thumb
ARM GAS  /tmp/ccZfMRi6.s 			page 92


 1856              		.thumb_func
 1857              		.fpu softvfp
 1859              	HAL_CAN_RxFifo0MsgPendingCallback:
 1860              	.LFB91:
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1861              		.loc 1 2209 0
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 0
 1864              		@ frame_needed = 0, uses_anonymous_args = 0
 1865              		@ link register save eliminated.
 1866              	.LVL180:
 1867 0000 7047     		bx	lr
 1868              		.cfi_endproc
 1869              	.LFE91:
 1871              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1872              		.align	1
 1873              		.weak	HAL_CAN_RxFifo0FullCallback
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1877              		.fpu softvfp
 1879              	HAL_CAN_RxFifo0FullCallback:
 1880              	.LFB92:
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1881              		.loc 1 2226 0
ARM GAS  /tmp/ccZfMRi6.s 			page 93


 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885              		@ link register save eliminated.
 1886              	.LVL181:
 1887 0000 7047     		bx	lr
 1888              		.cfi_endproc
 1889              	.LFE92:
 1891              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 1892              		.align	1
 1893              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 1894              		.syntax unified
 1895              		.thumb
 1896              		.thumb_func
 1897              		.fpu softvfp
 1899              	HAL_CAN_RxFifo1MsgPendingCallback:
 1900              	.LFB93:
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1901              		.loc 1 2243 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 0
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 1906              	.LVL182:
 1907 0000 7047     		bx	lr
 1908              		.cfi_endproc
 1909              	.LFE93:
 1911              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 1912              		.align	1
 1913              		.weak	HAL_CAN_RxFifo1FullCallback
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
 1917              		.fpu softvfp
 1919              	HAL_CAN_RxFifo1FullCallback:
 1920              	.LFB94:
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
ARM GAS  /tmp/ccZfMRi6.s 			page 94


2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1921              		.loc 1 2260 0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 1926              	.LVL183:
 1927 0000 7047     		bx	lr
 1928              		.cfi_endproc
 1929              	.LFE94:
 1931              		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 1932              		.align	1
 1933              		.weak	HAL_CAN_SleepCallback
 1934              		.syntax unified
 1935              		.thumb
 1936              		.thumb_func
 1937              		.fpu softvfp
 1939              	HAL_CAN_SleepCallback:
 1940              	.LFB95:
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Sleep callback.
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1941              		.loc 1 2277 0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 0
 1944              		@ frame_needed = 0, uses_anonymous_args = 0
 1945              		@ link register save eliminated.
 1946              	.LVL184:
 1947 0000 7047     		bx	lr
 1948              		.cfi_endproc
 1949              	.LFE95:
 1951              		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
ARM GAS  /tmp/ccZfMRi6.s 			page 95


 1952              		.align	1
 1953              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 1954              		.syntax unified
 1955              		.thumb
 1956              		.thumb_func
 1957              		.fpu softvfp
 1959              	HAL_CAN_WakeUpFromRxMsgCallback:
 1960              	.LFB96:
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1961              		.loc 1 2293 0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 1965              		@ link register save eliminated.
 1966              	.LVL185:
 1967 0000 7047     		bx	lr
 1968              		.cfi_endproc
 1969              	.LFE96:
 1971              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1972              		.align	1
 1973              		.weak	HAL_CAN_ErrorCallback
 1974              		.syntax unified
 1975              		.thumb
 1976              		.thumb_func
 1977              		.fpu softvfp
 1979              	HAL_CAN_ErrorCallback:
 1980              	.LFB97:
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Error CAN callback.
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
ARM GAS  /tmp/ccZfMRi6.s 			page 96


2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1981              		.loc 1 2310 0
 1982              		.cfi_startproc
 1983              		@ args = 0, pretend = 0, frame = 0
 1984              		@ frame_needed = 0, uses_anonymous_args = 0
 1985              		@ link register save eliminated.
 1986              	.LVL186:
 1987 0000 7047     		bx	lr
 1988              		.cfi_endproc
 1989              	.LFE97:
 1991              		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 1992              		.align	1
 1993              		.global	HAL_CAN_IRQHandler
 1994              		.syntax unified
 1995              		.thumb
 1996              		.thumb_func
 1997              		.fpu softvfp
 1999              	HAL_CAN_IRQHandler:
 2000              	.LFB84:
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2001              		.loc 1 1696 0
 2002              		.cfi_startproc
 2003              		@ args = 0, pretend = 0, frame = 0
 2004              		@ frame_needed = 0, uses_anonymous_args = 0
 2005              	.LVL187:
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2006              		.loc 1 1696 0
 2007 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2008              	.LCFI18:
 2009              		.cfi_def_cfa_offset 40
 2010              		.cfi_offset 3, -40
 2011              		.cfi_offset 4, -36
 2012              		.cfi_offset 5, -32
 2013              		.cfi_offset 6, -28
 2014              		.cfi_offset 7, -24
 2015              		.cfi_offset 8, -20
 2016              		.cfi_offset 9, -16
 2017              		.cfi_offset 10, -12
 2018              		.cfi_offset 11, -8
 2019              		.cfi_offset 14, -4
 2020 0004 0546     		mov	r5, r0
 2021              	.LVL188:
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2022              		.loc 1 1698 0
 2023 0006 0368     		ldr	r3, [r0]
 2024 0008 5C69     		ldr	r4, [r3, #20]
 2025              	.LVL189:
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2026              		.loc 1 1699 0
 2027 000a 5F68     		ldr	r7, [r3, #4]
 2028              	.LVL190:
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2029              		.loc 1 1700 0
 2030 000c 9E68     		ldr	r6, [r3, #8]
 2031              	.LVL191:
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
ARM GAS  /tmp/ccZfMRi6.s 			page 97


 2032              		.loc 1 1701 0
 2033 000e D3F80C90 		ldr	r9, [r3, #12]
 2034              	.LVL192:
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2035              		.loc 1 1702 0
 2036 0012 D3F81080 		ldr	r8, [r3, #16]
 2037              	.LVL193:
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2038              		.loc 1 1703 0
 2039 0016 D3F818A0 		ldr	r10, [r3, #24]
 2040              	.LVL194:
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2041              		.loc 1 1706 0
 2042 001a 14F0010F 		tst	r4, #1
 2043 001e 5AD0     		beq	.L205
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2044              		.loc 1 1709 0
 2045 0020 16F0010F 		tst	r6, #1
 2046 0024 17D0     		beq	.L206
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2047              		.loc 1 1712 0
 2048 0026 0122     		movs	r2, #1
 2049 0028 9A60     		str	r2, [r3, #8]
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2050              		.loc 1 1714 0
 2051 002a 16F0020F 		tst	r6, #2
 2052 002e 08D1     		bne	.L210
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2053              		.loc 1 1727 0
 2054 0030 16F0040F 		tst	r6, #4
 2055 0034 30D1     		bne	.L207
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2056              		.loc 1 1732 0
 2057 0036 16F0080F 		tst	r6, #8
 2058 003a 07D0     		beq	.L211
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2059              		.loc 1 1735 0
 2060 003c 4FF4805B 		mov	fp, #4096
 2061 0040 0BE0     		b	.L174
 2062              	.L210:
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2063              		.loc 1 1722 0
 2064 0042 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2065              	.LVL195:
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2066              		.loc 1 1697 0
 2067 0046 4FF0000B 		mov	fp, #0
 2068 004a 06E0     		b	.L174
 2069              	.LVL196:
 2070              	.L211:
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2071              		.loc 1 1745 0
 2072 004c FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2073              	.LVL197:
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2074              		.loc 1 1697 0
 2075 0050 4FF0000B 		mov	fp, #0
ARM GAS  /tmp/ccZfMRi6.s 			page 98


 2076 0054 01E0     		b	.L174
 2077              	.LVL198:
 2078              	.L206:
 2079 0056 4FF0000B 		mov	fp, #0
 2080              	.LVL199:
 2081              	.L174:
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2082              		.loc 1 1752 0
 2083 005a 16F4807F 		tst	r6, #256
 2084 005e 0BD0     		beq	.L176
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2085              		.loc 1 1755 0
 2086 0060 2B68     		ldr	r3, [r5]
 2087 0062 4FF48072 		mov	r2, #256
 2088 0066 9A60     		str	r2, [r3, #8]
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2089              		.loc 1 1757 0
 2090 0068 16F4007F 		tst	r6, #512
 2091 006c 17D1     		bne	.L212
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2092              		.loc 1 1770 0
 2093 006e 16F4806F 		tst	r6, #1024
 2094 0072 18D0     		beq	.L178
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2095              		.loc 1 1773 0
 2096 0074 4BF4005B 		orr	fp, fp, #8192
 2097              	.LVL200:
 2098              	.L176:
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2099              		.loc 1 1795 0
 2100 0078 16F4803F 		tst	r6, #65536
 2101 007c 2DD0     		beq	.L173
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2102              		.loc 1 1798 0
 2103 007e 2B68     		ldr	r3, [r5]
 2104 0080 4FF48032 		mov	r2, #65536
 2105 0084 9A60     		str	r2, [r3, #8]
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2106              		.loc 1 1800 0
 2107 0086 16F4003F 		tst	r6, #131072
 2108 008a 16D1     		bne	.L213
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2109              		.loc 1 1813 0
 2110 008c 16F4802F 		tst	r6, #262144
 2111 0090 17D0     		beq	.L181
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2112              		.loc 1 1816 0
 2113 0092 4BF4004B 		orr	fp, fp, #32768
 2114              	.LVL201:
 2115 0096 20E0     		b	.L173
 2116              	.LVL202:
 2117              	.L207:
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2118              		.loc 1 1730 0
 2119 0098 4FF4006B 		mov	fp, #2048
 2120 009c DDE7     		b	.L174
 2121              	.LVL203:
ARM GAS  /tmp/ccZfMRi6.s 			page 99


 2122              	.L212:
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2123              		.loc 1 1765 0
 2124 009e 2846     		mov	r0, r5
 2125 00a0 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2126              	.LVL204:
 2127 00a4 E8E7     		b	.L176
 2128              	.L178:
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2129              		.loc 1 1775 0
 2130 00a6 16F4006F 		tst	r6, #2048
 2131 00aa 02D0     		beq	.L179
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2132              		.loc 1 1778 0
 2133 00ac 4BF4804B 		orr	fp, fp, #16384
 2134              	.LVL205:
 2135 00b0 E2E7     		b	.L176
 2136              	.L179:
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2137              		.loc 1 1788 0
 2138 00b2 2846     		mov	r0, r5
 2139 00b4 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2140              	.LVL206:
 2141 00b8 DEE7     		b	.L176
 2142              	.L213:
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2143              		.loc 1 1808 0
 2144 00ba 2846     		mov	r0, r5
 2145 00bc FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2146              	.LVL207:
 2147 00c0 0BE0     		b	.L173
 2148              	.L181:
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2149              		.loc 1 1818 0
 2150 00c2 16F4002F 		tst	r6, #524288
 2151 00c6 02D0     		beq	.L182
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2152              		.loc 1 1821 0
 2153 00c8 4BF4803B 		orr	fp, fp, #65536
 2154              	.LVL208:
 2155 00cc 05E0     		b	.L173
 2156              	.L182:
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2157              		.loc 1 1831 0
 2158 00ce 2846     		mov	r0, r5
 2159 00d0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2160              	.LVL209:
 2161 00d4 01E0     		b	.L173
 2162              	.LVL210:
 2163              	.L205:
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2164              		.loc 1 1697 0
 2165 00d6 4FF0000B 		mov	fp, #0
 2166              	.LVL211:
 2167              	.L173:
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2168              		.loc 1 1839 0
ARM GAS  /tmp/ccZfMRi6.s 			page 100


 2169 00da 14F0080F 		tst	r4, #8
 2170 00de 07D0     		beq	.L183
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2171              		.loc 1 1841 0
 2172 00e0 19F0100F 		tst	r9, #16
 2173 00e4 04D0     		beq	.L183
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2174              		.loc 1 1844 0
 2175 00e6 4BF4007B 		orr	fp, fp, #512
 2176              	.LVL212:
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2177              		.loc 1 1847 0
 2178 00ea 2B68     		ldr	r3, [r5]
 2179 00ec 1022     		movs	r2, #16
 2180 00ee DA60     		str	r2, [r3, #12]
 2181              	.L183:
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2182              		.loc 1 1852 0
 2183 00f0 14F0040F 		tst	r4, #4
 2184 00f4 02D0     		beq	.L184
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2185              		.loc 1 1854 0
 2186 00f6 19F0080F 		tst	r9, #8
 2187 00fa 60D1     		bne	.L214
 2188              	.L184:
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2189              		.loc 1 1871 0
 2190 00fc 14F0020F 		tst	r4, #2
 2191 0100 04D0     		beq	.L185
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2192              		.loc 1 1874 0
 2193 0102 2B68     		ldr	r3, [r5]
 2194 0104 DB68     		ldr	r3, [r3, #12]
 2195 0106 13F0030F 		tst	r3, #3
 2196 010a 5FD1     		bne	.L215
 2197              	.L185:
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2198              		.loc 1 1888 0
 2199 010c 14F0400F 		tst	r4, #64
 2200 0110 07D0     		beq	.L186
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2201              		.loc 1 1890 0
 2202 0112 18F0100F 		tst	r8, #16
 2203 0116 04D0     		beq	.L186
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2204              		.loc 1 1893 0
 2205 0118 4BF4806B 		orr	fp, fp, #1024
 2206              	.LVL213:
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2207              		.loc 1 1896 0
 2208 011c 2B68     		ldr	r3, [r5]
 2209 011e 1022     		movs	r2, #16
 2210 0120 1A61     		str	r2, [r3, #16]
 2211              	.L186:
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2212              		.loc 1 1901 0
 2213 0122 14F0200F 		tst	r4, #32
ARM GAS  /tmp/ccZfMRi6.s 			page 101


 2214 0126 02D0     		beq	.L187
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2215              		.loc 1 1903 0
 2216 0128 18F0080F 		tst	r8, #8
 2217 012c 52D1     		bne	.L216
 2218              	.L187:
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2219              		.loc 1 1920 0
 2220 012e 14F0100F 		tst	r4, #16
 2221 0132 04D0     		beq	.L188
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2222              		.loc 1 1923 0
 2223 0134 2B68     		ldr	r3, [r5]
 2224 0136 1B69     		ldr	r3, [r3, #16]
 2225 0138 13F0030F 		tst	r3, #3
 2226 013c 51D1     		bne	.L217
 2227              	.L188:
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2228              		.loc 1 1937 0
 2229 013e 14F4003F 		tst	r4, #131072
 2230 0142 02D0     		beq	.L189
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2231              		.loc 1 1939 0
 2232 0144 17F0100F 		tst	r7, #16
 2233 0148 4FD1     		bne	.L218
 2234              	.L189:
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2235              		.loc 1 1956 0
 2236 014a 14F4803F 		tst	r4, #65536
 2237 014e 02D0     		beq	.L190
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2238              		.loc 1 1958 0
 2239 0150 17F0080F 		tst	r7, #8
 2240 0154 50D1     		bne	.L219
 2241              	.L190:
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2242              		.loc 1 1975 0
 2243 0156 14F4004F 		tst	r4, #32768
 2244 015a 67D0     		beq	.L191
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2245              		.loc 1 1977 0
 2246 015c 17F0040F 		tst	r7, #4
 2247 0160 61D0     		beq	.L192
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2248              		.loc 1 1980 0
 2249 0162 14F4807F 		tst	r4, #256
 2250 0166 04D0     		beq	.L193
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2251              		.loc 1 1980 0 is_stmt 0 discriminator 1
 2252 0168 1AF0010F 		tst	r10, #1
 2253 016c 01D0     		beq	.L193
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2254              		.loc 1 1984 0 is_stmt 1
 2255 016e 4BF0010B 		orr	fp, fp, #1
 2256              	.LVL214:
 2257              	.L193:
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
ARM GAS  /tmp/ccZfMRi6.s 			page 102


 2258              		.loc 1 1990 0
 2259 0172 14F4007F 		tst	r4, #512
 2260 0176 04D0     		beq	.L194
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2261              		.loc 1 1990 0 is_stmt 0 discriminator 1
 2262 0178 1AF0020F 		tst	r10, #2
 2263 017c 01D0     		beq	.L194
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2264              		.loc 1 1994 0 is_stmt 1
 2265 017e 4BF0020B 		orr	fp, fp, #2
 2266              	.LVL215:
 2267              	.L194:
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2268              		.loc 1 2000 0
 2269 0182 14F4806F 		tst	r4, #1024
 2270 0186 04D0     		beq	.L195
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2271              		.loc 1 2000 0 is_stmt 0 discriminator 1
 2272 0188 1AF0040F 		tst	r10, #4
 2273 018c 01D0     		beq	.L195
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2274              		.loc 1 2004 0 is_stmt 1
 2275 018e 4BF0040B 		orr	fp, fp, #4
 2276              	.LVL216:
 2277              	.L195:
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2278              		.loc 1 2010 0
 2279 0192 14F4006F 		tst	r4, #2048
 2280 0196 46D0     		beq	.L192
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2281              		.loc 1 2010 0 is_stmt 0 discriminator 1
 2282 0198 1AF0700A 		ands	r10, r10, #112
 2283              	.LVL217:
 2284 019c 43D0     		beq	.L192
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2285              		.loc 1 2013 0 is_stmt 1
 2286 019e BAF1300F 		cmp	r10, #48
 2287 01a2 48D0     		beq	.L197
 2288 01a4 2FD9     		bls	.L220
 2289 01a6 BAF1500F 		cmp	r10, #80
 2290 01aa 47D0     		beq	.L201
 2291 01ac BAF1600F 		cmp	r10, #96
 2292 01b0 47D0     		beq	.L202
 2293 01b2 BAF1400F 		cmp	r10, #64
 2294 01b6 31D1     		bne	.L196
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2295              		.loc 1 2029 0
 2296 01b8 4BF0400B 		orr	fp, fp, #64
 2297              	.LVL218:
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2298              		.loc 1 2030 0
 2299 01bc 2EE0     		b	.L196
 2300              	.LVL219:
 2301              	.L214:
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2302              		.loc 1 1857 0
 2303 01be 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccZfMRi6.s 			page 103


 2304 01c0 0822     		movs	r2, #8
 2305 01c2 DA60     		str	r2, [r3, #12]
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2306              		.loc 1 1865 0
 2307 01c4 2846     		mov	r0, r5
 2308 01c6 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2309              	.LVL220:
 2310 01ca 97E7     		b	.L184
 2311              	.L215:
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2312              		.loc 1 1882 0
 2313 01cc 2846     		mov	r0, r5
 2314 01ce FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2315              	.LVL221:
 2316 01d2 9BE7     		b	.L185
 2317              	.L216:
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2318              		.loc 1 1906 0
 2319 01d4 2B68     		ldr	r3, [r5]
 2320 01d6 0822     		movs	r2, #8
 2321 01d8 1A61     		str	r2, [r3, #16]
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2322              		.loc 1 1914 0
 2323 01da 2846     		mov	r0, r5
 2324 01dc FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2325              	.LVL222:
 2326 01e0 A5E7     		b	.L187
 2327              	.L217:
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2328              		.loc 1 1931 0
 2329 01e2 2846     		mov	r0, r5
 2330 01e4 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2331              	.LVL223:
 2332 01e8 A9E7     		b	.L188
 2333              	.L218:
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2334              		.loc 1 1942 0
 2335 01ea 2B68     		ldr	r3, [r5]
 2336 01ec 1022     		movs	r2, #16
 2337 01ee 5A60     		str	r2, [r3, #4]
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2338              		.loc 1 1950 0
 2339 01f0 2846     		mov	r0, r5
 2340 01f2 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2341              	.LVL224:
 2342 01f6 A8E7     		b	.L189
 2343              	.L219:
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2344              		.loc 1 1961 0
 2345 01f8 2B68     		ldr	r3, [r5]
 2346 01fa 0822     		movs	r2, #8
 2347 01fc 5A60     		str	r2, [r3, #4]
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2348              		.loc 1 1969 0
 2349 01fe 2846     		mov	r0, r5
 2350 0200 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2351              	.LVL225:
ARM GAS  /tmp/ccZfMRi6.s 			page 104


 2352 0204 A7E7     		b	.L190
 2353              	.LVL226:
 2354              	.L220:
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2355              		.loc 1 2013 0
 2356 0206 BAF1100F 		cmp	r10, #16
 2357 020a 05D0     		beq	.L199
 2358 020c BAF1200F 		cmp	r10, #32
 2359 0210 04D1     		bne	.L196
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2360              		.loc 1 2021 0
 2361 0212 4BF0100B 		orr	fp, fp, #16
 2362              	.LVL227:
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2363              		.loc 1 2022 0
 2364 0216 01E0     		b	.L196
 2365              	.L199:
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2366              		.loc 1 2017 0
 2367 0218 4BF0080B 		orr	fp, fp, #8
 2368              	.LVL228:
 2369              	.L196:
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2370              		.loc 1 2044 0
 2371 021c 2A68     		ldr	r2, [r5]
 2372 021e 9369     		ldr	r3, [r2, #24]
 2373 0220 23F07003 		bic	r3, r3, #112
 2374 0224 9361     		str	r3, [r2, #24]
 2375              	.L192:
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2376              		.loc 1 2049 0
 2377 0226 2B68     		ldr	r3, [r5]
 2378 0228 0422     		movs	r2, #4
 2379 022a 5A60     		str	r2, [r3, #4]
 2380              	.L191:
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2381              		.loc 1 2053 0
 2382 022c BBF1000F 		cmp	fp, #0
 2383 0230 0AD1     		bne	.L221
 2384              	.L172:
 2385 0232 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2386              	.LVL229:
 2387              	.L197:
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2388              		.loc 1 2025 0
 2389 0236 4BF0200B 		orr	fp, fp, #32
 2390              	.LVL230:
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2391              		.loc 1 2026 0
 2392 023a EFE7     		b	.L196
 2393              	.L201:
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2394              		.loc 1 2033 0
 2395 023c 4BF0800B 		orr	fp, fp, #128
 2396              	.LVL231:
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2397              		.loc 1 2034 0
ARM GAS  /tmp/ccZfMRi6.s 			page 105


 2398 0240 ECE7     		b	.L196
 2399              	.L202:
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2400              		.loc 1 2037 0
 2401 0242 4BF4807B 		orr	fp, fp, #256
 2402              	.LVL232:
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           default:
 2403              		.loc 1 2038 0
 2404 0246 E9E7     		b	.L196
 2405              	.L221:
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2406              		.loc 1 2056 0
 2407 0248 6B6A     		ldr	r3, [r5, #36]
 2408 024a 4BEA0303 		orr	r3, fp, r3
 2409 024e 6B62     		str	r3, [r5, #36]
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2410              		.loc 1 2064 0
 2411 0250 2846     		mov	r0, r5
 2412 0252 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2413              	.LVL233:
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2414              		.loc 1 2067 0
 2415 0256 ECE7     		b	.L172
 2416              		.cfi_endproc
 2417              	.LFE84:
 2419              		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2420              		.align	1
 2421              		.global	HAL_CAN_GetState
 2422              		.syntax unified
 2423              		.thumb
 2424              		.thumb_func
 2425              		.fpu softvfp
 2427              	HAL_CAN_GetState:
 2428              	.LFB98:
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             ##### Peripheral State and Error functions #####
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides functions allowing to :
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
ARM GAS  /tmp/ccZfMRi6.s 			page 106


2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN state.
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL state
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2429              		.loc 1 2347 0
 2430              		.cfi_startproc
 2431              		@ args = 0, pretend = 0, frame = 0
 2432              		@ frame_needed = 0, uses_anonymous_args = 0
 2433              		@ link register save eliminated.
 2434              	.LVL234:
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2435              		.loc 1 2348 0
 2436 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2437 0004 DBB2     		uxtb	r3, r3
 2438              	.LVL235:
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2439              		.loc 1 2350 0
 2440 0006 5A1E     		subs	r2, r3, #1
 2441 0008 D2B2     		uxtb	r2, r2
 2442 000a 012A     		cmp	r2, #1
 2443 000c 01D9     		bls	.L226
 2444              	.LVL236:
 2445              	.L223:
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode is active */
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode request flag */
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode request is pending */
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN state */
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return state;
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
ARM GAS  /tmp/ccZfMRi6.s 			page 107


 2446              		.loc 1 2373 0
 2447 000e 1846     		mov	r0, r3
 2448              	.LVL237:
 2449 0010 7047     		bx	lr
 2450              	.LVL238:
 2451              	.L226:
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2452              		.loc 1 2354 0
 2453 0012 0268     		ldr	r2, [r0]
 2454 0014 5168     		ldr	r1, [r2, #4]
 2455 0016 11F0020F 		tst	r1, #2
 2456 001a 01D0     		beq	.L227
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2457              		.loc 1 2357 0
 2458 001c 0423     		movs	r3, #4
 2459              	.LVL239:
 2460 001e F6E7     		b	.L223
 2461              	.LVL240:
 2462              	.L227:
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2463              		.loc 1 2360 0
 2464 0020 1268     		ldr	r2, [r2]
 2465 0022 12F0020F 		tst	r2, #2
 2466 0026 F2D0     		beq	.L223
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2467              		.loc 1 2363 0
 2468 0028 0323     		movs	r3, #3
 2469              	.LVL241:
 2470 002a F0E7     		b	.L223
 2471              		.cfi_endproc
 2472              	.LFE98:
 2474              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2475              		.align	1
 2476              		.global	HAL_CAN_GetError
 2477              		.syntax unified
 2478              		.thumb
 2479              		.thumb_func
 2480              		.fpu softvfp
 2482              	HAL_CAN_GetError:
 2483              	.LFB99:
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN error code.
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval CAN Error Code
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2484              		.loc 1 2382 0
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 0
 2487              		@ frame_needed = 0, uses_anonymous_args = 0
 2488              		@ link register save eliminated.
 2489              	.LVL242:
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN error code */
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return hcan->ErrorCode;
ARM GAS  /tmp/ccZfMRi6.s 			page 108


 2490              		.loc 1 2384 0
 2491 0000 406A     		ldr	r0, [r0, #36]
 2492              	.LVL243:
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2493              		.loc 1 2385 0
 2494 0002 7047     		bx	lr
 2495              		.cfi_endproc
 2496              	.LFE99:
 2498              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2499              		.align	1
 2500              		.global	HAL_CAN_ResetError
 2501              		.syntax unified
 2502              		.thumb
 2503              		.thumb_func
 2504              		.fpu softvfp
 2506              	HAL_CAN_ResetError:
 2507              	.LFB100:
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Reset the CAN error code.
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2508              		.loc 1 2394 0
 2509              		.cfi_startproc
 2510              		@ args = 0, pretend = 0, frame = 0
 2511              		@ frame_needed = 0, uses_anonymous_args = 0
 2512              		@ link register save eliminated.
 2513              	.LVL244:
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2514              		.loc 1 2396 0
 2515 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2516              	.LVL245:
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2517              		.loc 1 2398 0
 2518 0004 013B     		subs	r3, r3, #1
 2519              	.LVL246:
 2520 0006 DBB2     		uxtb	r3, r3
 2521 0008 012B     		cmp	r3, #1
 2522 000a 05D9     		bls	.L232
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset CAN error code */
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = 0U;
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2523              		.loc 1 2407 0
 2524 000c 436A     		ldr	r3, [r0, #36]
 2525 000e 43F48023 		orr	r3, r3, #262144
ARM GAS  /tmp/ccZfMRi6.s 			page 109


 2526 0012 4362     		str	r3, [r0, #36]
 2527              	.LVL247:
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status = HAL_ERROR;
 2528              		.loc 1 2409 0
 2529 0014 0120     		movs	r0, #1
 2530              	.LVL248:
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the status */
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2531              		.loc 1 2414 0
 2532 0016 7047     		bx	lr
 2533              	.LVL249:
 2534              	.L232:
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2535              		.loc 1 2402 0
 2536 0018 0023     		movs	r3, #0
 2537 001a 4362     		str	r3, [r0, #36]
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2538              		.loc 1 2395 0
 2539 001c 1846     		mov	r0, r3
 2540              	.LVL250:
 2541 001e 7047     		bx	lr
 2542              		.cfi_endproc
 2543              	.LFE100:
 2545              		.text
 2546              	.Letext0:
 2547              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2548              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2549              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 2550              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2551              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 2552              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2553              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2554              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 2555              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccZfMRi6.s 			page 110


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_can.c
     /tmp/ccZfMRi6.s:16     .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/ccZfMRi6.s:23     .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/ccZfMRi6.s:37     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/ccZfMRi6.s:44     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/ccZfMRi6.s:279    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/ccZfMRi6.s:286    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/ccZfMRi6.s:299    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/ccZfMRi6.s:306    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/ccZfMRi6.s:504    .text.HAL_CAN_ConfigFilter:0000000000000128 $d
     /tmp/ccZfMRi6.s:509    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/ccZfMRi6.s:516    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/ccZfMRi6.s:593    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/ccZfMRi6.s:600    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/ccZfMRi6.s:679    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/ccZfMRi6.s:686    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/ccZfMRi6.s:735    .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/ccZfMRi6.s:742    .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/ccZfMRi6.s:783    .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/ccZfMRi6.s:790    .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/ccZfMRi6.s:870    .text.HAL_CAN_WakeUp:0000000000000054 $d
     /tmp/ccZfMRi6.s:875    .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/ccZfMRi6.s:882    .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/ccZfMRi6.s:925    .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/ccZfMRi6.s:932    .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/ccZfMRi6.s:1111   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/ccZfMRi6.s:1118   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/ccZfMRi6.s:1185   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/ccZfMRi6.s:1192   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccZfMRi6.s:1252   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/ccZfMRi6.s:1259   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/ccZfMRi6.s:1304   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/ccZfMRi6.s:1311   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/ccZfMRi6.s:1366   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/ccZfMRi6.s:1373   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/ccZfMRi6.s:1581   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/ccZfMRi6.s:1588   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccZfMRi6.s:1634   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/ccZfMRi6.s:1641   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/ccZfMRi6.s:1683   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/ccZfMRi6.s:1690   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/ccZfMRi6.s:1732   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1739   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccZfMRi6.s:1752   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1759   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccZfMRi6.s:1772   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1779   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccZfMRi6.s:1792   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1799   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccZfMRi6.s:1812   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1819   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccZfMRi6.s:1832   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1839   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccZfMRi6.s:1852   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1859   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccZfMRi6.s:1872   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
ARM GAS  /tmp/ccZfMRi6.s 			page 111


     /tmp/ccZfMRi6.s:1879   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccZfMRi6.s:1892   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1899   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccZfMRi6.s:1912   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1919   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccZfMRi6.s:1932   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1939   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/ccZfMRi6.s:1952   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1959   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccZfMRi6.s:1972   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccZfMRi6.s:1979   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccZfMRi6.s:1992   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/ccZfMRi6.s:1999   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/ccZfMRi6.s:2420   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/ccZfMRi6.s:2427   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/ccZfMRi6.s:2475   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/ccZfMRi6.s:2482   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/ccZfMRi6.s:2499   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/ccZfMRi6.s:2506   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
